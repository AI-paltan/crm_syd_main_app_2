2023-07-17 11:02:06+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-07-17 11:02:06+0530 - sLogger - DEBUG - {'fileid': '635ce446-c4b3-4362-acdf-76157f24d7b8', 'filename': 'Spicers Annual Report 2022 (final).pdf', 'filepath': '/home/jayesh/mgs_ai/crm_syd_1/CRM_SYD_main_app_2/classification/../FILE_DB/FILES/Spicers Annual Report 2022 (final).pdf', 'status': 'Processing'}
2023-07-17 11:02:06+0530 - sLogger - DEBUG - save file completed
2023-07-17 11:02:06+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-07-17 11:02:06+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-07-17 11:02:06+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-07-17 11:02:06+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-07-17 11:02:06+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-07-17 11:02:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:06+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:08+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:08+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:09+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:09+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:16+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:16+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:22+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:22+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:25+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:25+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:25+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:25+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:27+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:27+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:31+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:31+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:34+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:34+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:36+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:36+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:39+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:40+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:42+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:42+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:46+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:46+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:02:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:02:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:02:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:02:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:02:57+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:02:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:02:57+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:03+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:03+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:08+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:08+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:13+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:13+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:19+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:19+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:27+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:27+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:31+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:31+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:35+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:35+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:44+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:44+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:50+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:50+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:03:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:03:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:03:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:03:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:03:57+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:03:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:03:57+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:04:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:04:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:04:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:04:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:04:04+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:04:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:04:04+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:04:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:04:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:04:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:04:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:04:09+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:04:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:04:09+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:04:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:04:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:04:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:04:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:04:16+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:04:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:04:16+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:04:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:04:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:04:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:04:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:04:28+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:04:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:04:28+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:04:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:04:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:04:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:04:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:04:40+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:04:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:04:42+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:04:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:04:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:04:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:04:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:04:54+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:04:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:04:54+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:05:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:05:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:05:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:05:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:05:07+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:05:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:05:07+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:05:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:05:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:05:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:05:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:05:19+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:05:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:05:19+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:05:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:05:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:05:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:05:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:05:22+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:05:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:05:22+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:05:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:05:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:05:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:05:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:05:26+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:05:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:05:26+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:05:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:05:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:05:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:05:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:05:32+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:05:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:05:32+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:05:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:05:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:05:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:05:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:05:40+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:05:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-17 11:05:40+0530 - sLogger - DEBUG - filetype: pdf
2023-07-17 11:05:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-17 11:05:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-17 11:05:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-17 11:05:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-17 11:05:43+0530 - sLogger - DEBUG - function: predict completed.
2023-07-17 11:05:43+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-07-17 11:05:43+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [9, 24], 'predicted_cpl_pages': [7, 8, 10], 'predicted_ccf_pages': [11], 'filtered_cbs_pages': [9], 'filtered_cpl_pages': [8, 10, 7], 'filtered_ccf_pages': [11], 'month': 'december', 'status': 'Page Classification Completed'}
2023-07-17 11:05:43+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-07-17 11:05:43+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-07-17 11:05:43+0530 - sLogger - DEBUG - process file completed
2023-07-17 11:05:43+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-07-17 11:06:40+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-07-17 11:06:40+0530 - sLogger - DEBUG - TE process file started
2023-07-17 11:17:06+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-07-17 11:17:06+0530 - sLogger - DEBUG - TE process file started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-17 11:18:20+0530 - sLogger - DEBUG - process_main_pages started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-07-17 11:18:20+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-07-17 11:18:20+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-17 11:18:20+0530 - sLogger - DEBUG - set_section_details started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-17 11:18:20+0530 - sLogger - DEBUG - set_section_details started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-17 11:18:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-17 11:18:20+0530 - sLogger - DEBUG - set_section_details started
2023-07-17 11:18:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the period | adjustments for increase decrease in operating liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-17 11:18:22+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-17 11:18:22+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Sales revenue', 34), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 31), ('from trading business', 30), ('revenue from operations', 29), (' Revenue', 25), (' Sale of coal', 22), ('transmission and distribution business', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('revenue from operations', 40), ('sale of products', 38), ('from trading business', 34), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('transmission and distribution business', 67), ('sale of products', 31), ('net sales', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sales revenue', 26), ('from trading business', 23), (' Revenue', 15), (' Sale of coal', 14), ('revenue from operations', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('net sales', 70), (' Sales revenue', 54), ('sale of products', 52), (' Sale of coal', 50), ('transmission and distribution business', 37), (' Revenue', 29), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('from trading business', 20), ('revenue from operations', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('sale of products', 37), ('from trading business', 33), ('net sales', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('revenue from operations', 19), ('transmission and distribution business', 19), (' Revenue', 10), (' Sales revenue', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('net sales', 38), (' Sales revenue', 34), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 29), ('sale of products', 27), (' Revenue', 25), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('revenue from operations', 55), ('revenue from contracts with customers', 54), ('Revenue from contract with customers', 54), ('from trading business', 41), (' Sale of coal', 24), (' Sales revenue', 23), ('sale of products', 22), ('net sales', 19), ('transmission and distribution business', 15), (' Revenue', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('revenue from operations', 39), (' Sale of coal', 33), (' Sales revenue', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 23), ('from trading business', 20), (' Revenue', 19), ('net sales', 17), ('sale of products', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('revenue from contracts with customers', 43), ('Revenue from contract with customers', 43), ('revenue from operations', 41), ('from trading business', 38), ('transmission and distribution business', 30), ('sale of products', 24), ('net sales', 22), (' Sales revenue', 16), (' Sale of coal', 13), (' Revenue', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('from trading business', 42), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('transmission and distribution business', 36), ('sale of products', 30), ('revenue from operations', 27), (' Sales revenue', 21), (' Revenue', 18), ('net sales', 17), (' Sale of coal', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('transmission and distribution business', 33), ('net sales', 29), ('from trading business', 29), (' Sale of coal', 29), ('sale of products', 26), ('revenue from operations', 24), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Revenue', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 31), ('sale of products', 25), ('revenue from operations', 23), (' Sales revenue', 22), ('from trading business', 20), ('net sales', 19), (' Sale of coal', 19), (' Revenue', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('transmission and distribution business', 46), (' Sales revenue', 30), ('revenue from operations', 28), ('from trading business', 28), (' Sale of coal', 27), ('net sales', 24), ('sale of products', 22), (' Revenue', 21), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 28), ('sale of products', 26), (' Sales revenue', 23), ('revenue from operations', 21), ('net sales', 21), ('from trading business', 18), (' Sale of coal', 14), (' Revenue', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('revenue from operations', 32), ('from trading business', 29), ('revenue from contracts with customers', 28), ('Revenue from contract with customers', 28), (' Sales revenue', 28), ('sale of products', 27), ('transmission and distribution business', 27), ('net sales', 22), (' Sale of coal', 18), (' Revenue', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 31), (' Sales revenue', 30), ('revenue from operations', 27), ('net sales', 27), ('transmission and distribution business', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('from trading business', 37), ('transmission and distribution business', 33), ('sale of products', 32), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('revenue from operations', 27), ('net sales', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('sale of products', 34), ('net sales', 32), ('revenue from operations', 31), (' Sale of coal', 31), (' Sales revenue', 29), ('transmission and distribution business', 27), ('from trading business', 21), ('revenue from contracts with customers', 18), ('Revenue from contract with customers', 18), (' Revenue', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 367104.0, 'line_item_label': ['Revenue'], 'note_numbers': [nan], 'line_item_value': [367104.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Sales revenue', 34), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 31), ('from trading business', 30), ('revenue from operations', 29), (' Revenue', 25), (' Sale of coal', 22), ('transmission and distribution business', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('revenue from operations', 40), ('sale of products', 38), ('from trading business', 34), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('transmission and distribution business', 67), ('sale of products', 31), ('net sales', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sales revenue', 26), ('from trading business', 23), (' Revenue', 15), (' Sale of coal', 14), ('revenue from operations', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('net sales', 70), (' Sales revenue', 54), ('sale of products', 52), (' Sale of coal', 50), ('transmission and distribution business', 37), (' Revenue', 29), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('from trading business', 20), ('revenue from operations', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('sale of products', 37), ('from trading business', 33), ('net sales', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('revenue from operations', 19), ('transmission and distribution business', 19), (' Revenue', 10), (' Sales revenue', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('net sales', 38), (' Sales revenue', 34), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 29), ('sale of products', 27), (' Revenue', 25), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('revenue from operations', 55), ('revenue from contracts with customers', 54), ('Revenue from contract with customers', 54), ('from trading business', 41), (' Sale of coal', 24), (' Sales revenue', 23), ('sale of products', 22), ('net sales', 19), ('transmission and distribution business', 15), (' Revenue', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('revenue from operations', 39), (' Sale of coal', 33), (' Sales revenue', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 23), ('from trading business', 20), (' Revenue', 19), ('net sales', 17), ('sale of products', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('revenue from contracts with customers', 43), ('Revenue from contract with customers', 43), ('revenue from operations', 41), ('from trading business', 38), ('transmission and distribution business', 30), ('sale of products', 24), ('net sales', 22), (' Sales revenue', 16), (' Sale of coal', 13), (' Revenue', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('from trading business', 42), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('transmission and distribution business', 36), ('sale of products', 30), ('revenue from operations', 27), (' Sales revenue', 21), (' Revenue', 18), ('net sales', 17), (' Sale of coal', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('transmission and distribution business', 33), ('net sales', 29), ('from trading business', 29), (' Sale of coal', 29), ('sale of products', 26), ('revenue from operations', 24), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Revenue', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 31), ('sale of products', 25), ('revenue from operations', 23), (' Sales revenue', 22), ('from trading business', 20), ('net sales', 19), (' Sale of coal', 19), (' Revenue', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('transmission and distribution business', 46), (' Sales revenue', 30), ('revenue from operations', 28), ('from trading business', 28), (' Sale of coal', 27), ('net sales', 24), ('sale of products', 22), (' Revenue', 21), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 28), ('sale of products', 26), (' Sales revenue', 23), ('revenue from operations', 21), ('net sales', 21), ('from trading business', 18), (' Sale of coal', 14), (' Revenue', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('revenue from operations', 32), ('from trading business', 29), ('revenue from contracts with customers', 28), ('Revenue from contract with customers', 28), (' Sales revenue', 28), ('sale of products', 27), ('transmission and distribution business', 27), ('net sales', 22), (' Sale of coal', 18), (' Revenue', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 31), (' Sales revenue', 30), ('revenue from operations', 27), ('net sales', 27), ('transmission and distribution business', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('from trading business', 37), ('transmission and distribution business', 33), ('sale of products', 32), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('revenue from operations', 27), ('net sales', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('sale of products', 34), ('net sales', 32), ('revenue from operations', 31), (' Sale of coal', 31), (' Sales revenue', 29), ('transmission and distribution business', 27), ('from trading business', 21), ('revenue from contracts with customers', 18), ('Revenue from contract with customers', 18), (' Revenue', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 430461.0, 'line_item_label': ['Revenue'], 'note_numbers': [nan], 'line_item_value': [430461.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Cost of inventory sold', 92), (' Personnel costs', 62), (' Cost of product sold', 57), (' cost of coal sold', 56), ('cost of sales', 52), ('Cost of sales', 52), (' Cost of goods and services sold', 51), ('purchase of stock-in-trade', 43), ('total expenses', 33), ('total expenditure', 29), ('expense', 25), ('expenditure', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Personnel costs', 100), (' Cost of product sold', 65), ('cost of sales', 61), ('Cost of sales', 61), (' Cost of inventory sold', 61), (' cost of coal sold', 57), (' Cost of goods and services sold', 51), ('total expenses', 31), ('purchase of stock-in-trade', 30), ('expense', 30), ('total expenditure', 27), ('expenditure', 25)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' cost of coal sold', 35), ('expenditure', 33), (' Cost of inventory sold', 31), ('cost of sales', 28), ('Cost of sales', 28), ('total expenses', 25), (' Personnel costs', 24), ('expense', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('cost of sales', 50), ('Cost of sales', 50), (' cost of coal sold', 41), (' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of product sold', 38), ('total expenses', 30), ('purchase of stock-in-trade', 24), ('expenditure', 24), (' Personnel costs', 21), ('expense', 19), (' Cost of inventory sold', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('expenditure', 16), ('total expenses', 15), ('total expenditure', 13), ('expense', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('total expenses', 60), ('total expenditure', 59), ('expense', 50), ('expenditure', 50), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 23), (' Cost of inventory sold', 22), (' cost of coal sold', 19), (' Cost of goods and services sold', 19), (' Personnel costs', 19), ('purchase of stock-in-trade', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Personnel costs', 42), (' Cost of product sold', 39), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' cost of coal sold', 26), ('expenditure', 24), ('purchase of stock-in-trade', 23), ('total expenses', 22), ('total expenditure', 20), ('expense', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Personnel costs', 48), ('cost of sales', 42), ('Cost of sales', 42), (' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('expenditure', 24), ('expense', 19), ('total expenditure', 19), ('total expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 35), ('total expenses', 32), (' Personnel costs', 31), (' cost of coal sold', 27), ('purchase of stock-in-trade', 25), (' Cost of inventory sold', 25), ('expenditure', 21), ('cost of sales', 21), ('Cost of sales', 21), ('expense', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Cost of product sold', 31), (' Cost of goods and services sold', 30), ('total expenditure', 27), (' Cost of inventory sold', 26), (' Personnel costs', 24), ('purchase of stock-in-trade', 21), ('expenditure', 21), ('total expenses', 20), (' cost of coal sold', 19), ('cost of sales', 16), ('Cost of sales', 16), ('expense', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' cost of coal sold', 30), (' Personnel costs', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), (' Cost of product sold', 23), ('expenditure', 22), ('expense', 19), ('total expenses', 16), (' Cost of goods and services sold', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Cost of product sold', 30), (' Cost of goods and services sold', 26), (' Cost of inventory sold', 25), (' Personnel costs', 24), ('cost of sales', 23), ('Cost of sales', 23), ('total expenses', 21), (' cost of coal sold', 21), ('total expenditure', 20), ('purchase of stock-in-trade', 16), ('expense', 16), ('expenditure', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('purchase of stock-in-trade', 36), (' Cost of goods and services sold', 36), ('total expenditure', 31), (' Cost of inventory sold', 30), ('expenditure', 27), ('cost of sales', 27), ('Cost of sales', 27), (' Personnel costs', 25), ('total expenses', 22), ('expense', 21), (' cost of coal sold', 21), (' Cost of product sold', 20)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Cost of product sold', 33), ('total expenses', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), ('total expenditure', 27), ('purchase of stock-in-trade', 26), (' Personnel costs', 25), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 14), (' cost of coal sold', 12), ('expenditure', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 33), ('total expenditure', 32), ('total expenses', 31), (' cost of coal sold', 26), (' Personnel costs', 26), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 24), ('expenditure', 21), ('expense', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of inventory sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('purchase of stock-in-trade', 29), (' Cost of goods and services sold', 26), (' Personnel costs', 25), ('expenditure', 23), (' Cost of product sold', 20), (' cost of coal sold', 18), ('expense', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), ('cost of sales', 30), ('Cost of sales', 30), ('purchase of stock-in-trade', 29), (' Personnel costs', 24), ('expenditure', 22), (' cost of coal sold', 17), ('expense', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' cost of coal sold', 32), (' Personnel costs', 32), ('cost of sales', 31), ('Cost of sales', 31), ('purchase of stock-in-trade', 29), (' Cost of product sold', 25), ('expenditure', 24), ('expense', 21), ('total expenditure', 21), (' Cost of inventory sold', 19), ('total expenses', 17), (' Cost of goods and services sold', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 100, 'value': -310815.0, 'line_item_label': ['Cost of inventorysold', 'Personnel costs'], 'note_numbers': [nan, nan], 'line_item_value': [-271328.0, -39487.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Cost of inventory sold', 92), (' Personnel costs', 62), (' Cost of product sold', 57), (' cost of coal sold', 56), ('cost of sales', 52), ('Cost of sales', 52), (' Cost of goods and services sold', 51), ('purchase of stock-in-trade', 43), ('total expenses', 33), ('total expenditure', 29), ('expense', 25), ('expenditure', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Personnel costs', 100), (' Cost of product sold', 65), ('cost of sales', 61), ('Cost of sales', 61), (' Cost of inventory sold', 61), (' cost of coal sold', 57), (' Cost of goods and services sold', 51), ('total expenses', 31), ('purchase of stock-in-trade', 30), ('expense', 30), ('total expenditure', 27), ('expenditure', 25)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' cost of coal sold', 35), ('expenditure', 33), (' Cost of inventory sold', 31), ('cost of sales', 28), ('Cost of sales', 28), ('total expenses', 25), (' Personnel costs', 24), ('expense', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('cost of sales', 50), ('Cost of sales', 50), (' cost of coal sold', 41), (' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of product sold', 38), ('total expenses', 30), ('purchase of stock-in-trade', 24), ('expenditure', 24), (' Personnel costs', 21), ('expense', 19), (' Cost of inventory sold', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('expenditure', 16), ('total expenses', 15), ('total expenditure', 13), ('expense', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('total expenses', 60), ('total expenditure', 59), ('expense', 50), ('expenditure', 50), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 23), (' Cost of inventory sold', 22), (' cost of coal sold', 19), (' Cost of goods and services sold', 19), (' Personnel costs', 19), ('purchase of stock-in-trade', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Personnel costs', 42), (' Cost of product sold', 39), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' cost of coal sold', 26), ('expenditure', 24), ('purchase of stock-in-trade', 23), ('total expenses', 22), ('total expenditure', 20), ('expense', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Personnel costs', 48), ('cost of sales', 42), ('Cost of sales', 42), (' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('expenditure', 24), ('expense', 19), ('total expenditure', 19), ('total expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 35), ('total expenses', 32), (' Personnel costs', 31), (' cost of coal sold', 27), ('purchase of stock-in-trade', 25), (' Cost of inventory sold', 25), ('expenditure', 21), ('cost of sales', 21), ('Cost of sales', 21), ('expense', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Cost of product sold', 31), (' Cost of goods and services sold', 30), ('total expenditure', 27), (' Cost of inventory sold', 26), (' Personnel costs', 24), ('purchase of stock-in-trade', 21), ('expenditure', 21), ('total expenses', 20), (' cost of coal sold', 19), ('cost of sales', 16), ('Cost of sales', 16), ('expense', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' cost of coal sold', 30), (' Personnel costs', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), (' Cost of product sold', 23), ('expenditure', 22), ('expense', 19), ('total expenses', 16), (' Cost of goods and services sold', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Cost of product sold', 30), (' Cost of goods and services sold', 26), (' Cost of inventory sold', 25), (' Personnel costs', 24), ('cost of sales', 23), ('Cost of sales', 23), ('total expenses', 21), (' cost of coal sold', 21), ('total expenditure', 20), ('purchase of stock-in-trade', 16), ('expense', 16), ('expenditure', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('purchase of stock-in-trade', 36), (' Cost of goods and services sold', 36), ('total expenditure', 31), (' Cost of inventory sold', 30), ('expenditure', 27), ('cost of sales', 27), ('Cost of sales', 27), (' Personnel costs', 25), ('total expenses', 22), ('expense', 21), (' cost of coal sold', 21), (' Cost of product sold', 20)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Cost of product sold', 33), ('total expenses', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), ('total expenditure', 27), ('purchase of stock-in-trade', 26), (' Personnel costs', 25), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 14), (' cost of coal sold', 12), ('expenditure', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 33), ('total expenditure', 32), ('total expenses', 31), (' cost of coal sold', 26), (' Personnel costs', 26), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 24), ('expenditure', 21), ('expense', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of inventory sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('purchase of stock-in-trade', 29), (' Cost of goods and services sold', 26), (' Personnel costs', 25), ('expenditure', 23), (' Cost of product sold', 20), (' cost of coal sold', 18), ('expense', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), ('cost of sales', 30), ('Cost of sales', 30), ('purchase of stock-in-trade', 29), (' Personnel costs', 24), ('expenditure', 22), (' cost of coal sold', 17), ('expense', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' cost of coal sold', 32), (' Personnel costs', 32), ('cost of sales', 31), ('Cost of sales', 31), ('purchase of stock-in-trade', 29), (' Cost of product sold', 25), ('expenditure', 24), ('expense', 21), ('total expenditure', 21), (' Cost of inventory sold', 19), ('total expenses', 17), (' Cost of goods and services sold', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 100, 'value': -359196.0, 'line_item_label': ['Cost of inventorysold', 'Personnel costs'], 'note_numbers': [nan, nan], 'line_item_value': [-316176.0, -43020.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Selling & distribution expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Lease expenses', 28), (' Selling Expenses', 28), ('other expenses', 27), (' Occupancy expenses', 27), (' Other expenses', 27), (' Administrative and other expenses', 27), (' Other expenses', 27), (' Advertising expenses', 24), (' Sales and marketing', 24), (' Logistics and distribution', 21), (' Management expenses', 20), (' Marketing expenses', 19), (' Amortisation expenses', 19), (' Occupancy ', 9), (' depreciation', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Selling & distribution expenses', 46), (' Amortisation expenses', 43), ('Distribution expenses', 40), (' Administrative expenses', 40), (' Administration expenses', 40), (' Selling Expenses', 40), (' Depreciation expenses', 36), (' Depreciation expenses', 36), (' Administrative and other expenses', 35), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' depreciation', 29), (' Advertising expenses', 28), (' Sales and marketing', 28), (' Logistics and distribution', 24), (' Occupancy expenses', 23), (' Occupancy ', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Logistics and distribution', 100), ('Distribution expenses', 61), (' Selling & distribution expenses', 54), (' Sales and marketing', 46), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 39), (' Advertising expenses', 34), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Other expenses', 31), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Marketing expenses', 24), (' depreciation', 22), (' Management expenses', 19), (' Occupancy ', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Sales and marketing', 100), (' Marketing expenses', 57), (' Logistics and distribution', 46), (' Amortisation expenses', 41), (' Advertising expenses', 40), (' Management expenses', 37), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 31), (' Selling Expenses', 31), (' Administrative and other expenses', 29), (' Selling & distribution expenses', 28), (' depreciation', 27), (' Depreciation expenses', 21), (' Depreciation expenses', 21), ('other expenses', 15), (' Occupancy expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Occupancy ', 0)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 33), (' Marketing expenses', 29), ('Distribution expenses', 26), (' Logistics and distribution', 23), (' Selling & distribution expenses', 22), (' Management expenses', 22), (' Occupancy ', 20), (' Advertising expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('other expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Amortisation expenses', 14), (' depreciation', 9), (' Lease expenses', 8), (' Selling Expenses', 8), (' Occupancy expenses', 7), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Lease expenses', 55), ('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 52), (' Selling Expenses', 48), (' Occupancy expenses', 47), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' depreciation', 32), (' Sales and marketing', 30), (' Logistics and distribution', 26), (' Occupancy ', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Amortisation expenses', 32), ('other expenses', 28), (' Other expenses', 28), (' Administrative and other expenses', 28), (' Other expenses', 28), (' Marketing expenses', 27), (' Selling & distribution expenses', 27), (' depreciation', 26), (' Sales and marketing', 26), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Depreciation expenses', 21), (' Occupancy ', 21), (' Depreciation expenses', 21), (' Logistics and distribution', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('Distribution expenses', 58), (' Selling & distribution expenses', 50), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Amortisation expenses', 41), (' Administrative expenses', 39), (' Administration expenses', 39), (' Administrative and other expenses', 34), (' Occupancy ', 30), (' Logistics and distribution', 29), (' depreciation', 27), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Marketing expenses', 21), (' Advertising expenses', 20), (' Sales and marketing', 20), (' Occupancy expenses', 15), (' Lease expenses', 15), (' Selling Expenses', 15), (' Management expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Logistics and distribution', 34), ('Distribution expenses', 33), (' Depreciation expenses', 27), (' Depreciation expenses', 27), (' Amortisation expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Sales and marketing', 26), (' Administrative and other expenses', 25), ('other expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), (' Marketing expenses', 20), (' Occupancy expenses', 20), (' Lease expenses', 20), (' Management expenses', 20), (' Selling Expenses', 16), (' Occupancy ', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Logistics and distribution', 46), ('Distribution expenses', 41), (' Administrative and other expenses', 41), (' Selling & distribution expenses', 37), (' Amortisation expenses', 33), ('other expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Administrative expenses', 27), (' Administration expenses', 27), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Lease expenses', 21), (' Marketing expenses', 20), (' Sales and marketing', 19), (' depreciation', 17), (' Management expenses', 15), (' Advertising expenses', 14), (' Occupancy ', 12), (' Occupancy expenses', 10), (' Selling Expenses', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Sales and marketing', 34), (' Logistics and distribution', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Other expenses', 26), (' Selling & distribution expenses', 26), (' Other expenses', 26), (' depreciation', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Marketing expenses', 21), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' Occupancy expenses', 16), (' Management expenses', 16), (' Occupancy ', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Marketing expenses', 28), (' Depreciation expenses', 28), (' Depreciation expenses', 28), ('Distribution expenses', 27), (' Sales and marketing', 27), (' Logistics and distribution', 25), (' depreciation', 24), (' Lease expenses', 22), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Amortisation expenses', 21), (' Management expenses', 21), (' Other expenses', 21), (' Administrative and other expenses', 20), (' Selling Expenses', 18), (' Administrative expenses', 17), (' Administration expenses', 17), (' Advertising expenses', 17), (' Occupancy ', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Depreciation expenses', 32), (' Selling & distribution expenses', 32), (' Depreciation expenses', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Administrative and other expenses', 29), (' Sales and marketing', 28), (' Lease expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Advertising expenses', 25), (' Amortisation expenses', 25), (' depreciation', 24), (' Selling Expenses', 23), ('other expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy expenses', 19), (' Occupancy ', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Sales and marketing', 28), (' Marketing expenses', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), ('Distribution expenses', 24), (' Logistics and distribution', 23), (' depreciation', 21), (' Lease expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Amortisation expenses', 19), (' Management expenses', 19), (' Administrative expenses', 18), (' Administration expenses', 18), ('other expenses', 16), (' Other expenses', 16), (' Administrative and other expenses', 16), (' Other expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('other expenses', 34), (' Other expenses', 34), (' Other expenses', 34), (' Administrative and other expenses', 33), (' Lease expenses', 28), (' Marketing expenses', 27), (' Management expenses', 27), (' Sales and marketing', 26), (' Occupancy expenses', 24), (' Selling & distribution expenses', 24), (' Selling Expenses', 24), (' Logistics and distribution', 24), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('Distribution expenses', 16), (' depreciation', 15), (' Advertising expenses', 13), (' Occupancy ', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Administrative and other expenses', 35), (' Sales and marketing', 31), (' Lease expenses', 30), (' Marketing expenses', 29), (' Management expenses', 29), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Amortisation expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 19), ('Distribution expenses', 17), (' depreciation', 16), (' Advertising expenses', 14), (' Occupancy ', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Administrative and other expenses', 40), ('Distribution expenses', 37), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Lease expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' Logistics and distribution', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Occupancy expenses', 25), (' Selling Expenses', 25), (' Amortisation expenses', 24), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Sales and marketing', 20), (' Advertising expenses', 17), (' depreciation', 16), (' Occupancy ', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Sales and marketing', 37), (' Logistics and distribution', 33), ('Distribution expenses', 31), (' Selling & distribution expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Administrative and other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), ('other expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Marketing expenses', 22), (' depreciation', 20), (' Occupancy expenses', 17), (' Management expenses', 17), (' Depreciation expenses', 16), (' Advertising expenses', 16), (' Depreciation expenses', 16), (' Occupancy ', 14), (' Amortisation expenses', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8], 'score': 100, 'value': -31350.0, 'line_item_label': ['Logistics and distribution', 'Sales and marketing', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-22578.0, -1075.0, -7697.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Selling & distribution expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Lease expenses', 28), (' Selling Expenses', 28), ('other expenses', 27), (' Occupancy expenses', 27), (' Other expenses', 27), (' Administrative and other expenses', 27), (' Other expenses', 27), (' Advertising expenses', 24), (' Sales and marketing', 24), (' Logistics and distribution', 21), (' Management expenses', 20), (' Marketing expenses', 19), (' Amortisation expenses', 19), (' Occupancy ', 9), (' depreciation', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Selling & distribution expenses', 46), (' Amortisation expenses', 43), ('Distribution expenses', 40), (' Administrative expenses', 40), (' Administration expenses', 40), (' Selling Expenses', 40), (' Depreciation expenses', 36), (' Depreciation expenses', 36), (' Administrative and other expenses', 35), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' depreciation', 29), (' Advertising expenses', 28), (' Sales and marketing', 28), (' Logistics and distribution', 24), (' Occupancy expenses', 23), (' Occupancy ', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Logistics and distribution', 100), ('Distribution expenses', 61), (' Selling & distribution expenses', 54), (' Sales and marketing', 46), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 39), (' Advertising expenses', 34), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Other expenses', 31), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Marketing expenses', 24), (' depreciation', 22), (' Management expenses', 19), (' Occupancy ', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Sales and marketing', 100), (' Marketing expenses', 57), (' Logistics and distribution', 46), (' Amortisation expenses', 41), (' Advertising expenses', 40), (' Management expenses', 37), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 31), (' Selling Expenses', 31), (' Administrative and other expenses', 29), (' Selling & distribution expenses', 28), (' depreciation', 27), (' Depreciation expenses', 21), (' Depreciation expenses', 21), ('other expenses', 15), (' Occupancy expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Occupancy ', 0)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 33), (' Marketing expenses', 29), ('Distribution expenses', 26), (' Logistics and distribution', 23), (' Selling & distribution expenses', 22), (' Management expenses', 22), (' Occupancy ', 20), (' Advertising expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('other expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Amortisation expenses', 14), (' depreciation', 9), (' Lease expenses', 8), (' Selling Expenses', 8), (' Occupancy expenses', 7), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Lease expenses', 55), ('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 52), (' Selling Expenses', 48), (' Occupancy expenses', 47), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' depreciation', 32), (' Sales and marketing', 30), (' Logistics and distribution', 26), (' Occupancy ', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Amortisation expenses', 32), ('other expenses', 28), (' Other expenses', 28), (' Administrative and other expenses', 28), (' Other expenses', 28), (' Marketing expenses', 27), (' Selling & distribution expenses', 27), (' depreciation', 26), (' Sales and marketing', 26), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Depreciation expenses', 21), (' Occupancy ', 21), (' Depreciation expenses', 21), (' Logistics and distribution', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('Distribution expenses', 58), (' Selling & distribution expenses', 50), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Amortisation expenses', 41), (' Administrative expenses', 39), (' Administration expenses', 39), (' Administrative and other expenses', 34), (' Occupancy ', 30), (' Logistics and distribution', 29), (' depreciation', 27), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Marketing expenses', 21), (' Advertising expenses', 20), (' Sales and marketing', 20), (' Occupancy expenses', 15), (' Lease expenses', 15), (' Selling Expenses', 15), (' Management expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Logistics and distribution', 34), ('Distribution expenses', 33), (' Depreciation expenses', 27), (' Depreciation expenses', 27), (' Amortisation expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Sales and marketing', 26), (' Administrative and other expenses', 25), ('other expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), (' Marketing expenses', 20), (' Occupancy expenses', 20), (' Lease expenses', 20), (' Management expenses', 20), (' Selling Expenses', 16), (' Occupancy ', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Logistics and distribution', 46), ('Distribution expenses', 41), (' Administrative and other expenses', 41), (' Selling & distribution expenses', 37), (' Amortisation expenses', 33), ('other expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Administrative expenses', 27), (' Administration expenses', 27), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Lease expenses', 21), (' Marketing expenses', 20), (' Sales and marketing', 19), (' depreciation', 17), (' Management expenses', 15), (' Advertising expenses', 14), (' Occupancy ', 12), (' Occupancy expenses', 10), (' Selling Expenses', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Sales and marketing', 34), (' Logistics and distribution', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Other expenses', 26), (' Selling & distribution expenses', 26), (' Other expenses', 26), (' depreciation', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Marketing expenses', 21), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' Occupancy expenses', 16), (' Management expenses', 16), (' Occupancy ', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Marketing expenses', 28), (' Depreciation expenses', 28), (' Depreciation expenses', 28), ('Distribution expenses', 27), (' Sales and marketing', 27), (' Logistics and distribution', 25), (' depreciation', 24), (' Lease expenses', 22), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Amortisation expenses', 21), (' Management expenses', 21), (' Other expenses', 21), (' Administrative and other expenses', 20), (' Selling Expenses', 18), (' Administrative expenses', 17), (' Administration expenses', 17), (' Advertising expenses', 17), (' Occupancy ', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Depreciation expenses', 32), (' Selling & distribution expenses', 32), (' Depreciation expenses', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Administrative and other expenses', 29), (' Sales and marketing', 28), (' Lease expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Advertising expenses', 25), (' Amortisation expenses', 25), (' depreciation', 24), (' Selling Expenses', 23), ('other expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy expenses', 19), (' Occupancy ', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Sales and marketing', 28), (' Marketing expenses', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), ('Distribution expenses', 24), (' Logistics and distribution', 23), (' depreciation', 21), (' Lease expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Amortisation expenses', 19), (' Management expenses', 19), (' Administrative expenses', 18), (' Administration expenses', 18), ('other expenses', 16), (' Other expenses', 16), (' Administrative and other expenses', 16), (' Other expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('other expenses', 34), (' Other expenses', 34), (' Other expenses', 34), (' Administrative and other expenses', 33), (' Lease expenses', 28), (' Marketing expenses', 27), (' Management expenses', 27), (' Sales and marketing', 26), (' Occupancy expenses', 24), (' Selling & distribution expenses', 24), (' Selling Expenses', 24), (' Logistics and distribution', 24), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('Distribution expenses', 16), (' depreciation', 15), (' Advertising expenses', 13), (' Occupancy ', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Administrative and other expenses', 35), (' Sales and marketing', 31), (' Lease expenses', 30), (' Marketing expenses', 29), (' Management expenses', 29), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Amortisation expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 19), ('Distribution expenses', 17), (' depreciation', 16), (' Advertising expenses', 14), (' Occupancy ', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Administrative and other expenses', 40), ('Distribution expenses', 37), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Lease expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' Logistics and distribution', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Occupancy expenses', 25), (' Selling Expenses', 25), (' Amortisation expenses', 24), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Sales and marketing', 20), (' Advertising expenses', 17), (' depreciation', 16), (' Occupancy ', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Sales and marketing', 37), (' Logistics and distribution', 33), ('Distribution expenses', 31), (' Selling & distribution expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Administrative and other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), ('other expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Marketing expenses', 22), (' depreciation', 20), (' Occupancy expenses', 17), (' Management expenses', 17), (' Depreciation expenses', 16), (' Advertising expenses', 16), (' Depreciation expenses', 16), (' Occupancy ', 14), (' Amortisation expenses', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8], 'score': 100, 'value': -39589.0, 'line_item_label': ['Logistics and distribution', 'Sales and marketing', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-28893.0, -1719.0, -8977.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 29), ('Rent', 27), (' Occupancy expenses', 27), (' Occupancy', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Administration expenses', 40), (' Rental expenses', 37), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Administration expenses', 44), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 17), (' Occupancy', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('Rent', 32), (' Administration expenses', 32), (' Rental expenses', 29), (' Occupancy expenses', 15), (' Occupancy', 0)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('Rent', 21), (' Occupancy', 20), (' Administration expenses', 19), (' Rental expenses', 14), (' Occupancy expenses', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Rental expenses', 65), (' Occupancy expenses', 47), (' Administration expenses', 35), ('Rent', 27), (' Occupancy', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Occupancy', 21), ('Rent', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Administration expenses', 39), (' Occupancy', 30), ('Rent', 21), (' Rental expenses', 21), (' Occupancy expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 26), (' Occupancy expenses', 20), (' Occupancy', 14), ('Rent', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Administration expenses', 27), (' Rental expenses', 15), ('Rent', 12), (' Occupancy', 12), (' Occupancy expenses', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Administration expenses', 24), (' Rental expenses', 21), (' Occupancy expenses', 16), ('Rent', 13), (' Occupancy', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Rental expenses', 25), (' Occupancy expenses', 21), (' Administration expenses', 17), ('Rent', 12), (' Occupancy', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 22), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Rental expenses', 25), (' Occupancy expenses', 19), (' Administration expenses', 18), ('Rent', 11), (' Occupancy', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 30), (' Occupancy expenses', 24), (' Administration expenses', 19), ('Rent', 16), (' Occupancy', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 25), (' Administration expenses', 20), ('Rent', 17), (' Occupancy', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Administration expenses', 26), (' Rental expenses', 22), (' Occupancy expenses', 17), (' Occupancy', 14), ('Rent', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 29), ('Rent', 27), (' Occupancy expenses', 27), (' Occupancy', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Administration expenses', 40), (' Rental expenses', 37), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Administration expenses', 44), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 17), (' Occupancy', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('Rent', 32), (' Administration expenses', 32), (' Rental expenses', 29), (' Occupancy expenses', 15), (' Occupancy', 0)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('Rent', 21), (' Occupancy', 20), (' Administration expenses', 19), (' Rental expenses', 14), (' Occupancy expenses', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Rental expenses', 65), (' Occupancy expenses', 47), (' Administration expenses', 35), ('Rent', 27), (' Occupancy', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Occupancy', 21), ('Rent', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Administration expenses', 39), (' Occupancy', 30), ('Rent', 21), (' Rental expenses', 21), (' Occupancy expenses', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 26), (' Occupancy expenses', 20), (' Occupancy', 14), ('Rent', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Administration expenses', 27), (' Rental expenses', 15), ('Rent', 12), (' Occupancy', 12), (' Occupancy expenses', 10)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Administration expenses', 24), (' Rental expenses', 21), (' Occupancy expenses', 16), ('Rent', 13), (' Occupancy', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Rental expenses', 25), (' Occupancy expenses', 21), (' Administration expenses', 17), ('Rent', 12), (' Occupancy', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 22), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 9)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Rental expenses', 25), (' Occupancy expenses', 19), (' Administration expenses', 18), ('Rent', 11), (' Occupancy', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 30), (' Occupancy expenses', 24), (' Administration expenses', 19), ('Rent', 16), (' Occupancy', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 25), (' Administration expenses', 20), ('Rent', 17), (' Occupancy', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Administration expenses', 26), (' Rental expenses', 22), (' Occupancy expenses', 17), (' Occupancy', 14), ('Rent', 7)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('Other revenue', 40), ('other operating', 29), (' Other income', 28)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('other operating', 50), (' Other income', 40), ('Other revenue', 38)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Other income', 19), ('other operating', 13), ('Other revenue', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Other income', 31), ('other operating', 24), ('Other revenue', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('other operating', 24), ('Other revenue', 22)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('other operating', 29), (' Other income', 21), ('Other revenue', 20)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Other income', 46), ('other operating', 41), ('Other revenue', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Other income', 46), ('other operating', 32), ('Other revenue', 30)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Other income', 33), ('other operating', 29), ('Other revenue', 24)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('other operating', 42), (' Other income', 41), ('Other revenue', 25)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('other operating', 39), ('Other revenue', 26), (' Other income', 22)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('Other revenue', 25), ('other operating', 22), (' Other income', 22)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('Other revenue', 26), ('other operating', 23), (' Other income', 23)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('Other revenue', 23), ('other operating', 20), (' Other income', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Other income', 38), ('other operating', 35), ('Other revenue', 24)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other operating', 38), (' Other income', 37), ('Other revenue', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('other operating', 24), (' Other income', 24), ('Other revenue', 23)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 1761.0, 'line_item_label': ['Other income'], 'note_numbers': ['6'], 'line_item_value': [1761.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('Other revenue', 40), ('other operating', 29), (' Other income', 28)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('other operating', 50), (' Other income', 40), ('Other revenue', 38)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Other income', 19), ('other operating', 13), ('Other revenue', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Other income', 31), ('other operating', 24), ('Other revenue', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('other operating', 24), ('Other revenue', 22)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('other operating', 29), (' Other income', 21), ('Other revenue', 20)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Other income', 46), ('other operating', 41), ('Other revenue', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Other income', 46), ('other operating', 32), ('Other revenue', 30)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Other income', 33), ('other operating', 29), ('Other revenue', 24)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('other operating', 42), (' Other income', 41), ('Other revenue', 25)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('other operating', 39), ('Other revenue', 26), (' Other income', 22)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('Other revenue', 25), ('other operating', 22), (' Other income', 22)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('Other revenue', 26), ('other operating', 23), (' Other income', 23)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('Other revenue', 23), ('other operating', 20), (' Other income', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Other income', 38), ('other operating', 35), ('Other revenue', 24)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other operating', 38), (' Other income', 37), ('Other revenue', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('other operating', 24), (' Other income', 24), ('Other revenue', 23)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 552.0, 'line_item_label': ['Other income'], 'note_numbers': ['6'], 'line_item_value': [552.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:22+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-17 11:18:22+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Net finance costs', 55), (' Finance income and costs', 46), (' Finance income and finance costs', 39), (' Interest revenue', 36), ('finance income', 33), ('Finance income', 33), ('other income', 28)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Net finance costs', 55), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 34), (' Finance income and finance costs', 33), ('finance income', 15), ('Finance income', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 33), ('finance income', 31), ('Finance income', 31), (' Net finance costs', 29), (' Interest revenue', 23), ('other income', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Finance income and costs', 39), (' Interest revenue', 33), (' Finance income and finance costs', 33), ('other income', 31), ('finance income', 30), ('Finance income', 30), (' Net finance costs', 27)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Finance income and costs', 26), (' Net finance costs', 24), (' Finance income and finance costs', 22), ('other income', 21), ('finance income', 20), ('Finance income', 20), (' Interest revenue', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('other income', 46), (' Net finance costs', 36), (' Finance income and costs', 31), (' Finance income and finance costs', 31), (' Interest revenue', 26), ('finance income', 11), ('Finance income', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Net finance costs', 47), ('other income', 46), (' Finance income and costs', 44), (' Finance income and finance costs', 37), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 27)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Net finance costs', 34), ('other income', 33), (' Finance income and costs', 27), (' Interest revenue', 26), (' Finance income and finance costs', 24), ('finance income', 12), ('Finance income', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('other income', 41), (' Finance income and finance costs', 29), (' Interest revenue', 28), (' Finance income and costs', 24), (' Net finance costs', 23), ('finance income', 15), ('Finance income', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Interest revenue', 34), (' Net finance costs', 29), (' Finance income and costs', 26), ('other income', 22), (' Finance income and finance costs', 22), ('finance income', 11), ('Finance income', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Interest revenue', 34), (' Net finance costs', 27), (' Finance income and costs', 25), ('other income', 22), (' Finance income and finance costs', 22), ('finance income', 14), ('Finance income', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Interest revenue', 28), ('other income', 23), (' Finance income and finance costs', 23), ('finance income', 22), ('Finance income', 22), (' Finance income and costs', 22), (' Net finance costs', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Interest revenue', 31), (' Finance income and costs', 28), (' Net finance costs', 28), (' Finance income and finance costs', 26), ('other income', 16), ('finance income', 16), ('Finance income', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 29), (' Interest revenue', 26), ('finance income', 24), ('Finance income', 24)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 41), ('other income', 37), (' Finance income and costs', 34), (' Finance income and finance costs', 31), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Finance income and costs', 40), ('other income', 36), (' Finance income and finance costs', 36), (' Net finance costs', 34), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Net finance costs', 32), (' Finance income and costs', 27), ('other income', 24), (' Finance income and finance costs', 24), (' Interest revenue', 21), ('finance income', 11), ('Finance income', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': 100, 'value': -348.0, 'line_item_label': ['Other income', 'Net finance costs'], 'note_numbers': ['6', '7'], 'line_item_value': [1761.0, -2109.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Net finance costs', 55), (' Finance income and costs', 46), (' Finance income and finance costs', 39), (' Interest revenue', 36), ('finance income', 33), ('Finance income', 33), ('other income', 28)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Net finance costs', 55), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 34), (' Finance income and finance costs', 33), ('finance income', 15), ('Finance income', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 33), ('finance income', 31), ('Finance income', 31), (' Net finance costs', 29), (' Interest revenue', 23), ('other income', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Finance income and costs', 39), (' Interest revenue', 33), (' Finance income and finance costs', 33), ('other income', 31), ('finance income', 30), ('Finance income', 30), (' Net finance costs', 27)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Finance income and costs', 26), (' Net finance costs', 24), (' Finance income and finance costs', 22), ('other income', 21), ('finance income', 20), ('Finance income', 20), (' Interest revenue', 18)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('other income', 46), (' Net finance costs', 36), (' Finance income and costs', 31), (' Finance income and finance costs', 31), (' Interest revenue', 26), ('finance income', 11), ('Finance income', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Net finance costs', 47), ('other income', 46), (' Finance income and costs', 44), (' Finance income and finance costs', 37), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 27)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Net finance costs', 34), ('other income', 33), (' Finance income and costs', 27), (' Interest revenue', 26), (' Finance income and finance costs', 24), ('finance income', 12), ('Finance income', 12)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('other income', 41), (' Finance income and finance costs', 29), (' Interest revenue', 28), (' Finance income and costs', 24), (' Net finance costs', 23), ('finance income', 15), ('Finance income', 15)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Interest revenue', 34), (' Net finance costs', 29), (' Finance income and costs', 26), ('other income', 22), (' Finance income and finance costs', 22), ('finance income', 11), ('Finance income', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Interest revenue', 34), (' Net finance costs', 27), (' Finance income and costs', 25), ('other income', 22), (' Finance income and finance costs', 22), ('finance income', 14), ('Finance income', 14)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Interest revenue', 28), ('other income', 23), (' Finance income and finance costs', 23), ('finance income', 22), ('Finance income', 22), (' Finance income and costs', 22), (' Net finance costs', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Interest revenue', 31), (' Finance income and costs', 28), (' Net finance costs', 28), (' Finance income and finance costs', 26), ('other income', 16), ('finance income', 16), ('Finance income', 16)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 29), (' Interest revenue', 26), ('finance income', 24), ('Finance income', 24)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 41), ('other income', 37), (' Finance income and costs', 34), (' Finance income and finance costs', 31), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 21)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Finance income and costs', 40), ('other income', 36), (' Finance income and finance costs', 36), (' Net finance costs', 34), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 17)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Net finance costs', 32), (' Finance income and costs', 27), ('other income', 24), (' Finance income and finance costs', 24), (' Interest revenue', 21), ('finance income', 11), ('Finance income', 11)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': 100, 'value': -2661.0, 'line_item_label': ['Other income', 'Net finance costs'], 'note_numbers': ['6', '7'], 'line_item_value': [552.0, -3213.0]}
2023-07-17 11:18:22+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-17 11:18:22+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [('interest', 100), (' Interest income', 79), (' Interest income', 79), ('Bank interest', 77), (' Interest received - Bank', 72), (' Interest received - Loan', 72), (' Share of JV interest received/(paid)', 63), (' Sublease interest income', 59), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Bank Deposits - cash and cash equivalents', 28)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Sublease interest income', 74), (' Interest received - Bank', 68), (' Interest received - Loan', 68), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Bank Deposits - cash and cash equivalents', 26)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest received - Loan', 65), (' Interest income', 64), (' Interest income', 64), (' Interest received - Bank', 63), (' Sublease interest income', 59), (' Share of JV interest received/(paid)', 58), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 36)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 68), (' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Sublease interest income', 55), (' Share of JV interest received/(paid)', 50), (' Bank Deposits - cash and cash equivalents', 38)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [('interest', 100), (' Interest income', 79), (' Interest income', 79), ('Bank interest', 77), (' Interest received - Bank', 72), (' Interest received - Loan', 72), (' Share of JV interest received/(paid)', 63), (' Sublease interest income', 59), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Bank Deposits - cash and cash equivalents', 28)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Sublease interest income', 74), (' Interest received - Bank', 68), (' Interest received - Loan', 68), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Bank Deposits - cash and cash equivalents', 26)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest received - Loan', 65), (' Interest income', 64), (' Interest income', 64), (' Interest received - Bank', 63), (' Sublease interest income', 59), (' Share of JV interest received/(paid)', 58), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 36)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 68), (' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Sublease interest income', 55), (' Share of JV interest received/(paid)', 50), (' Bank Deposits - cash and cash equivalents', 38)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-17 11:18:22+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [-1913.0, 41.0, -1341.0, -3213.0, -515.0, 0.0, -1603.0, -2109.0], 'label': ['Net interest Interest expense nan', 'Net interest Interest income nan', 'Net interest Lease liabilities interest expense 14', 'Net interest Total net finance costs nan', 'Net interest Interest expense nan', 'Net interest Interest income nan', 'Net interest Lease liabilities interest expense 14', 'Net interest Total net finance costs nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('finance cost', 55), ('finance costs', 55), (' net finance costs ', 55), (' finance expenses', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('finance cost', 56), ('finance costs', 56), (' net finance costs ', 55), (' finance expenses', 30)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' finance expenses', 58), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('finance cost', 26), ('finance costs', 26), (' net finance costs ', 23), (' finance expenses', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' finance expenses', 22), (' net finance costs ', 21), ('finance cost', 11), ('finance costs', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 30), ('finance cost', 21), ('finance costs', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 22), ('finance costs', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -2109.0, 'line_item_label': ['Net finance costs'], 'note_numbers': ['7'], 'line_item_value': [-2109.0]}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('finance cost', 55), ('finance costs', 55), (' net finance costs ', 55), (' finance expenses', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('finance cost', 56), ('finance costs', 56), (' net finance costs ', 55), (' finance expenses', 30)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' finance expenses', 58), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('finance cost', 26), ('finance costs', 26), (' net finance costs ', 23), (' finance expenses', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' finance expenses', 22), (' net finance costs ', 21), ('finance cost', 11), ('finance costs', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 30), ('finance cost', 21), ('finance costs', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 22), ('finance costs', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -3213.0, 'line_item_label': ['Net finance costs'], 'note_numbers': ['7'], 'line_item_value': [-3213.0]}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Lease interest expense', 90), ('  Other interest expense', 86), (' Interest income', 79), (' Interest on leases', 77), (' Lease liabilities interest expense', 69), (' Interest accrued on loans', 63), (' Interest expense on financial liabilities using the effective interest rate method - other', 59), (' Interest accrued on lease liabilities', 54), ('loan', 50), ('debt', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 50), ('debenture', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 34), ('bank facilities', 31), ('bonds', 25), ('borrowings', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest accrued on loans', 70), (' Lease interest expense', 70), ('  Other interest expense', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 58), (' Interest on bank overdrafts and loans (other than those from related parties)', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('debenture', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 49), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 35), ('bank facilities', 31), ('bonds', 25), ('borrowings', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Interest on leases', 100), (' Lease liabilities interest expense', 100), (' Lease interest expense', 85), (' Interest accrued on lease liabilities', 77), ('  Other interest expense', 76), (' Interest accrued on loans', 68), (' Interest income', 64), ('loan', 50), ('debt', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 48), ('debenture', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 40), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 33), ('bank facilities', 30), ('bonds', 25), ('borrowings', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest accrued on loans', 63), ('Interest expenses', 60), (' Lease interest expense', 60), ('  Other interest expense', 57), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 53), ('loan', 50), ('debt', 50), ('debenture', 50), (' Lease liabilities interest expense', 48), (' Interest accrued on lease liabilities', 46), ('bank facilities', 40), ('cash credit', 38), (' Discount unwind on the provision for asset retirement obligation', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 37), ('bonds', 25), ('borrowings', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Lease interest expense', 90), ('  Other interest expense', 86), (' Interest income', 79), (' Interest on leases', 77), (' Lease liabilities interest expense', 69), (' Interest accrued on loans', 63), (' Interest expense on financial liabilities using the effective interest rate method - other', 59), (' Interest accrued on lease liabilities', 54), ('loan', 50), ('debt', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 50), ('debenture', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 34), ('bank facilities', 31), ('bonds', 25), ('borrowings', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest accrued on loans', 70), (' Lease interest expense', 70), ('  Other interest expense', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 58), (' Interest on bank overdrafts and loans (other than those from related parties)', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('debenture', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 49), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 35), ('bank facilities', 31), ('bonds', 25), ('borrowings', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Interest on leases', 100), (' Lease liabilities interest expense', 100), (' Lease interest expense', 85), (' Interest accrued on lease liabilities', 77), ('  Other interest expense', 76), (' Interest accrued on loans', 68), (' Interest income', 64), ('loan', 50), ('debt', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 48), ('debenture', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 40), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 33), ('bank facilities', 30), ('bonds', 25), ('borrowings', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest accrued on loans', 63), ('Interest expenses', 60), (' Lease interest expense', 60), ('  Other interest expense', 57), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 53), ('loan', 50), ('debt', 50), ('debenture', 50), (' Lease liabilities interest expense', 48), (' Interest accrued on lease liabilities', 46), ('bank facilities', 40), ('cash credit', 38), (' Discount unwind on the provision for asset retirement obligation', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 37), ('bonds', 25), ('borrowings', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [-1913.0, 41.0, -1341.0, -3213.0, -515.0, 0.0, -1603.0, -2109.0], 'label': ['Net interest Interest expense nan', 'Net interest Interest income nan', 'Net interest Lease liabilities interest expense 14', 'Net interest Total net finance costs nan', 'Net interest Interest expense nan', 'Net interest Interest income nan', 'Net interest Lease liabilities interest expense 14', 'Net interest Total net finance costs nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('finance cost', 55), ('finance costs', 55), (' net finance costs ', 55), (' finance expenses', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('finance cost', 56), ('finance costs', 56), (' net finance costs ', 55), (' finance expenses', 30)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' finance expenses', 58), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('finance cost', 26), ('finance costs', 26), (' net finance costs ', 23), (' finance expenses', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' finance expenses', 22), (' net finance costs ', 21), ('finance cost', 11), ('finance costs', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 30), ('finance cost', 21), ('finance costs', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 22), ('finance costs', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -2109.0, 'line_item_label': ['Net finance costs'], 'note_numbers': ['7'], 'line_item_value': [-2109.0]}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('finance cost', 55), ('finance costs', 55), (' net finance costs ', 55), (' finance expenses', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('finance cost', 56), ('finance costs', 56), (' net finance costs ', 55), (' finance expenses', 30)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' finance expenses', 58), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('finance cost', 26), ('finance costs', 26), (' net finance costs ', 23), (' finance expenses', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' finance expenses', 22), (' net finance costs ', 21), ('finance cost', 11), ('finance costs', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 30), ('finance cost', 21), ('finance costs', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 22), ('finance costs', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -3213.0, 'line_item_label': ['Net finance costs'], 'note_numbers': ['7'], 'line_item_value': [-3213.0]}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('other revenue', 50), (' net other foreign exchange (losses)/gains', 50), (' net foreign exchange (loss)/gain', 48), (' net ppe disposal (loss)/gain', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' net (loss)/profit on disposal of non-current assets', 44), ('  government grants', 43), (' foreign exchange gain', 40), (' secondment income (tw recovery)', 38), (' quota lease income', 38), (' profit from discontinued operation', 37), (' other income', 36), (' share of jv income', 36), (' sundry income', 33), (' other miscellaneous - net (loss)/gain', 32), (' paid by customers - at amortised cost', 30), (' commission revenue', 29), (' effective portion of changes in fair value of cash flow', 25), (' japan recoveries', 25), (' dividend from other parties', 22), (' margin charge income', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' net of tax', 71), (' quota lease income', 62), (' other', 60), (' sundry income', 58), (' margin charge income', 50), (' commission revenue', 48), (' net other foreign exchange (losses)/gains', 45), (' secondment income (tw recovery)', 43), ('other revenue', 42), ('  government grants', 42), (' net foreign exchange gain', 42), (' foreign exchange gain', 41), (' net foreign exchange gains/(losses)', 40), (' net foreign exchange (loss)/gain', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' profit from discontinued operation', 38), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' dividend from other parties', 31), (' effective portion of changes in fair value of cash flow', 29), (' net ppe disposal (loss)/gain', 25), (' other miscellaneous - net (loss)/gain', 24), (' japan recoveries', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('other revenue', 50), (' quota lease income', 50), (' net ppe disposal (loss)/gain', 46), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 45), (' net foreign exchange gain', 38), (' secondment income (tw recovery)', 38), (' net foreign exchange gains/(losses)', 38), (' net other foreign exchange (losses)/gains', 37), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' foreign exchange gain', 35), (' other miscellaneous - net (loss)/gain', 34), ('  government grants', 33), (' profit from discontinued operation', 33), (' paid by customers - at amortised cost', 33), (' sundry income', 33), (' dividend from other parties', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 28), (' margin charge income', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [(' net of tax', 71), (' net foreign exchange (loss)/gain', 62), (' net foreign exchange gain', 56), (' quota lease income', 56), (' net foreign exchange gains/(losses)', 50), (' net other foreign exchange (losses)/gains', 50), (' other miscellaneous - net (loss)/gain', 49), (' net ppe disposal (loss)/gain', 47), (' commission revenue', 45), (' insurance proceeds', 45), (' other income', 45), (' share of jv income', 45), ('other revenue', 42), (' foreign exchange gain', 42), (' paid by customers - at amortised cost', 42), (' sundry income', 42), (' other', 40), (' secondment income (tw recovery)', 38), (' japan recoveries', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' effective portion of changes in fair value of cash flow', 35), (' profit from discontinued operation', 34), ('  government grants', 33), (' margin charge income', 33), (' dividend from other parties', 28)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('other revenue', 50), (' net other foreign exchange (losses)/gains', 50), (' net foreign exchange (loss)/gain', 48), (' net ppe disposal (loss)/gain', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' net (loss)/profit on disposal of non-current assets', 44), ('  government grants', 43), (' foreign exchange gain', 40), (' secondment income (tw recovery)', 38), (' quota lease income', 38), (' profit from discontinued operation', 37), (' other income', 36), (' share of jv income', 36), (' sundry income', 33), (' other miscellaneous - net (loss)/gain', 32), (' paid by customers - at amortised cost', 30), (' commission revenue', 29), (' effective portion of changes in fair value of cash flow', 25), (' japan recoveries', 25), (' dividend from other parties', 22), (' margin charge income', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' net of tax', 71), (' quota lease income', 62), (' other', 60), (' sundry income', 58), (' margin charge income', 50), (' commission revenue', 48), (' net other foreign exchange (losses)/gains', 45), (' secondment income (tw recovery)', 43), ('other revenue', 42), ('  government grants', 42), (' net foreign exchange gain', 42), (' foreign exchange gain', 41), (' net foreign exchange gains/(losses)', 40), (' net foreign exchange (loss)/gain', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' profit from discontinued operation', 38), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' dividend from other parties', 31), (' effective portion of changes in fair value of cash flow', 29), (' net ppe disposal (loss)/gain', 25), (' other miscellaneous - net (loss)/gain', 24), (' japan recoveries', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('other revenue', 50), (' quota lease income', 50), (' net ppe disposal (loss)/gain', 46), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 45), (' net foreign exchange gain', 38), (' secondment income (tw recovery)', 38), (' net foreign exchange gains/(losses)', 38), (' net other foreign exchange (losses)/gains', 37), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' foreign exchange gain', 35), (' other miscellaneous - net (loss)/gain', 34), ('  government grants', 33), (' profit from discontinued operation', 33), (' paid by customers - at amortised cost', 33), (' sundry income', 33), (' dividend from other parties', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 28), (' margin charge income', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [(' net of tax', 71), (' net foreign exchange (loss)/gain', 62), (' net foreign exchange gain', 56), (' quota lease income', 56), (' net foreign exchange gains/(losses)', 50), (' net other foreign exchange (losses)/gains', 50), (' other miscellaneous - net (loss)/gain', 49), (' net ppe disposal (loss)/gain', 47), (' commission revenue', 45), (' insurance proceeds', 45), (' other income', 45), (' share of jv income', 45), ('other revenue', 42), (' foreign exchange gain', 42), (' paid by customers - at amortised cost', 42), (' sundry income', 42), (' other', 40), (' secondment income (tw recovery)', 38), (' japan recoveries', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' effective portion of changes in fair value of cash flow', 35), (' profit from discontinued operation', 34), ('  government grants', 33), (' margin charge income', 33), (' dividend from other parties', 28)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('NULL', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('NULL', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('NULL', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('NULL', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('NULL', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('NULL', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('NULL', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('NULL', 6)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('NULL', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 4)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('NULL', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('NULL', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('NULL', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('NULL', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('NULL', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('NULL', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('NULL', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('NULL', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('NULL', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('NULL', 6)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('NULL', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 4)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('NULL', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('NULL', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('prior year ', 29), (' income tax expense', 29), (' income tax benefit', 29), ('current tax', 28), ('minimum alternate tax credit entitlement', 28), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 22), (' income tax', 22), (' tax (expense)/benefit', 22), ('earlier year', 20), ('provision for taxation previous year', 13), ('deferred tax', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('prior year ', 33), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('earlier year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('deferred tax', 17), (' income tax benefit/(expense)', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('minimum alternate tax credit entitlement', 31), ('deferred tax', 28), (' income tax expense', 28), (' income tax benefit', 27), ('current tax', 26), (' tax (expense)/benefit', 26), ('earlier year', 25), ('provision for taxation previous year', 24), (' income tax benefit/(expense)', 23), ('amount transferred to retained earnings', 21), (' income tax', 21), ('prior year ', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('current tax', 38), (' income tax', 33), ('earlier year', 30), ('deferred tax', 25), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), ('prior year ', 24), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 21), ('minimum alternate tax credit entitlement', 13), (' income tax expense', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax', 42), ('amount transferred to retained earnings', 38), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 18), ('deferred tax', 17), (' income tax benefit/(expense)', 15), ('earlier year', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' income tax expense', 65), (' income tax benefit', 63), (' tax (expense)/benefit', 61), (' income tax benefit/(expense)', 52), ('current tax', 48), ('deferred tax', 44), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), ('prior year ', 29), ('provision for taxation previous year', 26), ('amount transferred to retained earnings', 22), ('earlier year', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' income tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 35), ('deferred tax', 30), ('provision for taxation previous year', 30), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), ('earlier year', 28), (' income tax benefit', 20), (' tax (expense)/benefit', 19), ('prior year ', 18), (' income tax benefit/(expense)', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('amount transferred to retained earnings', 38), ('current tax', 31), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit/(expense)', 26), ('deferred tax', 25), (' income tax', 25), ('earlier year', 22), ('prior year ', 16), (' income tax expense', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('current tax', 37), ('amount transferred to retained earnings', 37), (' income tax benefit', 36), ('deferred tax', 34), ('minimum alternate tax credit entitlement', 34), (' income tax', 34), ('provision for taxation previous year', 33), (' income tax expense', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('prior year ', 21), ('earlier year', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('provision for taxation previous year', 49), ('prior year ', 42), ('minimum alternate tax credit entitlement', 37), ('current tax', 36), (' tax (expense)/benefit', 35), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('earlier year', 30), ('deferred tax', 27), (' income tax', 27), ('amount transferred to retained earnings', 25), (' income tax expense', 23)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('earlier year', 37), ('provision for taxation previous year', 33), ('prior year ', 33), (' income tax benefit', 33), ('deferred tax', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 27), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 23), ('current tax', 22), (' income tax expense', 14), (' income tax', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 33), (' tax (expense)/benefit', 32), ('amount transferred to retained earnings', 31), (' income tax benefit', 30), ('earlier year', 29), (' income tax benefit/(expense)', 29), (' income tax expense', 27), ('prior year ', 26), ('deferred tax', 23), ('current tax', 22), (' income tax', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('provision for taxation previous year', 37), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), ('deferred tax', 27), (' tax (expense)/benefit', 27), ('earlier year', 26), (' income tax', 24), (' income tax benefit/(expense)', 24), ('current tax', 23), (' income tax expense', 21), (' income tax benefit', 20), ('prior year ', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('provision for taxation previous year', 35), ('minimum alternate tax credit entitlement', 32), (' tax (expense)/benefit', 29), (' income tax benefit', 27), (' income tax benefit/(expense)', 27), ('earlier year', 26), (' income tax expense', 24), ('current tax', 23), ('amount transferred to retained earnings', 21), ('deferred tax', 20), ('prior year ', 17), (' income tax', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' income tax expense', 44), (' income tax benefit', 41), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), ('earlier year', 37), ('prior year ', 32), (' income tax', 32), ('current tax', 31), ('deferred tax', 29), (' tax (expense)/benefit', 25), ('amount transferred to retained earnings', 22), ('minimum alternate tax credit entitlement', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' income tax expense', 47), (' income tax benefit', 43), ('provision for taxation previous year', 42), (' income tax benefit/(expense)', 42), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('prior year ', 34), ('current tax', 33), ('earlier year', 29), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 23)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 43), (' income tax benefit', 43), ('minimum alternate tax credit entitlement', 42), ('provision for taxation previous year', 38), ('prior year ', 33), (' tax (expense)/benefit', 32), (' income tax', 30), ('earlier year', 29), ('current tax', 25), ('deferred tax', 23), ('amount transferred to retained earnings', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('provision for taxation previous year', 31), (' income tax benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), ('deferred tax', 19), ('current tax', 18), (' income tax expense', 15), ('prior year ', 12), (' income tax', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('prior year ', 29), (' income tax expense', 29), (' income tax benefit', 29), ('current tax', 28), ('minimum alternate tax credit entitlement', 28), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 22), (' income tax', 22), (' tax (expense)/benefit', 22), ('earlier year', 20), ('provision for taxation previous year', 13), ('deferred tax', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('prior year ', 33), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('earlier year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('deferred tax', 17), (' income tax benefit/(expense)', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('minimum alternate tax credit entitlement', 31), ('deferred tax', 28), (' income tax expense', 28), (' income tax benefit', 27), ('current tax', 26), (' tax (expense)/benefit', 26), ('earlier year', 25), ('provision for taxation previous year', 24), (' income tax benefit/(expense)', 23), ('amount transferred to retained earnings', 21), (' income tax', 21), ('prior year ', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('current tax', 38), (' income tax', 33), ('earlier year', 30), ('deferred tax', 25), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), ('prior year ', 24), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 21), ('minimum alternate tax credit entitlement', 13), (' income tax expense', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax', 42), ('amount transferred to retained earnings', 38), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 18), ('deferred tax', 17), (' income tax benefit/(expense)', 15), ('earlier year', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' income tax expense', 65), (' income tax benefit', 63), (' tax (expense)/benefit', 61), (' income tax benefit/(expense)', 52), ('current tax', 48), ('deferred tax', 44), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), ('prior year ', 29), ('provision for taxation previous year', 26), ('amount transferred to retained earnings', 22), ('earlier year', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' income tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 35), ('deferred tax', 30), ('provision for taxation previous year', 30), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), ('earlier year', 28), (' income tax benefit', 20), (' tax (expense)/benefit', 19), ('prior year ', 18), (' income tax benefit/(expense)', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('amount transferred to retained earnings', 38), ('current tax', 31), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit/(expense)', 26), ('deferred tax', 25), (' income tax', 25), ('earlier year', 22), ('prior year ', 16), (' income tax expense', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('current tax', 37), ('amount transferred to retained earnings', 37), (' income tax benefit', 36), ('deferred tax', 34), ('minimum alternate tax credit entitlement', 34), (' income tax', 34), ('provision for taxation previous year', 33), (' income tax expense', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('prior year ', 21), ('earlier year', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('provision for taxation previous year', 49), ('prior year ', 42), ('minimum alternate tax credit entitlement', 37), ('current tax', 36), (' tax (expense)/benefit', 35), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('earlier year', 30), ('deferred tax', 27), (' income tax', 27), ('amount transferred to retained earnings', 25), (' income tax expense', 23)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('earlier year', 37), ('provision for taxation previous year', 33), ('prior year ', 33), (' income tax benefit', 33), ('deferred tax', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 27), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 23), ('current tax', 22), (' income tax expense', 14), (' income tax', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 33), (' tax (expense)/benefit', 32), ('amount transferred to retained earnings', 31), (' income tax benefit', 30), ('earlier year', 29), (' income tax benefit/(expense)', 29), (' income tax expense', 27), ('prior year ', 26), ('deferred tax', 23), ('current tax', 22), (' income tax', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('provision for taxation previous year', 37), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), ('deferred tax', 27), (' tax (expense)/benefit', 27), ('earlier year', 26), (' income tax', 24), (' income tax benefit/(expense)', 24), ('current tax', 23), (' income tax expense', 21), (' income tax benefit', 20), ('prior year ', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('provision for taxation previous year', 35), ('minimum alternate tax credit entitlement', 32), (' tax (expense)/benefit', 29), (' income tax benefit', 27), (' income tax benefit/(expense)', 27), ('earlier year', 26), (' income tax expense', 24), ('current tax', 23), ('amount transferred to retained earnings', 21), ('deferred tax', 20), ('prior year ', 17), (' income tax', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' income tax expense', 44), (' income tax benefit', 41), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), ('earlier year', 37), ('prior year ', 32), (' income tax', 32), ('current tax', 31), ('deferred tax', 29), (' tax (expense)/benefit', 25), ('amount transferred to retained earnings', 22), ('minimum alternate tax credit entitlement', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' income tax expense', 47), (' income tax benefit', 43), ('provision for taxation previous year', 42), (' income tax benefit/(expense)', 42), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('prior year ', 34), ('current tax', 33), ('earlier year', 29), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 23)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 43), (' income tax benefit', 43), ('minimum alternate tax credit entitlement', 42), ('provision for taxation previous year', 38), ('prior year ', 33), (' tax (expense)/benefit', 32), (' income tax', 30), ('earlier year', 29), ('current tax', 25), ('deferred tax', 23), ('amount transferred to retained earnings', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('provision for taxation previous year', 31), (' income tax benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), ('deferred tax', 19), ('current tax', 18), (' income tax expense', 15), ('prior year ', 12), (' income tax', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('prior period', 20), ('exceptional', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('prior period', 25), ('exceptional', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('prior period', 22), ('exceptional', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 19), ('prior period', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('exceptional', 33), ('prior period', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('prior period', 39), ('exceptional', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('prior period', 22), ('exceptional', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('prior period', 32), ('exceptional', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('prior period', 40), ('exceptional', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('prior period', 26), ('exceptional', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('prior period', 23), ('exceptional', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 18), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('exceptional', 21), ('prior period', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('prior period', 20), ('exceptional', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('prior period', 25), ('exceptional', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('prior period', 22), ('exceptional', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 19), ('prior period', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('exceptional', 33), ('prior period', 27)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('prior period', 39), ('exceptional', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('prior period', 22), ('exceptional', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('prior period', 32), ('exceptional', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('prior period', 40), ('exceptional', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('prior period', 26), ('exceptional', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('prior period', 23), ('exceptional', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 18), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('exceptional', 21), ('prior period', 17)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-17 11:18:23+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-17 11:18:23+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('NULL', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('NULL', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('NULL', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('NULL', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('NULL', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('NULL', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('NULL', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('NULL', 6)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('NULL', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 4)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('NULL', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('NULL', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-17 11:18:23+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-17 11:18:23+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('NULL', 18)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('NULL', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('NULL', 25)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('NULL', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('NULL', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('NULL', 21)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('NULL', 10)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('NULL', 6)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('NULL', 20)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 4)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('NULL', 13)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 7)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('NULL', 8)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('NULL', 22)]
2023-07-17 11:18:23+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-18 11:10:05+0530 - sLogger - DEBUG - process_main_pages started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-07-18 11:10:05+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-07-18 11:10:05+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-18 11:10:05+0530 - sLogger - DEBUG - set_section_details started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-18 11:10:05+0530 - sLogger - DEBUG - set_section_details started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-18 11:10:05+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-18 11:10:05+0530 - sLogger - DEBUG - set_section_details started
2023-07-18 11:10:05+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the period | adjustments for increase decrease in operating liabilities
2023-07-18 11:10:07+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:07+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:07+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:07+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-18 11:10:07+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-07-18 11:10:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:07+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-18 11:10:08+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-18 11:10:08+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Sales revenue', 34), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 31), ('from trading business', 30), ('revenue from operations', 29), (' Revenue', 25), (' Sale of coal', 22), ('transmission and distribution business', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('revenue from operations', 40), ('sale of products', 38), ('from trading business', 34), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('transmission and distribution business', 67), ('sale of products', 31), ('net sales', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sales revenue', 26), ('from trading business', 23), (' Revenue', 15), (' Sale of coal', 14), ('revenue from operations', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('net sales', 70), (' Sales revenue', 54), ('sale of products', 52), (' Sale of coal', 50), ('transmission and distribution business', 37), (' Revenue', 29), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('from trading business', 20), ('revenue from operations', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('sale of products', 37), ('from trading business', 33), ('net sales', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('revenue from operations', 19), ('transmission and distribution business', 19), (' Revenue', 10), (' Sales revenue', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('net sales', 38), (' Sales revenue', 34), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 29), ('sale of products', 27), (' Revenue', 25), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('revenue from operations', 55), ('revenue from contracts with customers', 54), ('Revenue from contract with customers', 54), ('from trading business', 41), (' Sale of coal', 24), (' Sales revenue', 23), ('sale of products', 22), ('net sales', 19), ('transmission and distribution business', 15), (' Revenue', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('revenue from operations', 39), (' Sale of coal', 33), (' Sales revenue', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 23), ('from trading business', 20), (' Revenue', 19), ('net sales', 17), ('sale of products', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('revenue from contracts with customers', 43), ('Revenue from contract with customers', 43), ('revenue from operations', 41), ('from trading business', 38), ('transmission and distribution business', 30), ('sale of products', 24), ('net sales', 22), (' Sales revenue', 16), (' Sale of coal', 13), (' Revenue', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('from trading business', 42), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('transmission and distribution business', 36), ('sale of products', 30), ('revenue from operations', 27), (' Sales revenue', 21), (' Revenue', 18), ('net sales', 17), (' Sale of coal', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('transmission and distribution business', 33), ('net sales', 29), ('from trading business', 29), (' Sale of coal', 29), ('sale of products', 26), ('revenue from operations', 24), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Revenue', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 31), ('sale of products', 25), ('revenue from operations', 23), (' Sales revenue', 22), ('from trading business', 20), ('net sales', 19), (' Sale of coal', 19), (' Revenue', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('transmission and distribution business', 46), (' Sales revenue', 30), ('revenue from operations', 28), ('from trading business', 28), (' Sale of coal', 27), ('net sales', 24), ('sale of products', 22), (' Revenue', 21), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 28), ('sale of products', 26), (' Sales revenue', 23), ('revenue from operations', 21), ('net sales', 21), ('from trading business', 18), (' Sale of coal', 14), (' Revenue', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('revenue from operations', 32), ('from trading business', 29), ('revenue from contracts with customers', 28), ('Revenue from contract with customers', 28), (' Sales revenue', 28), ('sale of products', 27), ('transmission and distribution business', 27), ('net sales', 22), (' Sale of coal', 18), (' Revenue', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 31), (' Sales revenue', 30), ('revenue from operations', 27), ('net sales', 27), ('transmission and distribution business', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('from trading business', 37), ('transmission and distribution business', 33), ('sale of products', 32), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('revenue from operations', 27), ('net sales', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('sale of products', 34), ('net sales', 32), ('revenue from operations', 31), (' Sale of coal', 31), (' Sales revenue', 29), ('transmission and distribution business', 27), ('from trading business', 21), ('revenue from contracts with customers', 18), ('Revenue from contract with customers', 18), (' Revenue', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 367104.0, 'line_item_label': ['Revenue'], 'note_numbers': [nan], 'line_item_value': [367104.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), (' Sale of coal', 38), (' Sales revenue', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 22), (' Revenue', 22), ('net sales', 20), ('sale of products', 17), ('transmission and distribution business', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('sale of products', 22), ('net sales', 14), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Sales revenue', 34), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 31), ('from trading business', 30), ('revenue from operations', 29), (' Revenue', 25), (' Sale of coal', 22), ('transmission and distribution business', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('revenue from operations', 40), ('sale of products', 38), ('from trading business', 34), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('transmission and distribution business', 67), ('sale of products', 31), ('net sales', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sales revenue', 26), ('from trading business', 23), (' Revenue', 15), (' Sale of coal', 14), ('revenue from operations', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('net sales', 70), (' Sales revenue', 54), ('sale of products', 52), (' Sale of coal', 50), ('transmission and distribution business', 37), (' Revenue', 29), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('from trading business', 20), ('revenue from operations', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('revenue from operations', 68), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), ('from trading business', 43), ('sale of products', 24), (' Sales revenue', 24), (' Revenue', 21), (' Sale of coal', 19), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('sale of products', 37), ('from trading business', 33), ('net sales', 26), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), ('revenue from operations', 19), ('transmission and distribution business', 19), (' Revenue', 10), (' Sales revenue', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('net sales', 38), (' Sales revenue', 34), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 29), ('sale of products', 27), (' Revenue', 25), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('revenue from operations', 55), ('revenue from contracts with customers', 54), ('Revenue from contract with customers', 54), ('from trading business', 41), (' Sale of coal', 24), (' Sales revenue', 23), ('sale of products', 22), ('net sales', 19), ('transmission and distribution business', 15), (' Revenue', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('revenue from operations', 39), (' Sale of coal', 33), (' Sales revenue', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 23), ('from trading business', 20), (' Revenue', 19), ('net sales', 17), ('sale of products', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('revenue from contracts with customers', 43), ('Revenue from contract with customers', 43), ('revenue from operations', 41), ('from trading business', 38), ('transmission and distribution business', 30), ('sale of products', 24), ('net sales', 22), (' Sales revenue', 16), (' Sale of coal', 13), (' Revenue', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('from trading business', 42), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('transmission and distribution business', 36), ('sale of products', 30), ('revenue from operations', 27), (' Sales revenue', 21), (' Revenue', 18), ('net sales', 17), (' Sale of coal', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('transmission and distribution business', 33), ('net sales', 29), ('from trading business', 29), (' Sale of coal', 29), ('sale of products', 26), ('revenue from operations', 24), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Revenue', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('transmission and distribution business', 31), ('sale of products', 25), ('revenue from operations', 23), (' Sales revenue', 22), ('from trading business', 20), ('net sales', 19), (' Sale of coal', 19), (' Revenue', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('transmission and distribution business', 46), (' Sales revenue', 30), ('revenue from operations', 28), ('from trading business', 28), (' Sale of coal', 27), ('net sales', 24), ('sale of products', 22), (' Revenue', 21), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 28), ('sale of products', 26), (' Sales revenue', 23), ('revenue from operations', 21), ('net sales', 21), ('from trading business', 18), (' Sale of coal', 14), (' Revenue', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('revenue from operations', 32), ('from trading business', 29), ('revenue from contracts with customers', 28), ('Revenue from contract with customers', 28), (' Sales revenue', 28), ('sale of products', 27), ('transmission and distribution business', 27), ('net sales', 22), (' Sale of coal', 18), (' Revenue', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 31), (' Sales revenue', 30), ('revenue from operations', 27), ('net sales', 27), ('transmission and distribution business', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('from trading business', 37), ('transmission and distribution business', 33), ('sale of products', 32), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('revenue from operations', 27), ('net sales', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('sale of products', 34), ('net sales', 32), ('revenue from operations', 31), (' Sale of coal', 31), (' Sales revenue', 29), ('transmission and distribution business', 27), ('from trading business', 21), ('revenue from contracts with customers', 18), ('Revenue from contract with customers', 18), (' Revenue', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 430461.0, 'line_item_label': ['Revenue'], 'note_numbers': [nan], 'line_item_value': [430461.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Cost of inventory sold', 92), (' Personnel costs', 62), (' Cost of product sold', 57), (' cost of coal sold', 56), ('cost of sales', 52), ('Cost of sales', 52), (' Cost of goods and services sold', 51), ('purchase of stock-in-trade', 43), ('total expenses', 33), ('total expenditure', 29), ('expense', 25), ('expenditure', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Personnel costs', 100), (' Cost of product sold', 65), ('cost of sales', 61), ('Cost of sales', 61), (' Cost of inventory sold', 61), (' cost of coal sold', 57), (' Cost of goods and services sold', 51), ('total expenses', 31), ('purchase of stock-in-trade', 30), ('expense', 30), ('total expenditure', 27), ('expenditure', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' cost of coal sold', 35), ('expenditure', 33), (' Cost of inventory sold', 31), ('cost of sales', 28), ('Cost of sales', 28), ('total expenses', 25), (' Personnel costs', 24), ('expense', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('cost of sales', 50), ('Cost of sales', 50), (' cost of coal sold', 41), (' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of product sold', 38), ('total expenses', 30), ('purchase of stock-in-trade', 24), ('expenditure', 24), (' Personnel costs', 21), ('expense', 19), (' Cost of inventory sold', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('expenditure', 16), ('total expenses', 15), ('total expenditure', 13), ('expense', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('total expenses', 60), ('total expenditure', 59), ('expense', 50), ('expenditure', 50), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 23), (' Cost of inventory sold', 22), (' cost of coal sold', 19), (' Cost of goods and services sold', 19), (' Personnel costs', 19), ('purchase of stock-in-trade', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Personnel costs', 42), (' Cost of product sold', 39), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' cost of coal sold', 26), ('expenditure', 24), ('purchase of stock-in-trade', 23), ('total expenses', 22), ('total expenditure', 20), ('expense', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Personnel costs', 48), ('cost of sales', 42), ('Cost of sales', 42), (' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('expenditure', 24), ('expense', 19), ('total expenditure', 19), ('total expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 35), ('total expenses', 32), (' Personnel costs', 31), (' cost of coal sold', 27), ('purchase of stock-in-trade', 25), (' Cost of inventory sold', 25), ('expenditure', 21), ('cost of sales', 21), ('Cost of sales', 21), ('expense', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Cost of product sold', 31), (' Cost of goods and services sold', 30), ('total expenditure', 27), (' Cost of inventory sold', 26), (' Personnel costs', 24), ('purchase of stock-in-trade', 21), ('expenditure', 21), ('total expenses', 20), (' cost of coal sold', 19), ('cost of sales', 16), ('Cost of sales', 16), ('expense', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' cost of coal sold', 30), (' Personnel costs', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), (' Cost of product sold', 23), ('expenditure', 22), ('expense', 19), ('total expenses', 16), (' Cost of goods and services sold', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Cost of product sold', 30), (' Cost of goods and services sold', 26), (' Cost of inventory sold', 25), (' Personnel costs', 24), ('cost of sales', 23), ('Cost of sales', 23), ('total expenses', 21), (' cost of coal sold', 21), ('total expenditure', 20), ('purchase of stock-in-trade', 16), ('expense', 16), ('expenditure', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('purchase of stock-in-trade', 36), (' Cost of goods and services sold', 36), ('total expenditure', 31), (' Cost of inventory sold', 30), ('expenditure', 27), ('cost of sales', 27), ('Cost of sales', 27), (' Personnel costs', 25), ('total expenses', 22), ('expense', 21), (' cost of coal sold', 21), (' Cost of product sold', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Cost of product sold', 33), ('total expenses', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), ('total expenditure', 27), ('purchase of stock-in-trade', 26), (' Personnel costs', 25), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 14), (' cost of coal sold', 12), ('expenditure', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 33), ('total expenditure', 32), ('total expenses', 31), (' cost of coal sold', 26), (' Personnel costs', 26), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 24), ('expenditure', 21), ('expense', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of inventory sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('purchase of stock-in-trade', 29), (' Cost of goods and services sold', 26), (' Personnel costs', 25), ('expenditure', 23), (' Cost of product sold', 20), (' cost of coal sold', 18), ('expense', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), ('cost of sales', 30), ('Cost of sales', 30), ('purchase of stock-in-trade', 29), (' Personnel costs', 24), ('expenditure', 22), (' cost of coal sold', 17), ('expense', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' cost of coal sold', 32), (' Personnel costs', 32), ('cost of sales', 31), ('Cost of sales', 31), ('purchase of stock-in-trade', 29), (' Cost of product sold', 25), ('expenditure', 24), ('expense', 21), ('total expenditure', 21), (' Cost of inventory sold', 19), ('total expenses', 17), (' Cost of goods and services sold', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 100, 'value': -310815.0, 'line_item_label': ['Cost of inventorysold', 'Personnel costs'], 'note_numbers': [nan, nan], 'line_item_value': [-271328.0, -39487.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' Cost of goods and services sold', 38), ('purchase of stock-in-trade', 32), (' cost of coal sold', 31), ('expenditure', 27), ('expense', 22), ('total expenditure', 21), ('total expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('cost of sales', 13), ('Cost of sales', 13), ('purchase of stock-in-trade', 8), (' Cost of goods and services sold', 6), (' cost of coal sold', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Cost of inventory sold', 92), (' Personnel costs', 62), (' Cost of product sold', 57), (' cost of coal sold', 56), ('cost of sales', 52), ('Cost of sales', 52), (' Cost of goods and services sold', 51), ('purchase of stock-in-trade', 43), ('total expenses', 33), ('total expenditure', 29), ('expense', 25), ('expenditure', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Personnel costs', 100), (' Cost of product sold', 65), ('cost of sales', 61), ('Cost of sales', 61), (' Cost of inventory sold', 61), (' cost of coal sold', 57), (' Cost of goods and services sold', 51), ('total expenses', 31), ('purchase of stock-in-trade', 30), ('expense', 30), ('total expenditure', 27), ('expenditure', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' cost of coal sold', 35), ('expenditure', 33), (' Cost of inventory sold', 31), ('cost of sales', 28), ('Cost of sales', 28), ('total expenses', 25), (' Personnel costs', 24), ('expense', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('cost of sales', 50), ('Cost of sales', 50), (' cost of coal sold', 41), (' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of product sold', 38), ('total expenses', 30), ('purchase of stock-in-trade', 24), ('expenditure', 24), (' Personnel costs', 21), ('expense', 19), (' Cost of inventory sold', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Personnel costs', 44), (' Cost of goods and services sold', 43), (' Cost of product sold', 36), ('total expenditure', 26), ('cost of sales', 26), ('Cost of sales', 26), ('total expenses', 24), (' cost of coal sold', 22), ('expense', 21), (' Cost of inventory sold', 20), ('expenditure', 19), ('purchase of stock-in-trade', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('expenditure', 16), ('total expenses', 15), ('total expenditure', 13), ('expense', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('total expenses', 60), ('total expenditure', 59), ('expense', 50), ('expenditure', 50), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 23), (' Cost of inventory sold', 22), (' cost of coal sold', 19), (' Cost of goods and services sold', 19), (' Personnel costs', 19), ('purchase of stock-in-trade', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Personnel costs', 42), (' Cost of product sold', 39), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' cost of coal sold', 26), ('expenditure', 24), ('purchase of stock-in-trade', 23), ('total expenses', 22), ('total expenditure', 20), ('expense', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Personnel costs', 48), ('cost of sales', 42), ('Cost of sales', 42), (' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('expenditure', 24), ('expense', 19), ('total expenditure', 19), ('total expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 35), ('total expenses', 32), (' Personnel costs', 31), (' cost of coal sold', 27), ('purchase of stock-in-trade', 25), (' Cost of inventory sold', 25), ('expenditure', 21), ('cost of sales', 21), ('Cost of sales', 21), ('expense', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Cost of product sold', 31), (' Cost of goods and services sold', 30), ('total expenditure', 27), (' Cost of inventory sold', 26), (' Personnel costs', 24), ('purchase of stock-in-trade', 21), ('expenditure', 21), ('total expenses', 20), (' cost of coal sold', 19), ('cost of sales', 16), ('Cost of sales', 16), ('expense', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' cost of coal sold', 30), (' Personnel costs', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), (' Cost of product sold', 23), ('expenditure', 22), ('expense', 19), ('total expenses', 16), (' Cost of goods and services sold', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Cost of product sold', 30), (' Cost of goods and services sold', 26), (' Cost of inventory sold', 25), (' Personnel costs', 24), ('cost of sales', 23), ('Cost of sales', 23), ('total expenses', 21), (' cost of coal sold', 21), ('total expenditure', 20), ('purchase of stock-in-trade', 16), ('expense', 16), ('expenditure', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('purchase of stock-in-trade', 36), (' Cost of goods and services sold', 36), ('total expenditure', 31), (' Cost of inventory sold', 30), ('expenditure', 27), ('cost of sales', 27), ('Cost of sales', 27), (' Personnel costs', 25), ('total expenses', 22), ('expense', 21), (' cost of coal sold', 21), (' Cost of product sold', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Cost of product sold', 33), ('total expenses', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 29), ('total expenditure', 27), ('purchase of stock-in-trade', 26), (' Personnel costs', 25), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 14), (' cost of coal sold', 12), ('expenditure', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('purchase of stock-in-trade', 33), ('total expenditure', 32), ('total expenses', 31), (' cost of coal sold', 26), (' Personnel costs', 26), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 24), ('expenditure', 21), ('expense', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of inventory sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('purchase of stock-in-trade', 29), (' Cost of goods and services sold', 26), (' Personnel costs', 25), ('expenditure', 23), (' Cost of product sold', 20), (' cost of coal sold', 18), ('expense', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), ('cost of sales', 30), ('Cost of sales', 30), ('purchase of stock-in-trade', 29), (' Personnel costs', 24), ('expenditure', 22), (' cost of coal sold', 17), ('expense', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' cost of coal sold', 32), (' Personnel costs', 32), ('cost of sales', 31), ('Cost of sales', 31), ('purchase of stock-in-trade', 29), (' Cost of product sold', 25), ('expenditure', 24), ('expense', 21), ('total expenditure', 21), (' Cost of inventory sold', 19), ('total expenses', 17), (' Cost of goods and services sold', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 100, 'value': -359196.0, 'line_item_label': ['Cost of inventorysold', 'Personnel costs'], 'note_numbers': [nan, nan], 'line_item_value': [-316176.0, -43020.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Selling & distribution expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Lease expenses', 28), (' Selling Expenses', 28), ('other expenses', 27), (' Occupancy expenses', 27), (' Other expenses', 27), (' Administrative and other expenses', 27), (' Other expenses', 27), (' Advertising expenses', 24), (' Sales and marketing', 24), (' Logistics and distribution', 21), (' Management expenses', 20), (' Marketing expenses', 19), (' Amortisation expenses', 19), (' Occupancy ', 9), (' depreciation', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Selling & distribution expenses', 46), (' Amortisation expenses', 43), ('Distribution expenses', 40), (' Administrative expenses', 40), (' Administration expenses', 40), (' Selling Expenses', 40), (' Depreciation expenses', 36), (' Depreciation expenses', 36), (' Administrative and other expenses', 35), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' depreciation', 29), (' Advertising expenses', 28), (' Sales and marketing', 28), (' Logistics and distribution', 24), (' Occupancy expenses', 23), (' Occupancy ', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Logistics and distribution', 100), ('Distribution expenses', 61), (' Selling & distribution expenses', 54), (' Sales and marketing', 46), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 39), (' Advertising expenses', 34), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Other expenses', 31), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Marketing expenses', 24), (' depreciation', 22), (' Management expenses', 19), (' Occupancy ', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Sales and marketing', 100), (' Marketing expenses', 57), (' Logistics and distribution', 46), (' Amortisation expenses', 41), (' Advertising expenses', 40), (' Management expenses', 37), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 31), (' Selling Expenses', 31), (' Administrative and other expenses', 29), (' Selling & distribution expenses', 28), (' depreciation', 27), (' Depreciation expenses', 21), (' Depreciation expenses', 21), ('other expenses', 15), (' Occupancy expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Occupancy ', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 33), (' Marketing expenses', 29), ('Distribution expenses', 26), (' Logistics and distribution', 23), (' Selling & distribution expenses', 22), (' Management expenses', 22), (' Occupancy ', 20), (' Advertising expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('other expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Amortisation expenses', 14), (' depreciation', 9), (' Lease expenses', 8), (' Selling Expenses', 8), (' Occupancy expenses', 7), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Lease expenses', 55), ('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 52), (' Selling Expenses', 48), (' Occupancy expenses', 47), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' depreciation', 32), (' Sales and marketing', 30), (' Logistics and distribution', 26), (' Occupancy ', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Amortisation expenses', 32), ('other expenses', 28), (' Other expenses', 28), (' Administrative and other expenses', 28), (' Other expenses', 28), (' Marketing expenses', 27), (' Selling & distribution expenses', 27), (' depreciation', 26), (' Sales and marketing', 26), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Depreciation expenses', 21), (' Occupancy ', 21), (' Depreciation expenses', 21), (' Logistics and distribution', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('Distribution expenses', 58), (' Selling & distribution expenses', 50), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Amortisation expenses', 41), (' Administrative expenses', 39), (' Administration expenses', 39), (' Administrative and other expenses', 34), (' Occupancy ', 30), (' Logistics and distribution', 29), (' depreciation', 27), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Marketing expenses', 21), (' Advertising expenses', 20), (' Sales and marketing', 20), (' Occupancy expenses', 15), (' Lease expenses', 15), (' Selling Expenses', 15), (' Management expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Logistics and distribution', 34), ('Distribution expenses', 33), (' Depreciation expenses', 27), (' Depreciation expenses', 27), (' Amortisation expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Sales and marketing', 26), (' Administrative and other expenses', 25), ('other expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), (' Marketing expenses', 20), (' Occupancy expenses', 20), (' Lease expenses', 20), (' Management expenses', 20), (' Selling Expenses', 16), (' Occupancy ', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Logistics and distribution', 46), ('Distribution expenses', 41), (' Administrative and other expenses', 41), (' Selling & distribution expenses', 37), (' Amortisation expenses', 33), ('other expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Administrative expenses', 27), (' Administration expenses', 27), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Lease expenses', 21), (' Marketing expenses', 20), (' Sales and marketing', 19), (' depreciation', 17), (' Management expenses', 15), (' Advertising expenses', 14), (' Occupancy ', 12), (' Occupancy expenses', 10), (' Selling Expenses', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Sales and marketing', 34), (' Logistics and distribution', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Other expenses', 26), (' Selling & distribution expenses', 26), (' Other expenses', 26), (' depreciation', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Marketing expenses', 21), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' Occupancy expenses', 16), (' Management expenses', 16), (' Occupancy ', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Marketing expenses', 28), (' Depreciation expenses', 28), (' Depreciation expenses', 28), ('Distribution expenses', 27), (' Sales and marketing', 27), (' Logistics and distribution', 25), (' depreciation', 24), (' Lease expenses', 22), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Amortisation expenses', 21), (' Management expenses', 21), (' Other expenses', 21), (' Administrative and other expenses', 20), (' Selling Expenses', 18), (' Administrative expenses', 17), (' Administration expenses', 17), (' Advertising expenses', 17), (' Occupancy ', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Depreciation expenses', 32), (' Selling & distribution expenses', 32), (' Depreciation expenses', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Administrative and other expenses', 29), (' Sales and marketing', 28), (' Lease expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Advertising expenses', 25), (' Amortisation expenses', 25), (' depreciation', 24), (' Selling Expenses', 23), ('other expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy expenses', 19), (' Occupancy ', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Sales and marketing', 28), (' Marketing expenses', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), ('Distribution expenses', 24), (' Logistics and distribution', 23), (' depreciation', 21), (' Lease expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Amortisation expenses', 19), (' Management expenses', 19), (' Administrative expenses', 18), (' Administration expenses', 18), ('other expenses', 16), (' Other expenses', 16), (' Administrative and other expenses', 16), (' Other expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('other expenses', 34), (' Other expenses', 34), (' Other expenses', 34), (' Administrative and other expenses', 33), (' Lease expenses', 28), (' Marketing expenses', 27), (' Management expenses', 27), (' Sales and marketing', 26), (' Occupancy expenses', 24), (' Selling & distribution expenses', 24), (' Selling Expenses', 24), (' Logistics and distribution', 24), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('Distribution expenses', 16), (' depreciation', 15), (' Advertising expenses', 13), (' Occupancy ', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Administrative and other expenses', 35), (' Sales and marketing', 31), (' Lease expenses', 30), (' Marketing expenses', 29), (' Management expenses', 29), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Amortisation expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 19), ('Distribution expenses', 17), (' depreciation', 16), (' Advertising expenses', 14), (' Occupancy ', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Administrative and other expenses', 40), ('Distribution expenses', 37), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Lease expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' Logistics and distribution', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Occupancy expenses', 25), (' Selling Expenses', 25), (' Amortisation expenses', 24), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Sales and marketing', 20), (' Advertising expenses', 17), (' depreciation', 16), (' Occupancy ', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Sales and marketing', 37), (' Logistics and distribution', 33), ('Distribution expenses', 31), (' Selling & distribution expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Administrative and other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), ('other expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Marketing expenses', 22), (' depreciation', 20), (' Occupancy expenses', 17), (' Management expenses', 17), (' Depreciation expenses', 16), (' Advertising expenses', 16), (' Depreciation expenses', 16), (' Occupancy ', 14), (' Amortisation expenses', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8], 'score': 100, 'value': -31350.0, 'line_item_label': ['Logistics and distribution', 'Sales and marketing', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-22578.0, -1075.0, -7697.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), (' Depreciation expenses', 38), (' Depreciation expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Administrative and other expenses', 32), (' Selling & distribution expenses', 30), ('other expenses', 25), (' Other expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Sales and marketing', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Occupancy expenses', 17), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Advertising expenses', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15), (' Sales and marketing', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Selling & distribution expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Lease expenses', 28), (' Selling Expenses', 28), ('other expenses', 27), (' Occupancy expenses', 27), (' Other expenses', 27), (' Administrative and other expenses', 27), (' Other expenses', 27), (' Advertising expenses', 24), (' Sales and marketing', 24), (' Logistics and distribution', 21), (' Management expenses', 20), (' Marketing expenses', 19), (' Amortisation expenses', 19), (' Occupancy ', 9), (' depreciation', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Selling & distribution expenses', 46), (' Amortisation expenses', 43), ('Distribution expenses', 40), (' Administrative expenses', 40), (' Administration expenses', 40), (' Selling Expenses', 40), (' Depreciation expenses', 36), (' Depreciation expenses', 36), (' Administrative and other expenses', 35), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' depreciation', 29), (' Advertising expenses', 28), (' Sales and marketing', 28), (' Logistics and distribution', 24), (' Occupancy expenses', 23), (' Occupancy ', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Logistics and distribution', 100), ('Distribution expenses', 61), (' Selling & distribution expenses', 54), (' Sales and marketing', 46), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 39), (' Advertising expenses', 34), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Other expenses', 31), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Marketing expenses', 24), (' depreciation', 22), (' Management expenses', 19), (' Occupancy ', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Sales and marketing', 100), (' Marketing expenses', 57), (' Logistics and distribution', 46), (' Amortisation expenses', 41), (' Advertising expenses', 40), (' Management expenses', 37), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 31), (' Selling Expenses', 31), (' Administrative and other expenses', 29), (' Selling & distribution expenses', 28), (' depreciation', 27), (' Depreciation expenses', 21), (' Depreciation expenses', 21), ('other expenses', 15), (' Occupancy expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Occupancy ', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), (' Administrative and other expenses', 29), (' Advertising expenses', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' depreciation', 21), (' Logistics and distribution', 19), (' Management expenses', 18), (' Occupancy ', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 34), (' Sales and marketing', 33), (' Marketing expenses', 29), ('Distribution expenses', 26), (' Logistics and distribution', 23), (' Selling & distribution expenses', 22), (' Management expenses', 22), (' Occupancy ', 20), (' Advertising expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('other expenses', 15), (' Other expenses', 15), (' Other expenses', 15), (' Amortisation expenses', 14), (' depreciation', 9), (' Lease expenses', 8), (' Selling Expenses', 8), (' Occupancy expenses', 7), (' Depreciation expenses', 7), (' Depreciation expenses', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Lease expenses', 55), ('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 52), (' Selling Expenses', 48), (' Occupancy expenses', 47), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' depreciation', 32), (' Sales and marketing', 30), (' Logistics and distribution', 26), (' Occupancy ', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Amortisation expenses', 32), ('other expenses', 28), (' Other expenses', 28), (' Administrative and other expenses', 28), (' Other expenses', 28), (' Marketing expenses', 27), (' Selling & distribution expenses', 27), (' depreciation', 26), (' Sales and marketing', 26), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Depreciation expenses', 21), (' Occupancy ', 21), (' Depreciation expenses', 21), (' Logistics and distribution', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Advertising expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('Distribution expenses', 58), (' Selling & distribution expenses', 50), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Amortisation expenses', 41), (' Administrative expenses', 39), (' Administration expenses', 39), (' Administrative and other expenses', 34), (' Occupancy ', 30), (' Logistics and distribution', 29), (' depreciation', 27), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Marketing expenses', 21), (' Advertising expenses', 20), (' Sales and marketing', 20), (' Occupancy expenses', 15), (' Lease expenses', 15), (' Selling Expenses', 15), (' Management expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Logistics and distribution', 34), ('Distribution expenses', 33), (' Depreciation expenses', 27), (' Depreciation expenses', 27), (' Amortisation expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Sales and marketing', 26), (' Administrative and other expenses', 25), ('other expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), (' Marketing expenses', 20), (' Occupancy expenses', 20), (' Lease expenses', 20), (' Management expenses', 20), (' Selling Expenses', 16), (' Occupancy ', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Logistics and distribution', 46), ('Distribution expenses', 41), (' Administrative and other expenses', 41), (' Selling & distribution expenses', 37), (' Amortisation expenses', 33), ('other expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' Administrative expenses', 27), (' Administration expenses', 27), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Lease expenses', 21), (' Marketing expenses', 20), (' Sales and marketing', 19), (' depreciation', 17), (' Management expenses', 15), (' Advertising expenses', 14), (' Occupancy ', 12), (' Occupancy expenses', 10), (' Selling Expenses', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Sales and marketing', 34), (' Logistics and distribution', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Other expenses', 26), (' Selling & distribution expenses', 26), (' Other expenses', 26), (' depreciation', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Marketing expenses', 21), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' Occupancy expenses', 16), (' Management expenses', 16), (' Occupancy ', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Marketing expenses', 28), (' Depreciation expenses', 28), (' Depreciation expenses', 28), ('Distribution expenses', 27), (' Sales and marketing', 27), (' Logistics and distribution', 25), (' depreciation', 24), (' Lease expenses', 22), ('other expenses', 21), (' Occupancy expenses', 21), (' Other expenses', 21), (' Amortisation expenses', 21), (' Management expenses', 21), (' Other expenses', 21), (' Administrative and other expenses', 20), (' Selling Expenses', 18), (' Administrative expenses', 17), (' Administration expenses', 17), (' Advertising expenses', 17), (' Occupancy ', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Depreciation expenses', 32), (' Selling & distribution expenses', 32), (' Depreciation expenses', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), (' Administrative and other expenses', 29), (' Sales and marketing', 28), (' Lease expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Advertising expenses', 25), (' Amortisation expenses', 25), (' depreciation', 24), (' Selling Expenses', 23), ('other expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy expenses', 19), (' Occupancy ', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 34), (' Sales and marketing', 28), (' Marketing expenses', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), ('Distribution expenses', 24), (' Logistics and distribution', 23), (' depreciation', 21), (' Lease expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Amortisation expenses', 19), (' Management expenses', 19), (' Administrative expenses', 18), (' Administration expenses', 18), ('other expenses', 16), (' Other expenses', 16), (' Administrative and other expenses', 16), (' Other expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('other expenses', 34), (' Other expenses', 34), (' Other expenses', 34), (' Administrative and other expenses', 33), (' Lease expenses', 28), (' Marketing expenses', 27), (' Management expenses', 27), (' Sales and marketing', 26), (' Occupancy expenses', 24), (' Selling & distribution expenses', 24), (' Selling Expenses', 24), (' Logistics and distribution', 24), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Amortisation expenses', 20), (' Administrative expenses', 19), (' Administration expenses', 19), ('Distribution expenses', 16), (' depreciation', 15), (' Advertising expenses', 13), (' Occupancy ', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Administrative and other expenses', 35), (' Sales and marketing', 31), (' Lease expenses', 30), (' Marketing expenses', 29), (' Management expenses', 29), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Amortisation expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 19), ('Distribution expenses', 17), (' depreciation', 16), (' Advertising expenses', 14), (' Occupancy ', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Administrative and other expenses', 40), ('Distribution expenses', 37), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Lease expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' Logistics and distribution', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Occupancy expenses', 25), (' Selling Expenses', 25), (' Amortisation expenses', 24), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Sales and marketing', 20), (' Advertising expenses', 17), (' depreciation', 16), (' Occupancy ', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Sales and marketing', 37), (' Logistics and distribution', 33), ('Distribution expenses', 31), (' Selling & distribution expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Administrative and other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), ('other expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Marketing expenses', 22), (' depreciation', 20), (' Occupancy expenses', 17), (' Management expenses', 17), (' Depreciation expenses', 16), (' Advertising expenses', 16), (' Depreciation expenses', 16), (' Occupancy ', 14), (' Amortisation expenses', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8], 'score': 100, 'value': -39589.0, 'line_item_label': ['Logistics and distribution', 'Sales and marketing', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-28893.0, -1719.0, -8977.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 29), ('Rent', 27), (' Occupancy expenses', 27), (' Occupancy', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Administration expenses', 40), (' Rental expenses', 37), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Administration expenses', 44), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 17), (' Occupancy', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('Rent', 32), (' Administration expenses', 32), (' Rental expenses', 29), (' Occupancy expenses', 15), (' Occupancy', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('Rent', 21), (' Occupancy', 20), (' Administration expenses', 19), (' Rental expenses', 14), (' Occupancy expenses', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Rental expenses', 65), (' Occupancy expenses', 47), (' Administration expenses', 35), ('Rent', 27), (' Occupancy', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Occupancy', 21), ('Rent', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Administration expenses', 39), (' Occupancy', 30), ('Rent', 21), (' Rental expenses', 21), (' Occupancy expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 26), (' Occupancy expenses', 20), (' Occupancy', 14), ('Rent', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Administration expenses', 27), (' Rental expenses', 15), ('Rent', 12), (' Occupancy', 12), (' Occupancy expenses', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Administration expenses', 24), (' Rental expenses', 21), (' Occupancy expenses', 16), ('Rent', 13), (' Occupancy', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Rental expenses', 25), (' Occupancy expenses', 21), (' Administration expenses', 17), ('Rent', 12), (' Occupancy', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 22), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Rental expenses', 25), (' Occupancy expenses', 19), (' Administration expenses', 18), ('Rent', 11), (' Occupancy', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 30), (' Occupancy expenses', 24), (' Administration expenses', 19), ('Rent', 16), (' Occupancy', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 25), (' Administration expenses', 20), ('Rent', 17), (' Occupancy', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Administration expenses', 26), (' Rental expenses', 22), (' Occupancy expenses', 17), (' Occupancy', 14), ('Rent', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), ('Rent', 25), (' Rental expenses', 24), (' Occupancy expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Rental expenses', 32), (' Administration expenses', 29), ('Rent', 27), (' Occupancy expenses', 27), (' Occupancy', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Administration expenses', 40), (' Rental expenses', 37), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Administration expenses', 44), (' Occupancy expenses', 25), (' Rental expenses', 24), ('Rent', 17), (' Occupancy', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('Rent', 32), (' Administration expenses', 32), (' Rental expenses', 29), (' Occupancy expenses', 15), (' Occupancy', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('Rent', 21), (' Occupancy', 20), (' Administration expenses', 19), (' Rental expenses', 14), (' Occupancy expenses', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Rental expenses', 65), (' Occupancy expenses', 47), (' Administration expenses', 35), ('Rent', 27), (' Occupancy', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 22), (' Occupancy', 21), ('Rent', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Administration expenses', 39), (' Occupancy', 30), ('Rent', 21), (' Rental expenses', 21), (' Occupancy expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 26), (' Occupancy expenses', 20), (' Occupancy', 14), ('Rent', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [(' Administration expenses', 27), (' Rental expenses', 15), ('Rent', 12), (' Occupancy', 12), (' Occupancy expenses', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Administration expenses', 24), (' Rental expenses', 21), (' Occupancy expenses', 16), ('Rent', 13), (' Occupancy', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Rental expenses', 25), (' Occupancy expenses', 21), (' Administration expenses', 17), ('Rent', 12), (' Occupancy', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 22), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Rental expenses', 25), (' Occupancy expenses', 19), (' Administration expenses', 18), ('Rent', 11), (' Occupancy', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 30), (' Occupancy expenses', 24), (' Administration expenses', 19), ('Rent', 16), (' Occupancy', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 36), (' Occupancy expenses', 25), (' Administration expenses', 20), ('Rent', 17), (' Occupancy', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Administration expenses', 26), (' Rental expenses', 22), (' Occupancy expenses', 17), (' Occupancy', 14), ('Rent', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('Other revenue', 40), ('other operating', 29), (' Other income', 28)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('other operating', 50), (' Other income', 40), ('Other revenue', 38)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Other income', 19), ('other operating', 13), ('Other revenue', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Other income', 31), ('other operating', 24), ('Other revenue', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('other operating', 24), ('Other revenue', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('other operating', 29), (' Other income', 21), ('Other revenue', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Other income', 46), ('other operating', 41), ('Other revenue', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Other income', 46), ('other operating', 32), ('Other revenue', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Other income', 33), ('other operating', 29), ('Other revenue', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('other operating', 42), (' Other income', 41), ('Other revenue', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('other operating', 39), ('Other revenue', 26), (' Other income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('Other revenue', 25), ('other operating', 22), (' Other income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('Other revenue', 26), ('other operating', 23), (' Other income', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('Other revenue', 23), ('other operating', 20), (' Other income', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Other income', 38), ('other operating', 35), ('Other revenue', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other operating', 38), (' Other income', 37), ('Other revenue', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('other operating', 24), (' Other income', 24), ('Other revenue', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 1761.0, 'line_item_label': ['Other income'], 'note_numbers': ['6'], 'line_item_value': [1761.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 36), ('Other revenue', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('Other revenue', 40), ('other operating', 29), (' Other income', 28)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('other operating', 50), (' Other income', 40), ('Other revenue', 38)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Other income', 19), ('other operating', 13), ('Other revenue', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Other income', 31), ('other operating', 24), ('Other revenue', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('other operating', 24), ('Other revenue', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('other operating', 29), (' Other income', 21), ('Other revenue', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' Other income', 46), ('other operating', 41), ('Other revenue', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Other income', 46), ('other operating', 32), ('Other revenue', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Other income', 33), ('other operating', 29), ('Other revenue', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('other operating', 42), (' Other income', 41), ('Other revenue', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('other operating', 39), ('Other revenue', 26), (' Other income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('Other revenue', 25), ('other operating', 22), (' Other income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('Other revenue', 26), ('other operating', 23), (' Other income', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('Other revenue', 23), ('other operating', 20), (' Other income', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Other income', 38), ('other operating', 35), ('Other revenue', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other operating', 38), (' Other income', 37), ('Other revenue', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('other operating', 24), (' Other income', 24), ('Other revenue', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 552.0, 'line_item_label': ['Other income'], 'note_numbers': ['6'], 'line_item_value': [552.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Net finance costs', 55), (' Finance income and costs', 46), (' Finance income and finance costs', 39), (' Interest revenue', 36), ('finance income', 33), ('Finance income', 33), ('other income', 28)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Net finance costs', 55), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 34), (' Finance income and finance costs', 33), ('finance income', 15), ('Finance income', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 33), ('finance income', 31), ('Finance income', 31), (' Net finance costs', 29), (' Interest revenue', 23), ('other income', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Finance income and costs', 39), (' Interest revenue', 33), (' Finance income and finance costs', 33), ('other income', 31), ('finance income', 30), ('Finance income', 30), (' Net finance costs', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Finance income and costs', 26), (' Net finance costs', 24), (' Finance income and finance costs', 22), ('other income', 21), ('finance income', 20), ('Finance income', 20), (' Interest revenue', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('other income', 46), (' Net finance costs', 36), (' Finance income and costs', 31), (' Finance income and finance costs', 31), (' Interest revenue', 26), ('finance income', 11), ('Finance income', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Net finance costs', 47), ('other income', 46), (' Finance income and costs', 44), (' Finance income and finance costs', 37), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Net finance costs', 34), ('other income', 33), (' Finance income and costs', 27), (' Interest revenue', 26), (' Finance income and finance costs', 24), ('finance income', 12), ('Finance income', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('other income', 41), (' Finance income and finance costs', 29), (' Interest revenue', 28), (' Finance income and costs', 24), (' Net finance costs', 23), ('finance income', 15), ('Finance income', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Interest revenue', 34), (' Net finance costs', 29), (' Finance income and costs', 26), ('other income', 22), (' Finance income and finance costs', 22), ('finance income', 11), ('Finance income', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Interest revenue', 34), (' Net finance costs', 27), (' Finance income and costs', 25), ('other income', 22), (' Finance income and finance costs', 22), ('finance income', 14), ('Finance income', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Interest revenue', 28), ('other income', 23), (' Finance income and finance costs', 23), ('finance income', 22), ('Finance income', 22), (' Finance income and costs', 22), (' Net finance costs', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Interest revenue', 31), (' Finance income and costs', 28), (' Net finance costs', 28), (' Finance income and finance costs', 26), ('other income', 16), ('finance income', 16), ('Finance income', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 29), (' Interest revenue', 26), ('finance income', 24), ('Finance income', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 41), ('other income', 37), (' Finance income and costs', 34), (' Finance income and finance costs', 31), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Finance income and costs', 40), ('other income', 36), (' Finance income and finance costs', 36), (' Net finance costs', 34), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Net finance costs', 32), (' Finance income and costs', 27), ('other income', 24), (' Finance income and finance costs', 24), (' Interest revenue', 21), ('finance income', 11), ('Finance income', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': 100, 'value': -348.0, 'line_item_label': ['Other income', 'Net finance costs'], 'note_numbers': ['6', '7'], 'line_item_value': [1761.0, -2109.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [(' Net finance costs', 55), (' Finance income and costs', 46), (' Finance income and finance costs', 39), (' Interest revenue', 36), ('finance income', 33), ('Finance income', 33), ('other income', 28)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [(' Net finance costs', 55), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 34), (' Finance income and finance costs', 33), ('finance income', 15), ('Finance income', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 33), ('finance income', 31), ('Finance income', 31), (' Net finance costs', 29), (' Interest revenue', 23), ('other income', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' Finance income and costs', 39), (' Interest revenue', 33), (' Finance income and finance costs', 33), ('other income', 31), ('finance income', 30), ('Finance income', 30), (' Net finance costs', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), (' Finance income and costs', 33), (' Interest revenue', 32), (' Finance income and finance costs', 28), ('finance income', 18), ('Finance income', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' Finance income and costs', 26), (' Net finance costs', 24), (' Finance income and finance costs', 22), ('other income', 21), ('finance income', 20), ('Finance income', 20), (' Interest revenue', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('other income', 46), (' Net finance costs', 36), (' Finance income and costs', 31), (' Finance income and finance costs', 31), (' Interest revenue', 26), ('finance income', 11), ('Finance income', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' Net finance costs', 47), ('other income', 46), (' Finance income and costs', 44), (' Finance income and finance costs', 37), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' Net finance costs', 34), ('other income', 33), (' Finance income and costs', 27), (' Interest revenue', 26), (' Finance income and finance costs', 24), ('finance income', 12), ('Finance income', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('other income', 41), (' Finance income and finance costs', 29), (' Interest revenue', 28), (' Finance income and costs', 24), (' Net finance costs', 23), ('finance income', 15), ('Finance income', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' Interest revenue', 34), (' Net finance costs', 29), (' Finance income and costs', 26), ('other income', 22), (' Finance income and finance costs', 22), ('finance income', 11), ('Finance income', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Interest revenue', 34), (' Net finance costs', 27), (' Finance income and costs', 25), ('other income', 22), (' Finance income and finance costs', 22), ('finance income', 14), ('Finance income', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' Interest revenue', 28), ('other income', 23), (' Finance income and finance costs', 23), ('finance income', 22), ('Finance income', 22), (' Finance income and costs', 22), (' Net finance costs', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' Interest revenue', 31), (' Finance income and costs', 28), (' Net finance costs', 28), (' Finance income and finance costs', 26), ('other income', 16), ('finance income', 16), ('Finance income', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 29), (' Interest revenue', 26), ('finance income', 24), ('Finance income', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 41), ('other income', 37), (' Finance income and costs', 34), (' Finance income and finance costs', 31), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' Finance income and costs', 40), ('other income', 36), (' Finance income and finance costs', 36), (' Net finance costs', 34), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' Net finance costs', 32), (' Finance income and costs', 27), ('other income', 24), (' Finance income and finance costs', 24), (' Interest revenue', 21), ('finance income', 11), ('Finance income', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10], 'score': 100, 'value': -2661.0, 'line_item_label': ['Other income', 'Net finance costs'], 'note_numbers': ['6', '7'], 'line_item_value': [552.0, -3213.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [('interest', 100), (' Interest income', 79), (' Interest income', 79), ('Bank interest', 77), (' Interest received - Bank', 72), (' Interest received - Loan', 72), (' Share of JV interest received/(paid)', 63), (' Sublease interest income', 59), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Bank Deposits - cash and cash equivalents', 28)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Sublease interest income', 74), (' Interest received - Bank', 68), (' Interest received - Loan', 68), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Bank Deposits - cash and cash equivalents', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest received - Loan', 65), (' Interest income', 64), (' Interest income', 64), (' Interest received - Bank', 63), (' Sublease interest income', 59), (' Share of JV interest received/(paid)', 58), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 36)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 68), (' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Sublease interest income', 55), (' Share of JV interest received/(paid)', 50), (' Bank Deposits - cash and cash equivalents', 38)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [('interest', 100), (' Interest income', 79), (' Interest income', 79), ('Bank interest', 77), (' Interest received - Bank', 72), (' Interest received - Loan', 72), (' Share of JV interest received/(paid)', 63), (' Sublease interest income', 59), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Bank Deposits - cash and cash equivalents', 28)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Sublease interest income', 74), (' Interest received - Bank', 68), (' Interest received - Loan', 68), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 52), (' Bank Deposits - cash and cash equivalents', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest received - Loan', 65), (' Interest income', 64), (' Interest income', 64), (' Interest received - Bank', 63), (' Sublease interest income', 59), (' Share of JV interest received/(paid)', 58), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 48), (' Bank Deposits - cash and cash equivalents', 36)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 68), (' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Sublease interest income', 55), (' Share of JV interest received/(paid)', 50), (' Bank Deposits - cash and cash equivalents', 38)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' Interest received - Bank', 67), (' Interest received - Loan', 67), (' Share of JV interest received/(paid)', 67), (' Bank Deposits - cash and cash equivalents', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 67), ('interest', 33), ('Bank interest', 33), (' Interest income', 33), (' Sublease interest income', 33), (' Interest income', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [-1913.0, 41.0, -1341.0, -3213.0, -515.0, 0.0, -1603.0, -2109.0], 'label': ['Net interest Interest expense nan', 'Net interest Interest income nan', 'Net interest Lease liabilities interest expense 14', 'Net interest Total net finance costs nan', 'Net interest Interest expense nan', 'Net interest Interest income nan', 'Net interest Lease liabilities interest expense 14', 'Net interest Total net finance costs nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('finance cost', 55), ('finance costs', 55), (' net finance costs ', 55), (' finance expenses', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('finance cost', 56), ('finance costs', 56), (' net finance costs ', 55), (' finance expenses', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' finance expenses', 58), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('finance cost', 26), ('finance costs', 26), (' net finance costs ', 23), (' finance expenses', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' finance expenses', 22), (' net finance costs ', 21), ('finance cost', 11), ('finance costs', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 30), ('finance cost', 21), ('finance costs', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 22), ('finance costs', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -2109.0, 'line_item_label': ['Net finance costs'], 'note_numbers': ['7'], 'line_item_value': [-2109.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('finance cost', 55), ('finance costs', 55), (' net finance costs ', 55), (' finance expenses', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('finance cost', 56), ('finance costs', 56), (' net finance costs ', 55), (' finance expenses', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' finance expenses', 58), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('finance cost', 26), ('finance costs', 26), (' net finance costs ', 23), (' finance expenses', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' finance expenses', 22), (' net finance costs ', 21), ('finance cost', 11), ('finance costs', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 30), ('finance cost', 21), ('finance costs', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 22), ('finance costs', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -3213.0, 'line_item_label': ['Net finance costs'], 'note_numbers': ['7'], 'line_item_value': [-3213.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Lease interest expense', 90), ('  Other interest expense', 86), (' Interest income', 79), (' Interest on leases', 77), (' Lease liabilities interest expense', 69), (' Interest accrued on loans', 63), (' Interest expense on financial liabilities using the effective interest rate method - other', 59), (' Interest accrued on lease liabilities', 54), ('loan', 50), ('debt', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 50), ('debenture', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 34), ('bank facilities', 31), ('bonds', 25), ('borrowings', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest accrued on loans', 70), (' Lease interest expense', 70), ('  Other interest expense', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 58), (' Interest on bank overdrafts and loans (other than those from related parties)', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('debenture', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 49), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 35), ('bank facilities', 31), ('bonds', 25), ('borrowings', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Interest on leases', 100), (' Lease liabilities interest expense', 100), (' Lease interest expense', 85), (' Interest accrued on lease liabilities', 77), ('  Other interest expense', 76), (' Interest accrued on loans', 68), (' Interest income', 64), ('loan', 50), ('debt', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 48), ('debenture', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 40), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 33), ('bank facilities', 30), ('bonds', 25), ('borrowings', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest accrued on loans', 63), ('Interest expenses', 60), (' Lease interest expense', 60), ('  Other interest expense', 57), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 53), ('loan', 50), ('debt', 50), ('debenture', 50), (' Lease liabilities interest expense', 48), (' Interest accrued on lease liabilities', 46), ('bank facilities', 40), ('cash credit', 38), (' Discount unwind on the provision for asset retirement obligation', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 37), ('bonds', 25), ('borrowings', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Lease interest expense', 90), ('  Other interest expense', 86), (' Interest income', 79), (' Interest on leases', 77), (' Lease liabilities interest expense', 69), (' Interest accrued on loans', 63), (' Interest expense on financial liabilities using the effective interest rate method - other', 59), (' Interest accrued on lease liabilities', 54), ('loan', 50), ('debt', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 50), ('debenture', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 34), ('bank facilities', 31), ('bonds', 25), ('borrowings', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest on leases', 77), ('Interest expenses', 73), (' Interest accrued on loans', 70), (' Lease interest expense', 70), ('  Other interest expense', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 58), (' Interest on bank overdrafts and loans (other than those from related parties)', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('debenture', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 49), (' Interest accrued on lease liabilities', 38), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 35), ('bank facilities', 31), ('bonds', 25), ('borrowings', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Interest on leases', 100), (' Lease liabilities interest expense', 100), (' Lease interest expense', 85), (' Interest accrued on lease liabilities', 77), ('  Other interest expense', 76), (' Interest accrued on loans', 68), (' Interest income', 64), ('loan', 50), ('debt', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 48), ('debenture', 43), (' Interest expense on financial liabilities using the effective interest rate method - other', 40), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 40), ('cash credit', 36), (' Discount unwind on the provision for asset retirement obligation', 33), ('bank facilities', 30), ('bonds', 25), ('borrowings', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [('interest', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest accrued on loans', 63), ('Interest expenses', 60), (' Lease interest expense', 60), ('  Other interest expense', 57), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 53), ('loan', 50), ('debt', 50), ('debenture', 50), (' Lease liabilities interest expense', 48), (' Interest accrued on lease liabilities', 46), ('bank facilities', 40), ('cash credit', 38), (' Discount unwind on the provision for asset retirement obligation', 38), (' Interest on bank overdrafts and loans (other than those from related parties)', 37), ('bonds', 25), ('borrowings', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [('debt', 67), ('debenture', 67), (' Interest expense on financial liabilities using the effective interest rate method - other', 67), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 67), ('bonds', 50), ('cash credit', 33), ('bank facilities', 33), ('interest', 33), ('Interest expenses', 33), (' Discount unwind on the provision for asset retirement obligation', 33), ('  Other interest expense', 33), (' Interest on leases', 33), (' Interest on bank overdrafts and loans (other than those from related parties)', 33), (' Interest accrued on loans', 33), (' Interest accrued on lease liabilities', 33), (' Lease interest expense', 33), (' Interest income', 33), (' Lease liabilities interest expense', 33), ('loan', 0), ('borrowings', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [-1913.0, 41.0, -1341.0, -3213.0, -515.0, 0.0, -1603.0, -2109.0], 'label': ['Net interest Interest expense nan', 'Net interest Interest income nan', 'Net interest Lease liabilities interest expense 14', 'Net interest Total net finance costs nan', 'Net interest Interest expense nan', 'Net interest Interest income nan', 'Net interest Lease liabilities interest expense 14', 'Net interest Total net finance costs nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('finance cost', 55), ('finance costs', 55), (' net finance costs ', 55), (' finance expenses', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('finance cost', 56), ('finance costs', 56), (' net finance costs ', 55), (' finance expenses', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' finance expenses', 58), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('finance cost', 26), ('finance costs', 26), (' net finance costs ', 23), (' finance expenses', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' finance expenses', 22), (' net finance costs ', 21), ('finance cost', 11), ('finance costs', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 30), ('finance cost', 21), ('finance costs', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 22), ('finance costs', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -2109.0, 'line_item_label': ['Net finance costs'], 'note_numbers': ['7'], 'line_item_value': [-2109.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('finance cost', 55), ('finance costs', 55), (' net finance costs ', 55), (' finance expenses', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('finance cost', 56), ('finance costs', 56), (' net finance costs ', 55), (' finance expenses', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' finance expenses', 58), ('finance cost', 28), ('finance costs', 28), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [(' net finance costs ', 47), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('finance cost', 26), ('finance costs', 26), (' net finance costs ', 23), (' finance expenses', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 27), ('finance cost', 25), ('finance costs', 25), (' finance expenses', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [(' finance expenses', 22), (' net finance costs ', 21), ('finance cost', 11), ('finance costs', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [(' net finance costs ', 28), ('finance cost', 23), ('finance costs', 23), (' finance expenses', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 30), ('finance cost', 21), ('finance costs', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 22), ('finance costs', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' net finance costs ', 34), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -3213.0, 'line_item_label': ['Net finance costs'], 'note_numbers': ['7'], 'line_item_value': [-3213.0]}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('other revenue', 50), (' net other foreign exchange (losses)/gains', 50), (' net foreign exchange (loss)/gain', 48), (' net ppe disposal (loss)/gain', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' net (loss)/profit on disposal of non-current assets', 44), ('  government grants', 43), (' foreign exchange gain', 40), (' secondment income (tw recovery)', 38), (' quota lease income', 38), (' profit from discontinued operation', 37), (' other income', 36), (' share of jv income', 36), (' sundry income', 33), (' other miscellaneous - net (loss)/gain', 32), (' paid by customers - at amortised cost', 30), (' commission revenue', 29), (' effective portion of changes in fair value of cash flow', 25), (' japan recoveries', 25), (' dividend from other parties', 22), (' margin charge income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' net of tax', 71), (' quota lease income', 62), (' other', 60), (' sundry income', 58), (' margin charge income', 50), (' commission revenue', 48), (' net other foreign exchange (losses)/gains', 45), (' secondment income (tw recovery)', 43), ('other revenue', 42), ('  government grants', 42), (' net foreign exchange gain', 42), (' foreign exchange gain', 41), (' net foreign exchange gains/(losses)', 40), (' net foreign exchange (loss)/gain', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' profit from discontinued operation', 38), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' dividend from other parties', 31), (' effective portion of changes in fair value of cash flow', 29), (' net ppe disposal (loss)/gain', 25), (' other miscellaneous - net (loss)/gain', 24), (' japan recoveries', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('other revenue', 50), (' quota lease income', 50), (' net ppe disposal (loss)/gain', 46), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 45), (' net foreign exchange gain', 38), (' secondment income (tw recovery)', 38), (' net foreign exchange gains/(losses)', 38), (' net other foreign exchange (losses)/gains', 37), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' foreign exchange gain', 35), (' other miscellaneous - net (loss)/gain', 34), ('  government grants', 33), (' profit from discontinued operation', 33), (' paid by customers - at amortised cost', 33), (' sundry income', 33), (' dividend from other parties', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 28), (' margin charge income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [(' net of tax', 71), (' net foreign exchange (loss)/gain', 62), (' net foreign exchange gain', 56), (' quota lease income', 56), (' net foreign exchange gains/(losses)', 50), (' net other foreign exchange (losses)/gains', 50), (' other miscellaneous - net (loss)/gain', 49), (' net ppe disposal (loss)/gain', 47), (' commission revenue', 45), (' insurance proceeds', 45), (' other income', 45), (' share of jv income', 45), ('other revenue', 42), (' foreign exchange gain', 42), (' paid by customers - at amortised cost', 42), (' sundry income', 42), (' other', 40), (' secondment income (tw recovery)', 38), (' japan recoveries', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' effective portion of changes in fair value of cash flow', 35), (' profit from discontinued operation', 34), ('  government grants', 33), (' margin charge income', 33), (' dividend from other parties', 28)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest expense nan , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('other revenue', 50), (' net other foreign exchange (losses)/gains', 50), (' net foreign exchange (loss)/gain', 48), (' net ppe disposal (loss)/gain', 48), (' net foreign exchange gain', 46), (' insurance proceeds', 45), (' net foreign exchange gains/(losses)', 45), (' net (loss)/profit on disposal of non-current assets', 44), ('  government grants', 43), (' foreign exchange gain', 40), (' secondment income (tw recovery)', 38), (' quota lease income', 38), (' profit from discontinued operation', 37), (' other income', 36), (' share of jv income', 36), (' sundry income', 33), (' other miscellaneous - net (loss)/gain', 32), (' paid by customers - at amortised cost', 30), (' commission revenue', 29), (' effective portion of changes in fair value of cash flow', 25), (' japan recoveries', 25), (' dividend from other parties', 22), (' margin charge income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest interest income nan , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' net of tax', 71), (' quota lease income', 62), (' other', 60), (' sundry income', 58), (' margin charge income', 50), (' commission revenue', 48), (' net other foreign exchange (losses)/gains', 45), (' secondment income (tw recovery)', 43), ('other revenue', 42), ('  government grants', 42), (' net foreign exchange gain', 42), (' foreign exchange gain', 41), (' net foreign exchange gains/(losses)', 40), (' net foreign exchange (loss)/gain', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' profit from discontinued operation', 38), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' dividend from other parties', 31), (' effective portion of changes in fair value of cash flow', 29), (' net ppe disposal (loss)/gain', 25), (' other miscellaneous - net (loss)/gain', 24), (' japan recoveries', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest lease liabilities interest expense 14 , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('other revenue', 50), (' quota lease income', 50), (' net ppe disposal (loss)/gain', 46), (' insurance proceeds', 45), (' net foreign exchange (loss)/gain', 45), (' net foreign exchange gain', 38), (' secondment income (tw recovery)', 38), (' net foreign exchange gains/(losses)', 38), (' net other foreign exchange (losses)/gains', 37), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' foreign exchange gain', 35), (' other miscellaneous - net (loss)/gain', 34), ('  government grants', 33), (' profit from discontinued operation', 33), (' paid by customers - at amortised cost', 33), (' sundry income', 33), (' dividend from other parties', 32), (' net (loss)/profit on disposal of non-current assets', 31), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 28), (' margin charge income', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = net interest total net finance costs nan , res_fuzz_match = [(' net of tax', 71), (' net foreign exchange (loss)/gain', 62), (' net foreign exchange gain', 56), (' quota lease income', 56), (' net foreign exchange gains/(losses)', 50), (' net other foreign exchange (losses)/gains', 50), (' other miscellaneous - net (loss)/gain', 49), (' net ppe disposal (loss)/gain', 47), (' commission revenue', 45), (' insurance proceeds', 45), (' other income', 45), (' share of jv income', 45), ('other revenue', 42), (' foreign exchange gain', 42), (' paid by customers - at amortised cost', 42), (' sundry income', 42), (' other', 40), (' secondment income (tw recovery)', 38), (' japan recoveries', 36), (' net (loss)/profit on disposal of non-current assets', 36), (' effective portion of changes in fair value of cash flow', 35), (' profit from discontinued operation', 34), ('  government grants', 33), (' margin charge income', 33), (' dividend from other parties', 28)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_rows = 31 dec $000 , res_fuzz_match = [(' foreign exchange gain', 67), (' dividend from other parties', 67), (' net foreign exchange gain', 67), (' effective portion of changes in fair value of cash flow', 67), (' secondment income (tw recovery)', 67), (' japan recoveries', 67), (' net foreign exchange gains/(losses)', 67), (' paid by customers - at amortised cost', 67), (' net foreign exchange (loss)/gain', 67), (' net other foreign exchange (losses)/gains', 67), (' insurance proceeds', 40), ('other revenue', 33), (' commission revenue', 33), ('  government grants', 33), (' other', 33), (' other income', 33), (' profit from discontinued operation', 33), (' net of tax', 33), (' share of jv income', 33), (' margin charge income', 33), (' net ppe disposal (loss)/gain', 33), (' other miscellaneous - net (loss)/gain', 33), (' quota lease income', 33), (' sundry income', 33), (' net (loss)/profit on disposal of non-current assets', 33)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('NULL', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('NULL', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('NULL', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('NULL', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('NULL', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('NULL', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('NULL', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('NULL', 6)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('NULL', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 4)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('NULL', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('NULL', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('NULL', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('NULL', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('NULL', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('NULL', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('NULL', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('NULL', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('NULL', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('NULL', 6)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('NULL', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 4)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('NULL', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('NULL', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('prior year ', 29), (' income tax expense', 29), (' income tax benefit', 29), ('current tax', 28), ('minimum alternate tax credit entitlement', 28), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 22), (' income tax', 22), (' tax (expense)/benefit', 22), ('earlier year', 20), ('provision for taxation previous year', 13), ('deferred tax', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('prior year ', 33), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('earlier year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('deferred tax', 17), (' income tax benefit/(expense)', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('minimum alternate tax credit entitlement', 31), ('deferred tax', 28), (' income tax expense', 28), (' income tax benefit', 27), ('current tax', 26), (' tax (expense)/benefit', 26), ('earlier year', 25), ('provision for taxation previous year', 24), (' income tax benefit/(expense)', 23), ('amount transferred to retained earnings', 21), (' income tax', 21), ('prior year ', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('current tax', 38), (' income tax', 33), ('earlier year', 30), ('deferred tax', 25), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), ('prior year ', 24), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 21), ('minimum alternate tax credit entitlement', 13), (' income tax expense', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax', 42), ('amount transferred to retained earnings', 38), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 18), ('deferred tax', 17), (' income tax benefit/(expense)', 15), ('earlier year', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' income tax expense', 65), (' income tax benefit', 63), (' tax (expense)/benefit', 61), (' income tax benefit/(expense)', 52), ('current tax', 48), ('deferred tax', 44), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), ('prior year ', 29), ('provision for taxation previous year', 26), ('amount transferred to retained earnings', 22), ('earlier year', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' income tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 35), ('deferred tax', 30), ('provision for taxation previous year', 30), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), ('earlier year', 28), (' income tax benefit', 20), (' tax (expense)/benefit', 19), ('prior year ', 18), (' income tax benefit/(expense)', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('amount transferred to retained earnings', 38), ('current tax', 31), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit/(expense)', 26), ('deferred tax', 25), (' income tax', 25), ('earlier year', 22), ('prior year ', 16), (' income tax expense', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('current tax', 37), ('amount transferred to retained earnings', 37), (' income tax benefit', 36), ('deferred tax', 34), ('minimum alternate tax credit entitlement', 34), (' income tax', 34), ('provision for taxation previous year', 33), (' income tax expense', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('prior year ', 21), ('earlier year', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('provision for taxation previous year', 49), ('prior year ', 42), ('minimum alternate tax credit entitlement', 37), ('current tax', 36), (' tax (expense)/benefit', 35), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('earlier year', 30), ('deferred tax', 27), (' income tax', 27), ('amount transferred to retained earnings', 25), (' income tax expense', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('earlier year', 37), ('provision for taxation previous year', 33), ('prior year ', 33), (' income tax benefit', 33), ('deferred tax', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 27), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 23), ('current tax', 22), (' income tax expense', 14), (' income tax', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 33), (' tax (expense)/benefit', 32), ('amount transferred to retained earnings', 31), (' income tax benefit', 30), ('earlier year', 29), (' income tax benefit/(expense)', 29), (' income tax expense', 27), ('prior year ', 26), ('deferred tax', 23), ('current tax', 22), (' income tax', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('provision for taxation previous year', 37), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), ('deferred tax', 27), (' tax (expense)/benefit', 27), ('earlier year', 26), (' income tax', 24), (' income tax benefit/(expense)', 24), ('current tax', 23), (' income tax expense', 21), (' income tax benefit', 20), ('prior year ', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('provision for taxation previous year', 35), ('minimum alternate tax credit entitlement', 32), (' tax (expense)/benefit', 29), (' income tax benefit', 27), (' income tax benefit/(expense)', 27), ('earlier year', 26), (' income tax expense', 24), ('current tax', 23), ('amount transferred to retained earnings', 21), ('deferred tax', 20), ('prior year ', 17), (' income tax', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' income tax expense', 44), (' income tax benefit', 41), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), ('earlier year', 37), ('prior year ', 32), (' income tax', 32), ('current tax', 31), ('deferred tax', 29), (' tax (expense)/benefit', 25), ('amount transferred to retained earnings', 22), ('minimum alternate tax credit entitlement', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' income tax expense', 47), (' income tax benefit', 43), ('provision for taxation previous year', 42), (' income tax benefit/(expense)', 42), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('prior year ', 34), ('current tax', 33), ('earlier year', 29), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 43), (' income tax benefit', 43), ('minimum alternate tax credit entitlement', 42), ('provision for taxation previous year', 38), ('prior year ', 33), (' tax (expense)/benefit', 32), (' income tax', 30), ('earlier year', 29), ('current tax', 25), ('deferred tax', 23), ('amount transferred to retained earnings', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('provision for taxation previous year', 31), (' income tax benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), ('deferred tax', 19), ('current tax', 18), (' income tax expense', 15), ('prior year ', 12), (' income tax', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('current tax', 35), (' income tax benefit', 34), (' tax (expense)/benefit', 33), ('provision for taxation previous year', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 19), ('prior year ', 18), (' income tax expense', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), ('prior year ', 25), ('provision for taxation previous year', 23), ('earlier year', 22), ('amount transferred to retained earnings', 18), (' income tax benefit', 17), (' tax (expense)/benefit', 17), (' income tax', 13), (' income tax benefit/(expense)', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('prior year ', 29), (' income tax expense', 29), (' income tax benefit', 29), ('current tax', 28), ('minimum alternate tax credit entitlement', 28), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 22), (' income tax', 22), (' tax (expense)/benefit', 22), ('earlier year', 20), ('provision for taxation previous year', 13), ('deferred tax', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('prior year ', 33), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('earlier year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('deferred tax', 17), (' income tax benefit/(expense)', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('minimum alternate tax credit entitlement', 31), ('deferred tax', 28), (' income tax expense', 28), (' income tax benefit', 27), ('current tax', 26), (' tax (expense)/benefit', 26), ('earlier year', 25), ('provision for taxation previous year', 24), (' income tax benefit/(expense)', 23), ('amount transferred to retained earnings', 21), (' income tax', 21), ('prior year ', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('current tax', 38), (' income tax', 33), ('earlier year', 30), ('deferred tax', 25), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), ('prior year ', 24), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 21), ('minimum alternate tax credit entitlement', 13), (' income tax expense', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('earlier year', 35), ('deferred tax', 32), (' income tax', 32), ('provision for taxation previous year', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit', 26), ('prior year ', 25), (' income tax benefit/(expense)', 22), ('minimum alternate tax credit entitlement', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax', 42), ('amount transferred to retained earnings', 38), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax benefit', 19), (' tax (expense)/benefit', 18), ('deferred tax', 17), (' income tax benefit/(expense)', 15), ('earlier year', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [(' income tax expense', 65), (' income tax benefit', 63), (' tax (expense)/benefit', 61), (' income tax benefit/(expense)', 52), ('current tax', 48), ('deferred tax', 44), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), ('prior year ', 29), ('provision for taxation previous year', 26), ('amount transferred to retained earnings', 22), ('earlier year', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [(' income tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 35), ('deferred tax', 30), ('provision for taxation previous year', 30), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), ('earlier year', 28), (' income tax benefit', 20), (' tax (expense)/benefit', 19), ('prior year ', 18), (' income tax benefit/(expense)', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('amount transferred to retained earnings', 38), ('current tax', 31), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit/(expense)', 26), ('deferred tax', 25), (' income tax', 25), ('earlier year', 22), ('prior year ', 16), (' income tax expense', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('current tax', 37), ('amount transferred to retained earnings', 37), (' income tax benefit', 36), ('deferred tax', 34), ('minimum alternate tax credit entitlement', 34), (' income tax', 34), ('provision for taxation previous year', 33), (' income tax expense', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('prior year ', 21), ('earlier year', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('provision for taxation previous year', 49), ('prior year ', 42), ('minimum alternate tax credit entitlement', 37), ('current tax', 36), (' tax (expense)/benefit', 35), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('earlier year', 30), ('deferred tax', 27), (' income tax', 27), ('amount transferred to retained earnings', 25), (' income tax expense', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('earlier year', 37), ('provision for taxation previous year', 33), ('prior year ', 33), (' income tax benefit', 33), ('deferred tax', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 27), (' income tax benefit/(expense)', 24), ('amount transferred to retained earnings', 23), ('current tax', 22), (' income tax expense', 14), (' income tax', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 33), (' tax (expense)/benefit', 32), ('amount transferred to retained earnings', 31), (' income tax benefit', 30), ('earlier year', 29), (' income tax benefit/(expense)', 29), (' income tax expense', 27), ('prior year ', 26), ('deferred tax', 23), ('current tax', 22), (' income tax', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('provision for taxation previous year', 37), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 32), ('deferred tax', 27), (' tax (expense)/benefit', 27), ('earlier year', 26), (' income tax', 24), (' income tax benefit/(expense)', 24), ('current tax', 23), (' income tax expense', 21), (' income tax benefit', 20), ('prior year ', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('provision for taxation previous year', 35), ('minimum alternate tax credit entitlement', 32), (' tax (expense)/benefit', 29), (' income tax benefit', 27), (' income tax benefit/(expense)', 27), ('earlier year', 26), (' income tax expense', 24), ('current tax', 23), ('amount transferred to retained earnings', 21), ('deferred tax', 20), ('prior year ', 17), (' income tax', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [(' income tax expense', 44), (' income tax benefit', 41), ('provision for taxation previous year', 39), (' income tax benefit/(expense)', 39), ('earlier year', 37), ('prior year ', 32), (' income tax', 32), ('current tax', 31), ('deferred tax', 29), (' tax (expense)/benefit', 25), ('amount transferred to retained earnings', 22), ('minimum alternate tax credit entitlement', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' income tax expense', 47), (' income tax benefit', 43), ('provision for taxation previous year', 42), (' income tax benefit/(expense)', 42), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('prior year ', 34), ('current tax', 33), ('earlier year', 29), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 23)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 47), (' income tax expense', 43), (' income tax benefit', 43), ('minimum alternate tax credit entitlement', 42), ('provision for taxation previous year', 38), ('prior year ', 33), (' tax (expense)/benefit', 32), (' income tax', 30), ('earlier year', 29), ('current tax', 25), ('deferred tax', 23), ('amount transferred to retained earnings', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('provision for taxation previous year', 31), (' income tax benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), ('deferred tax', 19), ('current tax', 18), (' income tax expense', 15), ('prior year ', 12), (' income tax', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('prior period', 20), ('exceptional', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('prior period', 25), ('exceptional', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('prior period', 22), ('exceptional', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 19), ('prior period', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('exceptional', 33), ('prior period', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('prior period', 39), ('exceptional', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('prior period', 22), ('exceptional', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('prior period', 32), ('exceptional', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('prior period', 40), ('exceptional', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('prior period', 26), ('exceptional', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('prior period', 23), ('exceptional', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 18), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('exceptional', 21), ('prior period', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 25), ('exceptional', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('prior period', 20), ('exceptional', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('prior period', 25), ('exceptional', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('prior period', 22), ('exceptional', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 19), ('prior period', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('exceptional', 33), ('prior period', 27)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('prior period', 39), ('exceptional', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('prior period', 22), ('exceptional', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('prior period', 32), ('exceptional', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('prior period', 40), ('exceptional', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('prior period', 26), ('exceptional', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('prior period', 23), ('exceptional', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('prior period', 17), ('exceptional', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 18), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('prior period', 25), ('exceptional', 16)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('exceptional', 21), ('prior period', 17)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-18 11:10:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-18 11:10:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('NULL', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('NULL', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('NULL', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('NULL', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('NULL', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('NULL', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('NULL', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('NULL', 6)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('NULL', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 4)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('NULL', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('NULL', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-18 11:10:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-18 11:10:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = cost of inventorysold , res_fuzz_match = [('NULL', 18)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = personnel costs , res_fuzz_match = [('NULL', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = logistics and distribution , res_fuzz_match = [('NULL', 25)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = sales and marketing , res_fuzz_match = [('NULL', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = result from operating activities , res_fuzz_match = [('NULL', 15)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = tax (expense)benefit , res_fuzz_match = [('NULL', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from continuing operations , res_fuzz_match = [('NULL', 14)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = discontinued operations , res_fuzz_match = [('NULL', 21)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit from discontinued operations, net toftax , res_fuzz_match = [('NULL', 10)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to: , res_fuzz_match = [('NULL', 6)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equity holders of spicers limited , res_fuzz_match = [('NULL', 20)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive income: , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 4)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = exchange differences on translation of overseas subsidiaries , res_fuzz_match = [('NULL', 13)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total items that may be reclassified subsequently to profit or loss , res_fuzz_match = [('NULL', 7)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = other comprehensive (loss)income for the year, net of tax , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year attributable to: , res_fuzz_match = [('NULL', 8)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - txt_particular = equityholders of spicers limited , res_fuzz_match = [('NULL', 22)]
2023-07-18 11:10:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

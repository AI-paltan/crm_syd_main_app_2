2023-07-28 12:34:35+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-07-28 12:34:35+0530 - sLogger - DEBUG - {'fileid': 'bb105f80-474f-4e42-a702-b1f1aa36cbe3', 'filename': 'General Purpose Financial Report 31 March 2023_ISUZU AUSTRALIA LIMITED.pdf', 'filepath': '/home/jayesh/mgs_ai/crm_syd_1/CRM_SYD_main_app_2/classification/../FILE_DB/FILES/General Purpose Financial Report 31 March 2023_ISUZU AUSTRALIA LIMITED.pdf', 'status': 'Processing'}
2023-07-28 12:34:35+0530 - sLogger - DEBUG - save file completed
2023-07-28 12:34:35+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-07-28 12:34:35+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-07-28 12:34:35+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-07-28 12:34:35+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-07-28 12:34:35+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-07-28 12:34:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:34:35+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:34:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:34:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:34:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:34:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:34:36+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:34:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:34:36+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:34:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:34:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:34:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:34:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:34:39+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:34:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:34:39+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:34:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:34:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:34:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:34:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:34:45+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:34:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:34:45+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:34:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:34:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:34:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:34:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:34:52+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:34:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:34:52+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:34:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:34:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:34:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:34:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:34:55+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:34:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:34:55+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:02+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:02+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:09+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:09+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:13+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:13+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:16+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:16+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:19+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:19+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:23+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:23+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:26+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:26+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:30+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:30+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:37+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:37+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:45+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:46+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:35:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:35:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:35:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:35:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:35:54+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:35:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:35:54+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:01+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:01+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:09+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:09+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:17+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:17+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:26+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:26+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:34+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:34+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:39+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:39+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:42+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:42+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:47+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:47+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:50+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:50+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:54+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:54+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:36:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:36:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:36:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:36:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:36:58+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:36:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:36:58+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:01+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:37:01+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:04+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:37:04+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:06+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:37:06+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:09+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:37:09+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:13+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:37:13+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:18+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:37:18+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:23+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:37:23+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:27+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:37:27+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:37:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:37:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:37:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:37:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:37:29+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:37:29+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-07-28 12:37:29+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [10, 31], 'predicted_cpl_pages': [9, 23], 'predicted_ccf_pages': [12, 34], 'filtered_cbs_pages': [10], 'filtered_cpl_pages': [9], 'filtered_ccf_pages': [12], 'month': 'march', 'status': 'Page Classification Completed'}
2023-07-28 12:37:29+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-07-28 12:37:29+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-07-28 12:37:29+0530 - sLogger - DEBUG - process file completed
2023-07-28 12:37:29+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-07-28 12:38:21+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-07-28 12:38:21+0530 - sLogger - DEBUG - TE process file started
2023-07-28 12:39:09+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-07-28 12:39:09+0530 - sLogger - DEBUG - TE process file started
2023-07-28 12:46:24+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-07-28 12:46:24+0530 - sLogger - DEBUG - TE process file started
2023-07-28 12:47:11+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-28 12:47:11+0530 - sLogger - DEBUG - process_main_pages started
2023-07-28 12:47:11+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 12:47:11+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 12:47:11+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 12:47:12+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 12:47:12+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 12:47:12+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-07-28 12:47:12+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-07-28 12:47:12+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 12:47:12+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 12:47:12+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 12:47:12+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 12:47:12+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-28 12:47:12+0530 - sLogger - DEBUG - set_section_details started
2023-07-28 12:47:12+0530 - sLogger - DEBUG - Total Equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-28 12:47:12+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-28 12:47:12+0530 - sLogger - DEBUG - set_section_details started
2023-07-28 12:47:12+0530 - sLogger - DEBUG - Total Equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-28 12:47:12+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-28 12:47:12+0530 - sLogger - DEBUG - set_section_details started
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating Activities | changes in operating assets and liabilities
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | adiustments for movements in working capital
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest and other costs of finance paid | operating profit before changes in assets and liabilities
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refunded | adjustments for increase decrease in operating assets
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | adjustments for increase decrease in operating liabilities
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing Activities | movements in working capital
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for plant and equipment | adiustments for movements in working capital
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment forintangible assets (Note 13) | operating profit before changes in assets and liabilities
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | operating cash flow before working capital changes
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing Activities | changes in working capital
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of principal portion of lease liabilities | operating profit before changes in assets and liabilities
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of dividends | adiustments for movements in working capital
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net decreasellncrease in Cash and Cash Equivalents | adjustments for increase decrease in operating liabilities
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the beginning ofthe | adjustments for increase decrease in operating liabilities
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- year | changes in working capital
2023-07-28 12:47:12+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the endofthe year | changes in operating assets and liabilities
2023-07-28 12:47:13+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-28 12:47:13+0530 - sLogger - ERROR - error occured: 'year'
2023-07-28 12:47:13+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-28 12:47:13+0530 - sLogger - ERROR - error occured: 'year'
2023-07-28 12:47:14+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-28 12:47:37+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-28 12:47:37+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 46), ('from trading business', 38), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25), ('transmission and distribution business', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), (' Sale of coal', 29), ('sale of products', 17), ('net sales', 10), ('transmission and distribution business', 10), ('from trading business', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('net sales', 53), (' Sales revenue', 48), ('sale of products', 47), ('transmission and distribution business', 40), (' Sale of coal', 39), ('revenue from operations', 32), ('from trading business', 32), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' Revenue', 21)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 30), ('net sales', 24), ('transmission and distribution business', 23), ('from trading business', 21), (' Sales revenue', 19), ('revenue from operations', 18), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 30), ('transmission and distribution business', 28), ('revenue from operations', 27), ('net sales', 17), ('sale of products', 16), (' Sales revenue', 13), (' Sale of coal', 10), (' Revenue', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 30), ('transmission and distribution business', 28), ('revenue from operations', 27), ('net sales', 17), ('sale of products', 16), (' Sales revenue', 13), (' Sale of coal', 10), (' Revenue', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 31), ('revenue from operations', 27), ('sale of products', 23), ('transmission and distribution business', 23), (' Sales revenue', 23), ('net sales', 17), (' Revenue', 14), (' Sale of coal', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Revenue', 20), (' Sale of coal', 15), (' Sales revenue', 13), ('sale of products', 12), ('transmission and distribution business', 12), ('from trading business', 11), ('revenue from operations', 10), ('revenue from contracts with customers', 6), ('Revenue from contract with customers', 6)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1033845.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['4'], 'line_item_value': [1033845.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 46), ('from trading business', 38), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25), ('transmission and distribution business', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('sale of products', 33), ('from trading business', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 19), (' Sales revenue', 17), ('transmission and distribution business', 15), (' Revenue', 11), ('net sales', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), (' Sale of coal', 29), ('sale of products', 17), ('net sales', 10), ('transmission and distribution business', 10), ('from trading business', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 21), ('transmission and distribution business', 21), (' Revenue', 12), ('sale of products', 9), (' Sales revenue', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('net sales', 53), (' Sales revenue', 48), ('sale of products', 47), ('transmission and distribution business', 40), (' Sale of coal', 39), ('revenue from operations', 32), ('from trading business', 32), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' Revenue', 21)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 37), (' Revenue', 36), ('revenue from operations', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 24), ('sale of products', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('net sales', 33), ('transmission and distribution business', 27), ('revenue from operations', 25), (' Sales revenue', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('sale of products', 39), ('from trading business', 35), ('revenue from operations', 34), (' Sales revenue', 27), ('transmission and distribution business', 26), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('from trading business', 38), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), (' Sale of coal', 26), ('transmission and distribution business', 16), ('net sales', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 30), ('net sales', 24), ('transmission and distribution business', 23), ('from trading business', 21), (' Sales revenue', 19), ('revenue from operations', 18), (' Sale of coal', 16), (' Revenue', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 30), ('transmission and distribution business', 28), ('revenue from operations', 27), ('net sales', 17), ('sale of products', 16), (' Sales revenue', 13), (' Sale of coal', 10), (' Revenue', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 30), ('transmission and distribution business', 28), ('revenue from operations', 27), ('net sales', 17), ('sale of products', 16), (' Sales revenue', 13), (' Sale of coal', 10), (' Revenue', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 31), ('revenue from operations', 27), ('sale of products', 23), ('transmission and distribution business', 23), (' Sales revenue', 23), ('net sales', 17), (' Revenue', 14), (' Sale of coal', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Revenue', 20), (' Sale of coal', 15), (' Sales revenue', 13), ('sale of products', 12), ('transmission and distribution business', 12), ('from trading business', 11), ('revenue from operations', 10), ('revenue from contracts with customers', 6), ('Revenue from contract with customers', 6)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('sale of products', 38), ('from trading business', 36), (' Sales revenue', 35), ('revenue from operations', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20), ('transmission and distribution business', 19)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1267172.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['4'], 'line_item_value': [1267172.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = major products or services sale of vehicles , res_fuzz_match = [('Sale of goods', 56), (' Sale of goods - Cars', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Marine', 46), (' Total Revenue', 42), (' Sale of goods - Spareparts', 40), (' Gas transportation income', 39), (' Feed gas income', 35), (' LNG', 33), (' Goods sold to customer direct from supplier', 31), (' Goods sold to customer from warehouse', 30), (' Condensate', 29), (' Domgas', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = major products or services sale of parts , res_fuzz_match = [(' Sale of goods - Cars', 64), (' Sale of goods - Spareparts', 64), (' Sale of goods - Marine', 58), ('Sale of goods', 56), (' Sale of goods - Motorcycles', 43), (' Total Revenue', 40), (' Gas transportation income', 39), (' LNG', 33), (' Goods sold to customer direct from supplier', 33), (' Goods sold to customer from warehouse', 31), (' Condensate', 29), (' Feed gas income', 29), (' Domgas', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = major products or services after-sales services , res_fuzz_match = [(' Sale of goods - Marine', 48), (' Total Revenue', 45), ('Sale of goods', 44), (' Sale of goods - Cars', 43), (' Sale of goods - Motorcycles', 41), (' Sale of goods - Spareparts', 41), (' Gas transportation income', 39), (' LNG', 33), (' Feed gas income', 31), (' Goods sold to customer direct from supplier', 31), (' Goods sold to customer from warehouse', 30), (' Condensate', 29), (' Domgas', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = major products or services total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Gas transportation income', 50), (' Goods sold to customer direct from supplier', 46), ('Sale of goods', 44), (' Condensate', 43), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Motorcycles', 37), (' LNG', 33), (' Sale of goods - Spareparts', 32)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services at a point in time , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Total Revenue', 42), (' Goods sold to customer from warehouse', 41), (' Domgas', 40), (' Goods sold to customer direct from supplier', 39), (' Feed gas income', 38), (' LNG', 33)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services over time , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Total Revenue', 42), (' Goods sold to customer from warehouse', 42), (' Domgas', 40), (' LNG', 33), (' Goods sold to customer direct from supplier', 33)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), ('Sale of goods', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Goods sold to customer direct from supplier', 51), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services (b) contract balances , res_fuzz_match = [('Sale of goods', 67), (' LNG', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Total Revenue', 42), (' Goods sold to customer direct from supplier', 42), (' Domgas', 40), (' Feed gas income', 38), (' Goods sold to customer from warehouse', 37)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services total , res_fuzz_match = [('Sale of goods', 67), (' Total Revenue', 59), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' LNG', 50), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Goods sold to customer from warehouse', 41), (' Domgas', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 26)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services trade receivables , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Total Revenue', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Domgas', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), (' Goods sold to customer from warehouse', 36), (' LNG', 33)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities deferred revenue from service and extended warranty contracts , res_fuzz_match = [(' Total Revenue', 58), (' Gas transportation income', 44), (' Condensate', 43), (' Goods sold to customer direct from supplier', 43), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 37), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Motorcycles', 33), (' Sale of goods - Cars', 31)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities total , res_fuzz_match = [(' Total Revenue', 59), (' Condensate', 43), (' Domgas', 40), (' Gas transportation income', 39), ('Sale of goods', 33), (' LNG', 33), (' Goods sold to customer direct from supplier', 33), (' Feed gas income', 31), (' Sale of goods - Cars', 25), (' Sale of goods - Marine', 22), (' Goods sold to customer from warehouse', 20), (' Sale of goods - Motorcycles', 18), (' Sale of goods - Spareparts', 18)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities current , res_fuzz_match = [(' Total Revenue', 50), (' Condensate', 43), (' Domgas', 40), (' Gas transportation income', 39), (' Sale of goods - Spareparts', 39), (' Sale of goods - Cars', 38), (' Goods sold to customer from warehouse', 35), (' Goods sold to customer direct from supplier', 35), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Marine', 27), (' Sale of goods - Motorcycles', 25), (' Feed gas income', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities non-current , res_fuzz_match = [(' Sale of goods - Cars', 48), ('Sale of goods', 44), (' Gas transportation income', 44), (' Condensate', 43), (' Total Revenue', 42), (' Domgas', 40), (' Sale of goods - Spareparts', 39), (' Feed gas income', 38), (' Sale of goods - Marine', 37), (' Goods sold to customer from warehouse', 35), (' Goods sold to customer direct from supplier', 35), (' LNG', 33), (' Sale of goods - Motorcycles', 32)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities total contract liabilities , res_fuzz_match = [(' Total Revenue', 58), ('Sale of goods', 44), (' Gas transportation income', 44), (' Condensate', 43), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Sale of goods - Cars', 38), (' LNG', 33), (' Sale of goods - Motorcycles', 32), (' Sale of goods - Spareparts', 32), (' Goods sold to customer from warehouse', 27), (' Goods sold to customer direct from supplier', 24), (' Feed gas income', 23)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = major products or services sale of vehicles , res_fuzz_match = [('Sale of goods', 56), (' Sale of goods - Cars', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Marine', 46), (' Total Revenue', 42), (' Sale of goods - Spareparts', 40), (' Gas transportation income', 39), (' Feed gas income', 35), (' LNG', 33), (' Goods sold to customer direct from supplier', 31), (' Goods sold to customer from warehouse', 30), (' Condensate', 29), (' Domgas', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = major products or services sale of parts , res_fuzz_match = [(' Sale of goods - Cars', 64), (' Sale of goods - Spareparts', 64), (' Sale of goods - Marine', 58), ('Sale of goods', 56), (' Sale of goods - Motorcycles', 43), (' Total Revenue', 40), (' Gas transportation income', 39), (' LNG', 33), (' Goods sold to customer direct from supplier', 33), (' Goods sold to customer from warehouse', 31), (' Condensate', 29), (' Feed gas income', 29), (' Domgas', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = major products or services after-sales services , res_fuzz_match = [(' Sale of goods - Marine', 48), (' Total Revenue', 45), ('Sale of goods', 44), (' Sale of goods - Cars', 43), (' Sale of goods - Motorcycles', 41), (' Sale of goods - Spareparts', 41), (' Gas transportation income', 39), (' LNG', 33), (' Feed gas income', 31), (' Goods sold to customer direct from supplier', 31), (' Goods sold to customer from warehouse', 30), (' Condensate', 29), (' Domgas', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = major products or services total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Gas transportation income', 50), (' Goods sold to customer direct from supplier', 46), ('Sale of goods', 44), (' Condensate', 43), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Motorcycles', 37), (' LNG', 33), (' Sale of goods - Spareparts', 32)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services at a point in time , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Total Revenue', 42), (' Goods sold to customer from warehouse', 41), (' Domgas', 40), (' Goods sold to customer direct from supplier', 39), (' Feed gas income', 38), (' LNG', 33)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services over time , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Total Revenue', 42), (' Goods sold to customer from warehouse', 42), (' Domgas', 40), (' LNG', 33), (' Goods sold to customer direct from supplier', 33)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), ('Sale of goods', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Goods sold to customer direct from supplier', 51), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services (b) contract balances , res_fuzz_match = [('Sale of goods', 67), (' LNG', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Total Revenue', 42), (' Goods sold to customer direct from supplier', 42), (' Domgas', 40), (' Feed gas income', 38), (' Goods sold to customer from warehouse', 37)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services total , res_fuzz_match = [('Sale of goods', 67), (' Total Revenue', 59), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' LNG', 50), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Goods sold to customer from warehouse', 41), (' Domgas', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 26)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = timing oftransfer ofgoods o1 services trade receivables , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Total Revenue', 50), (' Sale of goods - Spareparts', 47), (' Condensate', 43), (' Domgas', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), (' Goods sold to customer from warehouse', 36), (' LNG', 33)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities deferred revenue from service and extended warranty contracts , res_fuzz_match = [(' Total Revenue', 58), (' Gas transportation income', 44), (' Condensate', 43), (' Goods sold to customer direct from supplier', 43), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 37), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Motorcycles', 33), (' Sale of goods - Cars', 31)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities total , res_fuzz_match = [(' Total Revenue', 59), (' Condensate', 43), (' Domgas', 40), (' Gas transportation income', 39), ('Sale of goods', 33), (' LNG', 33), (' Goods sold to customer direct from supplier', 33), (' Feed gas income', 31), (' Sale of goods - Cars', 25), (' Sale of goods - Marine', 22), (' Goods sold to customer from warehouse', 20), (' Sale of goods - Motorcycles', 18), (' Sale of goods - Spareparts', 18)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities current , res_fuzz_match = [(' Total Revenue', 50), (' Condensate', 43), (' Domgas', 40), (' Gas transportation income', 39), (' Sale of goods - Spareparts', 39), (' Sale of goods - Cars', 38), (' Goods sold to customer from warehouse', 35), (' Goods sold to customer direct from supplier', 35), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Marine', 27), (' Sale of goods - Motorcycles', 25), (' Feed gas income', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities non-current , res_fuzz_match = [(' Sale of goods - Cars', 48), ('Sale of goods', 44), (' Gas transportation income', 44), (' Condensate', 43), (' Total Revenue', 42), (' Domgas', 40), (' Sale of goods - Spareparts', 39), (' Feed gas income', 38), (' Sale of goods - Marine', 37), (' Goods sold to customer from warehouse', 35), (' Goods sold to customer direct from supplier', 35), (' LNG', 33), (' Sale of goods - Motorcycles', 32)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows = contract liabilities total contract liabilities , res_fuzz_match = [(' Total Revenue', 58), ('Sale of goods', 44), (' Gas transportation income', 44), (' Condensate', 43), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Sale of goods - Cars', 38), (' LNG', 33), (' Sale of goods - Motorcycles', 32), (' Sale of goods - Spareparts', 32), (' Goods sold to customer from warehouse', 27), (' Goods sold to customer direct from supplier', 24), (' Feed gas income', 23)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6, 18, 21], 'score': [100, 100, 100, 100], 'value': [1267172.0, 1267172.0, 1033845.0, 1033845.0], 'label': ['Major products or services Total revenue from contracts with customers', 'Timing oftransfer ofgoods o1 services Total revenue from contracts with customers', 'Major products or services Total revenue from contracts with customers', 'Timing oftransfer ofgoods o1 services Total revenue from contracts with customers'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 24), ('expenditure', 24), ('total expenses', 23), ('total expenditure', 21), ('expense', 16)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Cost of product sold', 54), (' Personnel costs', 52), (' Cost of inventory sold', 43), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 15), ('purchase of stock-in-trade', 6)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('cost of sales', 45), ('Cost of sales', 45), ('expense', 43), (' cost of coal sold', 39), ('expenditure', 38), (' Cost of goods and services sold', 38), (' Cost of product sold', 36), ('purchase of stock-in-trade', 24), (' Personnel costs', 22), (' Cost of inventory sold', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 30), (' Personnel costs', 29), ('cost of sales', 28), ('Cost of sales', 28), ('total expenses', 26), ('total expenditure', 25), (' cost of coal sold', 25), ('purchase of stock-in-trade', 23), ('expense', 17), ('expenditure', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 32), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' cost of coal sold', 28), ('total expenses', 25), ('total expenditure', 24), (' Cost of product sold', 24), (' Personnel costs', 22), ('cost of sales', 20), ('Cost of sales', 20), ('expenditure', 16), ('expense', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 32), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' cost of coal sold', 28), ('total expenses', 25), ('total expenditure', 24), (' Cost of product sold', 24), (' Personnel costs', 22), ('cost of sales', 20), ('Cost of sales', 20), ('expenditure', 16), ('expense', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' Cost of inventory sold', 38), ('purchase of stock-in-trade', 32), ('total expenses', 29), (' Cost of goods and services sold', 29), (' cost of coal sold', 28), ('total expenditure', 27), (' Personnel costs', 22), (' Cost of product sold', 21), ('expenditure', 20), ('cost of sales', 20), ('Cost of sales', 20), ('expense', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10), ('purchase of stock-in-trade', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -901584.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-901584.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 24), ('expenditure', 24), ('total expenses', 23), ('total expenditure', 21), ('expense', 16)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Cost of product sold', 54), (' Personnel costs', 52), (' Cost of inventory sold', 43), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' cost of coal sold', 23), ('total expenditure', 21), (' Cost of inventory sold', 19), (' Cost of goods and services sold', 16), ('expense', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 15), ('purchase of stock-in-trade', 6)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 35), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27), ('expenditure', 19), ('expense', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('cost of sales', 45), ('Cost of sales', 45), ('expense', 43), (' cost of coal sold', 39), ('expenditure', 38), (' Cost of goods and services sold', 38), (' Cost of product sold', 36), ('purchase of stock-in-trade', 24), (' Personnel costs', 22), (' Cost of inventory sold', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 23)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 23), (' Cost of goods and services sold', 20), (' Personnel costs', 20), ('expense', 18), ('purchase of stock-in-trade', 17)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), ('total expenditure', 34), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 26), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), ('total expenses', 41), (' Cost of inventory sold', 39), ('expenditure', 38), ('total expenditure', 37), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of product sold', 31), ('expense', 29), (' Cost of goods and services sold', 26)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 30), (' Personnel costs', 29), ('cost of sales', 28), ('Cost of sales', 28), ('total expenses', 26), ('total expenditure', 25), (' cost of coal sold', 25), ('purchase of stock-in-trade', 23), ('expense', 17), ('expenditure', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 32), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' cost of coal sold', 28), ('total expenses', 25), ('total expenditure', 24), (' Cost of product sold', 24), (' Personnel costs', 22), ('cost of sales', 20), ('Cost of sales', 20), ('expenditure', 16), ('expense', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 32), ('purchase of stock-in-trade', 31), (' Cost of inventory sold', 31), (' cost of coal sold', 28), ('total expenses', 25), ('total expenditure', 24), (' Cost of product sold', 24), (' Personnel costs', 22), ('cost of sales', 20), ('Cost of sales', 20), ('expenditure', 16), ('expense', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' Cost of inventory sold', 38), ('purchase of stock-in-trade', 32), ('total expenses', 29), (' Cost of goods and services sold', 29), (' cost of coal sold', 28), ('total expenditure', 27), (' Personnel costs', 22), (' Cost of product sold', 21), ('expenditure', 20), ('cost of sales', 20), ('Cost of sales', 20), ('expense', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10), ('purchase of stock-in-trade', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 30), (' Personnel costs', 29), ('expenditure', 27), ('expense', 20), (' cost of coal sold', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -1122249.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-1122249.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), ('other expenses', 27), (' Other expenses', 27), (' Logistics and distribution', 27), (' Other expenses', 27), (' Marketing expenses', 22), (' Occupancy ', 22), (' Sales and marketing', 21), (' Lease expenses', 19), (' Selling Expenses', 19), (' Occupancy expenses', 18), (' Management expenses', 18), (' Depreciation expenses', 17), (' Advertising expenses', 17), (' Depreciation expenses', 17), (' depreciation', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 28), (' Advertising expenses', 17), (' Amortisation expenses', 17), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Amortisation expenses', 46), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Administrative and other expenses', 26), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Advertising expenses', 22), (' Logistics and distribution', 12), (' Sales and marketing', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Sales and marketing', 81), (' Marketing expenses', 74), (' Management expenses', 59), (' Lease expenses', 55), (' Selling Expenses', 55), (' Administrative and other expenses', 54), ('other expenses', 53), (' Other expenses', 53), (' Other expenses', 53), (' Selling & distribution expenses', 51), (' Advertising expenses', 49), (' Administrative expenses', 47), (' Administration expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Logistics and distribution', 43), ('Distribution expenses', 42), (' Occupancy expenses', 41), (' depreciation', 34), (' Occupancy ', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 29), (' Logistics and distribution', 26), (' depreciation', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), ('other expenses', 23), (' Other expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Other expenses', 23), (' Amortisation expenses', 22), ('Distribution expenses', 21), (' Administrative and other expenses', 21), (' Sales and marketing', 21), (' Marketing expenses', 19), (' Occupancy expenses', 19), (' Management expenses', 19), (' Administrative expenses', 18), (' Administration expenses', 18), (' Advertising expenses', 18), (' Occupancy ', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Administrative and other expenses', 26), (' Amortisation expenses', 25), ('Distribution expenses', 24), (' Lease expenses', 23), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Marketing expenses', 19), (' Selling Expenses', 19), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' Occupancy expenses', 16), (' Management expenses', 16), (' depreciation', 14), (' Occupancy ', 4)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Administrative and other expenses', 26), (' Amortisation expenses', 25), ('Distribution expenses', 24), (' Lease expenses', 23), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Marketing expenses', 19), (' Selling Expenses', 19), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' Occupancy expenses', 16), (' Management expenses', 16), (' depreciation', 14), (' Occupancy ', 4)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('other expenses', 32), (' Other expenses', 32), (' Administrative and other expenses', 32), (' Other expenses', 32), (' Amortisation expenses', 28), (' Occupancy expenses', 26), (' Lease expenses', 26), (' Selling Expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Management expenses', 23), (' Sales and marketing', 22), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' depreciation', 18), (' Administrative expenses', 18), (' Administration expenses', 18), ('Distribution expenses', 15), (' Advertising expenses', 12), (' Occupancy ', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 8], 'score': 100, 'value': -8343.0, 'line_item_label': ['Sales and marketing expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-3544.0, -4768.0, -31.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), ('other expenses', 27), (' Other expenses', 27), (' Logistics and distribution', 27), (' Other expenses', 27), (' Marketing expenses', 22), (' Occupancy ', 22), (' Sales and marketing', 21), (' Lease expenses', 19), (' Selling Expenses', 19), (' Occupancy expenses', 18), (' Management expenses', 18), (' Depreciation expenses', 17), (' Advertising expenses', 17), (' Depreciation expenses', 17), (' depreciation', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Administrative and other expenses', 29), (' Logistics and distribution', 28), (' Advertising expenses', 17), (' Amortisation expenses', 17), (' Occupancy ', 14), (' depreciation', 12), ('other expenses', 10), (' Occupancy expenses', 10), (' Other expenses', 10), (' Management expenses', 10), (' Other expenses', 10), (' Marketing expenses', 9), (' Depreciation expenses', 9), (' Depreciation expenses', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Logistics and distribution', 19), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), ('Distribution expenses', 14), (' Administrative expenses', 14), (' Administration expenses', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Amortisation expenses', 46), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Administrative and other expenses', 26), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Advertising expenses', 22), (' Logistics and distribution', 12), (' Sales and marketing', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Amortisation expenses', 24), (' Sales and marketing', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Selling & distribution expenses', 19), (' Marketing expenses', 17), (' Depreciation expenses', 16), (' Depreciation expenses', 16), (' Advertising expenses', 15), (' Occupancy ', 12), (' Lease expenses', 9), (' Selling Expenses', 9), (' Management expenses', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Sales and marketing', 81), (' Marketing expenses', 74), (' Management expenses', 59), (' Lease expenses', 55), (' Selling Expenses', 55), (' Administrative and other expenses', 54), ('other expenses', 53), (' Other expenses', 53), (' Other expenses', 53), (' Selling & distribution expenses', 51), (' Advertising expenses', 49), (' Administrative expenses', 47), (' Administration expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Logistics and distribution', 43), ('Distribution expenses', 42), (' Occupancy expenses', 41), (' depreciation', 34), (' Occupancy ', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Sales and marketing', 32), (' Logistics and distribution', 28), ('Distribution expenses', 25), (' Selling & distribution expenses', 22), (' Administrative expenses', 19), (' Administrative and other expenses', 19), (' Occupancy ', 19), (' Administration expenses', 19), (' Lease expenses', 15), (' Selling Expenses', 15), ('other expenses', 14), (' Marketing expenses', 14), (' Occupancy expenses', 14), (' Other expenses', 14), (' Management expenses', 14), (' Other expenses', 14), (' Advertising expenses', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Amortisation expenses', 36), (' Administrative and other expenses', 31), (' Depreciation expenses', 30), (' Depreciation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Management expenses', 19), (' Sales and marketing', 18), (' Occupancy ', 17), (' Occupancy expenses', 13), (' Selling Expenses', 13), (' Advertising expenses', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' depreciation', 28), ('Distribution expenses', 26), (' Logistics and distribution', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), (' Occupancy ', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 29), (' Logistics and distribution', 26), (' depreciation', 25), (' Depreciation expenses', 25), (' Depreciation expenses', 25), ('other expenses', 23), (' Other expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Other expenses', 23), (' Amortisation expenses', 22), ('Distribution expenses', 21), (' Administrative and other expenses', 21), (' Sales and marketing', 21), (' Marketing expenses', 19), (' Occupancy expenses', 19), (' Management expenses', 19), (' Administrative expenses', 18), (' Administration expenses', 18), (' Advertising expenses', 18), (' Occupancy ', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Administrative and other expenses', 26), (' Amortisation expenses', 25), ('Distribution expenses', 24), (' Lease expenses', 23), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Marketing expenses', 19), (' Selling Expenses', 19), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' Occupancy expenses', 16), (' Management expenses', 16), (' depreciation', 14), (' Occupancy ', 4)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Administrative and other expenses', 26), (' Amortisation expenses', 25), ('Distribution expenses', 24), (' Lease expenses', 23), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Marketing expenses', 19), (' Selling Expenses', 19), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' Occupancy expenses', 16), (' Management expenses', 16), (' depreciation', 14), (' Occupancy ', 4)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('other expenses', 32), (' Other expenses', 32), (' Administrative and other expenses', 32), (' Other expenses', 32), (' Amortisation expenses', 28), (' Occupancy expenses', 26), (' Lease expenses', 26), (' Selling Expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Management expenses', 23), (' Sales and marketing', 22), (' Depreciation expenses', 19), (' Depreciation expenses', 19), (' depreciation', 18), (' Administrative expenses', 18), (' Administration expenses', 18), ('Distribution expenses', 15), (' Advertising expenses', 12), (' Occupancy ', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 39), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Selling & distribution expenses', 29), (' Administrative expenses', 24), (' Depreciation expenses', 24), (' Administration expenses', 24), (' Depreciation expenses', 24), (' Amortisation expenses', 24), ('Distribution expenses', 20), (' depreciation', 19), (' Advertising expenses', 16), (' Sales and marketing', 16), (' Logistics and distribution', 11), (' Occupancy ', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 8], 'score': 100, 'value': -110280.0, 'line_item_label': ['Sales and marketing expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-55764.0, -54291.0, -225.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), ('Rent', 22), (' Occupancy', 22), (' Occupancy expenses', 18)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Rental expenses', 69), (' Administration expenses', 47), (' Occupancy expenses', 41), ('Rent', 23), (' Occupancy', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 30), (' Occupancy expenses', 19), (' Administration expenses', 18), ('Rent', 13), (' Occupancy', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administration expenses', 27), (' Rental expenses', 25), (' Occupancy expenses', 16), ('Rent', 11), (' Occupancy', 4)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administration expenses', 27), (' Rental expenses', 25), (' Occupancy expenses', 16), ('Rent', 11), (' Occupancy', 4)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' Rental expenses', 32), (' Occupancy expenses', 26), (' Administration expenses', 18), ('Rent', 15), (' Occupancy', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -4768.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-4768.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), ('Rent', 22), (' Occupancy', 22), (' Occupancy expenses', 18)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), (' Occupancy expenses', 26), (' Rental expenses', 17), ('Rent', 13), (' Occupancy', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Rental expenses', 69), (' Administration expenses', 47), (' Occupancy expenses', 41), ('Rent', 23), (' Occupancy', 7)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), ('Rent', 20), (' Administration expenses', 19), (' Occupancy', 19), (' Occupancy expenses', 14)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Administration expenses', 23), (' Rental expenses', 19), ('Rent', 17), (' Occupancy', 17), (' Occupancy expenses', 13)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Occupancy expenses', 35), (' Rental expenses', 34), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 30), (' Occupancy expenses', 19), (' Administration expenses', 18), ('Rent', 13), (' Occupancy', 9)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administration expenses', 27), (' Rental expenses', 25), (' Occupancy expenses', 16), ('Rent', 11), (' Occupancy', 4)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administration expenses', 27), (' Rental expenses', 25), (' Occupancy expenses', 16), ('Rent', 11), (' Occupancy', 4)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' Rental expenses', 32), (' Occupancy expenses', 26), (' Administration expenses', 18), ('Rent', 15), (' Occupancy', 11)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 24), ('Rent', 21), (' Occupancy', 10)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -54291.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-54291.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:37+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-28 12:47:37+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 24)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 29), ('other operating', 21)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('other operating', 31), (' Other income', 24), ('Other revenue', 18)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('Other revenue', 23), (' Other income', 23), ('other operating', 20)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 16), ('Other revenue', 16)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 16), ('Other revenue', 16)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' Other income', 36), ('other operating', 33), ('Other revenue', 19)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 4518.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['6', '6'], 'line_item_value': [1882.0, 2636.0]}
2023-07-28 12:47:37+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:37+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 24)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 29), ('other operating', 21)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), ('Other revenue', 17), (' Other income', 17)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-07-28 12:47:37+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('other operating', 31), (' Other income', 24), ('Other revenue', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), ('Other revenue', 29), (' Other income', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 40), ('Other revenue', 32)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('Other revenue', 23), (' Other income', 23), ('other operating', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 16), ('Other revenue', 16)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 16), ('Other revenue', 16)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' Other income', 36), ('other operating', 33), ('Other revenue', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 21)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 6593.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['6', '6'], 'line_item_value': [5366.0, 1227.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), ('other income', 37), (' Finance income and costs', 34), (' Net finance costs', 34), (' Finance income and finance costs', 30), ('finance income', 14), ('Finance income', 14)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), ('finance income', 8), ('Finance income', 8), (' Finance income and costs', 6), (' Finance income and finance costs', 5)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Interest revenue', 38), (' Finance income and costs', 37), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 27), ('other income', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 38), (' Finance income and costs', 32), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 23), ('finance income', 19), ('Finance income', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 33), ('other income', 32), (' Finance income and finance costs', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 21), (' Interest revenue', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 33), ('other income', 32), (' Finance income and finance costs', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 21), (' Interest revenue', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' Net finance costs', 37), ('other income', 36), (' Finance income and costs', 31), (' Finance income and finance costs', 28), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 85, 'value': 2546.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [2636.0, -90.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), ('other income', 37), (' Finance income and costs', 34), (' Net finance costs', 34), (' Finance income and finance costs', 30), ('finance income', 14), ('Finance income', 14)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 30), (' Finance income and finance costs', 25), ('other income', 17), ('finance income', 17), ('Finance income', 17), (' Interest revenue', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), ('finance income', 8), ('Finance income', 8), (' Finance income and costs', 6), (' Finance income and finance costs', 5)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Finance income and costs', 31), (' Net finance costs', 31), (' Finance income and finance costs', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Interest revenue', 38), (' Finance income and costs', 37), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 27), ('other income', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), ('other income', 30), (' Finance income and finance costs', 27), (' Net finance costs', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Finance income and costs', 27), (' Net finance costs', 26), (' Finance income and finance costs', 23), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Interest revenue', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 40), (' Finance income and costs', 25), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 19), ('Finance income', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 38), (' Finance income and costs', 32), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 23), ('finance income', 19), ('Finance income', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 33), ('other income', 32), (' Finance income and finance costs', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 21), (' Interest revenue', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 33), ('other income', 32), (' Finance income and finance costs', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 21), (' Interest revenue', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' Net finance costs', 37), ('other income', 36), (' Finance income and costs', 31), (' Finance income and finance costs', 28), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 85, 'value': 694.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [1227.0, -533.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 27), ('finance cost', 24), ('finance costs', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21), (' finance expenses', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21), (' finance expenses', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -90.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-90.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 27), ('finance cost', 24), ('finance costs', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21), (' finance expenses', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21), (' finance expenses', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -533.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-533.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 27), ('finance cost', 24), ('finance costs', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21), (' finance expenses', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21), (' finance expenses', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -90.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-90.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 27), ('finance cost', 24), ('finance costs', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' net finance costs ', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21), (' finance expenses', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('finance cost', 23), ('finance costs', 23), (' net finance costs ', 21), (' finance expenses', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -533.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-533.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('current tax', 33), ('provision for taxation previous year', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 31), (' income tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 25), (' income tax expense', 25), ('deferred tax', 20), (' tax (expense)/benefit', 16), ('prior year ', 10), ('earlier year', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), ('provision for taxation previous year', 26), (' income tax benefit', 23), ('amount transferred to retained earnings', 22), (' tax (expense)/benefit', 22), (' income tax benefit/(expense)', 18), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), ('deferred tax', 29), (' income tax expense', 21), (' income tax benefit', 14), (' tax (expense)/benefit', 13), (' income tax benefit/(expense)', 11), (' income tax', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax expense', 53), (' income tax benefit/(expense)', 52), ('deferred tax', 39), ('provision for taxation previous year', 35), (' income tax benefit', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25), ('amount transferred to retained earnings', 20), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('amount transferred to retained earnings', 41), ('provision for taxation previous year', 40), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax benefit', 34), ('minimum alternate tax credit entitlement', 33), (' income tax expense', 28), ('deferred tax', 24), ('prior year ', 24), (' income tax', 20), ('current tax', 19), ('earlier year', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), (' tax (expense)/benefit', 41), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('current tax', 32), (' income tax', 30), ('provision for taxation previous year', 28), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), (' tax (expense)/benefit', 41), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('current tax', 32), (' income tax', 30), ('provision for taxation previous year', 28), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' income tax expense', 42), (' income tax benefit', 42), (' income tax benefit/(expense)', 38), (' income tax', 31), ('current tax', 30), ('deferred tax', 27), ('amount transferred to retained earnings', 26), ('earlier year', 26), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), ('prior year ', 23), ('minimum alternate tax credit entitlement', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('current tax', 13), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -1577.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['5'], 'line_item_value': [-1577.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('current tax', 33), ('provision for taxation previous year', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 31), (' income tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 25), (' income tax expense', 25), ('deferred tax', 20), (' tax (expense)/benefit', 16), ('prior year ', 10), ('earlier year', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), ('provision for taxation previous year', 26), (' income tax benefit', 23), ('amount transferred to retained earnings', 22), (' tax (expense)/benefit', 22), (' income tax benefit/(expense)', 18), ('minimum alternate tax credit entitlement', 15), ('deferred tax', 11), ('earlier year', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 34), (' income tax expense', 29), ('prior year ', 27), ('current tax', 26), ('minimum alternate tax credit entitlement', 23), (' income tax benefit', 21), (' tax (expense)/benefit', 20), ('deferred tax', 19), (' income tax', 19), ('earlier year', 17), (' income tax benefit/(expense)', 17), ('amount transferred to retained earnings', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), ('deferred tax', 29), (' income tax expense', 21), (' income tax benefit', 14), (' tax (expense)/benefit', 13), (' income tax benefit/(expense)', 11), (' income tax', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 32), ('earlier year', 26), ('deferred tax', 20), ('current tax', 18), ('minimum alternate tax credit entitlement', 14), ('provision for taxation previous year', 10), ('prior year ', 10), (' tax (expense)/benefit', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax expense', 53), (' income tax benefit/(expense)', 52), ('deferred tax', 39), ('provision for taxation previous year', 35), (' income tax benefit', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25), ('amount transferred to retained earnings', 20), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 22), ('provision for taxation previous year', 22), (' income tax benefit', 12)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), (' tax (expense)/benefit', 53), ('current tax', 52), ('provision for taxation previous year', 49), (' income tax benefit/(expense)', 45), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 31), ('earlier year', 29), ('amount transferred to retained earnings', 23)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 55), ('current tax', 40), ('earlier year', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29), ('amount transferred to retained earnings', 26)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('prior year ', 31), ('current tax', 30), (' tax (expense)/benefit', 30), ('earlier year', 24), ('deferred tax', 19), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('amount transferred to retained earnings', 41), ('provision for taxation previous year', 40), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax benefit', 34), ('minimum alternate tax credit entitlement', 33), (' income tax expense', 28), ('deferred tax', 24), ('prior year ', 24), (' income tax', 20), ('current tax', 19), ('earlier year', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), (' tax (expense)/benefit', 41), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('current tax', 32), (' income tax', 30), ('provision for taxation previous year', 28), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), (' tax (expense)/benefit', 41), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('current tax', 32), (' income tax', 30), ('provision for taxation previous year', 28), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [(' income tax expense', 42), (' income tax benefit', 42), (' income tax benefit/(expense)', 38), (' income tax', 31), ('current tax', 30), ('deferred tax', 27), ('amount transferred to retained earnings', 26), ('earlier year', 26), (' tax (expense)/benefit', 24), ('provision for taxation previous year', 23), ('prior year ', 23), ('minimum alternate tax credit entitlement', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('current tax', 13), ('minimum alternate tax credit entitlement', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 46), ('provision for taxation previous year', 44), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('earlier year', 34), ('current tax', 30), ('deferred tax', 27), (' tax (expense)/benefit', 26), ('amount transferred to retained earnings', 16)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -12413.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['5'], 'line_item_value': [-12413.0]}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('exceptional', 16), ('prior period', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('exceptional', 29), ('prior period', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('prior period', 26), ('exceptional', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('prior period', 13), ('exceptional', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('exceptional', 16), ('prior period', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 13), ('prior period', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 17), ('exceptional', 12)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('exceptional', 29), ('prior period', 24)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 14)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('exceptional', 21), ('prior period', 18)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('prior period', 26), ('exceptional', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('prior period', 13), ('exceptional', 7)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 21), ('exceptional', 20)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-28 12:47:38+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-28 12:47:38+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:47:38+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-28 12:47:38+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = actuarial gains / (losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomelloss), net ofincome tax, forthe , res_fuzz_match = [('NULL', 11)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-07-28 12:47:38+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-28 12:49:41+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-28 12:49:41+0530 - sLogger - DEBUG - process_main_pages started
2023-07-28 12:49:41+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 12:49:41+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 12:49:41+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 12:49:41+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 12:49:41+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 12:49:41+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-07-28 12:49:41+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-07-28 12:49:41+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 12:49:41+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-28 12:49:41+0530 - sLogger - DEBUG - start_refactoring started
2023-07-28 12:49:41+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-28 12:49:41+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-28 12:49:41+0530 - sLogger - DEBUG - set_section_details started
2023-07-28 12:49:41+0530 - sLogger - DEBUG - Total Equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-28 12:49:41+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-28 12:49:41+0530 - sLogger - DEBUG - set_section_details started
2023-07-28 12:49:41+0530 - sLogger - DEBUG - Total Equity | [('equity', 67), ('equity liabilities', 64), ('equity and liabilities', 55), ('current liabilities', 31), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-07-28 12:49:41+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-28 12:49:41+0530 - sLogger - DEBUG - set_section_details started
2023-07-28 12:49:41+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating Activities | changes in operating assets and liabilities
2023-07-28 12:49:41+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-07-28 12:49:41+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-07-28 12:49:41+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | adiustments for movements in working capital
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest and other costs of finance paid | operating profit before changes in assets and liabilities
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refunded | adjustments for increase decrease in operating assets
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | adjustments for increase decrease in operating liabilities
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing Activities | movements in working capital
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for plant and equipment | adiustments for movements in working capital
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment forintangible assets (Note 13) | operating profit before changes in assets and liabilities
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | operating cash flow before working capital changes
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing Activities | changes in working capital
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of principal portion of lease liabilities | operating profit before changes in assets and liabilities
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of dividends | adiustments for movements in working capital
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net decreasellncrease in Cash and Cash Equivalents | adjustments for increase decrease in operating liabilities
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the beginning ofthe | adjustments for increase decrease in operating liabilities
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- year | changes in working capital
2023-07-28 12:49:42+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the endofthe year | changes in operating assets and liabilities
2023-07-28 12:49:43+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-28 12:49:43+0530 - sLogger - ERROR - error occured: 'year'
2023-07-28 12:49:43+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-28 12:49:43+0530 - sLogger - ERROR - error occured: 'year'
2023-07-28 12:49:43+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-28 12:52:17+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-07-28 12:52:17+0530 - sLogger - DEBUG - {'fileid': '0de5279c-8969-4b89-9a13-c901e3591499', 'filename': 'SDPL Financials March 2023 final (signed)_SOJITZ DEVELOPMENT PTY LTD.pdf', 'filepath': '/home/jayesh/mgs_ai/crm_syd_1/CRM_SYD_main_app_2/classification/../FILE_DB/FILES/SDPL Financials March 2023 final (signed)_SOJITZ DEVELOPMENT PTY LTD.pdf', 'status': 'Processing'}
2023-07-28 12:52:17+0530 - sLogger - DEBUG - save file completed
2023-07-28 12:52:17+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-07-28 12:52:17+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-07-28 12:52:17+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-07-28 12:52:17+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-07-28 12:52:17+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-07-28 12:52:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:17+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:52:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:52:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:52:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:52:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:52:19+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:52:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:19+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:52:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:52:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:52:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:52:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:52:23+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:52:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:24+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:52:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:52:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:52:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:52:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:52:31+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:52:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:31+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:52:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:52:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:52:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:52:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:52:37+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:52:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:37+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:52:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:52:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:52:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:52:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:52:40+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:52:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:40+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:52:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:52:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:52:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:52:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:52:46+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:52:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:46+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:52:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:52:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:52:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:52:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:52:51+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:52:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:51+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:52:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:52:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:52:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:52:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:52:55+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:52:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:52:55+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:53:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:53:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:53:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:53:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:53:00+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:53:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:53:00+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:53:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:53:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:53:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:53:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:53:05+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:53:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:53:05+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:53:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:53:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:53:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:53:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:53:13+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:53:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:53:13+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:53:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:53:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:53:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:53:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:53:22+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:53:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:53:22+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:53:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:53:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:53:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:53:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:53:29+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:53:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:53:29+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:53:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:53:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:53:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:53:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:53:37+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:53:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:53:37+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:53:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:53:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:53:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:53:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:53:46+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:53:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:53:46+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:53:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:53:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:53:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:53:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:53:53+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:53:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:53:53+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:54:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:54:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:54:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:54:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:54:02+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:54:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:54:02+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:54:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:54:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:54:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:54:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:54:11+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:54:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:54:11+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:54:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:54:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:54:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:54:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:54:19+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:54:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:54:19+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:54:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:54:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:54:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:54:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:54:28+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:54:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:54:28+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:54:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:54:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:54:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:54:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:54:37+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:54:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:54:37+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:54:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:54:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:54:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:54:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:54:45+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:54:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:54:45+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:54:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:54:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:54:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:54:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:54:54+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:54:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:54:54+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:54:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:54:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:54:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:54:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:54:57+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:54:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:54:57+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:00+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:01+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:06+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:06+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:11+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:11+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:16+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:16+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:21+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:21+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:24+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:24+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:28+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:28+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:35+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:35+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:42+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:42+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:47+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:47+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:55+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:55+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:55:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:55:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:55:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:55:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:55:59+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:55:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:55:59+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:56:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:56:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:56:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:56:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:56:04+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:56:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:56:04+0530 - sLogger - DEBUG - filetype: pdf
2023-07-28 12:56:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-07-28 12:56:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-07-28 12:56:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-07-28 12:56:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-07-28 12:56:11+0530 - sLogger - DEBUG - function: predict completed.
2023-07-28 12:56:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-07-28 12:56:11+0530 - sLogger - DEBUG - filetype: pdf

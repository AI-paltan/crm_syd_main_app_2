2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-10 15:32:06+0530 - sLogger - DEBUG - process_main_pages started
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 15:32:06+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_without_notes
2023-08-10 15:32:06+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: non_ideal_format_without_notes_processing
2023-08-10 15:32:06+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-10 15:32:06+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: get_standardize_main_pages CCF
2023-08-10 15:32:06+0530 - sLogger - ERROR - error occured: 'year_list'
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 15:32:06+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 15:32:06+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 15:32:06+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 15:32:06+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CCF
2023-08-10 15:32:06+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CCF notes_number_processing
2023-08-10 15:32:06+0530 - sLogger - ERROR - error occured: local variable 'ccf_header' referenced before assignment
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-10 15:32:06+0530 - sLogger - DEBUG - set_section_details started
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Investments | [('noncurrentassets', 38), ('assets', 36), ('currentassets', 33), ('equity', 33), ('noncurrentliabilities', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('equity and liabilities', 26), ('equityandliabilities', 24), ('current assets', 21), ('noncurrent assets', 21), ('equity liabilities', 21), ('current liabilities', 20), ('noncurrent liabilities', 20), ('liabilities', 17)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current assets | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentassets | score 42
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current liabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent assets | score 43
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent liabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current assets | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current liabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity and liabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equityandliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Lease Liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current assets | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentassets | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current liabilities | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentliabilities | score 69
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current assets | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current liabilities | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Share capital | [('current assets', 42), ('assets', 38), ('equity and liabilities', 36), ('currentassets', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('current liabilities', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('equityandliabilities', 27), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('equityliabilities', 21)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current assets | score 37
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current liabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent assets | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent liabilities | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current assets | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current liabilities | score 41
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity and liabilities | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equityandliabilities | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-10 15:32:06+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-10 15:32:06+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-10 15:32:06+0530 - sLogger - DEBUG - set_section_details started
2023-08-10 15:32:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: set_sections_subsections  CCF
2023-08-10 15:32:07+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-10 15:32:07+0530 - sLogger - ERROR - error occured: 'year'
2023-08-10 15:32:07+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-10 15:32:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-10 15:32:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 15:32:07+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-08-10 15:32:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 15:32:07+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-08-10 15:32:07+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:07+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 15:32:07+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), (' cash and cash equivalents', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), ('cash asset', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), (' cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 24), ('Cash and short term deposits', 24), ('bank balances other than above', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('cash and cash equivalents', 15), ('cash and bank balances', 15), (' cash and cash equivalents', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 4075354.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['9'], 'line_item_value': [4075354.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), (' cash and cash equivalents', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), ('cash asset', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), (' cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 24), ('Cash and short term deposits', 24), ('bank balances other than above', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('cash and cash equivalents', 15), ('cash and bank balances', 15), (' cash and cash equivalents', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 6387380.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['9'], 'line_item_value': [6387380.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none cash at bank , res_fuzz_match = [(' cash at bank', 100), ('cash on hand', 78), (' cash at bank and on hand', 64), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 57), (' cash on hand and at bank', 57), (' cash and cash equivalents', 50), (' short term deposits', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' short term deposits', 38), (' cash and cash equivalents', 38), ('cash on hand', 25), (' cash at bank', 25), (' cash at bank and on hand', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 25), (' cash on hand and at bank', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statements of cash flows , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), (' short term deposits', 39)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' short term deposits', 38), (' cash and cash equivalents', 38), ('cash on hand', 25), (' cash at bank', 25), (' cash at bank and on hand', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 25), (' cash on hand and at bank', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 10 , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), ('cash on hand', 25), (' cash at bank', 25), (' cash at bank and on hand', 25), (' short term deposits', 25), (' cash and cash equivalents', 25), (' cash on hand and at bank', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' short term deposits', 38), (' cash and cash equivalents', 38), ('cash on hand', 25), (' cash at bank', 25), (' cash at bank and on hand', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 25), (' cash on hand and at bank', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none cash at bank , res_fuzz_match = [(' cash at bank', 100), ('cash on hand', 78), (' cash at bank and on hand', 64), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 57), (' cash on hand and at bank', 57), (' cash and cash equivalents', 50), (' short term deposits', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' short term deposits', 38), (' cash and cash equivalents', 38), ('cash on hand', 25), (' cash at bank', 25), (' cash at bank and on hand', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 25), (' cash on hand and at bank', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statements of cash flows , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 46), (' short term deposits', 39)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' short term deposits', 38), (' cash and cash equivalents', 38), ('cash on hand', 25), (' cash at bank', 25), (' cash at bank and on hand', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 25), (' cash on hand and at bank', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 10 , res_fuzz_match = [(' cash at banks earns interest at floating rates based on daily bank deposit rates', 50), ('cash on hand', 25), (' cash at bank', 25), (' cash at bank and on hand', 25), (' short term deposits', 25), (' cash and cash equivalents', 25), (' cash on hand and at bank', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' short term deposits', 38), (' cash and cash equivalents', 38), ('cash on hand', 25), (' cash at bank', 25), (' cash at bank and on hand', 25), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 25), (' cash on hand and at bank', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [6387380.0, 6387380.0, 4075354.0, 4075354.0], 'label': ['None Cash at bank', 'None Cash and cash equivalents in the statements of cash flows', 'None Cash at bank', 'None Cash and cash equivalents in the statements of cash flows'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('inventories', 83)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8], 'score': 83, 'value': 390715.0, 'line_item_label': ['Inventories', 'Investments'], 'note_numbers': ['11', nan], 'line_item_value': [371956.0, 18759.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('inventories', 83)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8], 'score': 83, 'value': 784927.0, 'line_item_label': ['Inventories', 'Investments'], 'note_numbers': ['11', nan], 'line_item_value': [766168.0, 18759.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = in aud coal stocks , res_fuzz_match = [(' finished goods at cost', 44), (' stores and other consumables at cost', 43), (' goods in transit', 42), (' cranes', 40), (' cranes - in transit', 38), (' provision for inventory obsolescence', 36), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' work in progress', 23), (' inventories', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' cranes - in transit', 56), (' cranes', 40), ('raw materials', 33), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' raw materials', 33), (' finished goods', 33), (' goods in transit', 33), (' work in progress', 22), (' spare parts', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = in aud materials and supplies , res_fuzz_match = [('raw materials', 80), (' raw materials', 80), (' goods in transit', 50), (' stores and other consumables at cost', 48), (' cranes - in transit', 46), (' cranes', 40), (' spare parts', 40), (' provision for inventory obsolescence', 33), (' finished goods at cost', 31), (' finished goods', 27), (' finished goods', 27), (' work in progress', 23), (' inventories', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' cranes - in transit', 56), (' cranes', 40), ('raw materials', 33), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' raw materials', 33), (' finished goods', 33), (' goods in transit', 33), (' work in progress', 22), (' spare parts', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = in aud allowance for obsolesence , res_fuzz_match = [(' provision for inventory obsolescence', 57), (' work in progress', 54), (' stores and other consumables at cost', 48), ('raw materials', 40), (' raw materials', 40), (' finished goods at cost', 38), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33), (' cranes - in transit', 31), (' spare parts', 30), (' inventories', 22), (' cranes', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' cranes - in transit', 56), (' cranes', 40), ('raw materials', 33), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' raw materials', 33), (' finished goods', 33), (' goods in transit', 33), (' work in progress', 22), (' spare parts', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = in aud total , res_fuzz_match = [(' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' goods in transit', 44), (' cranes - in transit', 44), (' spare parts', 35), ('raw materials', 33), (' raw materials', 33), (' provision for inventory obsolescence', 33), (' finished goods', 24), (' finished goods', 24), (' work in progress', 22), (' inventories', 22), (' cranes', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' cranes - in transit', 56), (' cranes', 40), ('raw materials', 33), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' raw materials', 33), (' finished goods', 33), (' goods in transit', 33), (' work in progress', 22), (' spare parts', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = in aud coal stocks , res_fuzz_match = [(' finished goods at cost', 44), (' stores and other consumables at cost', 43), (' goods in transit', 42), (' cranes', 40), (' cranes - in transit', 38), (' provision for inventory obsolescence', 36), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' work in progress', 23), (' inventories', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' cranes - in transit', 56), (' cranes', 40), ('raw materials', 33), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' raw materials', 33), (' finished goods', 33), (' goods in transit', 33), (' work in progress', 22), (' spare parts', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = in aud materials and supplies , res_fuzz_match = [('raw materials', 80), (' raw materials', 80), (' goods in transit', 50), (' stores and other consumables at cost', 48), (' cranes - in transit', 46), (' cranes', 40), (' spare parts', 40), (' provision for inventory obsolescence', 33), (' finished goods at cost', 31), (' finished goods', 27), (' finished goods', 27), (' work in progress', 23), (' inventories', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' cranes - in transit', 56), (' cranes', 40), ('raw materials', 33), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' raw materials', 33), (' finished goods', 33), (' goods in transit', 33), (' work in progress', 22), (' spare parts', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = in aud allowance for obsolesence , res_fuzz_match = [(' provision for inventory obsolescence', 57), (' work in progress', 54), (' stores and other consumables at cost', 48), ('raw materials', 40), (' raw materials', 40), (' finished goods at cost', 38), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33), (' cranes - in transit', 31), (' spare parts', 30), (' inventories', 22), (' cranes', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' cranes - in transit', 56), (' cranes', 40), ('raw materials', 33), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' raw materials', 33), (' finished goods', 33), (' goods in transit', 33), (' work in progress', 22), (' spare parts', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = in aud total , res_fuzz_match = [(' stores and other consumables at cost', 56), (' finished goods at cost', 44), (' goods in transit', 44), (' cranes - in transit', 44), (' spare parts', 35), ('raw materials', 33), (' raw materials', 33), (' provision for inventory obsolescence', 33), (' finished goods', 24), (' finished goods', 24), (' work in progress', 22), (' inventories', 22), (' cranes', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = inventories , res_fuzz_match = [(' provision for inventory obsolescence', 100), (' inventories', 100), (' cranes - in transit', 56), (' cranes', 40), ('raw materials', 33), (' finished goods', 33), (' finished goods at cost', 33), (' stores and other consumables at cost', 33), (' raw materials', 33), (' finished goods', 33), (' goods in transit', 33), (' work in progress', 22), (' spare parts', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 1, 2, 3, 4, 5, 5, 6, 7], 'score': [100, 80, 100, 100, 100, 100, 80, 100, 100, 100], 'value': [535348.0, 312838.0, 312838.0, -82018.0, 766168.0, 158181.0, 282620.0, 282620.0, -68845.0, 371956.0], 'label': ['Inventories', 'In AUD Materials and supplies', 'Inventories', 'Inventories', 'Inventories', 'Inventories', 'In AUD Materials and supplies', 'Inventories', 'Inventories', 'Inventories'], 'year': [], 'colname_found': ['columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns']}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other financial assets', 42), ('other assets', 40), ('other current financial assets', 39), ('prepayments', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets', 54), ('other current assets', 53), ('other financial assets', 47), ('other current financial assets', 43), ('prepayments', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('other financial assets', 24), ('other assets', 24), ('other current financial assets', 18), ('prepayments', 17), ('other current assets', 16)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 34401.0, 'line_item_label': ['Prepayments'], 'note_numbers': [nan], 'line_item_value': [34401.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other financial assets', 42), ('other assets', 40), ('other current financial assets', 39), ('prepayments', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets', 54), ('other current assets', 53), ('other financial assets', 47), ('other current financial assets', 43), ('prepayments', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('other financial assets', 24), ('other assets', 24), ('other current financial assets', 18), ('prepayments', 17), ('other current assets', 16)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 39407.0, 'line_item_label': ['Prepayments'], 'note_numbers': [nan], 'line_item_value': [39407.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' trade and other receivables', 43), (' income tax receivable from related parties', 42), (' deferred operating expenditure', 39)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), (' trade and other receivables', 43), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), ('other assets', 40), (' income tax receivable from related parties', 39), (' financial assets', 32), (' biological assets', 28)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets', 59), ('other assets', 54), ('other current assets', 53), (' other current assets', 53), (' financial assets', 50), (' other financial assets', 47), (' trade and other receivables', 32), (' deferred operating expenditure', 28), (' income tax receivable from related parties', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' income tax receivable from related parties', 26), ('other assets', 24), (' other financial assets', 24), (' biological assets', 22), (' financial assets', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' deferred operating expenditure', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 555857.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['10'], 'line_item_value': [555857.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' trade and other receivables', 43), (' income tax receivable from related parties', 42), (' deferred operating expenditure', 39)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), (' trade and other receivables', 43), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), ('other assets', 40), (' income tax receivable from related parties', 39), (' financial assets', 32), (' biological assets', 28)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets', 59), ('other assets', 54), ('other current assets', 53), (' other current assets', 53), (' financial assets', 50), (' other financial assets', 47), (' trade and other receivables', 32), (' deferred operating expenditure', 28), (' income tax receivable from related parties', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' income tax receivable from related parties', 26), ('other assets', 24), (' other financial assets', 24), (' biological assets', 22), (' financial assets', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' deferred operating expenditure', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 290928.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['10'], 'line_item_value': [290928.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current tax funding receivable related party , res_fuzz_match = [('current', 100), (' other receivables - related party', 79), (' income tax receivable from related parties', 75), (' other deposits receivable - related party', 69), (' current investments', 64), (' related party receivable', 61), (' rental bond', 55), (' accrued rebates', 55), (' interest receivable', 53), (' related party disclosures', 52), (' amount receivable from controlling entity', 48), (' derivative contracts - fair value', 46), ('foreign exchange derivatives at fair value', 45), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' accrued interest', 36), (' lng', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current trade debtors , res_fuzz_match = [('current', 100), (' current investments', 64), (' rental bond', 55), (' interest receivable', 47), ('other assets', 45), ('foreign exchange derivatives at fair value', 45), (' foreign exchange forward contracts', 45), (' accrued rebates', 45), (' other debtors and prepayments', 45), (' related party receivable', 44), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' forward exchange contracts', 40), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' derivative contracts - fair value', 35), (' lng', 33), (' long service leave receivable', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current accrued revenue , res_fuzz_match = [('current', 100), (' accrued rebates', 73), (' accrued interest', 62), (' current investments', 57), (' related party receivable', 56), (' rental bond', 55), (' interest receivable', 47), (' electricity derivatives at fair value', 45), (' derivative contracts - fair value', 45), (' condensate', 43), (' share of jv prepayments', 42), (' other debtors and prepayments', 41), (' related party disclosures', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' bank guarantee', 38), ('other assets', 36), (' other receivables - related party', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' long service leave receivable', 35), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' lng', 33), (' deposits', 29), (' other', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current', 100), (' other', 100), (' interest receivable', 73), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), ('foreign exchange derivatives at fair value', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' other debtors and prepayments', 41), (' electricity derivatives at fair value', 40), (' forward exchange contracts', 40), (' related party disclosures', 35), (' derivative contracts - fair value', 35), (' foreign exchange forward contracts', 35), (' lng', 33), (' bank guarantee', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current 11 , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current tax funding receivable related party , res_fuzz_match = [('current', 100), (' other receivables - related party', 79), (' income tax receivable from related parties', 75), (' other deposits receivable - related party', 69), (' current investments', 64), (' related party receivable', 61), (' rental bond', 55), (' accrued rebates', 55), (' interest receivable', 53), (' related party disclosures', 52), (' amount receivable from controlling entity', 48), (' derivative contracts - fair value', 46), ('foreign exchange derivatives at fair value', 45), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 41), (' other', 40), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' accrued interest', 36), (' lng', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current trade debtors , res_fuzz_match = [('current', 100), (' current investments', 64), (' rental bond', 55), (' interest receivable', 47), ('other assets', 45), ('foreign exchange derivatives at fair value', 45), (' foreign exchange forward contracts', 45), (' accrued rebates', 45), (' other debtors and prepayments', 45), (' related party receivable', 44), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' forward exchange contracts', 40), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' derivative contracts - fair value', 35), (' lng', 33), (' long service leave receivable', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current accrued revenue , res_fuzz_match = [('current', 100), (' accrued rebates', 73), (' accrued interest', 62), (' current investments', 57), (' related party receivable', 56), (' rental bond', 55), (' interest receivable', 47), (' electricity derivatives at fair value', 45), (' derivative contracts - fair value', 45), (' condensate', 43), (' share of jv prepayments', 42), (' other debtors and prepayments', 41), (' related party disclosures', 40), (' other deposits receivable - related party', 40), (' amount receivable from controlling entity', 40), (' bank guarantee', 38), ('other assets', 36), (' other receivables - related party', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' long service leave receivable', 35), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' lng', 33), (' deposits', 29), (' other', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('current', 100), (' other', 100), (' interest receivable', 73), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), ('foreign exchange derivatives at fair value', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' share of jv prepayments', 42), (' other debtors and prepayments', 41), (' electricity derivatives at fair value', 40), (' forward exchange contracts', 40), (' related party disclosures', 35), (' derivative contracts - fair value', 35), (' foreign exchange forward contracts', 35), (' lng', 33), (' bank guarantee', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments', 38), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' deposits', 29), ('other assets', 27), (' long service leave receivable', 23), (' related party receivable', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current 11 , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' other', 100), (' interest receivable', 73), ('other assets', 64), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' long service leave receivable', 51), (' other receivables - related party', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), ('foreign exchange derivatives at fair value', 45), (' income tax receivable from related parties', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' derivative contracts - fair value', 36), (' current investments', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' lng', 33), (' condensate', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 108249.0, 108249.0, 113896.0, 113896.0, 68783.0, 68783.0, 290928.0, 290928.0, 0.0, 0.0, 343293.0, 343293.0, 116819.0, 116819.0, 0.0, 0.0, 95745.0, 95745.0, 555857.0, 555857.0, 0.0, 0.0], 'label': ['Current Tax funding receivable related party', 'Trade and other receivables', 'Current Trade debtors', 'Trade and other receivables', 'Current Accrued revenue', 'Trade and other receivables', 'Current Other receivables', 'Trade and other receivables', 'Current Total', 'Trade and other receivables', 'Current 11', 'Trade and other receivables', 'Current Tax funding receivable related party', 'Trade and other receivables', 'Current Trade debtors', 'Trade and other receivables', 'Current Accrued revenue', 'Trade and other receivables', 'Current Other receivables', 'Trade and other receivables', 'Current Total', 'Trade and other receivables', 'Current 11', 'Trade and other receivables'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns']}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current tax funding receivable related party , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current trade debtors , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current accrued revenue , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current 11 , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current tax funding receivable related party , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current trade debtors , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current accrued revenue , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current 11 , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised â€“ bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 24171.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': [nan], 'line_item_value': [24171.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites', 38), ('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 33193.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': [nan], 'line_item_value': [33193.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2133061.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['13'], 'line_item_value': [2133061.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 3210007.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['13'], 'line_item_value': [3210007.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan in aud , res_fuzz_match = [(' trade and other payables', 42), (' amounts payable to controlling entity', 42), (' other trade payables', 42), (' trade payables', 33), (' trade payables - other parties', 33), (' trade payables', 33), ('trade creditors', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan trade creditors , res_fuzz_match = [('trade creditors', 100), (' trade payables', 50), (' trade payables', 50), (' other trade payables', 50), (' amounts payable to controlling entity', 43), (' trade and other payables', 41), (' trade payables - other parties', 39)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan tax funding payable related party , res_fuzz_match = [(' trade payables', 67), (' trade payables - other parties', 67), (' trade payables', 67), (' other trade payables', 61), (' trade and other payables', 59), (' amounts payable to controlling entity', 57), ('trade creditors', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan other payables , res_fuzz_match = [(' trade and other payables', 81), (' trade payables', 75), (' trade payables', 75), (' other trade payables', 67), (' trade payables - other parties', 59), (' amounts payable to controlling entity', 48), ('trade creditors', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' amounts payable to controlling entity', 50), (' other trade payables', 50), (' trade and other payables', 43), (' trade payables - other parties', 36), (' trade payables', 33), (' trade payables', 33), ('trade creditors', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 14.0 employee benefits , res_fuzz_match = [(' trade payables', 42), (' trade payables', 42), (' trade payables - other parties', 40), (' amounts payable to controlling entity', 40), (' other trade payables', 39), ('trade creditors', 38), (' trade and other payables', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan in aud , res_fuzz_match = [(' trade and other payables', 42), (' amounts payable to controlling entity', 42), (' other trade payables', 42), (' trade payables', 33), (' trade payables - other parties', 33), (' trade payables', 33), ('trade creditors', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan trade creditors , res_fuzz_match = [('trade creditors', 100), (' trade payables', 50), (' trade payables', 50), (' other trade payables', 50), (' amounts payable to controlling entity', 43), (' trade and other payables', 41), (' trade payables - other parties', 39)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan tax funding payable related party , res_fuzz_match = [(' trade payables', 67), (' trade payables - other parties', 67), (' trade payables', 67), (' other trade payables', 61), (' trade and other payables', 59), (' amounts payable to controlling entity', 57), ('trade creditors', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan other payables , res_fuzz_match = [(' trade and other payables', 81), (' trade payables', 75), (' trade payables', 75), (' other trade payables', 67), (' trade payables - other parties', 59), (' amounts payable to controlling entity', 48), ('trade creditors', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' amounts payable to controlling entity', 50), (' other trade payables', 50), (' trade and other payables', 43), (' trade payables - other parties', 36), (' trade payables', 33), (' trade payables', 33), ('trade creditors', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 14.0 employee benefits , res_fuzz_match = [(' trade payables', 42), (' trade payables', 42), (' trade payables - other parties', 40), (' amounts payable to controlling entity', 40), (' other trade payables', 39), ('trade creditors', 38), (' trade and other payables', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' amounts payable to controlling entity', 62), ('trade creditors', 25), (' trade and other payables', 25), (' trade payables', 12), (' trade payables - other parties', 12), (' trade payables', 12), (' other trade payables', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 7, 9], 'score': [100, 81, 100, 81], 'value': [742849.0, 1046381.0, 689004.0, 1444057.0], 'label': ['None nan Trade creditors', 'None nan Other payables', 'None nan Trade creditors', 'None nan Other payables'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2133061.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['13'], 'line_item_value': [2133061.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 3210007.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['13'], 'line_item_value': [3210007.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan in aud , res_fuzz_match = [('interest accrued', 33), ('accrued expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan trade creditors , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan tax funding payable related party , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 14.0 employee benefits , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan in aud , res_fuzz_match = [('interest accrued', 33), ('accrued expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan trade creditors , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan tax funding payable related party , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 14.0 employee benefits , res_fuzz_match = [('accrued expenses', 33), ('interest accrued', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('accrued expenses', 25), ('interest accrued', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 6], 'score': 100, 'value': 1996724.0, 'line_item_label': ['Liabilities', 'Provisions', 'Provisions'], 'note_numbers': [nan, '15', '15'], 'line_item_value': [0.0, 1220467.0, 776257.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 6], 'score': 100, 'value': 1449146.0, 'line_item_label': ['Liabilities', 'Provisions', 'Provisions'], 'note_numbers': [nan, '15', '15'], 'line_item_value': [0.0, 375017.0, 1074129.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current provision for take or pay nan , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 48)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current site restoration nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 37)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current site restoration nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 40)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current nan provision for , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current nan take or pay , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current balance at 1 january 2022 156891 , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current provisions used during the year nan , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current provisions reversed during the year (156,891) , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current unwind of discount nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 37)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current balance at 31 december 2022 nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current provision for take or pay nan , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 48)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current site restoration nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 37)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current site restoration nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 40)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current nan provision for , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current nan take or pay , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current balance at 1 january 2022 156891 , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current provisions used during the year nan , res_fuzz_match = [(' provision for income tax', 50), ('income tax (refundable)/payable ', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current provisions reversed during the year (156,891) , res_fuzz_match = [(' provision for income tax', 55), ('income tax (refundable)/payable ', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current unwind of discount nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 37)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = non-current balance at 31 december 2022 nan , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [(' provision for income tax', 38), ('income tax (refundable)/payable ', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 5, 6], 'score': 100, 'value': 4495996.0, 'line_item_label': ['Trade and other payables', 'Employee benefits', 'Provisions', 'Employee benefits', 'Provisions'], 'note_numbers': ['13', '14', '15', '14', '15'], 'line_item_value': [2133061.0, 366211.0, 1220467.0, 0.0, 776257.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 5, 6], 'score': 100, 'value': 5015225.0, 'line_item_label': ['Trade and other payables', 'Employee benefits', 'Provisions', 'Employee benefits', 'Provisions'], 'note_numbers': ['13', '14', '15', '14', '15'], 'line_item_value': [3210007.0, 350206.0, 375017.0, 5866.0, 1074129.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan in aud , res_fuzz_match = [(' abandonment and decommissioning costs', 67), ('other creditors and accruals', 50), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' other related parties', 42), (' derivative contracts - at fair value', 42), (' loans from related party', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' provision for associate funding', 42), (' rebates', 40), (' other', 40), (' ultimate parent entity', 33), (' other creditors', 33), (' other creditors', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' forward exchange contracts', 33), (' other creditors', 33), (' total current employee benefits', 33), (' gst payables', 30), (' provisions - current', 25), (' arising from service contracts', 25), (' make good provisions', 25), (' warranty', 25), (' gst liabilities', 20), (' restructuring', 20), (' gst', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan trade creditors , res_fuzz_match = [(' other creditors', 79), (' other creditors', 79), (' other creditors', 79), ('other creditors and accruals', 52), (' abandonment and decommissioning costs', 52), (' loans from related party', 47), (' loan payable to relayed party under tax funding agreement', 43), (' employee benefits - current', 43), (' current - liability for annual and long service leave', 43), (' provisions - current', 43), (' forward exchange contracts', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' rebates', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 39), (' contract liabilites - current', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' make good provisions', 38), (' warranty', 38), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' secured long-term bank loans', 35), (' share of joint venture payables', 35), (' gst', 33), (' gst payables', 30), (' provision for associate funding', 27), (' gst liabilities', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan tax funding payable related party , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loans from related party', 67), (' loan payable to relayed party under tax funding agreement', 58), (' gst payable and accruals', 55), (' share of joint venture payables', 52), (' warranty', 50), (' ultimate parent entity', 47), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' employee benefits - payroll', 42), (' contract liabilites - current', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' provision for associate funding', 32), (' arising from service contracts', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 62), (' employee benefits - payroll', 50), (' loan payable to relayed party under tax funding agreement', 48), (' current - liability for annual and long service leave', 48), (' other related parties', 47), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 43), (' loans from related party', 43), (' abandonment and decommissioning costs', 43), (' forward exchange contracts', 43), (' gst liabilities', 42), (' rebates', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' warranty', 38), (' arising from service contracts', 33), (' gst', 33), (' total current employee benefits', 33), (' make good provisions', 31), (' employee benefits - current', 29), (' provision for associate funding', 29), (' ultimate parent entity', 26), (' provisions - current', 21), (' restructuring', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' current - liability for annual and long service leave', 50), (' total current employee benefits', 50), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' contract liabilites - current', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' rebates', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' ultimate parent entity', 29), (' make good provisions', 29), (' provisions - current', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 14.0 employee benefits , res_fuzz_match = [(' total current employee benefits', 85), (' employee benefits - current', 75), (' employee benefits - payroll', 75), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), (' ultimate parent entity', 43), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' current - liability for annual and long service leave', 40), (' gst payables', 40), (' rebates', 40), (' other', 40), ('other creditors and accruals', 35), (' other related parties', 35), (' loans from related party', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' make good provisions', 31), (' derivative contracts - at fair value', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' gst payable and accruals', 25), (' provision for associate funding', 25), (' warranty', 25), (' restructuring', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan in aud , res_fuzz_match = [(' abandonment and decommissioning costs', 67), ('other creditors and accruals', 50), (' loan payable to relayed party under tax funding agreement', 50), (' secured long-term bank loans', 50), (' gst payable and accruals', 50), (' current - liability for annual and long service leave', 50), (' other related parties', 42), (' derivative contracts - at fair value', 42), (' loans from related party', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' provision for associate funding', 42), (' rebates', 40), (' other', 40), (' ultimate parent entity', 33), (' other creditors', 33), (' other creditors', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' forward exchange contracts', 33), (' other creditors', 33), (' total current employee benefits', 33), (' gst payables', 30), (' provisions - current', 25), (' arising from service contracts', 25), (' make good provisions', 25), (' warranty', 25), (' gst liabilities', 20), (' restructuring', 20), (' gst', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan trade creditors , res_fuzz_match = [(' other creditors', 79), (' other creditors', 79), (' other creditors', 79), ('other creditors and accruals', 52), (' abandonment and decommissioning costs', 52), (' loans from related party', 47), (' loan payable to relayed party under tax funding agreement', 43), (' employee benefits - current', 43), (' current - liability for annual and long service leave', 43), (' provisions - current', 43), (' forward exchange contracts', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' rebates', 40), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 39), (' contract liabilites - current', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' make good provisions', 38), (' warranty', 38), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' secured long-term bank loans', 35), (' share of joint venture payables', 35), (' gst', 33), (' gst payables', 30), (' provision for associate funding', 27), (' gst liabilities', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan tax funding payable related party , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loans from related party', 67), (' loan payable to relayed party under tax funding agreement', 58), (' gst payable and accruals', 55), (' share of joint venture payables', 52), (' warranty', 50), (' ultimate parent entity', 47), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' employee benefits - payroll', 42), (' contract liabilites - current', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' make good provisions', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' secured long-term bank loans', 33), (' gst', 33), (' forward exchange contracts', 33), (' provision for associate funding', 32), (' arising from service contracts', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none nan other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 62), (' employee benefits - payroll', 50), (' loan payable to relayed party under tax funding agreement', 48), (' current - liability for annual and long service leave', 48), (' other related parties', 47), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 43), (' loans from related party', 43), (' abandonment and decommissioning costs', 43), (' forward exchange contracts', 43), (' gst liabilities', 42), (' rebates', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' warranty', 38), (' arising from service contracts', 33), (' gst', 33), (' total current employee benefits', 33), (' make good provisions', 31), (' employee benefits - current', 29), (' provision for associate funding', 29), (' ultimate parent entity', 26), (' provisions - current', 21), (' restructuring', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' current - liability for annual and long service leave', 50), (' total current employee benefits', 50), ('other creditors and accruals', 43), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' contract liabilites - current', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' rebates', 40), (' other', 40), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' ultimate parent entity', 29), (' make good provisions', 29), (' provisions - current', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 14.0 employee benefits , res_fuzz_match = [(' total current employee benefits', 85), (' employee benefits - current', 75), (' employee benefits - payroll', 75), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), (' ultimate parent entity', 43), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' current - liability for annual and long service leave', 40), (' gst payables', 40), (' rebates', 40), (' other', 40), ('other creditors and accruals', 35), (' other related parties', 35), (' loans from related party', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' make good provisions', 31), (' derivative contracts - at fair value', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' gst payable and accruals', 25), (' provision for associate funding', 25), (' warranty', 25), (' restructuring', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = consolidated , res_fuzz_match = [('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' secured long-term bank loans', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' gst', 33), (' ultimate parent entity', 25), (' other creditors', 25), (' loan payable to relayed party under tax funding agreement', 25), (' other creditors', 25), (' gst payable and accruals', 25), (' employee benefits - current', 25), (' provisions - current', 25), (' share of joint venture payables', 25), (' employee benefits - payroll', 25), (' gst liabilities', 25), (' other creditors', 25), (' warranty', 25), (' total current employee benefits', 25), (' other', 20), (' other related parties', 12), (' gst payables', 12), (' restructuring', 12), (' rebates', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 3, 5, 8, 9, 11], 'score': [80, 100, 85, 80, 100, 85], 'value': [1420777.0, 1046381.0, 0.0, 0.0, 1444057.0, 0.0], 'label': ['None nan Tax funding payable related party', 'None nan Other payables', 'None 14.0 Employee benefits', 'None nan Tax funding payable related party', 'None nan Other payables', 'None 14.0 Employee benefits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('share capital', 100), (' share capital ', 100), ('equity share capital', 76), (' issued capital', 67), ('contributed equity', 37), ('contributed equity', 37), ('perpetual equity instrument', 33), ('common stock', 26)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 3000000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['16'], 'line_item_value': [3000000.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('share capital', 100), (' share capital ', 100), ('equity share capital', 76), (' issued capital', 67), ('contributed equity', 37), ('contributed equity', 37), ('perpetual equity instrument', 33), ('common stock', 26)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 3000000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['16'], 'line_item_value': [3000000.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other equity', 43), ('retained earnings', 36), (' accumulated losses', 26), ('reserves surplus', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 15959215.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [15959215.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other equity', 43), ('retained earnings', 36), (' accumulated losses', 26), ('reserves surplus', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 19120823.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [19120823.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest', 32), ('non controlling interest', 32), ('minority interest', 32), ('noncontrolling interest', 27), (' non-controlling interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest', 32), ('non controlling interest', 32), ('minority interest', 32), ('noncontrolling interest', 27), (' non-controlling interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' reserves', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('trade receivables', 35), ('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 22), ('billed', 0), ('unbilled', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('trade receivables', 50), ('trade and other receivables', 44), ('account receivables', 43), ('government subsidies receivable', 43), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 30), ('trade and other receivables', 27), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('billed', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 555857.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['10'], 'line_item_value': [555857.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('trade receivables', 35), ('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 22), ('billed', 0), ('unbilled', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('trade receivables', 50), ('trade and other receivables', 44), ('account receivables', 43), ('government subsidies receivable', 43), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 30), ('trade and other receivables', 27), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('billed', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 290928.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['10'], 'line_item_value': [290928.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current tax funding receivable related party , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 61), (' share of joint venture receivables', 56), (' net trade debtors', 50), ('charges paid in advance', 35), (' other debtors', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current trade debtors , res_fuzz_match = [(' net trade debtors', 94), (' other debtors', 75), ('trade receivables', 58), (' share of joint venture receivables', 45), (' related party receivables', 44), ('charges paid in advance', 41)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current accrued revenue , res_fuzz_match = [(' related party receivables', 56), ('trade receivables', 50), (' share of joint venture receivables', 45), (' net trade debtors', 38), ('charges paid in advance', 35), (' other debtors', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 67), (' share of joint venture receivables', 60), (' other debtors', 58), (' net trade debtors', 44), ('charges paid in advance', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' share of joint venture receivables', 38), (' net trade debtors', 38), (' other debtors', 33), ('charges paid in advance', 31), ('trade receivables', 25), (' related party receivables', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current 11 , res_fuzz_match = [(' share of joint venture receivables', 57), (' other debtors', 43), ('trade receivables', 29), (' related party receivables', 29), (' net trade debtors', 29), ('charges paid in advance', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current tax funding receivable related party , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 61), (' share of joint venture receivables', 56), (' net trade debtors', 50), ('charges paid in advance', 35), (' other debtors', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current trade debtors , res_fuzz_match = [(' net trade debtors', 94), (' other debtors', 75), ('trade receivables', 58), (' share of joint venture receivables', 45), (' related party receivables', 44), ('charges paid in advance', 41)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current accrued revenue , res_fuzz_match = [(' related party receivables', 56), ('trade receivables', 50), (' share of joint venture receivables', 45), (' net trade debtors', 38), ('charges paid in advance', 35), (' other debtors', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current other receivables , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 67), (' share of joint venture receivables', 60), (' other debtors', 58), (' net trade debtors', 44), ('charges paid in advance', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' share of joint venture receivables', 38), (' net trade debtors', 38), (' other debtors', 33), ('charges paid in advance', 31), ('trade receivables', 25), (' related party receivables', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = current 11 , res_fuzz_match = [(' share of joint venture receivables', 57), (' other debtors', 43), ('trade receivables', 29), (' related party receivables', 29), (' net trade debtors', 29), ('charges paid in advance', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' related party receivables', 61), (' other debtors', 58), (' net trade debtors', 56), ('charges paid in advance', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': [94, 94], 'value': [108249.0, 116819.0], 'label': ['Current Trade debtors', 'Current Trade debtors'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' revenue from continuing activities', 54), ('revenue from operations', 43), ('net sales', 40), (' Sale of coal', 38), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('sale of products', 33), ('transmission and distribution business', 30), ('from trading business', 30), (' Revenue', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), (' revenue from continuing activities', 39), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 33), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('revenue from operations', 40), (' Sales revenue', 40), (' Revenue', 40), ('sale of products', 38), (' revenue from continuing activities', 31), ('transmission and distribution business', 29), ('net sales', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), (' Sale of coal', 26), ('from trading business', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), (' revenue from continuing activities', 60), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 37), ('net sales', 35), (' revenue from continuing activities', 35), ('from trading business', 33), ('revenue from operations', 26), ('transmission and distribution business', 23), (' Sales revenue', 23), (' Revenue', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('from trading business', 44), ('revenue from operations', 38), ('transmission and distribution business', 37), ('sale of products', 36), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('net sales', 28), (' Sale of coal', 27), (' revenue from continuing activities', 26), (' Sales revenue', 25), (' Revenue', 7)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('net sales', 44), ('from trading business', 35), (' Sales revenue', 33), (' revenue from continuing activities', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), ('revenue from operations', 29), ('sale of products', 26), (' Revenue', 24), (' Sale of coal', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations', 45), ('revenue from contracts with customers', 36), ('from trading business', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), ('sale of products', 33), (' revenue from continuing activities', 33), (' Sale of coal', 24), (' Sales revenue', 23), (' Revenue', 20), ('net sales', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('from trading business', 36), ('sale of products', 35), (' Sales revenue', 35), (' revenue from continuing activities', 34), ('revenue from operations', 32), (' Sale of coal', 29), ('transmission and distribution business', 26), ('net sales', 25), (' Revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('transmission and distribution business', 49), ('sale of products', 40), (' revenue from continuing activities', 37), (' Sales revenue', 33), ('net sales', 29), ('from trading business', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 27), ('revenue from operations', 21), (' Revenue', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations', 48), ('from trading business', 38), (' Sale of coal', 38), (' revenue from continuing activities', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), ('transmission and distribution business', 31), ('sale of products', 28), (' Sales revenue', 21), (' Revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations', 45), ('revenue from contracts with customers', 36), ('from trading business', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), ('sale of products', 33), (' revenue from continuing activities', 33), (' Sale of coal', 24), (' Sales revenue', 23), (' Revenue', 20), ('net sales', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('transmission and distribution business', 45), (' revenue from continuing activities', 44), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), (' Sales revenue', 39), ('from trading business', 36), ('revenue from operations', 35), ('sale of products', 33), (' Sale of coal', 31), ('net sales', 26), (' Revenue', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations', 48), ('from trading business', 38), (' Sale of coal', 38), (' revenue from continuing activities', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), ('transmission and distribution business', 31), ('sale of products', 28), (' Sales revenue', 21), (' Revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('from trading business', 36), ('sale of products', 35), (' Sales revenue', 35), (' revenue from continuing activities', 34), ('revenue from operations', 32), (' Sale of coal', 29), ('transmission and distribution business', 26), ('net sales', 25), (' Revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5624766.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [5624766.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' revenue from continuing activities', 54), ('revenue from operations', 43), ('net sales', 40), (' Sale of coal', 38), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('sale of products', 33), ('transmission and distribution business', 30), ('from trading business', 30), (' Revenue', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), (' revenue from continuing activities', 39), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 33), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('revenue from operations', 40), (' Sales revenue', 40), (' Revenue', 40), ('sale of products', 38), (' revenue from continuing activities', 31), ('transmission and distribution business', 29), ('net sales', 27), ('revenue from contracts with customers', 26), ('Revenue from contract with customers', 26), (' Sale of coal', 26), ('from trading business', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), (' revenue from continuing activities', 60), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 37), ('net sales', 35), (' revenue from continuing activities', 35), ('from trading business', 33), ('revenue from operations', 26), ('transmission and distribution business', 23), (' Sales revenue', 23), (' Revenue', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('from trading business', 44), ('revenue from operations', 38), ('transmission and distribution business', 37), ('sale of products', 36), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('net sales', 28), (' Sale of coal', 27), (' revenue from continuing activities', 26), (' Sales revenue', 25), (' Revenue', 7)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('net sales', 44), ('from trading business', 35), (' Sales revenue', 33), (' revenue from continuing activities', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), ('revenue from operations', 29), ('sale of products', 26), (' Revenue', 24), (' Sale of coal', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations', 45), ('revenue from contracts with customers', 36), ('from trading business', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), ('sale of products', 33), (' revenue from continuing activities', 33), (' Sale of coal', 24), (' Sales revenue', 23), (' Revenue', 20), ('net sales', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('from trading business', 36), ('sale of products', 35), (' Sales revenue', 35), (' revenue from continuing activities', 34), ('revenue from operations', 32), (' Sale of coal', 29), ('transmission and distribution business', 26), ('net sales', 25), (' Revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('transmission and distribution business', 49), ('sale of products', 40), (' revenue from continuing activities', 37), (' Sales revenue', 33), ('net sales', 29), ('from trading business', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sale of coal', 27), ('revenue from operations', 21), (' Revenue', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations', 48), ('from trading business', 38), (' Sale of coal', 38), (' revenue from continuing activities', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), ('transmission and distribution business', 31), ('sale of products', 28), (' Sales revenue', 21), (' Revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations', 45), ('revenue from contracts with customers', 36), ('from trading business', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), ('sale of products', 33), (' revenue from continuing activities', 33), (' Sale of coal', 24), (' Sales revenue', 23), (' Revenue', 20), ('net sales', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('transmission and distribution business', 45), (' revenue from continuing activities', 44), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), (' Sales revenue', 39), ('from trading business', 36), ('revenue from operations', 35), ('sale of products', 33), (' Sale of coal', 31), ('net sales', 26), (' Revenue', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('revenue from operations', 48), ('from trading business', 38), (' Sale of coal', 38), (' revenue from continuing activities', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), ('transmission and distribution business', 31), ('sale of products', 28), (' Sales revenue', 21), (' Revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('from trading business', 36), ('sale of products', 35), (' Sales revenue', 35), (' revenue from continuing activities', 34), ('revenue from operations', 32), (' Sale of coal', 29), ('transmission and distribution business', 26), ('net sales', 25), (' Revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 15135308.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [15135308.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 82), (' Sale of goods - Motorcycles', 64), (' Sale of goods - Marine', 64), (' Condensate', 57), (' Feed gas income', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 36), (' Goods sold to customer direct from supplier', 36), (' LNG', 33), (' Total Revenue', 33), (' Gas transportation income', 29), (' Domgas', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = revenue , res_fuzz_match = [(' Total Revenue', 100), (' Goods sold to customer from warehouse', 50), (' LNG', 33), (' Condensate', 33), (' Feed gas income', 33), (' Gas transportation income', 33), (' Sale of goods - Marine', 33), (' Sale of goods - Spareparts', 33), (' Goods sold to customer direct from supplier', 33), ('Sale of goods', 17), (' Sale of goods - Cars', 17), (' Sale of goods - Motorcycles', 17), (' Domgas', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Total Revenue', 50), (' Condensate', 43), (' Domgas', 40), (' Sale of goods - Cars', 40), (' Sale of goods - Motorcycles', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Goods sold to customer direct from supplier', 40), ('Sale of goods', 33), (' LNG', 33), (' Gas transportation income', 30), (' Sale of goods - Spareparts', 30), (' Feed gas income', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = revenue , res_fuzz_match = [(' Total Revenue', 100), (' Goods sold to customer from warehouse', 50), (' LNG', 33), (' Condensate', 33), (' Feed gas income', 33), (' Gas transportation income', 33), (' Sale of goods - Marine', 33), (' Sale of goods - Spareparts', 33), (' Goods sold to customer direct from supplier', 33), ('Sale of goods', 17), (' Sale of goods - Cars', 17), (' Sale of goods - Motorcycles', 17), (' Domgas', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 5 , res_fuzz_match = [(' Condensate', 75), (' Feed gas income', 50), (' Gas transportation income', 50), (' LNG', 33), ('Sale of goods', 25), (' Domgas', 25), (' Sale of goods - Cars', 25), (' Sale of goods - Motorcycles', 25), (' Sale of goods - Marine', 25), (' Sale of goods - Spareparts', 25), (' Total Revenue', 25), (' Goods sold to customer from warehouse', 25), (' Goods sold to customer direct from supplier', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = revenue , res_fuzz_match = [(' Total Revenue', 100), (' Goods sold to customer from warehouse', 50), (' LNG', 33), (' Condensate', 33), (' Feed gas income', 33), (' Gas transportation income', 33), (' Sale of goods - Marine', 33), (' Sale of goods - Spareparts', 33), (' Goods sold to customer direct from supplier', 33), ('Sale of goods', 17), (' Sale of goods - Cars', 17), (' Sale of goods - Motorcycles', 17), (' Domgas', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 82), (' Sale of goods - Motorcycles', 64), (' Sale of goods - Marine', 64), (' Condensate', 57), (' Feed gas income', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 36), (' Goods sold to customer direct from supplier', 36), (' LNG', 33), (' Total Revenue', 33), (' Gas transportation income', 29), (' Domgas', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = revenue , res_fuzz_match = [(' Total Revenue', 100), (' Goods sold to customer from warehouse', 50), (' LNG', 33), (' Condensate', 33), (' Feed gas income', 33), (' Gas transportation income', 33), (' Sale of goods - Marine', 33), (' Sale of goods - Spareparts', 33), (' Goods sold to customer direct from supplier', 33), ('Sale of goods', 17), (' Sale of goods - Cars', 17), (' Sale of goods - Motorcycles', 17), (' Domgas', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Total Revenue', 50), (' Condensate', 43), (' Domgas', 40), (' Sale of goods - Cars', 40), (' Sale of goods - Motorcycles', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Goods sold to customer direct from supplier', 40), ('Sale of goods', 33), (' LNG', 33), (' Gas transportation income', 30), (' Sale of goods - Spareparts', 30), (' Feed gas income', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = revenue , res_fuzz_match = [(' Total Revenue', 100), (' Goods sold to customer from warehouse', 50), (' LNG', 33), (' Condensate', 33), (' Feed gas income', 33), (' Gas transportation income', 33), (' Sale of goods - Marine', 33), (' Sale of goods - Spareparts', 33), (' Goods sold to customer direct from supplier', 33), ('Sale of goods', 17), (' Sale of goods - Cars', 17), (' Sale of goods - Motorcycles', 17), (' Domgas', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 5 , res_fuzz_match = [(' Condensate', 75), (' Feed gas income', 50), (' Gas transportation income', 50), (' LNG', 33), ('Sale of goods', 25), (' Domgas', 25), (' Sale of goods - Cars', 25), (' Sale of goods - Motorcycles', 25), (' Sale of goods - Marine', 25), (' Sale of goods - Spareparts', 25), (' Total Revenue', 25), (' Goods sold to customer from warehouse', 25), (' Goods sold to customer direct from supplier', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = revenue , res_fuzz_match = [(' Total Revenue', 100), (' Goods sold to customer from warehouse', 50), (' LNG', 33), (' Condensate', 33), (' Feed gas income', 33), (' Gas transportation income', 33), (' Sale of goods - Marine', 33), (' Sale of goods - Spareparts', 33), (' Goods sold to customer direct from supplier', 33), ('Sale of goods', 17), (' Sale of goods - Cars', 17), (' Sale of goods - Motorcycles', 17), (' Domgas', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 2, 3, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [15135308.0, 15135308.0, 15135308.0, 0.0, 5624766.0, 5624766.0, 5624766.0, 0.0], 'label': ['None Sale of goods', 'Revenue', 'Revenue', 'Revenue', 'None Sale of goods', 'Revenue', 'Revenue', 'Revenue'], 'year': [], 'colname_found': ['rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns']}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), (' cost of goods sold', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 21), (' cost of goods sold', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' cost of goods sold', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' cost of goods sold', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Cost of product sold', 42), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 30), (' cost of goods sold', 29), ('expenditure', 26), ('expense', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('total expenses', 58), ('expense', 48), ('total expenditure', 46), ('expenditure', 41), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 26), (' Cost of inventory sold', 26), (' Cost of goods and services sold', 23), (' Cost of product sold', 22), (' cost of coal sold', 18), (' cost of goods sold', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold', 26), ('expenditure', 24), ('expense', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('total expenditure', 39), ('total expenses', 38), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' cost of goods sold', 37), (' Cost of product sold', 35), ('purchase of stock-in-trade', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Personnel costs', 33), ('expenditure', 24), ('expense', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' Cost of product sold', 40), (' Cost of inventory sold', 38), (' cost of coal sold', 37), (' Cost of goods and services sold', 32), (' cost of goods sold', 30), ('total expenditure', 28), ('cost of sales', 27), ('Cost of sales', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' Personnel costs', 22), ('expenditure', 17), ('expense', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold', 26), ('expenditure', 24), ('expense', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('total expenses', 48), ('purchase of stock-in-trade', 41), (' cost of coal sold', 41), (' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), (' cost of goods sold', 36), (' Cost of product sold', 34), (' Personnel costs', 32), ('expense', 22), ('expenditure', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('total expenditure', 39), ('total expenses', 38), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' cost of goods sold', 37), (' Cost of product sold', 35), ('purchase of stock-in-trade', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Personnel costs', 33), ('expenditure', 24), ('expense', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -5528209.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-5528209.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), (' cost of goods sold', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('expense', 60), ('total expenses', 46), ('expenditure', 42), (' Personnel costs', 36), ('total expenditure', 33), (' Cost of product sold', 32), (' Cost of goods and services sold', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 21), (' cost of goods sold', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' cost of goods sold', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' cost of goods sold', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Cost of product sold', 42), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 30), (' cost of goods sold', 29), ('expenditure', 26), ('expense', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('total expenses', 58), ('expense', 48), ('total expenditure', 46), ('expenditure', 41), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 26), (' Cost of inventory sold', 26), (' Cost of goods and services sold', 23), (' Cost of product sold', 22), (' cost of coal sold', 18), (' cost of goods sold', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold', 26), ('expenditure', 24), ('expense', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('total expenditure', 39), ('total expenses', 38), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' cost of goods sold', 37), (' Cost of product sold', 35), ('purchase of stock-in-trade', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Personnel costs', 33), ('expenditure', 24), ('expense', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' Cost of product sold', 40), (' Cost of inventory sold', 38), (' cost of coal sold', 37), (' Cost of goods and services sold', 32), (' cost of goods sold', 30), ('total expenditure', 28), ('cost of sales', 27), ('Cost of sales', 27), ('purchase of stock-in-trade', 25), ('total expenses', 24), (' Personnel costs', 22), ('expenditure', 17), ('expense', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), (' cost of goods sold', 26), ('expenditure', 24), ('expense', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('total expenses', 48), ('purchase of stock-in-trade', 41), (' cost of coal sold', 41), (' Cost of goods and services sold', 40), ('total expenditure', 39), (' Cost of inventory sold', 37), ('cost of sales', 36), ('Cost of sales', 36), (' cost of goods sold', 36), (' Cost of product sold', 34), (' Personnel costs', 32), ('expense', 22), ('expenditure', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of inventory sold', 39), (' Personnel costs', 39), ('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of product sold', 29), ('expense', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('total expenditure', 39), ('total expenses', 38), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' cost of goods sold', 37), (' Cost of product sold', 35), ('purchase of stock-in-trade', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Personnel costs', 33), ('expenditure', 24), ('expense', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': -8632741.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-8632741.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation â€“ property', ' plant and equipment', ' Depreciation â€“ right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), ('Distribution expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Logistics and distribution', 38), (' Administrative and other expenses', 37), (' Advertising expenses', 37), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Marketing expenses', 24), (' depreciation', 21), (' Management expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Depreciation expenses', 100), (' Depreciation expenses', 100), (' Advertising expenses', 76), (' depreciation', 67), ('Distribution expenses', 67), (' Amortisation expenses', 64), (' Administrative expenses', 60), (' Administration expenses', 60), (' Selling & distribution expenses', 57), (' Lease expenses', 48), (' Selling Expenses', 48), ('other expenses', 46), (' Occupancy expenses', 46), (' Other expenses', 46), (' Management expenses', 46), (' Other expenses', 46), (' Administrative and other expenses', 45), (' Marketing expenses', 44), (' Sales and marketing', 34), (' Logistics and distribution', 29), (' Occupancy ', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 39), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), ('Distribution expenses', 32), (' Management expenses', 30), (' Logistics and distribution', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' depreciation', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Logistics and distribution', 34), ('Distribution expenses', 32), ('other expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' depreciation', 29), (' Marketing expenses', 29), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Advertising expenses', 28), (' Sales and marketing', 28), (' Administrative and other expenses', 26), (' Lease expenses', 25), (' Occupancy expenses', 24), (' Management expenses', 24), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling Expenses', 19), (' Occupancy ', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' Depreciation expenses', 61), (' Depreciation expenses', 61), (' Administrative expenses', 57), (' Administration expenses', 57), (' Administrative and other expenses', 53), (' Lease expenses', 53), (' Advertising expenses', 53), ('other expenses', 52), (' Other expenses', 52), (' Management expenses', 52), (' Other expenses', 52), ('Distribution expenses', 51), (' Marketing expenses', 50), (' Selling & distribution expenses', 50), (' Amortisation expenses', 48), (' Selling Expenses', 47), (' Occupancy expenses', 45), (' Sales and marketing', 35), (' Logistics and distribution', 31), (' depreciation', 23), (' Occupancy ', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Lease expenses', 29), (' Marketing expenses', 27), (' Advertising expenses', 26), (' Sales and marketing', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Selling Expenses', 23), (' Management expenses', 22), (' depreciation', 19), (' Occupancy expenses', 17), (' Occupancy ', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Administrative and other expenses', 39), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Lease expenses', 31), (' Selling Expenses', 31), (' Management expenses', 31), (' Marketing expenses', 30), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), (' Logistics and distribution', 30), (' Sales and marketing', 29), (' Occupancy expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Advertising expenses', 25), ('Distribution expenses', 21), (' depreciation', 17), (' Occupancy ', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' Logistics and distribution', 67), ('Distribution expenses', 55), (' Selling & distribution expenses', 53), (' Amortisation expenses', 37), (' Advertising expenses', 36), (' Sales and marketing', 36), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Administrative and other expenses', 26), (' Lease expenses', 25), (' Marketing expenses', 23), (' depreciation', 20), (' Selling Expenses', 17), ('other expenses', 16), (' Occupancy expenses', 16), (' Other expenses', 16), (' Other expenses', 16), (' Occupancy ', 11), (' Management expenses', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 47), (' Sales and marketing', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Marketing expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Management expenses', 28), (' Selling & distribution expenses', 26), (' depreciation', 25), ('Distribution expenses', 24), (' Occupancy ', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Lease expenses', 29), (' Marketing expenses', 27), (' Advertising expenses', 26), (' Sales and marketing', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Selling Expenses', 23), (' Management expenses', 22), (' depreciation', 19), (' Occupancy expenses', 17), (' Occupancy ', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 55), ('Distribution expenses', 48), (' Logistics and distribution', 48), (' Sales and marketing', 40), (' Administrative and other expenses', 39), (' Advertising expenses', 36), (' Amortisation expenses', 36), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 34), (' Selling Expenses', 34), ('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Occupancy expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' depreciation', 16), (' Occupancy ', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 47), (' Sales and marketing', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Marketing expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Management expenses', 28), (' Selling & distribution expenses', 26), (' depreciation', 25), ('Distribution expenses', 24), (' Occupancy ', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Administrative and other expenses', 39), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Lease expenses', 31), (' Selling Expenses', 31), (' Management expenses', 31), (' Marketing expenses', 30), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), (' Logistics and distribution', 30), (' Sales and marketing', 29), (' Occupancy expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Advertising expenses', 25), ('Distribution expenses', 21), (' depreciation', 17), (' Occupancy ', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 100, 'value': -2382080.0, 'line_item_label': ['Depreciation expense', 'Other expenses'], 'note_numbers': [nan, '6'], 'line_item_value': [-1935433.0, -446647.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), ('Distribution expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Logistics and distribution', 38), (' Administrative and other expenses', 37), (' Advertising expenses', 37), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Marketing expenses', 24), (' depreciation', 21), (' Management expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Depreciation expenses', 100), (' Depreciation expenses', 100), (' Advertising expenses', 76), (' depreciation', 67), ('Distribution expenses', 67), (' Amortisation expenses', 64), (' Administrative expenses', 60), (' Administration expenses', 60), (' Selling & distribution expenses', 57), (' Lease expenses', 48), (' Selling Expenses', 48), ('other expenses', 46), (' Occupancy expenses', 46), (' Other expenses', 46), (' Management expenses', 46), (' Other expenses', 46), (' Administrative and other expenses', 45), (' Marketing expenses', 44), (' Sales and marketing', 34), (' Logistics and distribution', 29), (' Occupancy ', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 39), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), ('Distribution expenses', 32), (' Management expenses', 30), (' Logistics and distribution', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' depreciation', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Logistics and distribution', 34), ('Distribution expenses', 32), ('other expenses', 30), (' Other expenses', 30), (' Other expenses', 30), (' depreciation', 29), (' Marketing expenses', 29), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Advertising expenses', 28), (' Sales and marketing', 28), (' Administrative and other expenses', 26), (' Lease expenses', 25), (' Occupancy expenses', 24), (' Management expenses', 24), (' Administrative expenses', 22), (' Administration expenses', 22), (' Selling Expenses', 19), (' Occupancy ', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' Depreciation expenses', 61), (' Depreciation expenses', 61), (' Administrative expenses', 57), (' Administration expenses', 57), (' Administrative and other expenses', 53), (' Lease expenses', 53), (' Advertising expenses', 53), ('other expenses', 52), (' Other expenses', 52), (' Management expenses', 52), (' Other expenses', 52), ('Distribution expenses', 51), (' Marketing expenses', 50), (' Selling & distribution expenses', 50), (' Amortisation expenses', 48), (' Selling Expenses', 47), (' Occupancy expenses', 45), (' Sales and marketing', 35), (' Logistics and distribution', 31), (' depreciation', 23), (' Occupancy ', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Lease expenses', 29), (' Marketing expenses', 27), (' Advertising expenses', 26), (' Sales and marketing', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Selling Expenses', 23), (' Management expenses', 22), (' depreciation', 19), (' Occupancy expenses', 17), (' Occupancy ', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Administrative and other expenses', 39), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Lease expenses', 31), (' Selling Expenses', 31), (' Management expenses', 31), (' Marketing expenses', 30), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), (' Logistics and distribution', 30), (' Sales and marketing', 29), (' Occupancy expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Advertising expenses', 25), ('Distribution expenses', 21), (' depreciation', 17), (' Occupancy ', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' Logistics and distribution', 67), ('Distribution expenses', 55), (' Selling & distribution expenses', 53), (' Amortisation expenses', 37), (' Advertising expenses', 36), (' Sales and marketing', 36), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Administrative and other expenses', 26), (' Lease expenses', 25), (' Marketing expenses', 23), (' depreciation', 20), (' Selling Expenses', 17), ('other expenses', 16), (' Occupancy expenses', 16), (' Other expenses', 16), (' Other expenses', 16), (' Occupancy ', 11), (' Management expenses', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 47), (' Sales and marketing', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Marketing expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Management expenses', 28), (' Selling & distribution expenses', 26), (' depreciation', 25), ('Distribution expenses', 24), (' Occupancy ', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Lease expenses', 29), (' Marketing expenses', 27), (' Advertising expenses', 26), (' Sales and marketing', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Selling Expenses', 23), (' Management expenses', 22), (' depreciation', 19), (' Occupancy expenses', 17), (' Occupancy ', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 55), ('Distribution expenses', 48), (' Logistics and distribution', 48), (' Sales and marketing', 40), (' Administrative and other expenses', 39), (' Advertising expenses', 36), (' Amortisation expenses', 36), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 34), (' Selling Expenses', 34), ('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Occupancy expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' depreciation', 16), (' Occupancy ', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 47), (' Sales and marketing', 38), (' Administrative expenses', 36), (' Administration expenses', 36), (' Marketing expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Management expenses', 28), (' Selling & distribution expenses', 26), (' depreciation', 25), ('Distribution expenses', 24), (' Occupancy ', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Administrative and other expenses', 39), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Lease expenses', 31), (' Selling Expenses', 31), (' Management expenses', 31), (' Marketing expenses', 30), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), (' Logistics and distribution', 30), (' Sales and marketing', 29), (' Occupancy expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Advertising expenses', 25), ('Distribution expenses', 21), (' depreciation', 17), (' Occupancy ', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6], 'score': 100, 'value': -2807931.0, 'line_item_label': ['Depreciation expense', 'Other expenses'], 'note_numbers': [nan, '6'], 'line_item_value': [-2383232.0, -424699.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation â€“ property', ' plant and equipment', ' Depreciation â€“ right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none jv operating expenses , res_fuzz_match = [('power', 60), ('Included in administrative expenses', 56), (' Administrative expenses', 56), (' Payroll on-costs (excluding employee benefit provision)', 44), ('exchange', 43), ('equipment', 40), ('donation', 40), ('research', 38), (' Depreciation â€“ property', 38), (' Compulsory superannuation contributions', 38), ('consum', 33), ('machinery', 33), ('csr', 33), (' plant and equipment', 33), ('loss allowance', 30), (' Wages and salaries', 27), ('loss on', 25), (' Depreciation â€“ right-of-use assets', 25), (' Staff welfare', 25), ('miscellaneous', 22), ('charges', 20), ('analytical', 17), ('social', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation â€“ property', 33), (' Wages and salaries', 33), (' Depreciation â€“ right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('social', 50), (' Compulsory superannuation contributions', 50), ('power', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('consum', 33), ('analytical', 33), ('Included in administrative expenses', 30), (' Depreciation â€“ property', 30), (' plant and equipment', 30), (' Depreciation â€“ right-of-use assets', 30), (' Staff welfare', 30), ('exchange', 29), ('research', 25), ('loss on', 25), ('machinery', 22), ('miscellaneous', 22), ('charges', 20), ('equipment', 20), (' Administrative expenses', 20), ('csr', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation â€“ property', 33), (' Wages and salaries', 33), (' Depreciation â€“ right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('social', 50), (' Compulsory superannuation contributions', 50), ('power', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('consum', 33), ('analytical', 33), ('Included in administrative expenses', 30), (' Depreciation â€“ property', 30), (' plant and equipment', 30), (' Depreciation â€“ right-of-use assets', 30), (' Staff welfare', 30), ('exchange', 29), ('research', 25), ('loss on', 25), ('machinery', 22), ('miscellaneous', 22), ('charges', 20), ('equipment', 20), (' Administrative expenses', 20), ('csr', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation â€“ property', 33), (' Wages and salaries', 33), (' Depreciation â€“ right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 7 , res_fuzz_match = [('consum', 50), ('power', 50), ('machinery', 50), ('donation', 50), (' Depreciation â€“ property', 50), (' plant and equipment', 50), (' Compulsory superannuation contributions', 50), (' Payroll on-costs (excluding employee benefit provision)', 50), ('research', 25), ('analytical', 25), ('exchange', 25), ('loss on', 25), ('social', 25), ('miscellaneous', 25), ('loss allowance', 25), ('Included in administrative expenses', 25), (' Depreciation â€“ right-of-use assets', 25), (' Administrative expenses', 25), (' Wages and salaries', 25), (' Staff welfare', 25), ('charges', 0), ('equipment', 0), ('csr', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation â€“ property', 33), (' Wages and salaries', 33), (' Depreciation â€“ right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none jv operating expenses , res_fuzz_match = [('power', 60), ('Included in administrative expenses', 56), (' Administrative expenses', 56), (' Payroll on-costs (excluding employee benefit provision)', 44), ('exchange', 43), ('equipment', 40), ('donation', 40), ('research', 38), (' Depreciation â€“ property', 38), (' Compulsory superannuation contributions', 38), ('consum', 33), ('machinery', 33), ('csr', 33), (' plant and equipment', 33), ('loss allowance', 30), (' Wages and salaries', 27), ('loss on', 25), (' Depreciation â€“ right-of-use assets', 25), (' Staff welfare', 25), ('miscellaneous', 22), ('charges', 20), ('analytical', 17), ('social', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation â€“ property', 33), (' Wages and salaries', 33), (' Depreciation â€“ right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('social', 50), (' Compulsory superannuation contributions', 50), ('power', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('consum', 33), ('analytical', 33), ('Included in administrative expenses', 30), (' Depreciation â€“ property', 30), (' plant and equipment', 30), (' Depreciation â€“ right-of-use assets', 30), (' Staff welfare', 30), ('exchange', 29), ('research', 25), ('loss on', 25), ('machinery', 22), ('miscellaneous', 22), ('charges', 20), ('equipment', 20), (' Administrative expenses', 20), ('csr', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation â€“ property', 33), (' Wages and salaries', 33), (' Depreciation â€“ right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('social', 50), (' Compulsory superannuation contributions', 50), ('power', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('consum', 33), ('analytical', 33), ('Included in administrative expenses', 30), (' Depreciation â€“ property', 30), (' plant and equipment', 30), (' Depreciation â€“ right-of-use assets', 30), (' Staff welfare', 30), ('exchange', 29), ('research', 25), ('loss on', 25), ('machinery', 22), ('miscellaneous', 22), ('charges', 20), ('equipment', 20), (' Administrative expenses', 20), ('csr', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation â€“ property', 33), (' Wages and salaries', 33), (' Depreciation â€“ right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 7 , res_fuzz_match = [('consum', 50), ('power', 50), ('machinery', 50), ('donation', 50), (' Depreciation â€“ property', 50), (' plant and equipment', 50), (' Compulsory superannuation contributions', 50), (' Payroll on-costs (excluding employee benefit provision)', 50), ('research', 25), ('analytical', 25), ('exchange', 25), ('loss on', 25), ('social', 25), ('miscellaneous', 25), ('loss allowance', 25), ('Included in administrative expenses', 25), (' Depreciation â€“ right-of-use assets', 25), (' Administrative expenses', 25), (' Wages and salaries', 25), (' Staff welfare', 25), ('charges', 0), ('equipment', 0), ('csr', 0)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other expenses , res_fuzz_match = [('Included in administrative expenses', 75), (' Administrative expenses', 75), ('power', 60), (' Compulsory superannuation contributions', 50), ('exchange', 43), (' Payroll on-costs (excluding employee benefit provision)', 42), ('charges', 40), ('equipment', 40), ('research', 38), (' plant and equipment', 35), ('consum', 33), ('csr', 33), (' Depreciation â€“ property', 33), (' Wages and salaries', 33), (' Depreciation â€“ right-of-use assets', 26), ('loss on', 25), (' Staff welfare', 25), ('machinery', 22), ('miscellaneous', 22), ('donation', 20), ('analytical', 17), ('social', 17), ('loss allowance', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), (' Occupancy expenses', 33), ('Rent', 25), (' Rental expenses', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Administration expenses', 60), (' Occupancy expenses', 46), (' Rental expenses', 44), ('Rent', 33), (' Occupancy', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Rental expenses', 35), (' Occupancy expenses', 24), (' Administration expenses', 22), ('Rent', 16), (' Occupancy', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' Administration expenses', 57), (' Rental expenses', 56), (' Occupancy expenses', 45), ('Rent', 26), (' Occupancy', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 17), ('Rent', 14), (' Occupancy', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Rental expenses', 38), (' Occupancy expenses', 27), (' Administration expenses', 25), ('Rent', 18), (' Occupancy', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' Administration expenses', 34), ('Rent', 24), (' Rental expenses', 23), (' Occupancy expenses', 16), (' Occupancy', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses', 36), (' Rental expenses', 33), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 17), ('Rent', 14), (' Occupancy', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' Rental expenses', 37), (' Administration expenses', 35), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses', 36), (' Rental expenses', 33), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Rental expenses', 38), (' Occupancy expenses', 27), (' Administration expenses', 25), ('Rent', 18), (' Occupancy', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), (' Occupancy expenses', 33), ('Rent', 25), (' Rental expenses', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Administration expenses', 60), (' Occupancy expenses', 46), (' Rental expenses', 44), ('Rent', 33), (' Occupancy', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Rental expenses', 35), (' Occupancy expenses', 24), (' Administration expenses', 22), ('Rent', 16), (' Occupancy', 15)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' Administration expenses', 57), (' Rental expenses', 56), (' Occupancy expenses', 45), ('Rent', 26), (' Occupancy', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 17), ('Rent', 14), (' Occupancy', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Rental expenses', 38), (' Occupancy expenses', 27), (' Administration expenses', 25), ('Rent', 18), (' Occupancy', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' Administration expenses', 34), ('Rent', 24), (' Rental expenses', 23), (' Occupancy expenses', 16), (' Occupancy', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses', 36), (' Rental expenses', 33), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 17), ('Rent', 14), (' Occupancy', 14)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' Rental expenses', 37), (' Administration expenses', 35), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 11)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' Administration expenses', 36), (' Rental expenses', 33), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Rental expenses', 38), (' Occupancy expenses', 27), (' Administration expenses', 25), ('Rent', 18), (' Occupancy', 9)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('other operating', 32), (' Other income', 25), ('Other revenue', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('Other revenue', 32), ('other operating', 28), (' Other income', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Other income', 43), ('other operating', 40), ('Other revenue', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' Other income', 34), ('Other revenue', 33), ('other operating', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Other income', 43), ('other operating', 40), ('Other revenue', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 354542.0, 'line_item_label': ['Other income'], 'note_numbers': ['5'], 'line_item_value': [354542.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('Other revenue', 46), ('other operating', 33), (' Other income', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('other operating', 32), (' Other income', 25), ('Other revenue', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('Other revenue', 32), ('other operating', 28), (' Other income', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Other income', 43), ('other operating', 40), ('Other revenue', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' Other income', 34), ('Other revenue', 33), ('other operating', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other operating', 59), (' Other income', 57), ('Other revenue', 34)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' Other income', 43), ('other operating', 40), ('Other revenue', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 913338.0, 'line_item_label': ['Other income'], 'note_numbers': ['5'], 'line_item_value': [913338.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['Other income', ' Commission revenue', ' Rent'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none net foreign currency gain , res_fuzz_match = [(' Rent', 50), ('Other income', 45), (' Commission revenue', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none dividend income , res_fuzz_match = [('Other income', 64), (' Rent', 50), (' Commission revenue', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none insurance proceeds , res_fuzz_match = [(' Rent', 50), ('Other income', 45), (' Commission revenue', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none sundry income , res_fuzz_match = [('Other income', 64), (' Commission revenue', 29), (' Rent', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Rent', 50), ('Other income', 40), (' Commission revenue', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 6 , res_fuzz_match = [('Other income', 50), (' Commission revenue', 25), (' Rent', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none net foreign currency gain , res_fuzz_match = [(' Rent', 50), ('Other income', 45), (' Commission revenue', 43)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none dividend income , res_fuzz_match = [('Other income', 64), (' Rent', 50), (' Commission revenue', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none insurance proceeds , res_fuzz_match = [(' Rent', 50), ('Other income', 45), (' Commission revenue', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none sundry income , res_fuzz_match = [('Other income', 64), (' Commission revenue', 29), (' Rent', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Rent', 50), ('Other income', 40), (' Commission revenue', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 6 , res_fuzz_match = [('Other income', 50), (' Commission revenue', 25), (' Rent', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Other income', 100), (' Rent', 50), (' Commission revenue', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [102310.0, 8805.0, 783730.0, 18493.0, 913338.0, 0.0, 50087.0, 77893.0, 178660.0, 47902.0, 354542.0, 0.0], 'label': ['Other income', 'Other income', 'Other income', 'Other income', 'Other income', 'Other income', 'Other income', 'Other income', 'Other income', 'Other income', 'Other income', 'Other income'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Interest revenue', 48), (' Finance income and costs', 29), (' Net finance costs', 28), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 23), ('Finance income', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Net finance costs', 39), (' Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 28), ('other income', 25), ('finance income', 18), ('Finance income', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' Interest revenue', 41), (' Net finance costs', 29), ('other income', 27), ('finance income', 26), ('Finance income', 26), (' Finance income and finance costs', 26), (' Finance income and costs', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), (' Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17), ('Finance income', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 36), (' Finance income and finance costs', 32), ('finance income', 27), ('Finance income', 27), (' Interest revenue', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' Finance income and costs', 29), (' Interest revenue', 29), ('other income', 25), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Net finance costs', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28), ('Finance income', 28)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), (' Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17), ('Finance income', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' Interest revenue', 36), ('other income', 34), (' Finance income and costs', 31), (' Finance income and finance costs', 28), (' Net finance costs', 27), ('finance income', 24), ('Finance income', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28), ('Finance income', 28)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 36), (' Finance income and finance costs', 32), ('finance income', 27), ('Finance income', 27), (' Interest revenue', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 8, 9, 10], 'score': 100, 'value': 354542.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': ['5', nan, nan, '7'], 'line_item_value': [354542.0, 0.0, 0.0, 0.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' Interest revenue', 48), (' Finance income and costs', 29), (' Net finance costs', 28), ('other income', 24), (' Finance income and finance costs', 24), ('finance income', 23), ('Finance income', 23)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' Net finance costs', 39), (' Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 28), ('other income', 25), ('finance income', 18), ('Finance income', 18)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' Interest revenue', 41), (' Net finance costs', 29), ('other income', 27), ('finance income', 26), ('Finance income', 26), (' Finance income and finance costs', 26), (' Finance income and costs', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), (' Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17), ('Finance income', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 36), (' Finance income and finance costs', 32), ('finance income', 27), ('Finance income', 27), (' Interest revenue', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' Finance income and costs', 29), (' Interest revenue', 29), ('other income', 25), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Net finance costs', 21)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28), ('Finance income', 28)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), (' Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17), ('Finance income', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' Interest revenue', 36), ('other income', 34), (' Finance income and costs', 31), (' Finance income and finance costs', 28), (' Net finance costs', 27), ('finance income', 24), ('Finance income', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('other income', 57), (' Net finance costs', 50), (' Interest revenue', 38), (' Finance income and costs', 32), (' Finance income and finance costs', 31), ('finance income', 28), ('Finance income', 28)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('other income', 43), (' Net finance costs', 40), (' Finance income and costs', 36), (' Finance income and finance costs', 32), ('finance income', 27), ('Finance income', 27), (' Interest revenue', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 8, 9, 10], 'score': 100, 'value': 730658.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': ['5', nan, nan, '7'], 'line_item_value': [913338.0, 22241.0, -113581.0, -91340.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none net foreign currency gain , res_fuzz_match = [('interest', 50), (' Interest income', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 50), ('Bank interest', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), (' Sublease interest income', 41), (' Bank Deposits - cash and cash equivalents', 34)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none dividend income , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 53), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), (' Interest received - Bank', 37), (' Interest received - Loan', 37), (' Share of JV interest received/(paid)', 37), (' Bank Deposits - cash and cash equivalents', 37), ('Bank interest', 31), ('interest', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none insurance proceeds , res_fuzz_match = [(' Share of JV interest received/(paid)', 56), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Interest received - Bank', 44), (' Interest received - Loan', 44), (' Interest income', 43), (' Interest income', 43), ('interest', 38), ('Bank interest', 38), (' Sublease interest income', 38), (' Bank Deposits - cash and cash equivalents', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none sundry income , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 53), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 47), (' Interest received - Loan', 41), (' Bank Deposits - cash and cash equivalents', 41), ('interest', 38), (' Interest received - Bank', 35), (' Share of JV interest received/(paid)', 35), ('Bank interest', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 30), (' Interest income', 30), (' Interest received - Bank', 30), (' Sublease interest income', 30), (' Share of JV interest received/(paid)', 30), (' Interest income', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 6 , res_fuzz_match = [('interest', 50), ('Bank interest', 50), (' Interest income', 50), (' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Interest income', 50), (' Bank Deposits - cash and cash equivalents', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none net foreign currency gain , res_fuzz_match = [('interest', 50), (' Interest income', 50), (' Share of JV interest received/(paid)', 50), (' Interest income', 50), ('Bank interest', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), (' Sublease interest income', 41), (' Bank Deposits - cash and cash equivalents', 34)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none dividend income , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 53), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), (' Interest received - Bank', 37), (' Interest received - Loan', 37), (' Share of JV interest received/(paid)', 37), (' Bank Deposits - cash and cash equivalents', 37), ('Bank interest', 31), ('interest', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none insurance proceeds , res_fuzz_match = [(' Share of JV interest received/(paid)', 56), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Interest received - Bank', 44), (' Interest received - Loan', 44), (' Interest income', 43), (' Interest income', 43), ('interest', 38), ('Bank interest', 38), (' Sublease interest income', 38), (' Bank Deposits - cash and cash equivalents', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none sundry income , res_fuzz_match = [(' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 53), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 47), (' Interest received - Loan', 41), (' Bank Deposits - cash and cash equivalents', 41), ('interest', 38), (' Interest received - Bank', 35), (' Share of JV interest received/(paid)', 35), ('Bank interest', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 30), (' Interest income', 30), (' Interest received - Bank', 30), (' Sublease interest income', 30), (' Share of JV interest received/(paid)', 30), (' Interest income', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 6 , res_fuzz_match = [('interest', 50), ('Bank interest', 50), (' Interest income', 50), (' Interest received - Bank', 50), (' Interest received - Loan', 50), (' Sublease interest income', 50), (' Share of JV interest received/(paid)', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Interest income', 50), (' Bank Deposits - cash and cash equivalents', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [(' Interest income', 73), (' Sublease interest income', 73), (' Interest income', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 55), (' Interest received - Bank', 45), (' Interest received - Loan', 45), (' Share of JV interest received/(paid)', 45), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 36), ('Bank interest', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none net foreign currency gain , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none dividend income , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none insurance proceeds , res_fuzz_match = [('Interest expense', 40), ('interest expense', 40)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none sundry income , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Interest expense', 30), ('interest expense', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 6 , res_fuzz_match = [('Interest expense', 50), ('interest expense', 50)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none net foreign currency gain , res_fuzz_match = [('Interest expense', 47), ('interest expense', 47)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none dividend income , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none insurance proceeds , res_fuzz_match = [('Interest expense', 40), ('interest expense', 40)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none sundry income , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Interest expense', 30), ('interest expense', 30)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = none 6 , res_fuzz_match = [('Interest expense', 50), ('interest expense', 50)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_rows = other income , res_fuzz_match = [('Interest expense', 36), ('interest expense', 36)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' finance expenses', 50), (' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 34), ('finance cost', 31), ('finance costs', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' net finance costs ', 21), ('finance cost', 17), ('finance costs', 17), (' finance expenses', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' finance expenses', 28), (' net finance costs ', 27), ('finance cost', 24), ('finance costs', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 34), ('finance cost', 31), ('finance costs', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': 0.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '7'], 'line_item_value': [0.0, 0.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 35)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' finance expenses', 50), (' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 34), ('finance cost', 31), ('finance costs', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' net finance costs ', 21), ('finance cost', 17), ('finance costs', 17), (' finance expenses', 8)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' finance expenses', 28), (' net finance costs ', 27), ('finance cost', 24), ('finance costs', 24)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 34), ('finance cost', 31), ('finance costs', 31)]
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': -204921.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '7'], 'line_item_value': [-113581.0, -91340.0]}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:08+0530 - sLogger - DEBUG - keywords = ['interest income'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:08+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-08-10 15:32:08+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:08+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 15:32:08+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 35)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' finance expenses', 50), (' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 34), ('finance cost', 31), ('finance costs', 31)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' net finance costs ', 21), ('finance cost', 17), ('finance costs', 17), (' finance expenses', 8)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' finance expenses', 28), (' net finance costs ', 27), ('finance cost', 24), ('finance costs', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 34), ('finance cost', 31), ('finance costs', 31)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': 0.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '7'], 'line_item_value': [0.0, 0.0]}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' finance expenses', 44), (' net finance costs ', 28), ('finance cost', 24), ('finance costs', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 38), ('finance costs', 38), (' finance expenses', 35)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' finance expenses', 50), (' net finance costs ', 29), ('finance cost', 27), ('finance costs', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 34), ('finance cost', 31), ('finance costs', 31)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [(' net finance costs ', 21), ('finance cost', 17), ('finance costs', 17), (' finance expenses', 8)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' finance expenses', 28), (' net finance costs ', 27), ('finance cost', 24), ('finance costs', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [(' net finance costs ', 50), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [(' net finance costs ', 40), (' finance expenses', 34), ('finance cost', 31), ('finance costs', 31)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': -204921.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '7'], 'line_item_value': [-113581.0, -91340.0]}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('NULL', 9)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('NULL', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('NULL', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('NULL', 18)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('NULL', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('NULL', 9)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('NULL', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('NULL', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('NULL', 18)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('NULL', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' tax (expense)/benefit', 62), (' income tax benefit/(expense)', 53), ('deferred tax', 43), ('prior year ', 42), (' income tax expense', 40), ('earlier year', 38), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), ('current tax', 32), (' income tax benefit', 32), ('minimum alternate tax credit entitlement', 30), (' income tax', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('provision for taxation previous year', 56), (' income tax benefit/(expense)', 49), ('deferred tax', 47), (' income tax benefit', 47), (' tax (expense)/benefit', 46), ('current tax', 44), (' income tax expense', 43), ('minimum alternate tax credit entitlement', 38), ('earlier year', 36), ('amount transferred to retained earnings', 33), (' income tax', 33), ('prior year ', 32)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' tax (expense)/benefit', 97), (' income tax benefit/(expense)', 84), (' income tax benefit', 72), (' income tax expense', 57), ('deferred tax', 50), ('current tax', 47), ('minimum alternate tax credit entitlement', 47), (' income tax', 43), ('amount transferred to retained earnings', 39), ('provision for taxation previous year', 38), ('earlier year', 32), ('prior year ', 28)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 49), (' income tax expense', 46), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), (' income tax', 33), ('current tax', 31), (' tax (expense)/benefit', 31), ('deferred tax', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('earlier year', 32), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), (' income tax benefit', 27), ('prior year ', 26), (' tax (expense)/benefit', 26), ('current tax', 25), (' income tax benefit/(expense)', 22), ('deferred tax', 18), (' income tax', 18), (' income tax expense', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior year ', 44), ('earlier year', 41), (' income tax', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 35), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('deferred tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax benefit/(expense)', 29)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 44), ('minimum alternate tax credit entitlement', 42), (' tax (expense)/benefit', 42), ('provision for taxation previous year', 41), (' income tax expense', 39), (' income tax benefit', 38), (' income tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 34), ('prior year ', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior year ', 44), ('earlier year', 41), (' income tax', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 35), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('deferred tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax benefit/(expense)', 29)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 49), (' income tax expense', 46), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), (' income tax', 33), ('current tax', 31), (' tax (expense)/benefit', 31), ('deferred tax', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 97, 'value': 5587.0, 'line_item_label': ['Tax (expense/benefift'], 'note_numbers': ['8'], 'line_item_value': [5587.0]}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [(' tax (expense)/benefit', 62), (' income tax benefit/(expense)', 53), ('deferred tax', 43), ('prior year ', 42), (' income tax expense', 40), ('earlier year', 38), ('amount transferred to retained earnings', 34), ('provision for taxation previous year', 33), ('current tax', 32), (' income tax benefit', 32), ('minimum alternate tax credit entitlement', 30), (' income tax', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('provision for taxation previous year', 56), (' income tax benefit/(expense)', 49), ('deferred tax', 47), (' income tax benefit', 47), (' tax (expense)/benefit', 46), ('current tax', 44), (' income tax expense', 43), ('minimum alternate tax credit entitlement', 38), ('earlier year', 36), ('amount transferred to retained earnings', 33), (' income tax', 33), ('prior year ', 32)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [(' tax (expense)/benefit', 97), (' income tax benefit/(expense)', 84), (' income tax benefit', 72), (' income tax expense', 57), ('deferred tax', 50), ('current tax', 47), ('minimum alternate tax credit entitlement', 47), (' income tax', 43), ('amount transferred to retained earnings', 39), ('provision for taxation previous year', 38), ('earlier year', 32), ('prior year ', 28)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 49), (' income tax expense', 46), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), (' income tax', 33), ('current tax', 31), (' tax (expense)/benefit', 31), ('deferred tax', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('earlier year', 32), ('minimum alternate tax credit entitlement', 31), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), (' income tax benefit', 27), ('prior year ', 26), (' tax (expense)/benefit', 26), ('current tax', 25), (' income tax benefit/(expense)', 22), ('deferred tax', 18), (' income tax', 18), (' income tax expense', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior year ', 44), ('earlier year', 41), (' income tax', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 35), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('deferred tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax benefit/(expense)', 29)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 44), ('minimum alternate tax credit entitlement', 42), (' tax (expense)/benefit', 42), ('provision for taxation previous year', 41), (' income tax expense', 39), (' income tax benefit', 38), (' income tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 34), ('prior year ', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior year ', 44), ('earlier year', 41), (' income tax', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), ('provision for taxation previous year', 35), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('deferred tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax benefit/(expense)', 29)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 49), (' income tax expense', 46), (' income tax benefit', 42), (' income tax benefit/(expense)', 41), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), (' income tax', 33), ('current tax', 31), (' tax (expense)/benefit', 31), ('deferred tax', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 97, 'value': -1355026.0, 'line_item_label': ['Tax (expense/benefift'], 'note_numbers': ['8'], 'line_item_value': [-1355026.0]}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('exceptional', 40), ('prior period', 38)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 29), ('prior period', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('exceptional', 32), ('prior period', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('prior period', 31), ('exceptional', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('prior period', 32), ('exceptional', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('prior period', 29), ('exceptional', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('prior period', 31), ('exceptional', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('exceptional', 40), ('prior period', 38)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 29), ('prior period', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('exceptional', 32), ('prior period', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('prior period', 31), ('exceptional', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('prior period', 32), ('exceptional', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('prior period', 29), ('exceptional', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('prior period', 31), ('exceptional', 17)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 15:32:09+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 15:32:09+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('NULL', 9)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('NULL', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('NULL', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('NULL', 18)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('NULL', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 15:32:09+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 15:32:09+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = depreciation expense , res_fuzz_match = [('NULL', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = tax (expense/benefift , res_fuzz_match = [('NULL', 9)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('NULL', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = loss attributable to: , res_fuzz_match = [('NULL', 24)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive loss attributable to: , res_fuzz_match = [('NULL', 18)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = owners of the company , res_fuzz_match = [('NULL', 10)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/(loss) for the year , res_fuzz_match = [('NULL', 14)]
2023-08-10 15:32:09+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-10 16:46:02+0530 - sLogger - DEBUG - process_main_pages started
2023-08-10 16:46:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 16:46:02+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 16:46:02+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 16:46:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 16:46:02+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 16:46:02+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 16:46:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 16:46:02+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 16:46:02+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 16:46:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-10 16:46:02+0530 - sLogger - DEBUG - set_section_details started
2023-08-10 16:46:02+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD currentassets | score 96
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD currentliabilities | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentassets | score 87
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentassets | score 87
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equityandliabilities | score 29
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Cash assets | [('assets', 67), ('current assets', 61), ('noncurrent assets', 61), ('currentassets', 45), ('noncurrentassets', 40), ('equity and liabilities', 37), ('equity liabilities', 35), ('current liabilities', 33), ('equityandliabilities', 29), ('equity', 25), ('noncurrent liabilities', 25), ('equityliabilities', 22), ('currentliabilities', 21), ('noncurrentliabilities', 18), ('liabilities', 12)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD current assets | score 67
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD currentassets | score 58
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD current liabilities | score 33
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD currentliabilities | score 28
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrent assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrentassets | score 52
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrent liabilities | score 31
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD non current assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD non current liabilities | score 31
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrentliabilities | score 25
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrentassets | score 52
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrentliabilities | score 25
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equity and liabilities | score 31
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equityandliabilities | score 26
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Receivables | [('currentliabilities', 40), ('currentassets', 33), ('equity', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('equityandliabilities', 24), ('noncurrent assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity and liabilities', 17), ('noncurrent liabilities', 10)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD current assets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD currentassets | score 42
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD current liabilities | score 53
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD currentliabilities | score 55
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrent assets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrentassets | score 37
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrent liabilities | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD non current assets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD non current liabilities | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrentliabilities | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrentassets | score 37
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrentliabilities | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equity and liabilities | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equityandliabilities | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Inventory | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD current assets | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD currentassets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD current liabilities | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD currentliabilities | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrent assets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrentassets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrent liabilities | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD non current assets | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD non current liabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrentliabilities | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrentassets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrentliabilities | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equity and liabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equity | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equityandliabilities | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Other | [('noncurrentassets', 30), ('currentassets', 24), ('noncurrentliabilities', 24), ('current assets', 22), ('noncurrent assets', 22), ('noncurrent liabilities', 21), ('assets', 20), ('equity', 18), ('equityliabilities', 15), ('currentliabilities', 14), ('equityandliabilities', 12), ('current liabilities', 11), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current assets | score 21
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD currentassets | score 22
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD currentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent assets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentassets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current assets | score 26
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentassets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity and liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity | score 18
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equityandliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - TOTAL CURRENT ASSETS | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current assets | score 95
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD currentassets | score 83
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current liabilities | score 56
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD currentliabilities | score 53
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent assets | score 81
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrentassets | score 78
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current assets | score 84
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current liabilities | score 60
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 54
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrentassets | score 78
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 54
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equityandliabilities | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - NONCURRENT ASSETS | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD currentassets | score 87
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current liabilities | score 61
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD currentliabilities | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 100
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 97
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 72
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current assets | score 97
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current liabilities | score 70
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 68
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 97
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 68
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equityandliabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Plant and Equipment | [('equity and liabilities', 69), ('equity liabilities', 50), ('equity', 48), ('equityandliabilities', 46), ('equityliabilities', 43), ('current assets', 36), ('assets', 30), ('noncurrentliabilities', 30), ('noncurrent assets', 29), ('liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('currentliabilities', 25), ('currentassets', 22)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD current assets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD currentassets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD current liabilities | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD currentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrent assets | score 33
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrentassets | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrent liabilities | score 29
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD non current assets | score 41
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD non current liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrentliabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrentassets | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrentliabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equity and liabilities | score 60
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equity | score 60
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equityandliabilities | score 39
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Investments | [('noncurrentassets', 38), ('assets', 36), ('currentassets', 33), ('equity', 33), ('noncurrentliabilities', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('equity and liabilities', 26), ('equityandliabilities', 24), ('current assets', 21), ('noncurrent assets', 21), ('equity liabilities', 21), ('current liabilities', 20), ('noncurrent liabilities', 20), ('liabilities', 17)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current assets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentassets | score 42
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current liabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentliabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent assets | score 43
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent liabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current assets | score 41
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current liabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity and liabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equityandliabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Advance Payments and Deposits | [('equity and liabilities', 42), ('current assets', 36), ('noncurrentassets', 34), ('currentassets', 32), ('equityandliabilities', 27), ('assets', 26), ('noncurrent assets', 26), ('equity liabilities', 26), ('noncurrentliabilities', 26), ('current liabilities', 25), ('noncurrent liabilities', 25), ('equityliabilities', 24), ('currentliabilities', 23), ('equity', 19), ('liabilities', 12)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD current assets | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD currentassets | score 41
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD current liabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD currentliabilities | score 35
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrent assets | score 43
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrentassets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrent liabilities | score 39
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD non current assets | score 43
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD non current liabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrentassets | score 40
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equity and liabilities | score 41
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equityandliabilities | score 33
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Right of Use Assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current assets | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD currentassets | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current liabilities | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD currentliabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent assets | score 56
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentassets | score 51
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent liabilities | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current assets | score 59
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current liabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentassets | score 51
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity and liabilities | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equityandliabilities | score 26
2023-08-10 16:46:02+0530 - sLogger - DEBUG - TOTAL NONCURRENT ASSETS | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD currentassets | score 83
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current liabilities | score 52
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD currentliabilities | score 49
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 95
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 82
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current assets | score 83
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current liabilities | score 61
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 59
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 82
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 59
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equityandliabilities | score 28
2023-08-10 16:46:02+0530 - sLogger - DEBUG - TOTAL ASSETS | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current assets | score 64
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD currentassets | score 56
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD currentliabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent assets | score 64
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrentassets | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrentliabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrentassets | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrentliabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity and liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equityandliabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 67
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD currentassets | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD currentliabilities | score 97
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 61
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 59
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equityandliabilities | score 67
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Payables | [('liabilities', 50), ('equity and liabilities', 35), ('equityandliabilities', 35), ('equity liabilities', 32), ('current liabilities', 30), ('noncurrent liabilities', 30), ('equityliabilities', 29), ('assets', 18), ('currentliabilities', 13), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentliabilities', 11), ('noncurrentassets', 10), ('equity', 0)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD current assets | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD currentassets | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD current liabilities | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD currentliabilities | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrent assets | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrentassets | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrent liabilities | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD non current assets | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD non current liabilities | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrentliabilities | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrentassets | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrentliabilities | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equity and liabilities | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equity | score 14
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equityandliabilities | score 45
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Interest Bearing Liabilities | [('current liabilities', 65), ('equity liabilities', 61), ('equity and liabilities', 59), ('liabilities', 46), ('currentliabilities', 41), ('noncurrentliabilities', 38), ('equityliabilities', 36), ('noncurrent liabilities', 35), ('equityandliabilities', 32), ('currentassets', 31), ('equity', 31), ('current assets', 30), ('noncurrentassets', 29), ('assets', 24), ('noncurrent assets', 24)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD current assets | score 33
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD currentassets | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD current liabilities | score 69
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD currentliabilities | score 67
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrent assets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrentassets | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrent liabilities | score 65
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD non current assets | score 35
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD non current liabilities | score 63
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrentliabilities | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrentassets | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrentliabilities | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD equity and liabilities | score 68
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD equityandliabilities | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Other | [('noncurrentassets', 30), ('currentassets', 24), ('noncurrentliabilities', 24), ('current assets', 22), ('noncurrent assets', 22), ('noncurrent liabilities', 21), ('assets', 20), ('equity', 18), ('equityliabilities', 15), ('currentliabilities', 14), ('equityandliabilities', 12), ('current liabilities', 11), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current assets | score 21
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD currentassets | score 22
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD currentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent assets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentassets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current assets | score 26
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentassets | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity and liabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity | score 18
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equityandliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Lease Liabilities Right of Use Assets | [('equity and liabilities', 45), ('equity liabilities', 45), ('current liabilities', 44), ('current assets', 40), ('noncurrent liabilities', 39), ('liabilities', 36), ('noncurrent assets', 35), ('assets', 31), ('currentassets', 31), ('noncurrentassets', 29), ('equityandliabilities', 26), ('equityliabilities', 23), ('currentliabilities', 22), ('noncurrentliabilities', 21), ('equity', 18)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD currentassets | score 56
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD currentliabilities | score 60
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentassets | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentliabilities | score 53
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentassets | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentliabilities | score 53
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity and liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equityandliabilities | score 58
2023-08-10 16:46:02+0530 - sLogger - DEBUG - TOTAL CURRENT LIABILITIES | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD currentassets | score 56
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD currentliabilities | score 84
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 54
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 85
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current assets | score 60
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current liabilities | score 88
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 83
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 54
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 83
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equityandliabilities | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - NONCURRENT LIABILITIES | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD currentassets | score 57
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 93
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD currentliabilities | score 90
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 72
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 68
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 100
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current assets | score 70
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 98
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 98
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 68
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 98
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 65
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equityandliabilities | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - Lease Liabilities Right of Use Assets | [('equity and liabilities', 45), ('equity liabilities', 45), ('current liabilities', 44), ('current assets', 40), ('noncurrent liabilities', 39), ('liabilities', 36), ('noncurrent assets', 35), ('assets', 31), ('currentassets', 31), ('noncurrentassets', 29), ('equityandliabilities', 26), ('equityliabilities', 23), ('currentliabilities', 22), ('noncurrentliabilities', 21), ('equity', 18)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD currentassets | score 56
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD currentliabilities | score 60
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentassets | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentliabilities | score 53
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentassets | score 50
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentliabilities | score 53
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity and liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equityandliabilities | score 58
2023-08-10 16:46:02+0530 - sLogger - DEBUG - TOTAL NONCURRENT LIABILITIES | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD currentassets | score 56
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 81
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD currentliabilities | score 85
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 95
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current assets | score 61
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 62
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equityandliabilities | score 58
2023-08-10 16:46:02+0530 - sLogger - DEBUG - TOTAL LIABILITIES | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current assets | score 32
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD currentassets | score 27
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current liabilities | score 75
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD currentliabilities | score 69
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent assets | score 35
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrentassets | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent liabilities | score 75
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current assets | score 34
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current liabilities | score 75
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrentliabilities | score 68
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrentassets | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrentliabilities | score 68
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity and liabilities | score 75
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equityandliabilities | score 70
2023-08-10 16:46:02+0530 - sLogger - DEBUG - NET ASSETS | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current assets | score 75
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD currentassets | score 70
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current liabilities | score 41
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD currentliabilities | score 36
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrentassets | score 72
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent liabilities | score 44
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current assets | score 86
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current liabilities | score 42
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrentliabilities | score 39
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrentassets | score 72
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrentliabilities | score 39
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity and liabilities | score 38
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity | score 30
2023-08-10 16:46:02+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equityandliabilities | score 33
2023-08-10 16:46:02+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-10 16:46:02+0530 - sLogger - DEBUG - set_section_details started
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM OPERATING ACTIVITIES | operating cash flow before working capital changes
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from Customers | adiustments for movements in working capital
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to Suppliers and Employees | changes in operating assets and liabilities
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest Received | movements in working capital
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest Paid | movements in working capital
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income Taxes Paid | changes in working capital
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash Provided by/ (used in) Operating | operating profit before working capital changes
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Activities 5 | working capital adjustments
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM INVESTING ACTIVITIES | operating cash flow before working capital changes
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of Plant and Equipment | changes in operating assets and liabilities
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash Provided by/ (used in) Investing | operating profit before working capital changes
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Activities | working capital adjustments
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM FINANCING ACTIVITIES | operating cash flow before working capital changes
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of Borrowings | operating profit before working capital changes
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds of Borrowings | operating cash flow before working capital changes
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends Paid | changes in assets liabilities
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of Lease Liabilities | changes in assets liabilities
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash Provided by/ (used in) Financing Activities | adjustments for increase decrease in operating liabilities
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash Provided by/ (used in) Financing Activities | adjustments for increase decrease in operating liabilities
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (Decrease)Increase in Cash Held | adjustments for increase decrease in operating liabilities
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at beginning of financial year | changes in operating assets and liabilities
2023-08-10 16:46:03+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at end of financial year | changes in operating assets and liabilities
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-10 16:46:04+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-10 16:46:04+0530 - sLogger - ERROR - error occured: 'year'
2023-08-10 16:46:04+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('cash asset', 100), ('cash asset', 100), ('cash and cash equivalents', 45), (' cash and cash equivalents', 45), ('cash and bank balances', 40), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('other bank balances', 30), ('bank balances other than above', 27), ('bank balances other than cash and cash equivalents', 26)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('bank balances other than above', 12), ('cash and bank balances', 8)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other bank balances', 45), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash asset', 27), ('cash asset', 27), ('bank balances other than cash and cash equivalents', 20), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('cash and bank balances', 8)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2935329.0, 'line_item_label': ['Cash assets'], 'note_numbers': ['6'], 'line_item_value': [2935329.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('cash asset', 100), ('cash asset', 100), ('cash and cash equivalents', 45), (' cash and cash equivalents', 45), ('cash and bank balances', 40), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('other bank balances', 30), ('bank balances other than above', 27), ('bank balances other than cash and cash equivalents', 26)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('bank balances other than above', 12), ('cash and bank balances', 8)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other bank balances', 45), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash asset', 27), ('cash asset', 27), ('bank balances other than cash and cash equivalents', 20), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('cash and bank balances', 8)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2483250.0, 'line_item_label': ['Cash assets'], 'note_numbers': ['6'], 'line_item_value': [2483250.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('inventories', 22)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('inventories', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('inventories', 100)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('inventories', 40)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 4700378.0, 'line_item_label': ['Inventory'], 'note_numbers': ['8'], 'line_item_value': [4700378.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('inventories', 22)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('inventories', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('inventories', 100)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('inventories', 40)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 3923249.0, 'line_item_label': ['Inventory'], 'note_numbers': ['8'], 'line_item_value': [3923249.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), ('other current assets', 55), ('other financial assets', 55), ('other current financial assets', 49), ('prepayments', 25)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('prepayments', 33), ('other current assets', 24), ('other financial assets', 24), ('other current financial assets', 24), ('other assets', 24)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), ('other current assets', 55), ('other financial assets', 55), ('other current financial assets', 49), ('prepayments', 25)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('prepayments', 33), ('other current assets', 24), ('other financial assets', 24), ('other current financial assets', 24), ('other assets', 24)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), (' financial assets', 61), ('other current assets', 55), (' other current assets', 55), (' biological assets', 55), (' other financial assets', 55), (' trade and other receivables', 31), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [(' trade and other receivables', 43), (' financial assets', 32), (' income tax receivable from related parties', 31), (' deferred operating expenditure', 30), ('other current assets', 24), ('other assets', 24), (' other current assets', 24), (' other financial assets', 24), (' biological assets', 22)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 37), (' deferred operating expenditure', 23), (' income tax receivable from related parties', 21), (' biological assets', 12), (' financial assets', 11)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), (' financial assets', 61), ('other current assets', 55), (' other current assets', 55), (' biological assets', 55), (' other financial assets', 55), (' trade and other receivables', 31), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [(' trade and other receivables', 43), (' financial assets', 32), (' income tax receivable from related parties', 31), (' deferred operating expenditure', 30), ('other current assets', 24), ('other assets', 24), (' other current assets', 24), (' other financial assets', 24), (' biological assets', 22)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 37), (' deferred operating expenditure', 23), (' income tax receivable from related parties', 21), (' biological assets', 12), (' financial assets', 11)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant and equipment', 54), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 13325.0, 'line_item_label': ['Plant and Equipment'], 'note_numbers': ['10'], 'line_item_value': [13325.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant and equipment', 54), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 11613.0, 'line_item_label': ['Plant and Equipment'], 'note_numbers': ['10'], 'line_item_value': [11613.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 18, 19], 'score': [100, 100, 100, 100], 'value': [53962.0, 42349.0, 49932.0, 36607.0], 'label': ['NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 46), ('gross', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 18, 19], 'score': [100, 100, 100, 100], 'value': [53962.0, 42349.0, 49932.0, 36607.0], 'label': ['NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible assets', 31)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible assets', 31)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('intangible assets under development', 52), ('intangible assets', 50), ('intangible under development', 50)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 47), ('intangible under development', 40)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('intangible assets under development', 52), ('intangible assets', 50), ('intangible under development', 50)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 47), ('intangible under development', 40)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('donations', 26)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('donations', 26)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('joint ventures and associates', 53), ('investment', 50), (' investment in associate', 46), ('derivative financial instruments', 42), (' investments accounted for using the equity method', 38), (' investment in joint venture', 37)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 330001.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [330001.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('joint ventures and associates', 53), ('investment', 50), (' investment in associate', 46), ('derivative financial instruments', 42), (' investments accounted for using the equity method', 38), (' investment in joint venture', 37)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 330001.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [330001.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = none nan investments in unlisted companies at cost , res_fuzz_match = [(' investment in associate', 62), ('investment in joint venture', 53), (' carrying amount at the end of the financial year', 37)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 2023 $ 12 months ended 31 march 2023 $ , res_fuzz_match = [(' carrying amount at the end of the financial year', 56), ('investment in joint venture', 42), (' investment in associate', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), ('investment in joint venture', 43), (' investment in associate', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 2023 $ 12 months ended 31 march 2023 $ , res_fuzz_match = [(' carrying amount at the end of the financial year', 56), ('investment in joint venture', 42), (' investment in associate', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = none nan investments in unlisted companies at cost , res_fuzz_match = [(' investment in associate', 62), ('investment in joint venture', 53), (' carrying amount at the end of the financial year', 37)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 2022 $ 12 months ended 31 march 2022 $ , res_fuzz_match = [(' carrying amount at the end of the financial year', 56), ('investment in joint venture', 42), (' investment in associate', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), ('investment in joint venture', 43), (' investment in associate', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 2022 $ 12 months ended 31 march 2022 $ , res_fuzz_match = [(' carrying amount at the end of the financial year', 56), ('investment in joint venture', 42), (' investment in associate', 38)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('deferred charges', 32), ('deferred tax assets', 29), ('deferred tax', 23)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('deferred charges', 32), ('deferred tax assets', 29), ('deferred tax', 23)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' financial assets', 31), (' other non-current assets', 31), (' other non-current assets', 31), (' leased assets', 28), ('other assets', 27), (' other assets', 27), (' loan receivables', 27), ('non-current', 18), (' leases', 13)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets', 62), (' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' financial assets', 31), (' other non-current assets', 31), (' other non-current assets', 31), (' leased assets', 28), ('other assets', 27), (' other assets', 27), (' loan receivables', 27), ('non-current', 18), (' leases', 13)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets', 62), (' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised â€“ bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('lease liabilities', 47), (' loans and borrowings', 29), (' interest bearing liabilites', 29), (' bank overdraft', 20), (' leases', 20), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), ('shortterm borrowings', 9)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [(' interest bearing liabilites', 95), ('lease liabilities', 65), (' bank overdraft', 35), ('short term debt', 34), (' loans and borrowings', 34), ('shortterm borrowings', 33), ('short-term debt', 29), ('shortterm debt', 29), (' leases', 25), ('borrowings', 23)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('short-term debt', 42), ('shortterm debt', 42), ('short term debt', 40), ('shortterm borrowings', 38), ('borrowings', 36), (' bank overdraft', 32), (' leases', 22), (' interest bearing liabilites', 22), (' loans and borrowings', 20), ('lease liabilities', 12)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 58), (' interest bearing liabilites', 53), ('short term debt', 38), ('short-term debt', 34), ('shortterm debt', 34), (' leases', 26), (' loans and borrowings', 24), (' bank overdraft', 24), ('shortterm borrowings', 23), ('borrowings', 12)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 95, 'value': 995000.0, 'line_item_label': ['Interest Bearing Liabilities'], 'note_numbers': ['15'], 'line_item_value': [995000.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('lease liabilities', 47), (' loans and borrowings', 29), (' interest bearing liabilites', 29), (' bank overdraft', 20), (' leases', 20), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), ('shortterm borrowings', 9)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [(' interest bearing liabilites', 95), ('lease liabilities', 65), (' bank overdraft', 35), ('short term debt', 34), (' loans and borrowings', 34), ('shortterm borrowings', 33), ('short-term debt', 29), ('shortterm debt', 29), (' leases', 25), ('borrowings', 23)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('short-term debt', 42), ('shortterm debt', 42), ('short term debt', 40), ('shortterm borrowings', 38), ('borrowings', 36), (' bank overdraft', 32), (' leases', 22), (' interest bearing liabilites', 22), (' loans and borrowings', 20), ('lease liabilities', 12)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 58), (' interest bearing liabilites', 53), ('short term debt', 38), ('short-term debt', 34), ('shortterm debt', 34), (' leases', 26), (' loans and borrowings', 24), (' bank overdraft', 24), ('shortterm borrowings', 23), ('borrowings', 12)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 95, 'value': 1500000.0, 'line_item_label': ['Interest Bearing Liabilities'], 'note_numbers': ['15'], 'line_item_value': [1500000.0]}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised â€“ bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving loan facility , res_fuzz_match = [(' lease liabilities', 55), (' secured long-term bank loans', 54), (' leases', 50), (' not later than one year', 48), (' loans from related party', 48), (' not later than 1 year', 47), ('bank borrowings', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32), (' bank overdraft', 29), (' utilised â€“ bank borrowings', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [(' balance at the end of period', 67), (' not later than 1 year', 44), (' not later than one year', 44), (' secured long-term bank loans', 44), (' bank overdraft', 44), (' loans from related party', 33), (' lease liabilities - current', 33), (' leases', 25), ('bank borrowings', 22), (' utilised â€“ bank borrowings', 22), (' lease liabilities', 11)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving total , res_fuzz_match = [(' loans from related party', 48), (' not later than 1 year', 47), (' secured long-term bank loans', 46), (' not later than one year', 43), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32), (' utilised â€“ bank borrowings', 27), (' leases', 25)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [(' balance at the end of period', 67), (' not later than 1 year', 44), (' not later than one year', 44), (' secured long-term bank loans', 44), (' bank overdraft', 44), (' loans from related party', 33), (' lease liabilities - current', 33), (' leases', 25), ('bank borrowings', 22), (' utilised â€“ bank borrowings', 22), (' lease liabilities', 11)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving loan facility , res_fuzz_match = [(' lease liabilities', 55), (' secured long-term bank loans', 54), (' leases', 50), (' not later than one year', 48), (' loans from related party', 48), (' not later than 1 year', 47), ('bank borrowings', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32), (' bank overdraft', 29), (' utilised â€“ bank borrowings', 27)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [(' balance at the end of period', 67), (' not later than 1 year', 44), (' not later than one year', 44), (' secured long-term bank loans', 44), (' bank overdraft', 44), (' loans from related party', 33), (' lease liabilities - current', 33), (' leases', 25), ('bank borrowings', 22), (' utilised â€“ bank borrowings', 22), (' lease liabilities', 11)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving total , res_fuzz_match = [(' loans from related party', 48), (' not later than 1 year', 47), (' secured long-term bank loans', 46), (' not later than one year', 43), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32), (' utilised â€“ bank borrowings', 27), (' leases', 25)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [(' balance at the end of period', 67), (' not later than 1 year', 44), (' not later than one year', 44), (' secured long-term bank loans', 44), (' bank overdraft', 44), (' loans from related party', 33), (' lease liabilities - current', 33), (' leases', 25), ('bank borrowings', 22), (' utilised â€“ bank borrowings', 22), (' lease liabilities', 11)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised â€“ bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:04+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-08-10 16:46:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:04+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 16:46:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade payable', 67), ('other trade payables', 50), ('trade and other payables', 43)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('trade and other payables', 43), ('other trade payables', 37), ('trade payable', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other trade payables', 43), ('trade and other payables', 37), ('trade payable', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade payable', 67), ('other trade payables', 50), ('trade and other payables', 43)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('trade and other payables', 43), ('other trade payables', 37), ('trade payable', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other trade payables', 43), ('trade and other payables', 37), ('trade payable', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade and other payables', 43)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('trade and other payables', 43)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other payables', 37)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade and other payables', 43)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('trade and other payables', 43)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other payables', 37)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' income tax payable', 100), ('current tax liabilities', 50), ('tax', 33), ('provision', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33), ('provision', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' income tax payable', 40), ('tax', 33), ('current tax liabilities', 20), ('provision', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 29), (' income tax payable', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 1589965.0, 'line_item_label': ['Payables', 'Provisions'], 'note_numbers': ['14', '16'], 'line_item_value': [1526885.0, 63080.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' income tax payable', 100), ('current tax liabilities', 50), ('tax', 33), ('provision', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33), ('provision', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' income tax payable', 40), ('tax', 33), ('current tax liabilities', 20), ('provision', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 29), (' income tax payable', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 1860273.0, 'line_item_label': ['Payables', 'Provisions'], 'note_numbers': ['14', '16'], 'line_item_value': [1726142.0, 134131.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 14: nan trade creditors , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 14: nan other creditors , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 14: total nan , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 14: nan trade creditors , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 14: nan other creditors , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 14: total nan , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 42)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provision for income tax', 56), ('income tax (refundable)/payable ', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provision for income tax', 56), ('income tax (refundable)/payable ', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provision for income tax', 56), ('income tax (refundable)/payable ', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provision for income tax', 56), ('income tax (refundable)/payable ', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for long , res_fuzz_match = [(' provision for income tax', 69), ('income tax (refundable)/payable ', 39)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 42)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provision for income tax', 56), ('income tax (refundable)/payable ', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provision for income tax', 56), ('income tax (refundable)/payable ', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provision for income tax', 56), ('income tax (refundable)/payable ', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provision for income tax', 56), ('income tax (refundable)/payable ', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for long , res_fuzz_match = [(' provision for income tax', 69), ('income tax (refundable)/payable ', 39)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' trade and other payables', 43), (' financial liabilities', 40), (' other financial liabilities', 31), ('other current liabilities', 23), (' other current liabilities', 23), (' foreign exchange contract liability', 22), (' employee benefits', 19), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' financial liabilities', 53), (' foreign exchange contract liability', 47), (' other financial liabilities', 45), (' trade and other payables', 43), (' employee benefits', 40), (' deferred revenue', 31), (' customer deposits', 24), ('provisions', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 40), (' trade and other payables', 37), (' deferred revenue', 24), (' foreign exchange contract liability', 22), (' customer deposits', 21), (' employee benefits', 20), ('provisions', 18), (' financial liabilities', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 47), (' trade and other payables', 41), (' foreign exchange contract liability', 41), (' financial liabilities', 39), (' customer deposits', 34), (' employee benefits', 29), (' deferred revenue', 26), ('provisions', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 63080.0, 'line_item_label': ['CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 63080.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' trade and other payables', 43), (' financial liabilities', 40), (' other financial liabilities', 31), ('other current liabilities', 23), (' other current liabilities', 23), (' foreign exchange contract liability', 22), (' employee benefits', 19), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' financial liabilities', 53), (' foreign exchange contract liability', 47), (' other financial liabilities', 45), (' trade and other payables', 43), (' employee benefits', 40), (' deferred revenue', 31), (' customer deposits', 24), ('provisions', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 40), (' trade and other payables', 37), (' deferred revenue', 24), (' foreign exchange contract liability', 22), (' customer deposits', 21), (' employee benefits', 20), ('provisions', 18), (' financial liabilities', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 47), (' trade and other payables', 41), (' foreign exchange contract liability', 41), (' financial liabilities', 39), (' customer deposits', 34), (' employee benefits', 29), (' deferred revenue', 26), ('provisions', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 134131.0, 'line_item_label': ['CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 134131.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision , res_fuzz_match = [(' make good provisions', 67), (' total current employee benefits', 58), (' other related parties', 43), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' loans from related party', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' provisions - current', 42), (' contract liabilites - current', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' provision for associate funding', 42), (' arising from service contracts', 42), (' other creditors', 42), (' other', 40), (' ultimate parent entity', 33), (' gst payable and accruals', 33), (' share of joint venture payables', 33), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' secured long-term bank loans', 25), (' employee benefits - current', 25), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20), (' restructuring', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - current', 67), (' provision for associate funding', 56), (' arising from service contracts', 50), (' make good provisions', 50), (' total current employee benefits', 50), ('other creditors and accruals', 44), (' loans from related party', 44), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' contract liabilites - current', 38), (' gst', 33), (' ultimate parent entity', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' employee benefits - current', 31), (' share of joint venture payables', 31), (' employee benefits - payroll', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - current', 67), (' provision for associate funding', 56), (' arising from service contracts', 50), (' make good provisions', 50), (' total current employee benefits', 50), ('other creditors and accruals', 44), (' loans from related party', 44), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' contract liabilites - current', 38), (' gst', 33), (' ultimate parent entity', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' employee benefits - current', 31), (' share of joint venture payables', 31), (' employee benefits - payroll', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - current', 67), (' provision for associate funding', 56), (' arising from service contracts', 50), (' make good provisions', 50), (' total current employee benefits', 50), ('other creditors and accruals', 44), (' loans from related party', 44), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' contract liabilites - current', 38), (' gst', 33), (' ultimate parent entity', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' employee benefits - current', 31), (' share of joint venture payables', 31), (' employee benefits - payroll', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - current', 67), (' provision for associate funding', 56), (' arising from service contracts', 50), (' make good provisions', 50), (' total current employee benefits', 50), ('other creditors and accruals', 44), (' loans from related party', 44), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' contract liabilites - current', 38), (' gst', 33), (' ultimate parent entity', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' employee benefits - current', 31), (' share of joint venture payables', 31), (' employee benefits - payroll', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total current employee benefits', 55), ('other creditors and accruals', 45), (' derivative contracts - at fair value', 45), (' loan payable to relayed party under tax funding agreement', 45), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 45), (' contract liabilites - current', 45), (' forward exchange contracts', 45), (' gst payables', 42), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 36), (' loans from related party', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' gst', 33), (' other related parties', 27), (' other creditors', 27), (' other creditors', 27), (' employee benefits - current', 27), (' make good provisions', 27), (' other creditors', 27), (' warranty', 25), (' restructuring', 20), (' provisions - current', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for long , res_fuzz_match = [(' provisions - current', 64), (' provision for associate funding', 62), (' arising from service contracts', 52), (' total current employee benefits', 52), (' make good provisions', 50), (' current - liability for annual and long service leave', 48), ('other creditors and accruals', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' other', 40), (' loans from related party', 39), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' contract liabilites - current', 34), (' gst payable and accruals', 33), (' share of joint venture payables', 33), (' employee benefits - payroll', 33), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' employee benefits - current', 29), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision , res_fuzz_match = [(' make good provisions', 67), (' total current employee benefits', 58), (' other related parties', 43), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' loans from related party', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' provisions - current', 42), (' contract liabilites - current', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' provision for associate funding', 42), (' arising from service contracts', 42), (' other creditors', 42), (' other', 40), (' ultimate parent entity', 33), (' gst payable and accruals', 33), (' share of joint venture payables', 33), (' gst', 33), (' gst payables', 30), (' gst liabilities', 30), (' secured long-term bank loans', 25), (' employee benefits - current', 25), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20), (' restructuring', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - current', 67), (' provision for associate funding', 56), (' arising from service contracts', 50), (' make good provisions', 50), (' total current employee benefits', 50), ('other creditors and accruals', 44), (' loans from related party', 44), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' contract liabilites - current', 38), (' gst', 33), (' ultimate parent entity', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' employee benefits - current', 31), (' share of joint venture payables', 31), (' employee benefits - payroll', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - current', 67), (' provision for associate funding', 56), (' arising from service contracts', 50), (' make good provisions', 50), (' total current employee benefits', 50), ('other creditors and accruals', 44), (' loans from related party', 44), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' contract liabilites - current', 38), (' gst', 33), (' ultimate parent entity', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' employee benefits - current', 31), (' share of joint venture payables', 31), (' employee benefits - payroll', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - current', 67), (' provision for associate funding', 56), (' arising from service contracts', 50), (' make good provisions', 50), (' total current employee benefits', 50), ('other creditors and accruals', 44), (' loans from related party', 44), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' contract liabilites - current', 38), (' gst', 33), (' ultimate parent entity', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' employee benefits - current', 31), (' share of joint venture payables', 31), (' employee benefits - payroll', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - current', 67), (' provision for associate funding', 56), (' arising from service contracts', 50), (' make good provisions', 50), (' total current employee benefits', 50), ('other creditors and accruals', 44), (' loans from related party', 44), (' current - liability for annual and long service leave', 44), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other', 40), (' other related parties', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' contract liabilites - current', 38), (' gst', 33), (' ultimate parent entity', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' employee benefits - current', 31), (' share of joint venture payables', 31), (' employee benefits - payroll', 31), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total current employee benefits', 55), ('other creditors and accruals', 45), (' derivative contracts - at fair value', 45), (' loan payable to relayed party under tax funding agreement', 45), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 45), (' contract liabilites - current', 45), (' forward exchange contracts', 45), (' gst payables', 42), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 36), (' loans from related party', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' gst', 33), (' other related parties', 27), (' other creditors', 27), (' other creditors', 27), (' employee benefits - current', 27), (' make good provisions', 27), (' other creditors', 27), (' warranty', 25), (' restructuring', 20), (' provisions - current', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for long , res_fuzz_match = [(' provisions - current', 64), (' provision for associate funding', 62), (' arising from service contracts', 52), (' total current employee benefits', 52), (' make good provisions', 50), (' current - liability for annual and long service leave', 48), ('other creditors and accruals', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' other related parties', 41), (' other', 40), (' loans from related party', 39), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' contract liabilites - current', 34), (' gst payable and accruals', 33), (' share of joint venture payables', 33), (' employee benefits - payroll', 33), (' gst', 33), (' forward exchange contracts', 33), (' ultimate parent entity', 32), (' gst payables', 30), (' gst liabilities', 30), (' restructuring', 30), (' employee benefits - current', 29), (' warranty', 25), (' rebates', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term debt', 34)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term debt', 34)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), (' loans and borrowings', 40), (' borrowings', 33), ('interest bearing loans and borrowings', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 359790.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [359790.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), (' loans and borrowings', 40), (' borrowings', 33), ('interest bearing loans and borrowings', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 265356.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [265356.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes', 17), ('deferred tax liabilities', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('deferred tax liabilities', 56), ('deferred taxes', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes', 17), ('deferred tax liabilities', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('deferred tax liabilities', 56), ('deferred taxes', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' other financial liabilities', 47), ('other long term liabilities', 45), (' other non-current liabilities', 43), ('trade and other payables', 41), (' financial liabilities', 39), (' provision for associate funding', 37), (' employee benefits', 29), (' provisions', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 49640.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 49640.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' other financial liabilities', 47), ('other long term liabilities', 45), (' other non-current liabilities', 43), ('trade and other payables', 41), (' financial liabilities', 39), (' provision for associate funding', 37), (' employee benefits', 29), (' provisions', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 54716.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 54716.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision , res_fuzz_match = [(' make good provisions', 67), (' total non-current employee benefits', 58), (' trade payables - related parties', 43), (' electricity derivatives at fair value through oci', 42), (' derivative contracts - at fair value', 42), (' non-current - liability for long-service leave', 42), (' provisions - non-current', 42), (' contract liabilites - non-current', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' provision for associate funding', 42), ('non-current trade and other payables', 33), (' employee benefits - non current', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - non-current', 75), (' provision for associate funding', 56), (' make good provisions', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 44), (' non-current - liability for long-service leave', 44), (' abandonment and decommissioning costs', 44), ('non-current trade and other payables', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 31), (' employee benefits - payroll', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - non-current', 75), (' provision for associate funding', 56), (' make good provisions', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 44), (' non-current - liability for long-service leave', 44), (' abandonment and decommissioning costs', 44), ('non-current trade and other payables', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 31), (' employee benefits - payroll', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - non-current', 75), (' provision for associate funding', 56), (' make good provisions', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 44), (' non-current - liability for long-service leave', 44), (' abandonment and decommissioning costs', 44), ('non-current trade and other payables', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 31), (' employee benefits - payroll', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - non-current', 75), (' provision for associate funding', 56), (' make good provisions', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 44), (' non-current - liability for long-service leave', 44), (' abandonment and decommissioning costs', 44), ('non-current trade and other payables', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 31), (' employee benefits - payroll', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total non-current employee benefits', 64), (' electricity derivatives at fair value through oci', 45), (' derivative contracts - at fair value', 45), (' non-current - liability for long-service leave', 45), (' contract liabilites - non-current', 45), ('non-current trade and other payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' trade payables - related parties', 36), (' employee benefits - non current', 27), (' provisions - non-current', 27), (' make good provisions', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for long , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 62), (' non-current - liability for long-service leave', 52), (' total non-current employee benefits', 52), (' make good provisions', 50), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' abandonment and decommissioning costs', 38), ('non-current trade and other payables', 33), (' employee benefits - non current', 33), (' employee benefits - payroll', 33), (' trade payables - related parties', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision , res_fuzz_match = [(' make good provisions', 67), (' total non-current employee benefits', 58), (' trade payables - related parties', 43), (' electricity derivatives at fair value through oci', 42), (' derivative contracts - at fair value', 42), (' non-current - liability for long-service leave', 42), (' provisions - non-current', 42), (' contract liabilites - non-current', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' provision for associate funding', 42), ('non-current trade and other payables', 33), (' employee benefits - non current', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - non-current', 75), (' provision for associate funding', 56), (' make good provisions', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 44), (' non-current - liability for long-service leave', 44), (' abandonment and decommissioning costs', 44), ('non-current trade and other payables', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 31), (' employee benefits - payroll', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - non-current', 75), (' provision for associate funding', 56), (' make good provisions', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 44), (' non-current - liability for long-service leave', 44), (' abandonment and decommissioning costs', 44), ('non-current trade and other payables', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 31), (' employee benefits - payroll', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - non-current', 75), (' provision for associate funding', 56), (' make good provisions', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 44), (' non-current - liability for long-service leave', 44), (' abandonment and decommissioning costs', 44), ('non-current trade and other payables', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 31), (' employee benefits - payroll', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for , res_fuzz_match = [(' provisions - non-current', 75), (' provision for associate funding', 56), (' make good provisions', 50), (' total non-current employee benefits', 50), (' electricity derivatives at fair value through oci', 44), (' non-current - liability for long-service leave', 44), (' abandonment and decommissioning costs', 44), ('non-current trade and other payables', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 31), (' employee benefits - payroll', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' total non-current employee benefits', 64), (' electricity derivatives at fair value through oci', 45), (' derivative contracts - at fair value', 45), (' non-current - liability for long-service leave', 45), (' contract liabilites - non-current', 45), ('non-current trade and other payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' trade payables - related parties', 36), (' employee benefits - non current', 27), (' provisions - non-current', 27), (' make good provisions', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total provision for long , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 62), (' non-current - liability for long-service leave', 52), (' total non-current employee benefits', 52), (' make good provisions', 50), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' abandonment and decommissioning costs', 38), ('non-current trade and other payables', 33), (' employee benefits - non current', 33), (' employee benefits - payroll', 33), (' trade payables - related parties', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_Reserves_equity
2023-08-10 16:46:05+0530 - sLogger - ERROR - error occured: 2022
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant and equipment', 54), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 13325.0, 'line_item_label': ['Plant and Equipment'], 'note_numbers': ['10'], 'line_item_value': [13325.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant and equipment', 54), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 11613.0, 'line_item_label': ['Plant and Equipment'], 'note_numbers': ['10'], 'line_item_value': [11613.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 18, 19], 'score': [100, 100, 100, 100], 'value': [53962.0, 42349.0, 49932.0, 36607.0], 'label': ['NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office & machines, furniture fittings- at cost less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 38)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office machines , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: nan office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = note 10: total nan , res_fuzz_match = [('net value', 50), ('net book value', 46), ('depreciatio', 27), ('accumulated depreciation', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 18, 19], 'score': [100, 100, 100, 100], 'value': [53962.0, 42349.0, 49932.0, 36607.0], 'label': ['NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation', 'NOTE 10: nan Office & Machines, Furniture Fittings- at Cost Less: Accumulated Depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('account receivables', 30), ('trade receivables', 30), ('government subsidies receivable', 30), ('trade and other receivables', 30), ('receivable', 17), ('billed', 0), ('unbilled', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('account receivables', 100), ('trade receivables', 100), ('government subsidies receivable', 100), ('receivable', 100), ('trade and other receivables', 100), ('billed', 25), ('unbilled', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other receivables', 100), ('government subsidies receivable', 60), ('account receivables', 40), ('trade receivables', 40), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 4620173.0, 'line_item_label': ['Receivables', 'Other'], 'note_numbers': ['7', '9'], 'line_item_value': [4086305.0, 533868.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('account receivables', 30), ('trade receivables', 30), ('government subsidies receivable', 30), ('trade and other receivables', 30), ('receivable', 17), ('billed', 0), ('unbilled', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('account receivables', 100), ('trade receivables', 100), ('government subsidies receivable', 100), ('receivable', 100), ('trade and other receivables', 100), ('billed', 25), ('unbilled', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other receivables', 100), ('government subsidies receivable', 60), ('account receivables', 40), ('trade receivables', 40), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 7158730.0, 'line_item_label': ['Receivables', 'Other'], 'note_numbers': ['7', '9'], 'line_item_value': [6841934.0, 316796.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' net trade debtors', 94), (' other debtors', 75), ('trade receivables', 58), (' share of joint venture receivables', 41), (' related party receivables', 35), ('charges paid in advance', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none less: provision for doubtful debts , res_fuzz_match = [(' other debtors', 58), (' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 33), (' share of joint venture receivables', 32), ('charges paid in advance', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('trade receivables', 20), ('charges paid in advance', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none related parties , res_fuzz_match = [(' related party receivables', 69), (' net trade debtors', 45), (' share of joint venture receivables', 44), ('trade receivables', 42), (' other debtors', 42), ('charges paid in advance', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none other debtors , res_fuzz_match = [(' other debtors', 100), (' net trade debtors', 75), (' share of joint venture receivables', 47), ('trade receivables', 42), (' related party receivables', 29), ('charges paid in advance', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none total receivables , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 59), (' share of joint venture receivables', 59), (' other debtors', 50), (' net trade debtors', 44), ('charges paid in advance', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none trade debtors , res_fuzz_match = [(' net trade debtors', 94), (' other debtors', 75), ('trade receivables', 58), (' share of joint venture receivables', 41), (' related party receivables', 35), ('charges paid in advance', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none less: provision for doubtful debts , res_fuzz_match = [(' other debtors', 58), (' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 33), (' share of joint venture receivables', 32), ('charges paid in advance', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('trade receivables', 20), ('charges paid in advance', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none related parties , res_fuzz_match = [(' related party receivables', 69), (' net trade debtors', 45), (' share of joint venture receivables', 44), ('trade receivables', 42), (' other debtors', 42), ('charges paid in advance', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none other debtors , res_fuzz_match = [(' other debtors', 100), (' net trade debtors', 75), (' share of joint venture receivables', 47), ('trade receivables', 42), (' related party receivables', 29), ('charges paid in advance', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none total receivables , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 59), (' share of joint venture receivables', 59), (' other debtors', 50), (' net trade debtors', 44), ('charges paid in advance', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 6, 10], 'score': [94, 100, 94, 100], 'value': [4673248.0, 23152.0, 2444148.0, 26265.0], 'label': ['None Trade Debtors', 'None OTHER DEBTORS', 'None Trade Debtors', 'None OTHER DEBTORS'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none nan charges paid in advance , res_fuzz_match = [('charges paid in advance', 100), (' net trade debtors', 44), ('trade receivables', 42), (' related party receivables', 39), (' share of joint venture receivables', 36), (' other debtors', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('charges paid in advance', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none nan financial asset , res_fuzz_match = [(' related party receivables', 39), (' net trade debtors', 38), ('charges paid in advance', 35), ('trade receivables', 33), (' share of joint venture receivables', 32), (' other debtors', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('charges paid in advance', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' net trade debtors', 43), (' other debtors', 42), (' share of joint venture receivables', 36), ('charges paid in advance', 36), (' related party receivables', 29), ('trade receivables', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('charges paid in advance', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none nan charges paid in advance , res_fuzz_match = [('charges paid in advance', 100), (' net trade debtors', 44), ('trade receivables', 42), (' related party receivables', 39), (' share of joint venture receivables', 36), (' other debtors', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('charges paid in advance', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none nan financial asset , res_fuzz_match = [(' related party receivables', 39), (' net trade debtors', 38), ('charges paid in advance', 35), ('trade receivables', 33), (' share of joint venture receivables', 32), (' other debtors', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('charges paid in advance', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' net trade debtors', 43), (' other debtors', 42), (' share of joint venture receivables', 36), ('charges paid in advance', 36), (' related party receivables', 29), ('trade receivables', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('charges paid in advance', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [143788.0, 420436.0], 'label': ['None nan Charges paid in Advance', 'None nan Charges paid in Advance'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total financial , res_fuzz_match = [('trade receivables', 42), ('charges paid in advance', 40), (' related party receivables', 38), (' share of joint venture receivables', 31), (' net trade debtors', 31), (' other debtors', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total advance , res_fuzz_match = [('charges paid in advance', 67), (' share of joint venture receivables', 42), (' net trade debtors', 42), (' other debtors', 35), ('trade receivables', 33), (' related party receivables', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' other debtors', 45), (' net trade debtors', 45), ('trade receivables', 27), (' related party receivables', 27), (' share of joint venture receivables', 27), ('charges paid in advance', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total financial , res_fuzz_match = [('trade receivables', 42), ('charges paid in advance', 40), (' related party receivables', 38), (' share of joint venture receivables', 31), (' net trade debtors', 31), (' other debtors', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total advance , res_fuzz_match = [('charges paid in advance', 67), (' share of joint venture receivables', 42), (' net trade debtors', 42), (' other debtors', 35), ('trade receivables', 33), (' related party receivables', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' other debtors', 45), (' net trade debtors', 45), ('trade receivables', 27), (' related party receivables', 27), (' share of joint venture receivables', 27), ('charges paid in advance', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' revenue from continuing activities', 100), ('revenue from contracts with customers', 63), ('Revenue from contract with customers', 63), ('revenue from operations', 54), ('from trading business', 45), (' Revenue', 39), ('transmission and distribution business', 34), (' Sales revenue', 33), ('net sales', 24), (' Sale of coal', 24), ('sale of products', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal', 43), ('sale of products', 38), ('net sales', 36), ('from trading business', 34), (' revenue from continuing activities', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Revenue', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), (' revenue from continuing activities', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('sale of products', 32), (' Revenue', 31), ('net sales', 27), ('revenue from operations', 26), (' Sales revenue', 22), ('from trading business', 18), ('transmission and distribution business', 17), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Sale of coal', 12), (' revenue from continuing activities', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), (' revenue from continuing activities', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('from trading business', 49), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('transmission and distribution business', 37), (' revenue from continuing activities', 35), ('sale of products', 32), (' Sales revenue', 32), ('net sales', 24), (' Sale of coal', 23), (' Revenue', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' revenue from continuing activities', 33), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('transmission and distribution business', 18), (' Revenue', 18), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 12), ('revenue from operations', 10), ('from trading business', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' revenue from continuing activities', 80), ('revenue from contracts with customers', 53), ('Revenue from contract with customers', 53), ('from trading business', 40), ('transmission and distribution business', 38), ('revenue from operations', 34), ('sale of products', 22), (' Sales revenue', 22), (' Revenue', 19), ('net sales', 18), (' Sale of coal', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 30), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27), (' Sale of coal', 26), ('sale of products', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('from trading business', 41), (' revenue from continuing activities', 37), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 34), ('net sales', 31), ('transmission and distribution business', 31), ('revenue from operations', 30), ('sale of products', 28), (' Revenue', 27), (' Sale of coal', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), (' Sale of coal', 15), (' revenue from continuing activities', 14), ('sale of products', 12), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('revenue from operations', 43), (' revenue from continuing activities', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('transmission and distribution business', 34), ('sale of products', 28), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 16)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('net sales', 36), ('sale of products', 27), ('from trading business', 22), (' Sale of coal', 17), (' Sales revenue', 14), ('transmission and distribution business', 13), ('revenue from contracts with customers', 11), ('Revenue from contract with customers', 11), (' revenue from continuing activities', 7), ('revenue from operations', 0), (' Revenue', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 8], 'score': 80, 'value': 21958622.0, 'line_item_label': ['REVENUE FROM CONTINUING ACTIVITIES', 'PROFIT FROM CONTINUING ACTIVITIES'], 'note_numbers': [nan, nan], 'line_item_value': [21958622.0, 0.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' revenue from continuing activities', 100), ('revenue from contracts with customers', 63), ('Revenue from contract with customers', 63), ('revenue from operations', 54), ('from trading business', 45), (' Revenue', 39), ('transmission and distribution business', 34), (' Sales revenue', 33), ('net sales', 24), (' Sale of coal', 24), ('sale of products', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal', 43), ('sale of products', 38), ('net sales', 36), ('from trading business', 34), (' revenue from continuing activities', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Revenue', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), (' revenue from continuing activities', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('sale of products', 32), (' Revenue', 31), ('net sales', 27), ('revenue from operations', 26), (' Sales revenue', 22), ('from trading business', 18), ('transmission and distribution business', 17), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Sale of coal', 12), (' revenue from continuing activities', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), (' revenue from continuing activities', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('from trading business', 49), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('transmission and distribution business', 37), (' revenue from continuing activities', 35), ('sale of products', 32), (' Sales revenue', 32), ('net sales', 24), (' Sale of coal', 23), (' Revenue', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' revenue from continuing activities', 33), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('transmission and distribution business', 18), (' Revenue', 18), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 12), ('revenue from operations', 10), ('from trading business', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' revenue from continuing activities', 80), ('revenue from contracts with customers', 53), ('Revenue from contract with customers', 53), ('from trading business', 40), ('transmission and distribution business', 38), ('revenue from operations', 34), ('sale of products', 22), (' Sales revenue', 22), (' Revenue', 19), ('net sales', 18), (' Sale of coal', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 30), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27), (' Sale of coal', 26), ('sale of products', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('from trading business', 41), (' revenue from continuing activities', 37), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 34), ('net sales', 31), ('transmission and distribution business', 31), ('revenue from operations', 30), ('sale of products', 28), (' Revenue', 27), (' Sale of coal', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), (' Sale of coal', 15), (' revenue from continuing activities', 14), ('sale of products', 12), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('revenue from operations', 43), (' revenue from continuing activities', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('transmission and distribution business', 34), ('sale of products', 28), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 16)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('net sales', 36), ('sale of products', 27), ('from trading business', 22), (' Sale of coal', 17), (' Sales revenue', 14), ('transmission and distribution business', 13), ('revenue from contracts with customers', 11), ('Revenue from contract with customers', 11), (' revenue from continuing activities', 7), ('revenue from operations', 0), (' Revenue', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 8], 'score': 80, 'value': 26475757.0, 'line_item_label': ['REVENUE FROM CONTINUING ACTIVITIES', 'PROFIT FROM CONTINUING ACTIVITIES'], 'note_numbers': [nan, nan], 'line_item_value': [26475757.0, 0.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' cost of coal sold', 36), (' Personnel costs', 36), (' Cost of product sold', 33), (' cost of goods sold', 31), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), ('total expenditure', 24), ('expenditure', 23), ('expense', 19), ('total expenses', 16)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' cost of goods sold', 100), (' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('expenditure', 47), ('expense', 46), ('total expenditure', 35), ('total expenses', 32), ('purchase of stock-in-trade', 31), (' Personnel costs', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 23), ('cost of sales', 12), ('Cost of sales', 12), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('total expenditure', 52), ('expenditure', 50), ('total expenses', 47), (' Cost of goods and services sold', 39), ('expense', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' cost of goods sold', 35), (' Cost of product sold', 33), (' Personnel costs', 30), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Cost of inventory sold', 33), (' cost of coal sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), (' Personnel costs', 21), (' cost of goods sold', 21), (' Cost of product sold', 18), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 10), ('expense', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 23), ('total expenses', 22), ('expense', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' cost of coal sold', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Cost of goods and services sold', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 37), (' Personnel costs', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 29), (' Cost of goods and services sold', 29), (' cost of coal sold', 26), (' cost of goods sold', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), ('purchase of stock-in-trade', 17), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10), (' cost of goods sold', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), ('total expenses', 28), (' cost of coal sold', 27), (' cost of goods sold', 27), ('cost of sales', 25), ('Cost of sales', 25), ('expenditure', 24), ('expense', 16)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' cost of goods sold', 12), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 20145724.0, 'line_item_label': ['COST OF GOODS SOLD'], 'note_numbers': [nan], 'line_item_value': [20145724.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' cost of coal sold', 36), (' Personnel costs', 36), (' Cost of product sold', 33), (' cost of goods sold', 31), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), ('total expenditure', 24), ('expenditure', 23), ('expense', 19), ('total expenses', 16)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' cost of goods sold', 100), (' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('expenditure', 47), ('expense', 46), ('total expenditure', 35), ('total expenses', 32), ('purchase of stock-in-trade', 31), (' Personnel costs', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 23), ('cost of sales', 12), ('Cost of sales', 12), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('total expenditure', 52), ('expenditure', 50), ('total expenses', 47), (' Cost of goods and services sold', 39), ('expense', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' cost of goods sold', 35), (' Cost of product sold', 33), (' Personnel costs', 30), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Cost of inventory sold', 33), (' cost of coal sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), (' Personnel costs', 21), (' cost of goods sold', 21), (' Cost of product sold', 18), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 10), ('expense', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 23), ('total expenses', 22), ('expense', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' cost of coal sold', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Cost of goods and services sold', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 37), (' Personnel costs', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 29), (' Cost of goods and services sold', 29), (' cost of coal sold', 26), (' cost of goods sold', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), ('purchase of stock-in-trade', 17), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10), (' cost of goods sold', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), ('total expenses', 28), (' cost of coal sold', 27), (' cost of goods sold', 27), ('cost of sales', 25), ('Cost of sales', 25), ('expenditure', 24), ('expense', 16)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' cost of goods sold', 12), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 24426590.0, 'line_item_label': ['COST OF GOODS SOLD'], 'note_numbers': [nan], 'line_item_value': [24426590.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation â€“ property', ' plant and equipment', ' Depreciation â€“ right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administrative expenses', 44), (' Administration expenses', 44), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Logistics and distribution', 31), (' Marketing expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' depreciation', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses', 35), (' Selling & distribution expenses', 34), (' Selling Expenses', 32), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Advertising expenses', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Occupancy ', 11), (' depreciation', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' depreciation', 100), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Occupancy expenses', 42), (' Marketing expenses', 40), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 33), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 27), (' Administrative and other expenses', 24), (' Logistics and distribution', 22), (' Occupancy ', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other expenses', 63), (' Other expenses', 63), (' Other expenses', 63), (' Marketing expenses', 56), (' Management expenses', 53), (' Administrative and other expenses', 46), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Logistics and distribution', 39), (' Selling & distribution expenses', 34), (' Sales and marketing', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' depreciation', 24), (' Occupancy ', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' depreciation', 33), (' Amortisation expenses', 32), (' Advertising expenses', 30), (' Logistics and distribution', 24), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Selling & distribution expenses', 15), (' Administrative and other expenses', 13), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Selling Expenses', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Logistics and distribution', 40), (' Administrative and other expenses', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Occupancy ', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 19), (' Management expenses', 16), (' Lease expenses', 11), (' Selling Expenses', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Depreciation expenses', 50), (' Depreciation expenses', 50), (' Amortisation expenses', 50), (' Advertising expenses', 49), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Administrative and other expenses', 46), ('Distribution expenses', 42), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' depreciation', 28), (' Sales and marketing', 27), (' Logistics and distribution', 24), (' Occupancy ', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Administrative and other expenses', 48), (' Depreciation expenses', 47), (' Depreciation expenses', 47), (' Amortisation expenses', 47), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 30), (' Advertising expenses', 30), (' Sales and marketing', 30), (' Lease expenses', 29), (' Marketing expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Occupancy ', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), ('Distribution expenses', 21), (' Administrative expenses', 21), (' Administrative and other expenses', 21), (' Administration expenses', 21), (' Selling & distribution expenses', 17), (' Lease expenses', 14), (' Selling Expenses', 14), ('other expenses', 13), (' Occupancy expenses', 13), (' Other expenses', 13), (' Management expenses', 13), (' Other expenses', 13), (' Marketing expenses', 12), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' Logistics and distribution', 9), (' depreciation', 0), (' Occupancy ', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 107567.0, 'line_item_label': ['DEPRECIATION', 'OCCUPANCY EXPENSES'], 'note_numbers': [nan, nan], 'line_item_value': [4281.0, 103286.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administrative expenses', 44), (' Administration expenses', 44), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Logistics and distribution', 31), (' Marketing expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' depreciation', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses', 35), (' Selling & distribution expenses', 34), (' Selling Expenses', 32), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Advertising expenses', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Occupancy ', 11), (' depreciation', 10)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' depreciation', 100), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Occupancy expenses', 42), (' Marketing expenses', 40), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 33), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 27), (' Administrative and other expenses', 24), (' Logistics and distribution', 22), (' Occupancy ', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other expenses', 63), (' Other expenses', 63), (' Other expenses', 63), (' Marketing expenses', 56), (' Management expenses', 53), (' Administrative and other expenses', 46), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Logistics and distribution', 39), (' Selling & distribution expenses', 34), (' Sales and marketing', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' depreciation', 24), (' Occupancy ', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' depreciation', 33), (' Amortisation expenses', 32), (' Advertising expenses', 30), (' Logistics and distribution', 24), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Selling & distribution expenses', 15), (' Administrative and other expenses', 13), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Selling Expenses', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Logistics and distribution', 40), (' Administrative and other expenses', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Occupancy ', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 19), (' Management expenses', 16), (' Lease expenses', 11), (' Selling Expenses', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Depreciation expenses', 50), (' Depreciation expenses', 50), (' Amortisation expenses', 50), (' Advertising expenses', 49), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Administrative and other expenses', 46), ('Distribution expenses', 42), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' depreciation', 28), (' Sales and marketing', 27), (' Logistics and distribution', 24), (' Occupancy ', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Administrative and other expenses', 48), (' Depreciation expenses', 47), (' Depreciation expenses', 47), (' Amortisation expenses', 47), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 30), (' Advertising expenses', 30), (' Sales and marketing', 30), (' Lease expenses', 29), (' Marketing expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Occupancy ', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), ('Distribution expenses', 21), (' Administrative expenses', 21), (' Administrative and other expenses', 21), (' Administration expenses', 21), (' Selling & distribution expenses', 17), (' Lease expenses', 14), (' Selling Expenses', 14), ('other expenses', 13), (' Occupancy expenses', 13), (' Other expenses', 13), (' Management expenses', 13), (' Other expenses', 13), (' Marketing expenses', 12), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' Logistics and distribution', 9), (' depreciation', 0), (' Occupancy ', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 116878.0, 'line_item_label': ['DEPRECIATION', 'OCCUPANCY EXPENSES'], 'note_numbers': [nan, nan], 'line_item_value': [5786.0, 111092.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administration expenses', 44), (' Rental expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Occupancy expenses', 42), (' Rental expenses', 40), ('Rent', 36), (' Administration expenses', 35), (' Occupancy', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' Rental expenses', 51), (' Occupancy expenses', 42), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('Rent', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12), (' Rental expenses', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy', 27), (' Occupancy expenses', 22), (' Rental expenses', 21), ('Rent', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 42), ('Rent', 31), (' Occupancy', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 45), (' Occupancy expenses', 44), ('Rent', 29), (' Occupancy', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 27), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent', 29), (' Rental expenses', 25), (' Administration expenses', 21), (' Occupancy expenses', 13), (' Occupancy', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 103286.0, 'line_item_label': ['OCCUPANCY EXPENSES'], 'note_numbers': [nan], 'line_item_value': [103286.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administration expenses', 44), (' Rental expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Occupancy expenses', 42), (' Rental expenses', 40), ('Rent', 36), (' Administration expenses', 35), (' Occupancy', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' Rental expenses', 51), (' Occupancy expenses', 42), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('Rent', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12), (' Rental expenses', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy', 27), (' Occupancy expenses', 22), (' Rental expenses', 21), ('Rent', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 42), ('Rent', 31), (' Occupancy', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 45), (' Occupancy expenses', 44), ('Rent', 29), (' Occupancy', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 27), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent', 29), (' Rental expenses', 25), (' Administration expenses', 21), (' Occupancy expenses', 13), (' Occupancy', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 111092.0, 'line_item_label': ['OCCUPANCY EXPENSES'], 'note_numbers': [nan], 'line_item_value': [111092.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('Other revenue', 54), (' Other income', 33), ('other operating', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other operating', 50), (' Other income', 49), ('Other revenue', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Other income', 25), ('Other revenue', 24), ('other operating', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 35)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Other income', 52), ('other operating', 39), ('Other revenue', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('Other revenue', 54), (' Other income', 33), ('other operating', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other operating', 50), (' Other income', 49), ('Other revenue', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Other income', 25), ('Other revenue', 24), ('other operating', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 35)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Other income', 52), ('other operating', 39), ('Other revenue', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Interest revenue', 55), (' Finance income and costs', 43), (' Finance income and finance costs', 42), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), ('other income', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), (' Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Interest revenue', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Finance income and costs', 21), (' Net finance costs', 18), (' Finance income and finance costs', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other income', 49), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance income', 35), ('Finance income', 35), (' Finance income and costs', 31), (' Net finance costs', 30), ('other income', 25), (' Finance income and finance costs', 24), (' Interest revenue', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Finance income and costs', 43), (' Finance income and finance costs', 42), ('other income', 39), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), (' Interest revenue', 30)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('finance income', 47), ('Finance income', 47), (' Net finance costs', 43), ('other income', 42), (' Finance income and costs', 42), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('finance income', 44), ('Finance income', 44), (' Finance income and costs', 44), (' Net finance costs', 41), ('other income', 40), (' Finance income and finance costs', 38), (' Interest revenue', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('other income', 52), (' Finance income and costs', 38), (' Finance income and finance costs', 37), (' Net finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), (' Finance income and costs', 17), ('other income', 14), ('finance income', 13), ('Finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 85, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Interest revenue', 55), (' Finance income and costs', 43), (' Finance income and finance costs', 42), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), ('other income', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), (' Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Interest revenue', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Finance income and costs', 21), (' Net finance costs', 18), (' Finance income and finance costs', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other income', 49), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance income', 35), ('Finance income', 35), (' Finance income and costs', 31), (' Net finance costs', 30), ('other income', 25), (' Finance income and finance costs', 24), (' Interest revenue', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Finance income and costs', 43), (' Finance income and finance costs', 42), ('other income', 39), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), (' Interest revenue', 30)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('finance income', 47), ('Finance income', 47), (' Net finance costs', 43), ('other income', 42), (' Finance income and costs', 42), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('finance income', 44), ('Finance income', 44), (' Finance income and costs', 44), (' Net finance costs', 41), ('other income', 40), (' Finance income and finance costs', 38), (' Interest revenue', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('other income', 52), (' Finance income and costs', 38), (' Finance income and finance costs', 37), (' Net finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), (' Finance income and costs', 17), ('other income', 14), ('finance income', 13), ('Finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 85, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), ('current tax', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), ('provision for taxation previous year', 30), ('prior year ', 29), (' income tax expense', 29), (' income tax', 29), (' tax (expense)/benefit', 28), ('earlier year', 27), ('deferred tax', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('deferred tax', 38), ('prior year ', 35), (' income tax expense', 35), ('earlier year', 32), (' income tax benefit/(expense)', 26), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('current tax', 22), ('provision for taxation previous year', 22), ('minimum alternate tax credit entitlement', 21), (' income tax', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 39), ('earlier year', 37), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax', 29), ('current tax', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' income tax', 29), ('current tax', 25), ('earlier year', 24), ('minimum alternate tax credit entitlement', 22), ('amount transferred to retained earnings', 19), (' income tax expense', 19), (' income tax benefit', 18), ('deferred tax', 14), (' income tax benefit/(expense)', 14), ('prior year ', 13), ('provision for taxation previous year', 12), (' tax (expense)/benefit', 9)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 38), (' income tax benefit', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' income tax', 35), (' income tax expense', 34), ('prior year ', 29), ('current tax', 28), ('earlier year', 27), ('deferred tax', 24), (' tax (expense)/benefit', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 87), (' income tax expense', 84), (' tax (expense)/benefit', 70), (' income tax benefit', 67), (' income tax', 58), ('minimum alternate tax credit entitlement', 52), ('provision for taxation previous year', 47), ('deferred tax', 45), ('current tax', 42), ('amount transferred to retained earnings', 41), ('prior year ', 31), ('earlier year', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' income tax benefit/(expense)', 83), (' income tax expense', 80), (' tax (expense)/benefit', 67), ('current tax', 63), (' income tax benefit', 63), (' income tax', 55), ('minimum alternate tax credit entitlement', 54), ('amount transferred to retained earnings', 47), ('provision for taxation previous year', 38), ('deferred tax', 36), ('prior year ', 29), ('earlier year', 28)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('current tax', 27), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('minimum alternate tax credit entitlement', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax benefit', 46), ('amount transferred to retained earnings', 45), ('prior year ', 44), (' income tax benefit/(expense)', 44), (' income tax expense', 43), ('earlier year', 42), ('minimum alternate tax credit entitlement', 41), (' income tax', 40), (' tax (expense)/benefit', 37), ('current tax', 33), ('deferred tax', 30)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 83, 'value': 491215.0, 'line_item_label': ['BEFORE INCOME TAX EXPENSE', 'INCOME TAX EXPENSES - CURRENT'], 'note_numbers': [nan, nan], 'line_item_value': [491215.0, 0.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), ('current tax', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), ('provision for taxation previous year', 30), ('prior year ', 29), (' income tax expense', 29), (' income tax', 29), (' tax (expense)/benefit', 28), ('earlier year', 27), ('deferred tax', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('deferred tax', 38), ('prior year ', 35), (' income tax expense', 35), ('earlier year', 32), (' income tax benefit/(expense)', 26), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('current tax', 22), ('provision for taxation previous year', 22), ('minimum alternate tax credit entitlement', 21), (' income tax', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 39), ('earlier year', 37), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax', 29), ('current tax', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' income tax', 29), ('current tax', 25), ('earlier year', 24), ('minimum alternate tax credit entitlement', 22), ('amount transferred to retained earnings', 19), (' income tax expense', 19), (' income tax benefit', 18), ('deferred tax', 14), (' income tax benefit/(expense)', 14), ('prior year ', 13), ('provision for taxation previous year', 12), (' tax (expense)/benefit', 9)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 38), (' income tax benefit', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' income tax', 35), (' income tax expense', 34), ('prior year ', 29), ('current tax', 28), ('earlier year', 27), ('deferred tax', 24), (' tax (expense)/benefit', 23)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 87), (' income tax expense', 84), (' tax (expense)/benefit', 70), (' income tax benefit', 67), (' income tax', 58), ('minimum alternate tax credit entitlement', 52), ('provision for taxation previous year', 47), ('deferred tax', 45), ('current tax', 42), ('amount transferred to retained earnings', 41), ('prior year ', 31), ('earlier year', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' income tax benefit/(expense)', 83), (' income tax expense', 80), (' tax (expense)/benefit', 67), ('current tax', 63), (' income tax benefit', 63), (' income tax', 55), ('minimum alternate tax credit entitlement', 54), ('amount transferred to retained earnings', 47), ('provision for taxation previous year', 38), ('deferred tax', 36), ('prior year ', 29), ('earlier year', 28)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('current tax', 27), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('minimum alternate tax credit entitlement', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax benefit', 46), ('amount transferred to retained earnings', 45), ('prior year ', 44), (' income tax benefit/(expense)', 44), (' income tax expense', 43), ('earlier year', 42), ('minimum alternate tax credit entitlement', 41), (' income tax', 40), (' tax (expense)/benefit', 37), ('current tax', 33), ('deferred tax', 30)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 83, 'value': 643396.0, 'line_item_label': ['BEFORE INCOME TAX EXPENSE', 'INCOME TAX EXPENSES - CURRENT'], 'note_numbers': [nan, nan], 'line_item_value': [643396.0, 0.0]}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('prior period', 42), ('exceptional', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('prior period', 47), ('exceptional', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional', 22), ('prior period', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('prior period', 42), ('exceptional', 31)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('prior period', 47), ('exceptional', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional', 22), ('prior period', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 16:46:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 16:46:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 16:46:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 16:46:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-08-10 16:46:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

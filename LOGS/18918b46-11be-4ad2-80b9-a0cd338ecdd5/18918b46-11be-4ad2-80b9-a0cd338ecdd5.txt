2023-07-27 14:16:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-27 14:16:20+0530 - sLogger - DEBUG - process_main_pages started
2023-07-27 14:16:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 14:16:20+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 14:16:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 14:16:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 14:16:20+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 14:16:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 14:16:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 14:16:20+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 14:16:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 14:16:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-27 14:16:52+0530 - sLogger - DEBUG - process_main_pages started
2023-07-27 14:16:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 14:16:52+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 14:16:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-07-27 14:16:52+0530 - sLogger - ERROR - error occured: list index out of range
2023-07-27 14:16:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 14:16:52+0530 - sLogger - ERROR - error occured: local variable 'standard_df' referenced before assignment
2023-07-27 14:16:52+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 14:16:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 14:16:52+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 14:16:52+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-27 14:16:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-27 14:16:52+0530 - sLogger - DEBUG - start_refactoring started
2023-07-27 14:16:52+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 10:28:51+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-31 10:28:51+0530 - sLogger - DEBUG - process_main_pages started
2023-07-31 10:28:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 10:28:52+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 10:28:52+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 10:28:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 10:28:52+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 10:28:52+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 10:28:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 10:28:52+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 10:28:52+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 10:28:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-31 10:28:52+0530 - sLogger - DEBUG - set_section_details started
2023-07-31 10:28:52+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD currentassets | score 96
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD currentliabilities | score 62
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentassets | score 87
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentassets | score 87
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equityandliabilities | score 29
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Cash assets | [('assets', 67), ('current assets', 61), ('noncurrent assets', 61), ('currentassets', 45), ('noncurrentassets', 40), ('equity and liabilities', 37), ('equity liabilities', 35), ('current liabilities', 33), ('equityandliabilities', 29), ('equity', 25), ('noncurrent liabilities', 25), ('equityliabilities', 22), ('currentliabilities', 21), ('noncurrentliabilities', 18), ('liabilities', 12)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD current assets | score 67
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD currentassets | score 58
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD current liabilities | score 33
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD currentliabilities | score 28
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrent assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrentassets | score 52
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrent liabilities | score 31
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD non current assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD non current liabilities | score 31
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrentliabilities | score 25
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrentassets | score 52
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrentliabilities | score 25
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equity and liabilities | score 31
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equityandliabilities | score 26
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Receivables | [('currentliabilities', 40), ('currentassets', 33), ('equity', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('equityandliabilities', 24), ('noncurrent assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity and liabilities', 17), ('noncurrent liabilities', 10)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD current assets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD currentassets | score 42
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD current liabilities | score 53
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD currentliabilities | score 55
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrent assets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrentassets | score 37
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrent liabilities | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD non current assets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD non current liabilities | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrentliabilities | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrentassets | score 37
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrentliabilities | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equity and liabilities | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equityandliabilities | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Inventory | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD current assets | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD currentassets | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD current liabilities | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD currentliabilities | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrent assets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrentassets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrent liabilities | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD non current assets | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD non current liabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrentliabilities | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrentassets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrentliabilities | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equity and liabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equity | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equityandliabilities | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Other | [('noncurrentassets', 30), ('currentassets', 24), ('noncurrentliabilities', 24), ('current assets', 22), ('noncurrent assets', 22), ('noncurrent liabilities', 21), ('assets', 20), ('equity', 18), ('equityliabilities', 15), ('currentliabilities', 14), ('equityandliabilities', 12), ('current liabilities', 11), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current assets | score 21
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD currentassets | score 22
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD currentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent assets | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentassets | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current assets | score 26
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentassets | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity and liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity | score 18
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equityandliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - TOTAL CURRENT ASSETS | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current assets | score 95
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD currentassets | score 83
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current liabilities | score 56
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD currentliabilities | score 53
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent assets | score 81
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrentassets | score 78
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current assets | score 84
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current liabilities | score 60
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 54
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrentassets | score 78
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrentliabilities | score 54
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equityandliabilities | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - NONCURRENT ASSETS | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD currentassets | score 87
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current liabilities | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD currentliabilities | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 100
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 97
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 72
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current assets | score 97
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current liabilities | score 70
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 68
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 97
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 68
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equityandliabilities | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Plant and Equipment | [('equity and liabilities', 69), ('equity liabilities', 50), ('equity', 48), ('equityandliabilities', 46), ('equityliabilities', 43), ('current assets', 36), ('assets', 30), ('noncurrentliabilities', 30), ('noncurrent assets', 29), ('liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('currentliabilities', 25), ('currentassets', 22)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD current assets | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD currentassets | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD current liabilities | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD currentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrent assets | score 33
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrentassets | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrent liabilities | score 29
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD non current assets | score 41
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD non current liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrentliabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrentassets | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrentliabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equity and liabilities | score 60
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equity | score 60
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equityandliabilities | score 39
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Investments | [('noncurrentassets', 38), ('assets', 36), ('currentassets', 33), ('equity', 33), ('noncurrentliabilities', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('equity and liabilities', 26), ('equityandliabilities', 24), ('current assets', 21), ('noncurrent assets', 21), ('equity liabilities', 21), ('current liabilities', 20), ('noncurrent liabilities', 20), ('liabilities', 17)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current assets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentassets | score 42
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current liabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentliabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent assets | score 43
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent liabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current assets | score 41
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current liabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity and liabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equityandliabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Advance Payments and Deposits | [('equity and liabilities', 42), ('current assets', 36), ('noncurrentassets', 34), ('currentassets', 32), ('equityandliabilities', 27), ('assets', 26), ('noncurrent assets', 26), ('equity liabilities', 26), ('noncurrentliabilities', 26), ('current liabilities', 25), ('noncurrent liabilities', 25), ('equityliabilities', 24), ('currentliabilities', 23), ('equity', 19), ('liabilities', 12)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD current assets | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD currentassets | score 41
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD current liabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD currentliabilities | score 35
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrent assets | score 43
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrentassets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrent liabilities | score 39
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD non current assets | score 43
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD non current liabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrentassets | score 40
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equity and liabilities | score 41
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equityandliabilities | score 33
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Right of Use Assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current assets | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD currentassets | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current liabilities | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD currentliabilities | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent assets | score 56
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentassets | score 51
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent liabilities | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current assets | score 59
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current liabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentliabilities | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentassets | score 51
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentliabilities | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity and liabilities | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equityandliabilities | score 26
2023-07-31 10:28:52+0530 - sLogger - DEBUG - TOTAL NONCURRENT ASSETS | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD currentassets | score 83
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current liabilities | score 52
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD currentliabilities | score 49
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 95
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 82
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 62
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current assets | score 83
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current liabilities | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 59
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrentassets | score 82
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrentliabilities | score 59
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equityandliabilities | score 28
2023-07-31 10:28:52+0530 - sLogger - DEBUG - TOTAL ASSETS | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current assets | score 64
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD currentassets | score 56
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD currentliabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent assets | score 64
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrentassets | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrentliabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrentassets | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrentliabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity and liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equityandliabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 67
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD currentassets | score 62
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD currentliabilities | score 97
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 59
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equityandliabilities | score 67
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Payables | [('liabilities', 50), ('equity and liabilities', 35), ('equityandliabilities', 35), ('equity liabilities', 32), ('current liabilities', 30), ('noncurrent liabilities', 30), ('equityliabilities', 29), ('assets', 18), ('currentliabilities', 13), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentliabilities', 11), ('noncurrentassets', 10), ('equity', 0)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD current assets | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD currentassets | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD current liabilities | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD currentliabilities | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrent assets | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrentassets | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrent liabilities | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD non current assets | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD non current liabilities | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrentliabilities | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrentassets | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrentliabilities | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equity and liabilities | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equity | score 14
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equityandliabilities | score 45
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Interest Bearing Liabilities Provisions | [('current liabilities', 54), ('equity and liabilities', 50), ('equity liabilities', 50), ('noncurrent liabilities', 39), ('liabilities', 36), ('currentliabilities', 33), ('equityandliabilities', 32), ('currentassets', 31), ('noncurrentliabilities', 31), ('noncurrentassets', 29), ('equityliabilities', 29), ('current assets', 25), ('noncurrent assets', 25), ('equity', 24), ('assets', 19)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD current assets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD currentassets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD currentliabilities | score 67
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrent assets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrentassets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrent liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD non current assets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD non current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrentliabilities | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrentassets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrentliabilities | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD equity and liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD equityandliabilities | score 63
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Interest Bearing Liabilities Provisions | [('current liabilities', 54), ('equity and liabilities', 50), ('equity liabilities', 50), ('noncurrent liabilities', 39), ('liabilities', 36), ('currentliabilities', 33), ('equityandliabilities', 32), ('currentassets', 31), ('noncurrentliabilities', 31), ('noncurrentassets', 29), ('equityliabilities', 29), ('current assets', 25), ('noncurrent assets', 25), ('equity', 24), ('assets', 19)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD current assets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD currentassets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD currentliabilities | score 67
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrent assets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrentassets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrent liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD non current assets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD non current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrentliabilities | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrentassets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD noncurrentliabilities | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD equity and liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities Provisions | MATCH WORD equityandliabilities | score 63
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Other | [('noncurrentassets', 30), ('currentassets', 24), ('noncurrentliabilities', 24), ('current assets', 22), ('noncurrent assets', 22), ('noncurrent liabilities', 21), ('assets', 20), ('equity', 18), ('equityliabilities', 15), ('currentliabilities', 14), ('equityandliabilities', 12), ('current liabilities', 11), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current assets | score 21
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD currentassets | score 22
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD currentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent assets | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentassets | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current assets | score 26
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentassets | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity and liabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity | score 18
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equityandliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Lease Liabilities Right of Use Assets | [('equity and liabilities', 45), ('equity liabilities', 45), ('current liabilities', 44), ('current assets', 40), ('noncurrent liabilities', 39), ('liabilities', 36), ('noncurrent assets', 35), ('assets', 31), ('currentassets', 31), ('noncurrentassets', 29), ('equityandliabilities', 26), ('equityliabilities', 23), ('currentliabilities', 22), ('noncurrentliabilities', 21), ('equity', 18)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD currentassets | score 56
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD currentliabilities | score 60
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentassets | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentliabilities | score 53
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentassets | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentliabilities | score 53
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity and liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equityandliabilities | score 58
2023-07-31 10:28:52+0530 - sLogger - DEBUG - TOTAL CURRENT LIABILITIES | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD currentassets | score 56
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD currentliabilities | score 84
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 54
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 85
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current assets | score 60
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current liabilities | score 88
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 83
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentassets | score 54
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 83
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equityandliabilities | score 62
2023-07-31 10:28:52+0530 - sLogger - DEBUG - NONCURRENT LIABILITIES | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD currentassets | score 57
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 93
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD currentliabilities | score 90
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 72
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 68
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 100
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current assets | score 70
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 98
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 98
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 68
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 98
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 65
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equityandliabilities | score 62
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - Lease Liabilities Right of Use Assets | [('equity and liabilities', 45), ('equity liabilities', 45), ('current liabilities', 44), ('current assets', 40), ('noncurrent liabilities', 39), ('liabilities', 36), ('noncurrent assets', 35), ('assets', 31), ('currentassets', 31), ('noncurrentassets', 29), ('equityandliabilities', 26), ('equityliabilities', 23), ('currentliabilities', 22), ('noncurrentliabilities', 21), ('equity', 18)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD currentassets | score 56
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD currentliabilities | score 60
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentassets | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentliabilities | score 53
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentassets | score 50
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrentliabilities | score 53
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity and liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equityandliabilities | score 58
2023-07-31 10:28:52+0530 - sLogger - DEBUG - TOTAL NONCURRENT LIABILITIES | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD currentassets | score 56
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 81
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD currentliabilities | score 85
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 62
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 95
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current assets | score 61
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentassets | score 62
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrentliabilities | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equityandliabilities | score 58
2023-07-31 10:28:52+0530 - sLogger - DEBUG - TOTAL LIABILITIES | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current assets | score 32
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD currentassets | score 27
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current liabilities | score 75
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD currentliabilities | score 69
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent assets | score 35
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrentassets | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent liabilities | score 75
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current assets | score 34
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current liabilities | score 75
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrentliabilities | score 68
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrentassets | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrentliabilities | score 68
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity and liabilities | score 75
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equityandliabilities | score 70
2023-07-31 10:28:52+0530 - sLogger - DEBUG - NET ASSETS | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current assets | score 75
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD currentassets | score 70
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current liabilities | score 41
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD currentliabilities | score 36
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrentassets | score 72
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent liabilities | score 44
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current assets | score 86
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current liabilities | score 42
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrentliabilities | score 39
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrentassets | score 72
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrentliabilities | score 39
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity and liabilities | score 38
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity | score 30
2023-07-31 10:28:52+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equityandliabilities | score 33
2023-07-31 10:28:52+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-31 10:28:52+0530 - sLogger - DEBUG - set_section_details started
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM OPERATING ACTIVITIES | operating cash flow before working capital changes
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from Customers | adiustments for movements in working capital
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to Suppliers and Employees | changes in operating assets and liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest Received | movements in working capital
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest Paid | movements in working capital
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income Taxes Paid | changes in working capital
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash Provided by/ (used in) Operating Activities 5 | operating profit before working capital changes
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM INVESTING ACTIVITIES | operating cash flow before working capital changes
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of Plant and Equipment | changes in operating assets and liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash Provided by/ (used in) Investing Activities | adjustments for increase decrease in operating liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- CASH FLOWS FROM FINANCING ACTIVITIES | operating cash flow before working capital changes
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of Borrowings | operating profit before working capital changes
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds of Borrowings | operating cash flow before working capital changes
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends Paid | changes in assets liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of Lease Liabilities | changes in assets liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash Provided by/ (used in) Financing Activities | adjustments for increase decrease in operating liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Cash Provided by/ (used in) Financing Activities | adjustments for increase decrease in operating liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (Decrease)Increase in Cash Held | adjustments for increase decrease in operating liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at beginning of financial year | changes in operating assets and liabilities
2023-07-31 10:28:52+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at end of financial year | changes in operating assets and liabilities
2023-07-31 10:28:55+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-31 10:28:55+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-31 10:28:55+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-07-31 10:28:55+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-31 10:28:55+0530 - sLogger - ERROR - error occured: 'year'
2023-07-31 10:28:55+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('cash asset', 100), ('cash asset', 100), ('cash and cash equivalents', 45), (' cash and cash equivalents', 45), ('cash and bank balances', 40), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('other bank balances', 30), ('bank balances other than above', 27), ('bank balances other than cash and cash equivalents', 26)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('bank balances other than above', 12), ('cash and bank balances', 8)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other bank balances', 45), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash asset', 27), ('cash asset', 27), ('bank balances other than cash and cash equivalents', 20), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('cash and bank balances', 8)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2935329.0, 'line_item_label': ['Cash assets'], 'note_numbers': ['6'], 'line_item_value': [2935329.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('cash asset', 100), ('cash asset', 100), ('cash and cash equivalents', 45), (' cash and cash equivalents', 45), ('cash and bank balances', 40), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('other bank balances', 30), ('bank balances other than above', 27), ('bank balances other than cash and cash equivalents', 26)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('bank balances other than above', 12), ('cash and bank balances', 8)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other bank balances', 45), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash asset', 27), ('cash asset', 27), ('bank balances other than cash and cash equivalents', 20), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('cash and bank balances', 8)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 2483250.0, 'line_item_label': ['Cash assets'], 'note_numbers': ['6'], 'line_item_value': [2483250.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:04+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('inventories', 33)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('inventories', 100)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('inventories', 40)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 4700378.0, 'line_item_label': ['Inventory'], 'note_numbers': ['8'], 'line_item_value': [4700378.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('inventories', 22)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('inventories', 33)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('inventories', 100)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('inventories', 40)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 3923249.0, 'line_item_label': ['Inventory'], 'note_numbers': ['8'], 'line_item_value': [3923249.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:04+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), ('other current assets', 55), ('other financial assets', 55), ('other current financial assets', 49), ('prepayments', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('prepayments', 33), ('other current assets', 24), ('other financial assets', 24), ('other current financial assets', 24), ('other assets', 24)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), ('other current assets', 55), ('other financial assets', 55), ('other current financial assets', 49), ('prepayments', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('prepayments', 33), ('other current assets', 24), ('other financial assets', 24), ('other current financial assets', 24), ('other assets', 24)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:04+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), (' financial assets', 61), ('other current assets', 55), (' other current assets', 55), (' biological assets', 55), (' other financial assets', 55), (' trade and other receivables', 31), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [(' trade and other receivables', 43), (' financial assets', 32), (' income tax receivable from related parties', 31), (' deferred operating expenditure', 30), ('other current assets', 24), ('other assets', 24), (' other current assets', 24), (' other financial assets', 24), (' biological assets', 22)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 37), (' deferred operating expenditure', 23), (' income tax receivable from related parties', 21), (' biological assets', 12), (' financial assets', 11)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), (' financial assets', 61), ('other current assets', 55), (' other current assets', 55), (' biological assets', 55), (' other financial assets', 55), (' trade and other receivables', 31), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [(' trade and other receivables', 43), (' financial assets', 32), (' income tax receivable from related parties', 31), (' deferred operating expenditure', 30), ('other current assets', 24), ('other assets', 24), (' other current assets', 24), (' other financial assets', 24), (' biological assets', 22)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 37), (' deferred operating expenditure', 23), (' income tax receivable from related parties', 21), (' biological assets', 12), (' financial assets', 11)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:04+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('current assets', 61)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('current assets', 32)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('current assets', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current assets', 22)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('current assets', 61)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('current assets', 32)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('current assets', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current assets', 22)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:04+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant and equipment', 54), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': 13325.0, 'line_item_label': ['Plant and Equipment'], 'note_numbers': ['10'], 'line_item_value': [13325.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant and equipment', 54), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': 11613.0, 'line_item_label': ['Plant and Equipment'], 'note_numbers': ['10'], 'line_item_value': [11613.0]}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- at cost , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- total , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance office machines , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance office fixtures & fittings , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance total , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office machines , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office fixtures & fittings , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses total , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost office machines , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost office fixtures & fittings , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost total , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost office machines , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost office fixtures & fittings , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost total , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 13)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance office machines , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance office fixtures & fittings , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance total , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- at cost , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- total , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance office machines , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance office fixtures & fittings , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance total , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office machines , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office fixtures & fittings , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses total , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost office machines , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost office fixtures & fittings , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost total , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost office machines , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost office fixtures & fittings , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost total , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 13)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance office machines , res_fuzz_match = [('accumulated depreciation', 40), ('depreciatio', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance office fixtures & fittings , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance total , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 19], 'score': [100, 100], 'value': [42349.0, 36607.0], 'label': ['Office Machines, Furniture & Fittings- Less: Accumulated Depreciation', 'Office Machines, Furniture & Fittings- Less: Accumulated Depreciation'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:04+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- less: accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- total , res_fuzz_match = [('net value', 53), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance office machines , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance office fixtures & fittings , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance total , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 40), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office machines , res_fuzz_match = [('net book value', 38), ('cost', 25), ('net value', 25), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office fixtures & fittings , res_fuzz_match = [('net book value', 31), ('cost', 25), ('net value', 25), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses total , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 40), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost office machines , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost office fixtures & fittings , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost total , res_fuzz_match = [('cost', 100), ('net value', 53), ('gross', 40), ('net book value', 40)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost office machines , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost office fixtures & fittings , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost total , res_fuzz_match = [('cost', 100), ('net value', 53), ('gross', 40), ('net book value', 40)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance office machines , res_fuzz_match = [('cost', 75), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance office fixtures & fittings , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance total , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 31)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- less: accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- total , res_fuzz_match = [('net value', 53), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance office machines , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance office fixtures & fittings , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = opening balance total , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 40), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office machines , res_fuzz_match = [('net book value', 38), ('cost', 25), ('net value', 25), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office fixtures & fittings , res_fuzz_match = [('net book value', 31), ('cost', 25), ('net value', 25), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = depreciation expenses total , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 40), ('gross', 20)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost office machines , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost office fixtures & fittings , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = purchases at cost total , res_fuzz_match = [('cost', 100), ('net value', 53), ('gross', 40), ('net book value', 40)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost office machines , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost office fixtures & fittings , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = disposal at cost total , res_fuzz_match = [('cost', 100), ('net value', 53), ('gross', 40), ('net book value', 40)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance office machines , res_fuzz_match = [('cost', 75), ('gross', 40), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance office fixtures & fittings , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows = closing balance total , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 9, 10, 11, 12, 13, 14, 18, 27, 28, 29, 30, 31, 32], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [53962.0, 4074.0, 0.0, 4074.0, 0.0, 0.0, 0.0, 49932.0, 6165.0, 0.0, 6165.0, 0.0, 0.0, 0.0], 'label': ['Office Machines, Furniture & Fittings- at Cost', 'Purchases at Cost Office Machines', 'Purchases at Cost Office Fixtures & Fittings', 'Purchases at Cost Total', 'Disposal at Cost Office Machines', 'Disposal at Cost Office Fixtures & Fittings', 'Disposal at Cost Total', 'Office Machines, Furniture & Fittings- at Cost', 'Purchases at Cost Office Machines', 'Purchases at Cost Office Fixtures & Fittings', 'Purchases at Cost Total', 'Disposal at Cost Office Machines', 'Disposal at Cost Office Fixtures & Fittings', 'Disposal at Cost Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:04+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-31 10:29:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible assets', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible assets', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('intangible assets under development', 52), ('intangible assets', 50), ('intangible under development', 50)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 47), ('intangible under development', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('intangible assets under development', 52), ('intangible assets', 50), ('intangible under development', 50)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 47), ('intangible under development', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('donations', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('donations', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('joint ventures and associates', 53), ('investment', 50), (' investment in associate', 46), ('derivative financial instruments', 42), (' investments accounted for using the equity method', 38), (' investment in joint venture', 37)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 330001.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [330001.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('joint ventures and associates', 53), ('investment', 50), (' investment in associate', 46), ('derivative financial instruments', 42), (' investments accounted for using the equity method', 38), (' investment in joint venture', 37)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 330001.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [330001.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none nan investments in unlisted companies , res_fuzz_match = [(' investment in associate', 62), ('investment in joint venture', 53), (' carrying amount at the end of the financial year', 41)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 2023 $ 12 months ended 31 march 2023 $ , res_fuzz_match = [(' carrying amount at the end of the financial year', 56), ('investment in joint venture', 42), (' investment in associate', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), ('investment in joint venture', 43), (' investment in associate', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 2023 $ 12 months ended 31 march 2023 $ , res_fuzz_match = [(' carrying amount at the end of the financial year', 56), ('investment in joint venture', 42), (' investment in associate', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none nan investments in unlisted companies , res_fuzz_match = [(' investment in associate', 62), ('investment in joint venture', 53), (' carrying amount at the end of the financial year', 41)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 2022 $ 12 months ended 31 march 2022 $ , res_fuzz_match = [(' carrying amount at the end of the financial year', 56), ('investment in joint venture', 42), (' investment in associate', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), ('investment in joint venture', 43), (' investment in associate', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 2022 $ 12 months ended 31 march 2022 $ , res_fuzz_match = [(' carrying amount at the end of the financial year', 56), ('investment in joint venture', 42), (' investment in associate', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('deferred charges', 32), ('deferred tax assets', 29), ('deferred tax', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('deferred charges', 32), ('deferred tax assets', 29), ('deferred tax', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' financial assets', 31), (' other non-current assets', 31), (' other non-current assets', 31), (' leased assets', 28), ('other assets', 27), (' other assets', 27), (' loan receivables', 27), ('non-current', 18), (' leases', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets', 62), (' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' financial assets', 31), (' other non-current assets', 31), (' other non-current assets', 31), (' leased assets', 28), ('other assets', 27), (' other assets', 27), (' loan receivables', 27), ('non-current', 18), (' leases', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets', 62), (' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('non-current assets total', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('non-current assets total', 16)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('non-current assets total', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('non-current assets total', 47)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('non-current assets total', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('non-current assets total', 16)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('non-current assets total', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('non-current assets total', 47)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('lease liabilities', 47), (' loans and borrowings', 29), (' interest bearing liabilites', 29), (' bank overdraft', 20), (' leases', 20), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), ('shortterm borrowings', 9)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [(' interest bearing liabilites', 86), ('lease liabilities', 53), ('short term debt', 29), (' loans and borrowings', 29), (' bank overdraft', 29), ('shortterm borrowings', 28), ('short-term debt', 24), ('borrowings', 24), ('shortterm debt', 24), (' leases', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [(' interest bearing liabilites', 86), ('lease liabilities', 53), ('short term debt', 29), (' loans and borrowings', 29), (' bank overdraft', 29), ('shortterm borrowings', 28), ('short-term debt', 24), ('borrowings', 24), ('shortterm debt', 24), (' leases', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('short-term debt', 42), ('shortterm debt', 42), ('short term debt', 40), ('shortterm borrowings', 38), ('borrowings', 36), (' bank overdraft', 32), (' leases', 22), (' interest bearing liabilites', 22), (' loans and borrowings', 20), ('lease liabilities', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 58), (' interest bearing liabilites', 53), ('short term debt', 38), ('short-term debt', 34), ('shortterm debt', 34), (' leases', 26), (' loans and borrowings', 24), (' bank overdraft', 24), ('shortterm borrowings', 23), ('borrowings', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 16], 'score': 86, 'value': 1058080.0, 'line_item_label': ['Interest Bearing Liabilities Provisions', 'Interest Bearing Liabilities Provisions'], 'note_numbers': ['15', '16'], 'line_item_value': [995000.0, 63080.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('lease liabilities', 47), (' loans and borrowings', 29), (' interest bearing liabilites', 29), (' bank overdraft', 20), (' leases', 20), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), ('shortterm borrowings', 9)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [(' interest bearing liabilites', 86), ('lease liabilities', 53), ('short term debt', 29), (' loans and borrowings', 29), (' bank overdraft', 29), ('shortterm borrowings', 28), ('short-term debt', 24), ('borrowings', 24), ('shortterm debt', 24), (' leases', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [(' interest bearing liabilites', 86), ('lease liabilities', 53), ('short term debt', 29), (' loans and borrowings', 29), (' bank overdraft', 29), ('shortterm borrowings', 28), ('short-term debt', 24), ('borrowings', 24), ('shortterm debt', 24), (' leases', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('short-term debt', 42), ('shortterm debt', 42), ('short term debt', 40), ('shortterm borrowings', 38), ('borrowings', 36), (' bank overdraft', 32), (' leases', 22), (' interest bearing liabilites', 22), (' loans and borrowings', 20), ('lease liabilities', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 58), (' interest bearing liabilites', 53), ('short term debt', 38), ('short-term debt', 34), ('shortterm debt', 34), (' leases', 26), (' loans and borrowings', 24), (' bank overdraft', 24), ('shortterm borrowings', 23), ('borrowings', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 16], 'score': 86, 'value': 1634131.0, 'line_item_label': ['Interest Bearing Liabilities Provisions', 'Interest Bearing Liabilities Provisions'], 'note_numbers': ['15', '16'], 'line_item_value': [1500000.0, 134131.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving loan facility , res_fuzz_match = [(' lease liabilities', 55), (' secured long-term bank loans', 54), (' leases', 50), (' not later than one year', 48), (' loans from related party', 48), (' not later than 1 year', 47), ('bank borrowings', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32), (' utilised – bank borrowings', 30), (' bank overdraft', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [(' balance at the end of period', 67), (' not later than 1 year', 44), (' not later than one year', 44), (' secured long-term bank loans', 44), (' bank overdraft', 44), (' loans from related party', 33), (' lease liabilities - current', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22), (' lease liabilities', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving total , res_fuzz_match = [(' loans from related party', 48), (' not later than 1 year', 47), (' secured long-term bank loans', 46), (' not later than one year', 43), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32), (' utilised – bank borrowings', 30), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [(' balance at the end of period', 67), (' not later than 1 year', 44), (' not later than one year', 44), (' secured long-term bank loans', 44), (' bank overdraft', 44), (' loans from related party', 33), (' lease liabilities - current', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22), (' lease liabilities', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving loan facility , res_fuzz_match = [(' lease liabilities', 55), (' secured long-term bank loans', 54), (' leases', 50), (' not later than one year', 48), (' loans from related party', 48), (' not later than 1 year', 47), ('bank borrowings', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32), (' utilised – bank borrowings', 30), (' bank overdraft', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [(' balance at the end of period', 67), (' not later than 1 year', 44), (' not later than one year', 44), (' secured long-term bank loans', 44), (' bank overdraft', 44), (' loans from related party', 33), (' lease liabilities - current', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22), (' lease liabilities', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving total , res_fuzz_match = [(' loans from related party', 48), (' not later than 1 year', 47), (' secured long-term bank loans', 46), (' not later than one year', 43), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32), (' utilised – bank borrowings', 30), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [(' balance at the end of period', 67), (' not later than 1 year', 44), (' not later than one year', 44), (' secured long-term bank loans', 44), (' bank overdraft', 44), (' loans from related party', 33), (' lease liabilities - current', 33), (' leases', 25), ('bank borrowings', 22), (' utilised – bank borrowings', 22), (' lease liabilities', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' leases', 75), (' not later than one year', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' loans from related party', 43), (' not later than one year', 39), (' secured long-term bank loans', 38), (' balance at the end of period', 38), (' not later than 1 year', 37), ('bank borrowings', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' lease liabilities - current', 32), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' loans from related party', 40), (' balance at the end of period', 38), ('bank borrowings', 36), (' secured long-term bank loans', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' not later than 1 year', 32), (' not later than one year', 32), (' lease liabilities - current', 32), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' loans from related party', 40), (' balance at the end of period', 38), ('bank borrowings', 36), (' secured long-term bank loans', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' not later than 1 year', 32), (' not later than one year', 32), (' lease liabilities - current', 32), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [('bank borrowings', 45), (' utilised – bank borrowings', 45), (' secured long-term bank loans', 42), (' loans from related party', 38), (' not later than 1 year', 37), (' lease liabilities', 36), (' bank overdraft', 36), (' not later than one year', 35), (' balance at the end of period', 33), (' lease liabilities - current', 26), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' lease liabilities - current', 54), (' not later than 1 year', 46), (' not later than one year', 46), (' secured long-term bank loans', 46), (' loans from related party', 38), (' lease liabilities', 38), (' bank overdraft', 31), (' balance at the end of period', 31), ('bank borrowings', 29), (' leases', 25), (' utilised – bank borrowings', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = non-current provision for long service leave , res_fuzz_match = [(' leases', 75), (' secured long-term bank loans', 50), ('bank borrowings', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' not later than one year', 39), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' balance at the end of period', 33), (' lease liabilities - current', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' leases', 75), (' not later than one year', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' utilised – bank borrowings', 40), (' loans from related party', 39), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' balance at the end of period', 33), (' lease liabilities - current', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' loans from related party', 43), (' not later than one year', 39), (' secured long-term bank loans', 38), (' balance at the end of period', 38), (' not later than 1 year', 37), ('bank borrowings', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' lease liabilities - current', 32), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' loans from related party', 40), (' balance at the end of period', 38), ('bank borrowings', 36), (' secured long-term bank loans', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' not later than 1 year', 32), (' not later than one year', 32), (' lease liabilities - current', 32), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' loans from related party', 40), (' balance at the end of period', 38), ('bank borrowings', 36), (' secured long-term bank loans', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' not later than 1 year', 32), (' not later than one year', 32), (' lease liabilities - current', 32), (' lease liabilities', 27), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [('bank borrowings', 45), (' utilised – bank borrowings', 45), (' secured long-term bank loans', 42), (' loans from related party', 38), (' not later than 1 year', 37), (' lease liabilities', 36), (' bank overdraft', 36), (' not later than one year', 35), (' balance at the end of period', 33), (' lease liabilities - current', 26), (' leases', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' lease liabilities - current', 54), (' not later than 1 year', 46), (' not later than one year', 46), (' secured long-term bank loans', 46), (' loans from related party', 38), (' lease liabilities', 38), (' bank overdraft', 31), (' balance at the end of period', 31), ('bank borrowings', 29), (' leases', 25), (' utilised – bank borrowings', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = non-current provision for long service leave , res_fuzz_match = [(' leases', 75), (' secured long-term bank loans', 50), ('bank borrowings', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' not later than one year', 39), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 35), (' balance at the end of period', 33), (' lease liabilities - current', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' not later than one year', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade payable', 67), ('other trade payables', 50), ('trade and other payables', 43)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 40), ('trade payable', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 40), ('trade payable', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other trade payables', 43), ('trade and other payables', 37), ('trade payable', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade payable', 67), ('other trade payables', 50), ('trade and other payables', 43)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 40), ('trade payable', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 40), ('trade payable', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other trade payables', 43), ('trade and other payables', 37), ('trade payable', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade and other payables', 43)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('trade and other payables', 45)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('trade and other payables', 45)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other payables', 37)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade and other payables', 43)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('trade and other payables', 45)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('trade and other payables', 45)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other payables', 37)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' income tax payable', 100), ('current tax liabilities', 50), ('tax', 33), ('provision', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' income tax payable', 40), ('tax', 33), ('current tax liabilities', 20), ('provision', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 29), (' income tax payable', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 16], 'score': 100, 'value': 2584965.0, 'line_item_label': ['Payables', 'Interest Bearing Liabilities Provisions', 'Interest Bearing Liabilities Provisions'], 'note_numbers': ['14', '15', '16'], 'line_item_value': [1526885.0, 995000.0, 63080.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' income tax payable', 100), ('current tax liabilities', 50), ('tax', 33), ('provision', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' income tax payable', 40), ('tax', 33), ('current tax liabilities', 20), ('provision', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 29), (' income tax payable', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 16], 'score': 100, 'value': 3360273.0, 'line_item_label': ['Payables', 'Interest Bearing Liabilities Provisions', 'Interest Bearing Liabilities Provisions'], 'note_numbers': ['14', '15', '16'], 'line_item_value': [1726142.0, 1500000.0, 134131.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = note 14: nan trade creditors , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = note 14: nan other creditors , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = note 14: total nan , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = note 14: nan trade creditors , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = note 14: nan other creditors , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = note 14: total nan , res_fuzz_match = [('income tax (refundable)/payable ', 50), (' provision for income tax', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving loan facility , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [('income tax (refundable)/payable ', 44), (' provision for income tax', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [('income tax (refundable)/payable ', 44), (' provision for income tax', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving loan facility , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [('income tax (refundable)/payable ', 44), (' provision for income tax', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = uncommitted short term revolving total , res_fuzz_match = [('income tax (refundable)/payable ', 40), (' provision for income tax', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended , res_fuzz_match = [('income tax (refundable)/payable ', 44), (' provision for income tax', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 39)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' provision for income tax', 100), ('income tax (refundable)/payable ', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' provision for income tax', 71), ('income tax (refundable)/payable ', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' provision for income tax', 71), ('income tax (refundable)/payable ', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = non-current provision for long service leave , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 39)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' provision for income tax', 100), ('income tax (refundable)/payable ', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' provision for income tax', 71), ('income tax (refundable)/payable ', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' provision for income tax', 71), ('income tax (refundable)/payable ', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = non-current provision for long service leave , res_fuzz_match = [(' provision for income tax', 65), ('income tax (refundable)/payable ', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 8], 'score': [100, 100], 'value': [51952.0, 0.0], 'label': ['Current Provision for Income Tax', 'Current Provision for Income Tax'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' trade and other payables', 43), (' financial liabilities', 40), (' other financial liabilities', 31), ('other current liabilities', 23), (' other current liabilities', 23), (' foreign exchange contract liability', 22), (' employee benefits', 19), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' other financial liabilities', 47), (' trade and other payables', 45), (' financial liabilities', 44), (' foreign exchange contract liability', 41), (' employee benefits', 38), ('provisions', 36), (' deferred revenue', 31), (' customer deposits', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' other financial liabilities', 47), (' trade and other payables', 45), (' financial liabilities', 44), (' foreign exchange contract liability', 41), (' employee benefits', 38), ('provisions', 36), (' deferred revenue', 31), (' customer deposits', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 40), (' trade and other payables', 37), (' deferred revenue', 24), (' foreign exchange contract liability', 22), (' customer deposits', 21), (' employee benefits', 20), ('provisions', 18), (' financial liabilities', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 47), (' trade and other payables', 41), (' foreign exchange contract liability', 41), (' financial liabilities', 39), (' customer deposits', 34), (' employee benefits', 29), (' deferred revenue', 26), ('provisions', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' trade and other payables', 43), (' financial liabilities', 40), (' other financial liabilities', 31), ('other current liabilities', 23), (' other current liabilities', 23), (' foreign exchange contract liability', 22), (' employee benefits', 19), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' other financial liabilities', 47), (' trade and other payables', 45), (' financial liabilities', 44), (' foreign exchange contract liability', 41), (' employee benefits', 38), ('provisions', 36), (' deferred revenue', 31), (' customer deposits', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' other financial liabilities', 47), (' trade and other payables', 45), (' financial liabilities', 44), (' foreign exchange contract liability', 41), (' employee benefits', 38), ('provisions', 36), (' deferred revenue', 31), (' customer deposits', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 40), (' trade and other payables', 37), (' deferred revenue', 24), (' foreign exchange contract liability', 22), (' customer deposits', 21), (' employee benefits', 20), ('provisions', 18), (' financial liabilities', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 47), (' trade and other payables', 41), (' foreign exchange contract liability', 41), (' financial liabilities', 39), (' customer deposits', 34), (' employee benefits', 29), (' deferred revenue', 26), ('provisions', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('current liabilities', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('current liabilities', 54)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('current liabilities', 54)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current liabilities', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('current liabilities', 44)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('current liabilities', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('current liabilities', 54)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities provisions , res_fuzz_match = [('current liabilities', 54)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current liabilities', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('current liabilities', 44)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term debt', 34)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term debt', 34)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), (' loans and borrowings', 40), (' borrowings', 33), ('interest bearing loans and borrowings', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 359790.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [359790.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), (' loans and borrowings', 40), (' borrowings', 33), ('interest bearing loans and borrowings', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 265356.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [265356.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes', 17), ('deferred tax liabilities', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('deferred tax liabilities', 56), ('deferred taxes', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes', 17), ('deferred tax liabilities', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('deferred tax liabilities', 56), ('deferred taxes', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' other financial liabilities', 47), ('other long term liabilities', 45), (' other non-current liabilities', 43), ('trade and other payables', 41), (' financial liabilities', 39), (' provision for associate funding', 37), (' employee benefits', 29), (' provisions', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21], 'score': 100, 'value': 49640.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 49640.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' other financial liabilities', 47), ('other long term liabilities', 45), (' other non-current liabilities', 43), ('trade and other payables', 41), (' financial liabilities', 39), (' provision for associate funding', 37), (' employee benefits', 29), (' provisions', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21], 'score': 100, 'value': 54716.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 54716.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 59), (' non-current - liability for long-service leave', 53), (' make good provisions', 50), ('non-current trade and other payables', 43), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 40), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 34), (' abandonment and decommissioning costs', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 62), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' derivative contracts - at fair value', 42), (' total non-current employee benefits', 41), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 39), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' abandonment and decommissioning costs', 35), (' trade payables - related parties', 33), (' employee benefits - payroll', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' provision for associate funding', 67), (' provisions - non-current', 64), (' non-current - liability for long-service leave', 59), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 44), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 56), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 39), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [(' make good provisions', 77), (' provisions - non-current', 64), (' provision for associate funding', 64), (' electricity derivatives at fair value through oci', 45), (' non-current - liability for long-service leave', 41), ('non-current trade and other payables', 40), (' derivative contracts - at fair value', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' trade payables - related parties', 33), (' contract liabilites - non-current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - non current', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('non-current trade and other payables', 54), (' employee benefits - non current', 54), (' non-current - liability for long-service leave', 54), (' employee benefits - payroll', 46), (' total non-current employee benefits', 46), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' provisions - non-current', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = non-current provision for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 82), (' provisions - non-current', 64), (' provision for associate funding', 59), (' total non-current employee benefits', 48), ('non-current trade and other payables', 47), (' make good provisions', 44), (' electricity derivatives at fair value through oci', 42), (' derivative contracts - at fair value', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 33), (' contract liabilites - non-current', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 59), (' non-current - liability for long-service leave', 53), (' make good provisions', 50), ('non-current trade and other payables', 43), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 40), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 34), (' abandonment and decommissioning costs', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 62), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' derivative contracts - at fair value', 42), (' total non-current employee benefits', 41), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 39), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' abandonment and decommissioning costs', 35), (' trade payables - related parties', 33), (' employee benefits - payroll', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' provision for associate funding', 67), (' provisions - non-current', 64), (' non-current - liability for long-service leave', 59), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 44), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 56), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 39), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [(' make good provisions', 77), (' provisions - non-current', 64), (' provision for associate funding', 64), (' electricity derivatives at fair value through oci', 45), (' non-current - liability for long-service leave', 41), ('non-current trade and other payables', 40), (' derivative contracts - at fair value', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' trade payables - related parties', 33), (' contract liabilites - non-current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - non current', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('non-current trade and other payables', 54), (' employee benefits - non current', 54), (' non-current - liability for long-service leave', 54), (' employee benefits - payroll', 46), (' total non-current employee benefits', 46), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' provisions - non-current', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = non-current provision for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave', 82), (' provisions - non-current', 64), (' provision for associate funding', 59), (' total non-current employee benefits', 48), ('non-current trade and other payables', 47), (' make good provisions', 44), (' electricity derivatives at fair value through oci', 42), (' derivative contracts - at fair value', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 33), (' contract liabilites - non-current', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 13], 'score': [82, 82], 'value': [54716.0, 49640.0], 'label': ['Non-Current Provision for Long Service Leave', 'Non-Current Provision for Long Service Leave'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant and equipment', 54), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': 13325.0, 'line_item_label': ['Plant and Equipment'], 'note_numbers': ['10'], 'line_item_value': [13325.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31), ('plant and equipment', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant and equipment', 54), ('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': 11613.0, 'line_item_label': ['Plant and Equipment'], 'note_numbers': ['10'], 'line_item_value': [11613.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- at cost , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- less: accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance office machines , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance office fixtures & fittings , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost office machines , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost office fixtures & fittings , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost total , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost office machines , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost office fixtures & fittings , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost total , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance office machines , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance office fixtures & fittings , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance total , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- at cost , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- less: accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance office machines , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance office fixtures & fittings , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office machines , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office fixtures & fittings , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost office machines , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost office fixtures & fittings , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost total , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost office machines , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost office fixtures & fittings , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost total , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance office machines , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance office fixtures & fittings , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance total , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 9, 10, 11, 12, 13, 14, 18, 27, 28, 29, 30, 31, 32], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [53962.0, 4074.0, 0.0, 4074.0, 0.0, 0.0, 0.0, 49932.0, 6165.0, 0.0, 6165.0, 0.0, 0.0, 0.0], 'label': ['Office Machines, Furniture & Fittings- at Cost', 'Purchases at Cost Office Machines', 'Purchases at Cost Office Fixtures & Fittings', 'Purchases at Cost Total', 'Disposal at Cost Office Machines', 'Disposal at Cost Office Fixtures & Fittings', 'Disposal at Cost Total', 'Office Machines, Furniture & Fittings- at Cost', 'Purchases at Cost Office Machines', 'Purchases at Cost Office Fixtures & Fittings', 'Purchases at Cost Total', 'Disposal at Cost Office Machines', 'Disposal at Cost Office Fixtures & Fittings', 'Disposal at Cost Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- at cost , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- total , res_fuzz_match = [('net value', 53), ('net book value', 40), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance office machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance total , res_fuzz_match = [('net value', 50), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office machines , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office fixtures & fittings , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47), ('net book value', 31), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses total , res_fuzz_match = [('depreciatio', 64), ('net value', 50), ('accumulated depreciation', 47), ('net book value', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost office machines , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost office fixtures & fittings , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost total , res_fuzz_match = [('net value', 53), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost office machines , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost office fixtures & fittings , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost total , res_fuzz_match = [('net value', 53), ('net book value', 40), ('depreciatio', 36), ('accumulated depreciation', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance office machines , res_fuzz_match = [('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance total , res_fuzz_match = [('net value', 50), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- at cost , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- less: accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = office machines, furniture & fittings- total , res_fuzz_match = [('net value', 53), ('net book value', 40), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance office machines , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = opening balance total , res_fuzz_match = [('net value', 50), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office machines , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47), ('net book value', 38), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses office fixtures & fittings , res_fuzz_match = [('depreciatio', 64), ('accumulated depreciation', 47), ('net book value', 31), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = depreciation expenses total , res_fuzz_match = [('depreciatio', 64), ('net value', 50), ('accumulated depreciation', 47), ('net book value', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost office machines , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost office fixtures & fittings , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = purchases at cost total , res_fuzz_match = [('net value', 53), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost office machines , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost office fixtures & fittings , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = disposal at cost total , res_fuzz_match = [('net value', 53), ('net book value', 40), ('depreciatio', 36), ('accumulated depreciation', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance office machines , res_fuzz_match = [('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 27), ('net value', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance office fixtures & fittings , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = closing balance total , res_fuzz_match = [('net value', 50), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 19], 'score': [100, 100], 'value': [42349.0, 36607.0], 'label': ['Office Machines, Furniture & Fittings- Less: Accumulated Depreciation', 'Office Machines, Furniture & Fittings- Less: Accumulated Depreciation'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('account receivables', 30), ('trade receivables', 30), ('government subsidies receivable', 30), ('trade and other receivables', 30), ('receivable', 17), ('billed', 0), ('unbilled', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('account receivables', 100), ('trade receivables', 100), ('government subsidies receivable', 100), ('receivable', 100), ('trade and other receivables', 100), ('billed', 25), ('unbilled', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other receivables', 100), ('government subsidies receivable', 60), ('account receivables', 40), ('trade receivables', 40), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 4620173.0, 'line_item_label': ['Receivables', 'Other'], 'note_numbers': ['7', '9'], 'line_item_value': [4086305.0, 533868.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('account receivables', 30), ('trade receivables', 30), ('government subsidies receivable', 30), ('trade and other receivables', 30), ('receivable', 17), ('billed', 0), ('unbilled', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('account receivables', 100), ('trade receivables', 100), ('government subsidies receivable', 100), ('receivable', 100), ('trade and other receivables', 100), ('billed', 25), ('unbilled', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other receivables', 100), ('government subsidies receivable', 60), ('account receivables', 40), ('trade receivables', 40), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 7158730.0, 'line_item_label': ['Receivables', 'Other'], 'note_numbers': ['7', '9'], 'line_item_value': [6841934.0, 316796.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none trade , res_fuzz_match = [(' net trade debtors', 80), ('trade receivables', 50), (' other debtors', 50), (' related party receivables', 40), (' share of joint venture receivables', 40), ('charges paid in advance', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none less: , res_fuzz_match = [(' other debtors', 44), (' share of joint venture receivables', 44), (' net trade debtors', 44), ('trade receivables', 33), (' related party receivables', 22), ('charges paid in advance', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('trade receivables', 20), ('charges paid in advance', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none parties , res_fuzz_match = [(' related party receivables', 70), ('trade receivables', 40), (' other debtors', 40), (' share of joint venture receivables', 40), (' net trade debtors', 40), ('charges paid in advance', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none other debtors , res_fuzz_match = [(' other debtors', 100), (' net trade debtors', 75), (' share of joint venture receivables', 47), ('trade receivables', 42), (' related party receivables', 29), ('charges paid in advance', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none total receivables , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 59), (' share of joint venture receivables', 59), (' other debtors', 50), (' net trade debtors', 44), ('charges paid in advance', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none inventory , res_fuzz_match = [(' other debtors', 58), (' share of joint venture receivables', 57), (' net trade debtors', 44), ('trade receivables', 33), (' related party receivables', 30), ('charges paid in advance', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none trade , res_fuzz_match = [(' net trade debtors', 80), ('trade receivables', 50), (' other debtors', 50), (' related party receivables', 40), (' share of joint venture receivables', 40), ('charges paid in advance', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none less: , res_fuzz_match = [(' other debtors', 44), (' share of joint venture receivables', 44), (' net trade debtors', 44), ('trade receivables', 33), (' related party receivables', 22), ('charges paid in advance', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('trade receivables', 20), ('charges paid in advance', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none parties , res_fuzz_match = [(' related party receivables', 70), ('trade receivables', 40), (' other debtors', 40), (' share of joint venture receivables', 40), (' net trade debtors', 40), ('charges paid in advance', 40)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none other debtors , res_fuzz_match = [(' other debtors', 100), (' net trade debtors', 75), (' share of joint venture receivables', 47), ('trade receivables', 42), (' related party receivables', 29), ('charges paid in advance', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none total receivables , res_fuzz_match = [('trade receivables', 75), (' related party receivables', 59), (' share of joint venture receivables', 59), (' other debtors', 50), (' net trade debtors', 44), ('charges paid in advance', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none inventory , res_fuzz_match = [(' other debtors', 58), (' share of joint venture receivables', 57), (' net trade debtors', 44), ('trade receivables', 33), (' related party receivables', 30), ('charges paid in advance', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 7, 11], 'score': [80, 100, 80, 100], 'value': [0.0, 23152.0, 4673248.0, 26265.0], 'label': ['None Trade', 'None OTHER DEBTORS', 'None Trade', 'None OTHER DEBTORS'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none charges paid in advance , res_fuzz_match = [('charges paid in advance', 100), (' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' share of joint venture receivables', 41), (' other debtors', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 23 $ , res_fuzz_match = [(' share of joint venture receivables', 60), (' other debtors', 50), ('trade receivables', 42), ('charges paid in advance', 34), (' related party receivables', 33), (' net trade debtors', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none financial asset , res_fuzz_match = [(' net trade debtors', 44), (' share of joint venture receivables', 39), (' related party receivables', 34), ('trade receivables', 33), ('charges paid in advance', 30), (' other debtors', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 23 $ , res_fuzz_match = [(' share of joint venture receivables', 60), (' other debtors', 50), ('trade receivables', 42), ('charges paid in advance', 34), (' related party receivables', 33), (' net trade debtors', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('trade receivables', 20), ('charges paid in advance', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 23 $ , res_fuzz_match = [(' share of joint venture receivables', 60), (' other debtors', 50), ('trade receivables', 42), ('charges paid in advance', 34), (' related party receivables', 33), (' net trade debtors', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none charges paid in advance , res_fuzz_match = [('charges paid in advance', 100), (' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' share of joint venture receivables', 41), (' other debtors', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 22 12 months ended 31 march 22 $ , res_fuzz_match = [(' share of joint venture receivables', 52), (' other debtors', 50), ('trade receivables', 42), ('charges paid in advance', 41), (' related party receivables', 39), (' net trade debtors', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none financial asset , res_fuzz_match = [(' net trade debtors', 44), (' share of joint venture receivables', 39), (' related party receivables', 34), ('trade receivables', 33), ('charges paid in advance', 30), (' other debtors', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 22 12 months ended 31 march 22 $ , res_fuzz_match = [(' share of joint venture receivables', 52), (' other debtors', 50), ('trade receivables', 42), ('charges paid in advance', 41), (' related party receivables', 39), (' net trade debtors', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('trade receivables', 20), ('charges paid in advance', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = 12 months ended 31 march 22 12 months ended 31 march 22 $ , res_fuzz_match = [(' share of joint venture receivables', 52), (' other debtors', 50), ('trade receivables', 42), ('charges paid in advance', 41), (' related party receivables', 39), (' net trade debtors', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [143788.0, 420436.0], 'label': ['None Charges paid in Advance', 'None Charges paid in Advance'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = other financial liability , res_fuzz_match = [(' other debtors', 50), ('trade receivables', 42), ('charges paid in advance', 41), (' share of joint venture receivables', 35), (' related party receivables', 33), (' net trade debtors', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = other advance received , res_fuzz_match = [('trade receivables', 67), (' share of joint venture receivables', 63), (' other debtors', 58), (' related party receivables', 56), ('charges paid in advance', 53), (' net trade debtors', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = other total , res_fuzz_match = [(' other debtors', 73), (' net trade debtors', 45), (' share of joint venture receivables', 36), ('charges paid in advance', 36), (' related party receivables', 27), ('trade receivables', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = other financial liability , res_fuzz_match = [(' other debtors', 50), ('trade receivables', 42), ('charges paid in advance', 41), (' share of joint venture receivables', 35), (' related party receivables', 33), (' net trade debtors', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = other advance received , res_fuzz_match = [('trade receivables', 67), (' share of joint venture receivables', 63), (' other debtors', 58), (' related party receivables', 56), ('charges paid in advance', 53), (' net trade debtors', 38)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows = other total , res_fuzz_match = [(' other debtors', 73), (' net trade debtors', 45), (' share of joint venture receivables', 36), ('charges paid in advance', 36), (' related party receivables', 27), ('trade receivables', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-31 10:29:05+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-31 10:29:05+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' revenue from continuing activities', 100), ('revenue from contracts with customers', 63), ('Revenue from contract with customers', 63), ('revenue from operations', 54), ('from trading business', 45), (' Revenue', 39), ('transmission and distribution business', 34), (' Sales revenue', 33), ('net sales', 24), (' Sale of coal', 24), ('sale of products', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal', 43), ('sale of products', 38), ('net sales', 36), ('from trading business', 34), (' revenue from continuing activities', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Revenue', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), (' revenue from continuing activities', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('sale of products', 32), (' Revenue', 31), ('net sales', 27), ('revenue from operations', 26), (' Sales revenue', 22), ('from trading business', 18), ('transmission and distribution business', 17), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Sale of coal', 12), (' revenue from continuing activities', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), (' revenue from continuing activities', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('from trading business', 49), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('transmission and distribution business', 37), (' revenue from continuing activities', 35), ('sale of products', 32), (' Sales revenue', 32), ('net sales', 24), (' Sale of coal', 23), (' Revenue', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' revenue from continuing activities', 33), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('transmission and distribution business', 18), (' Revenue', 18), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 12), ('revenue from operations', 10), ('from trading business', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' revenue from continuing activities', 80), ('revenue from contracts with customers', 53), ('Revenue from contract with customers', 53), ('from trading business', 40), ('transmission and distribution business', 38), ('revenue from operations', 34), ('sale of products', 22), (' Sales revenue', 22), (' Revenue', 19), ('net sales', 18), (' Sale of coal', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 30), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27), (' Sale of coal', 26), ('sale of products', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('from trading business', 38), (' Sales revenue', 36), ('transmission and distribution business', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' revenue from continuing activities', 30), ('sale of products', 29), (' Revenue', 29), ('net sales', 27), ('revenue from operations', 26), (' Sale of coal', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), (' Sale of coal', 15), (' revenue from continuing activities', 14), ('sale of products', 12), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('revenue from operations', 43), (' revenue from continuing activities', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('transmission and distribution business', 34), ('sale of products', 28), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 16)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('net sales', 36), ('sale of products', 27), ('from trading business', 22), (' Sale of coal', 17), (' Sales revenue', 14), ('transmission and distribution business', 13), ('revenue from contracts with customers', 11), ('Revenue from contract with customers', 11), (' revenue from continuing activities', 7), ('revenue from operations', 0), (' Revenue', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 8], 'score': 80, 'value': 21958622.0, 'line_item_label': ['REVENUE FROM CONTINUING ACTIVITIES', 'PROFIT FROM CONTINUING ACTIVITIES'], 'note_numbers': [nan, nan], 'line_item_value': [21958622.0, 0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' revenue from continuing activities', 100), ('revenue from contracts with customers', 63), ('Revenue from contract with customers', 63), ('revenue from operations', 54), ('from trading business', 45), (' Revenue', 39), ('transmission and distribution business', 34), (' Sales revenue', 33), ('net sales', 24), (' Sale of coal', 24), ('sale of products', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal', 43), ('sale of products', 38), ('net sales', 36), ('from trading business', 34), (' revenue from continuing activities', 31), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Revenue', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), (' revenue from continuing activities', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('sale of products', 32), (' Revenue', 31), ('net sales', 27), ('revenue from operations', 26), (' Sales revenue', 22), ('from trading business', 18), ('transmission and distribution business', 17), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Sale of coal', 12), (' revenue from continuing activities', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), (' revenue from continuing activities', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('from trading business', 49), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('transmission and distribution business', 37), (' revenue from continuing activities', 35), ('sale of products', 32), (' Sales revenue', 32), ('net sales', 24), (' Sale of coal', 23), (' Revenue', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' revenue from continuing activities', 33), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('transmission and distribution business', 18), (' Revenue', 18), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 12), ('revenue from operations', 10), ('from trading business', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' revenue from continuing activities', 80), ('revenue from contracts with customers', 53), ('Revenue from contract with customers', 53), ('from trading business', 40), ('transmission and distribution business', 38), ('revenue from operations', 34), ('sale of products', 22), (' Sales revenue', 22), (' Revenue', 19), ('net sales', 18), (' Sale of coal', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 30), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27), (' Sale of coal', 26), ('sale of products', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('from trading business', 38), (' Sales revenue', 36), ('transmission and distribution business', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' revenue from continuing activities', 30), ('sale of products', 29), (' Revenue', 29), ('net sales', 27), ('revenue from operations', 26), (' Sale of coal', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), (' Sale of coal', 15), (' revenue from continuing activities', 14), ('sale of products', 12), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('revenue from operations', 43), (' revenue from continuing activities', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('transmission and distribution business', 34), ('sale of products', 28), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 16)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('net sales', 36), ('sale of products', 27), ('from trading business', 22), (' Sale of coal', 17), (' Sales revenue', 14), ('transmission and distribution business', 13), ('revenue from contracts with customers', 11), ('Revenue from contract with customers', 11), (' revenue from continuing activities', 7), ('revenue from operations', 0), (' Revenue', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 8], 'score': 80, 'value': 26475757.0, 'line_item_label': ['REVENUE FROM CONTINUING ACTIVITIES', 'PROFIT FROM CONTINUING ACTIVITIES'], 'note_numbers': [nan, nan], 'line_item_value': [26475757.0, 0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' cost of coal sold', 36), (' Personnel costs', 36), (' Cost of product sold', 33), (' cost of goods sold', 31), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), ('total expenditure', 24), ('expenditure', 23), ('expense', 19), ('total expenses', 16)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' cost of goods sold', 100), (' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('expenditure', 47), ('expense', 46), ('total expenditure', 35), ('total expenses', 32), ('purchase of stock-in-trade', 31), (' Personnel costs', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 23), ('cost of sales', 12), ('Cost of sales', 12), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('total expenditure', 52), ('expenditure', 50), ('total expenses', 47), (' Cost of goods and services sold', 39), ('expense', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' cost of goods sold', 35), (' Cost of product sold', 33), (' Personnel costs', 30), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Cost of inventory sold', 33), (' cost of coal sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), (' Personnel costs', 21), (' cost of goods sold', 21), (' Cost of product sold', 18), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 10), ('expense', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 23), ('total expenses', 22), ('expense', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' cost of coal sold', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Cost of goods and services sold', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('total expenses', 59), ('total expenditure', 58), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 39), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' cost of coal sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Personnel costs', 22), (' cost of goods sold', 22), (' Cost of product sold', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), ('purchase of stock-in-trade', 17), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10), (' cost of goods sold', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), ('total expenses', 28), (' cost of coal sold', 27), (' cost of goods sold', 27), ('cost of sales', 25), ('Cost of sales', 25), ('expenditure', 24), ('expense', 16)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' cost of goods sold', 12), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 20145724.0, 'line_item_label': ['COST OF GOODS SOLD'], 'note_numbers': [nan], 'line_item_value': [20145724.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' cost of coal sold', 36), (' Personnel costs', 36), (' Cost of product sold', 33), (' cost of goods sold', 31), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), ('total expenditure', 24), ('expenditure', 23), ('expense', 19), ('total expenses', 16)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' cost of goods sold', 100), (' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('expenditure', 47), ('expense', 46), ('total expenditure', 35), ('total expenses', 32), ('purchase of stock-in-trade', 31), (' Personnel costs', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 23), ('cost of sales', 12), ('Cost of sales', 12), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('total expenditure', 52), ('expenditure', 50), ('total expenses', 47), (' Cost of goods and services sold', 39), ('expense', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' cost of goods sold', 35), (' Cost of product sold', 33), (' Personnel costs', 30), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Cost of inventory sold', 33), (' cost of coal sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), (' Personnel costs', 21), (' cost of goods sold', 21), (' Cost of product sold', 18), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 10), ('expense', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Personnel costs', 36), (' cost of goods sold', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 23), ('total expenses', 22), ('expense', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' cost of coal sold', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Cost of goods and services sold', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('total expenses', 59), ('total expenditure', 58), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 39), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' cost of coal sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Personnel costs', 22), (' cost of goods sold', 22), (' Cost of product sold', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), ('purchase of stock-in-trade', 17), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10), (' cost of goods sold', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), ('total expenses', 28), (' cost of coal sold', 27), (' cost of goods sold', 27), ('cost of sales', 25), ('Cost of sales', 25), ('expenditure', 24), ('expense', 16)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' cost of goods sold', 12), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 24426590.0, 'line_item_label': ['COST OF GOODS SOLD'], 'note_numbers': [nan], 'line_item_value': [24426590.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administrative expenses', 44), (' Administration expenses', 44), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Logistics and distribution', 31), (' Marketing expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' depreciation', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses', 35), (' Selling & distribution expenses', 34), (' Selling Expenses', 32), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Advertising expenses', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Occupancy ', 11), (' depreciation', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' depreciation', 100), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Occupancy expenses', 42), (' Marketing expenses', 40), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 33), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 27), (' Administrative and other expenses', 24), (' Logistics and distribution', 22), (' Occupancy ', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other expenses', 63), (' Other expenses', 63), (' Other expenses', 63), (' Marketing expenses', 56), (' Management expenses', 53), (' Administrative and other expenses', 46), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Logistics and distribution', 39), (' Selling & distribution expenses', 34), (' Sales and marketing', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' depreciation', 24), (' Occupancy ', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' depreciation', 33), (' Amortisation expenses', 32), (' Advertising expenses', 30), (' Logistics and distribution', 24), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Selling & distribution expenses', 15), (' Administrative and other expenses', 13), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Selling Expenses', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Logistics and distribution', 40), (' Administrative and other expenses', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Occupancy ', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 19), (' Management expenses', 16), (' Lease expenses', 11), (' Selling Expenses', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Depreciation expenses', 50), (' Depreciation expenses', 50), (' Amortisation expenses', 50), (' Advertising expenses', 49), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Administrative and other expenses', 46), ('Distribution expenses', 42), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' depreciation', 28), (' Sales and marketing', 27), (' Logistics and distribution', 24), (' Occupancy ', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Selling Expenses', 42), (' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Administrative and other expenses', 38), (' depreciation', 34), (' Selling & distribution expenses', 33), (' Amortisation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Advertising expenses', 32), (' Logistics and distribution', 29), (' Sales and marketing', 27), (' Occupancy ', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 30), (' Advertising expenses', 30), (' Sales and marketing', 30), (' Lease expenses', 29), (' Marketing expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Occupancy ', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), ('Distribution expenses', 21), (' Administrative expenses', 21), (' Administrative and other expenses', 21), (' Administration expenses', 21), (' Selling & distribution expenses', 17), (' Lease expenses', 14), (' Selling Expenses', 14), ('other expenses', 13), (' Occupancy expenses', 13), (' Other expenses', 13), (' Management expenses', 13), (' Other expenses', 13), (' Marketing expenses', 12), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' Logistics and distribution', 9), (' depreciation', 0), (' Occupancy ', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 107567.0, 'line_item_label': ['DEPRECIATION', 'OCCUPANCY EXPENSES'], 'note_numbers': [nan, nan], 'line_item_value': [4281.0, 103286.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administrative expenses', 44), (' Administration expenses', 44), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Logistics and distribution', 31), (' Marketing expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' depreciation', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses', 35), (' Selling & distribution expenses', 34), (' Selling Expenses', 32), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Advertising expenses', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Occupancy ', 11), (' depreciation', 10)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' depreciation', 100), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Occupancy expenses', 42), (' Marketing expenses', 40), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 33), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 27), (' Administrative and other expenses', 24), (' Logistics and distribution', 22), (' Occupancy ', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other expenses', 63), (' Other expenses', 63), (' Other expenses', 63), (' Marketing expenses', 56), (' Management expenses', 53), (' Administrative and other expenses', 46), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Logistics and distribution', 39), (' Selling & distribution expenses', 34), (' Sales and marketing', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' depreciation', 24), (' Occupancy ', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' depreciation', 33), (' Amortisation expenses', 32), (' Advertising expenses', 30), (' Logistics and distribution', 24), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Selling & distribution expenses', 15), (' Administrative and other expenses', 13), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Selling Expenses', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Logistics and distribution', 40), (' Administrative and other expenses', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Occupancy ', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 19), (' Management expenses', 16), (' Lease expenses', 11), (' Selling Expenses', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Depreciation expenses', 50), (' Depreciation expenses', 50), (' Amortisation expenses', 50), (' Advertising expenses', 49), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Administrative and other expenses', 46), ('Distribution expenses', 42), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' depreciation', 28), (' Sales and marketing', 27), (' Logistics and distribution', 24), (' Occupancy ', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Selling Expenses', 42), (' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Administrative and other expenses', 38), (' depreciation', 34), (' Selling & distribution expenses', 33), (' Amortisation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Advertising expenses', 32), (' Logistics and distribution', 29), (' Sales and marketing', 27), (' Occupancy ', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 30), (' Advertising expenses', 30), (' Sales and marketing', 30), (' Lease expenses', 29), (' Marketing expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Occupancy ', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), ('Distribution expenses', 21), (' Administrative expenses', 21), (' Administrative and other expenses', 21), (' Administration expenses', 21), (' Selling & distribution expenses', 17), (' Lease expenses', 14), (' Selling Expenses', 14), ('other expenses', 13), (' Occupancy expenses', 13), (' Other expenses', 13), (' Management expenses', 13), (' Other expenses', 13), (' Marketing expenses', 12), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' Logistics and distribution', 9), (' depreciation', 0), (' Occupancy ', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 116878.0, 'line_item_label': ['DEPRECIATION', 'OCCUPANCY EXPENSES'], 'note_numbers': [nan, nan], 'line_item_value': [5786.0, 111092.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administration expenses', 44), (' Rental expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Occupancy expenses', 42), (' Rental expenses', 40), ('Rent', 36), (' Administration expenses', 35), (' Occupancy', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' Rental expenses', 51), (' Occupancy expenses', 42), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('Rent', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12), (' Rental expenses', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy', 27), (' Occupancy expenses', 22), (' Rental expenses', 21), ('Rent', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 42), ('Rent', 31), (' Occupancy', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 32), ('Rent', 23), (' Occupancy', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 27), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent', 29), (' Rental expenses', 25), (' Administration expenses', 21), (' Occupancy expenses', 13), (' Occupancy', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 103286.0, 'line_item_label': ['OCCUPANCY EXPENSES'], 'note_numbers': [nan], 'line_item_value': [103286.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administration expenses', 44), (' Rental expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Occupancy expenses', 42), (' Rental expenses', 40), ('Rent', 36), (' Administration expenses', 35), (' Occupancy', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' Rental expenses', 51), (' Occupancy expenses', 42), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('Rent', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12), (' Rental expenses', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy', 27), (' Occupancy expenses', 22), (' Rental expenses', 21), ('Rent', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 42), ('Rent', 31), (' Occupancy', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 32), ('Rent', 23), (' Occupancy', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 27), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent', 29), (' Rental expenses', 25), (' Administration expenses', 21), (' Occupancy expenses', 13), (' Occupancy', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 111092.0, 'line_item_label': ['OCCUPANCY EXPENSES'], 'note_numbers': [nan], 'line_item_value': [111092.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('Other revenue', 54), (' Other income', 33), ('other operating', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other operating', 50), (' Other income', 49), ('Other revenue', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Other income', 25), ('Other revenue', 24), ('other operating', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 35)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Other income', 52), ('other operating', 39), ('Other revenue', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('Other revenue', 54), (' Other income', 33), ('other operating', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other operating', 50), (' Other income', 49), ('Other revenue', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Other income', 25), ('Other revenue', 24), ('other operating', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 35)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Other income', 52), ('other operating', 39), ('Other revenue', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Interest revenue', 55), (' Finance income and costs', 43), (' Finance income and finance costs', 42), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), ('other income', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), (' Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Interest revenue', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Finance income and costs', 21), (' Net finance costs', 18), (' Finance income and finance costs', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other income', 49), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance income', 35), ('Finance income', 35), (' Finance income and costs', 31), (' Net finance costs', 30), ('other income', 25), (' Finance income and finance costs', 24), (' Interest revenue', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Finance income and costs', 43), (' Finance income and finance costs', 42), ('other income', 39), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), (' Interest revenue', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('finance income', 47), ('Finance income', 47), (' Net finance costs', 43), ('other income', 42), (' Finance income and costs', 42), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('finance income', 47), ('Finance income', 47), ('other income', 42), (' Finance income and costs', 42), (' Net finance costs', 38), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('other income', 52), (' Finance income and costs', 38), (' Finance income and finance costs', 37), (' Net finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), (' Finance income and costs', 17), ('other income', 14), ('finance income', 13), ('Finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 85, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Interest revenue', 55), (' Finance income and costs', 43), (' Finance income and finance costs', 42), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), ('other income', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), (' Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Interest revenue', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Finance income and costs', 21), (' Net finance costs', 18), (' Finance income and finance costs', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other income', 49), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance income', 35), ('Finance income', 35), (' Finance income and costs', 31), (' Net finance costs', 30), ('other income', 25), (' Finance income and finance costs', 24), (' Interest revenue', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Finance income and costs', 43), (' Finance income and finance costs', 42), ('other income', 39), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), (' Interest revenue', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('finance income', 47), ('Finance income', 47), (' Net finance costs', 43), ('other income', 42), (' Finance income and costs', 42), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('finance income', 47), ('Finance income', 47), ('other income', 42), (' Finance income and costs', 42), (' Net finance costs', 38), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('other income', 52), (' Finance income and costs', 38), (' Finance income and finance costs', 37), (' Net finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), (' Finance income and costs', 17), ('other income', 14), ('finance income', 13), ('Finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 85, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 38), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 38), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 38), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 38), ('finance cost', 30), ('finance costs', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('NULL', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('NULL', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), ('current tax', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), ('provision for taxation previous year', 30), ('prior year ', 29), (' income tax expense', 29), (' income tax', 29), (' tax (expense)/benefit', 28), ('earlier year', 27), ('deferred tax', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('deferred tax', 38), ('prior year ', 35), (' income tax expense', 35), ('earlier year', 32), (' income tax benefit/(expense)', 26), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('current tax', 22), ('provision for taxation previous year', 22), ('minimum alternate tax credit entitlement', 21), (' income tax', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 39), ('earlier year', 37), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax', 29), ('current tax', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' income tax', 29), ('current tax', 25), ('earlier year', 24), ('minimum alternate tax credit entitlement', 22), ('amount transferred to retained earnings', 19), (' income tax expense', 19), (' income tax benefit', 18), ('deferred tax', 14), (' income tax benefit/(expense)', 14), ('prior year ', 13), ('provision for taxation previous year', 12), (' tax (expense)/benefit', 9)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 38), (' income tax benefit', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' income tax', 35), (' income tax expense', 34), ('prior year ', 29), ('current tax', 28), ('earlier year', 27), ('deferred tax', 24), (' tax (expense)/benefit', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 87), (' income tax expense', 84), (' tax (expense)/benefit', 70), (' income tax benefit', 67), (' income tax', 58), ('minimum alternate tax credit entitlement', 52), ('provision for taxation previous year', 47), ('deferred tax', 45), ('current tax', 42), ('amount transferred to retained earnings', 41), ('prior year ', 31), ('earlier year', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' income tax expense', 84), (' income tax benefit/(expense)', 70), (' income tax benefit', 67), (' income tax', 58), ('current tax', 55), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('minimum alternate tax credit entitlement', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('current tax', 27), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('minimum alternate tax credit entitlement', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax benefit', 46), ('amount transferred to retained earnings', 45), ('prior year ', 44), (' income tax benefit/(expense)', 44), (' income tax expense', 43), ('earlier year', 42), ('minimum alternate tax credit entitlement', 41), (' income tax', 40), (' tax (expense)/benefit', 37), ('current tax', 33), ('deferred tax', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 84, 'value': 491215.0, 'line_item_label': ['BEFORE INCOME TAX EXPENSE', 'INCOME TAX EXPENSESCURRENT'], 'note_numbers': [nan, nan], 'line_item_value': [491215.0, 0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), ('current tax', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), ('provision for taxation previous year', 30), ('prior year ', 29), (' income tax expense', 29), (' income tax', 29), (' tax (expense)/benefit', 28), ('earlier year', 27), ('deferred tax', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('deferred tax', 38), ('prior year ', 35), (' income tax expense', 35), ('earlier year', 32), (' income tax benefit/(expense)', 26), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('current tax', 22), ('provision for taxation previous year', 22), ('minimum alternate tax credit entitlement', 21), (' income tax', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 39), ('earlier year', 37), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax', 29), ('current tax', 27)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' income tax', 29), ('current tax', 25), ('earlier year', 24), ('minimum alternate tax credit entitlement', 22), ('amount transferred to retained earnings', 19), (' income tax expense', 19), (' income tax benefit', 18), ('deferred tax', 14), (' income tax benefit/(expense)', 14), ('prior year ', 13), ('provision for taxation previous year', 12), (' tax (expense)/benefit', 9)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 38), (' income tax benefit', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' income tax', 35), (' income tax expense', 34), ('prior year ', 29), ('current tax', 28), ('earlier year', 27), ('deferred tax', 24), (' tax (expense)/benefit', 23)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 87), (' income tax expense', 84), (' tax (expense)/benefit', 70), (' income tax benefit', 67), (' income tax', 58), ('minimum alternate tax credit entitlement', 52), ('provision for taxation previous year', 47), ('deferred tax', 45), ('current tax', 42), ('amount transferred to retained earnings', 41), ('prior year ', 31), ('earlier year', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [(' income tax expense', 84), (' income tax benefit/(expense)', 70), (' income tax benefit', 67), (' income tax', 58), ('current tax', 55), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('minimum alternate tax credit entitlement', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('current tax', 27), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('minimum alternate tax credit entitlement', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax benefit', 46), ('amount transferred to retained earnings', 45), ('prior year ', 44), (' income tax benefit/(expense)', 44), (' income tax expense', 43), ('earlier year', 42), ('minimum alternate tax credit entitlement', 41), (' income tax', 40), (' tax (expense)/benefit', 37), ('current tax', 33), ('deferred tax', 30)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 84, 'value': 643396.0, 'line_item_label': ['BEFORE INCOME TAX EXPENSE', 'INCOME TAX EXPENSESCURRENT'], 'note_numbers': [nan, nan], 'line_item_value': [643396.0, 0.0]}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('prior period', 42), ('exceptional', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('prior period', 47), ('exceptional', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional', 22), ('prior period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('prior period', 42), ('exceptional', 31)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('prior period', 47), ('exceptional', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional', 22), ('prior period', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-31 10:29:05+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-31 10:29:05+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('NULL', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:05+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-31 10:29:05+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = income tax expensescurrent , res_fuzz_match = [('NULL', 15)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-31 10:29:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-31 10:29:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-31 10:29:34+0530 - sLogger - DEBUG - process_main_pages started
2023-07-31 10:29:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 10:29:34+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 10:29:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-07-31 10:29:34+0530 - sLogger - ERROR - error occured: list index out of range
2023-07-31 10:29:34+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 10:29:34+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: get_standardize_main_pages CCF
2023-07-31 10:29:34+0530 - sLogger - ERROR - error occured: 'year_list'
2023-07-31 10:29:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 10:29:34+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 10:29:34+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 10:29:34+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-31 10:29:34+0530 - sLogger - DEBUG - start_refactoring started
2023-07-31 10:29:34+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-31 10:29:34+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CCF
2023-07-31 10:29:34+0530 - sLogger - ERROR - error occured: 'headers'

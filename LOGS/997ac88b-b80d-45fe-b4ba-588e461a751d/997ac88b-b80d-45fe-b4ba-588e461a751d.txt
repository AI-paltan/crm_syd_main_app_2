2023-05-09 13:51:21+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-05-09 13:51:21+0530 - sLogger - DEBUG - {'fileid': '997ac88b-b80d-45fe-b4ba-588e461a751d', 'filename': '21 YAL Financial Statements (Final).pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/21 YAL Financial Statements (Final).pdf'}
2023-05-09 13:51:21+0530 - sLogger - DEBUG - save file completed
2023-05-09 13:51:21+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-05-09 13:51:21+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-05-09 13:51:21+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-05-09 13:51:21+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-05-09 13:51:21+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-05-09 13:51:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:21+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:26+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:26+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:32+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:32+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:37+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:37+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:39+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:39+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:47+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:47+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:50+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:50+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:51:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:51:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:51:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:51:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:51:53+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:51:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:51:53+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:52:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:52:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:52:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:52:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:52:01+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:52:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:52:01+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:52:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:52:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:52:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:52:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:52:09+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:52:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:52:09+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:52:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:52:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:52:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:52:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:52:15+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:52:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:52:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:52:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:52:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:52:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:52:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:52:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:52:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:52:24+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:52:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:52:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:52:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:52:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:52:32+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:52:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:52:32+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:52:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:52:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:52:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:52:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:52:41+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:52:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:52:41+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:52:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:52:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:52:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:52:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:52:49+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:52:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:52:49+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:52:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:52:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:52:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:52:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:52:57+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:52:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:52:57+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:53:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:53:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:53:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:53:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:53:06+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:53:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:53:06+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:53:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:53:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:53:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:53:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:53:14+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:53:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:53:14+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:53:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:53:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:53:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:53:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:53:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:53:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:53:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:53:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:53:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:53:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:53:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:53:30+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:53:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:53:30+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:53:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:53:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:53:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:53:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:53:39+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:53:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:53:39+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:53:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:53:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:53:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:53:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:53:48+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:53:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:53:48+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:53:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:53:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:53:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:53:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:53:56+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:53:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:53:56+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:53:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:53:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:53:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:53:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:53:59+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:53:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:53:59+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:04+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:04+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:08+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:08+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:11+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:11+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:15+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:19+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:19+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:28+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:28+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:34+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:34+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:39+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:39+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:47+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:47+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:49+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 13:54:49+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 13:54:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 13:54:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 13:54:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 13:54:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 13:54:51+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 13:54:51+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-05-09 13:54:51+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [6], 'predicted_cpl_pages': [5], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [6], 'filtered_cpl_pages': [5], 'filtered_ccf_pages': [8], 'month': 'december'}
2023-05-09 13:54:51+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-05-09 13:54:51+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-05-09 13:54:51+0530 - sLogger - DEBUG - process file completed
2023-05-09 13:54:51+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-05-09 13:54:51+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-05-09 13:54:51+0530 - sLogger - DEBUG - TE process file started
2023-05-09 13:59:00+0530 - sLogger - DEBUG - TE Proces file completed
2023-05-09 13:59:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-09 13:59:00+0530 - sLogger - DEBUG - process_main_pages started
2023-05-09 13:59:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 13:59:00+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 13:59:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 13:59:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 13:59:00+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 13:59:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 13:59:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 13:59:00+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 13:59:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 13:59:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-09 13:59:00+0530 - sLogger - DEBUG - set_section_details started
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Cash | [('assets', 44), ('current assets', 24), ('noncurrent assets', 24), ('current liabilities', 22), ('liabilities', 20), ('equity liabilities', 12), ('noncurrent liabilities', 11), ('equity and liabilities', 10), ('equity', 0)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD current assets | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD current liabilities | score 26
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrent assets | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD noncurrent liabilities | score 23
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD non current assets | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD non current liabilities | score 22
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD equity and liabilities | score 22
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash | MATCH WORD equity | score 0
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Income tax receivables | [('equity and liabilities', 36), ('current liabilities', 33), ('current assets', 28), ('equity liabilities', 28), ('equity', 27), ('noncurrent liabilities', 27), ('noncurrent assets', 21), ('assets', 19), ('liabilities', 18)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD current assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD current liabilities | score 49
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD noncurrent assets | score 41
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD noncurrent liabilities | score 50
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD non current assets | score 40
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD non current liabilities | score 49
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD equity and liabilities | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Income tax receivables | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('equity', 33), ('noncurrent liabilities', 31), ('liabilities', 22)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Other investments | [('noncurrent assets', 40), ('current assets', 32), ('noncurrent liabilities', 31), ('equity and liabilities', 28), ('assets', 24), ('equity liabilities', 24), ('current liabilities', 23), ('equity', 22), ('liabilities', 11)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD current assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD current liabilities | score 33
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD noncurrent assets | score 41
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD noncurrent liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD non current assets | score 40
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD non current liabilities | score 35
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD equity and liabilities | score 31
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Retirement benefit assets | [('current assets', 56), ('noncurrent assets', 56), ('assets', 42), ('equity and liabilities', 39), ('noncurrent liabilities', 36), ('equity', 32), ('equity liabilities', 31), ('current liabilities', 30), ('liabilities', 24)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retirement benefit assets | MATCH WORD current assets | score 86
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retirement benefit assets | MATCH WORD current liabilities | score 50
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retirement benefit assets | MATCH WORD noncurrent assets | score 59
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retirement benefit assets | MATCH WORD noncurrent liabilities | score 47
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retirement benefit assets | MATCH WORD non current assets | score 56
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retirement benefit assets | MATCH WORD non current liabilities | score 46
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retirement benefit assets | MATCH WORD equity and liabilities | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retirement benefit assets | MATCH WORD equity | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Other noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 30), ('equity', 24), ('equity and liabilities', 22), ('equity liabilities', 19), ('liabilities', 8)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current assets | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current assets | score 83
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Liabilities and equity | [('equity and liabilities', 100), ('equity liabilities', 87), ('current liabilities', 58), ('liabilities', 52), ('equity', 52), ('noncurrent liabilities', 39), ('assets', 27), ('current assets', 27), ('noncurrent assets', 27)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD current assets | score 32
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD current liabilities | score 69
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrent assets | score 26
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD noncurrent liabilities | score 65
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD non current assets | score 25
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD non current liabilities | score 64
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equity and liabilities | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Liabilities and equity | MATCH WORD equity | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Employee benefit liabilities | [('equity liabilities', 57), ('current liabilities', 56), ('equity and liabilities', 56), ('liabilities', 43), ('noncurrent liabilities', 33), ('equity', 29), ('current assets', 23), ('noncurrent assets', 23), ('assets', 15)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current assets | score 33
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current liabilities | score 69
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent assets | score 37
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent liabilities | score 64
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current liabilities | score 67
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity and liabilities | score 65
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Derivative financial instruments | [('current assets', 38), ('equity and liabilities', 34), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('equity liabilities', 32), ('assets', 28), ('current liabilities', 26), ('liabilities', 20), ('equity', 20)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD current assets | score 43
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD current liabilities | score 43
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrent assets | score 37
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrent liabilities | score 46
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD non current assets | score 35
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD non current liabilities | score 40
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equity and liabilities | score 48
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equity | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Employee benefit liabilities | [('equity liabilities', 57), ('current liabilities', 56), ('equity and liabilities', 56), ('liabilities', 43), ('noncurrent liabilities', 33), ('equity', 29), ('current assets', 23), ('noncurrent assets', 23), ('assets', 15)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current assets | score 33
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD current liabilities | score 69
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent assets | score 37
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD noncurrent liabilities | score 64
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD non current liabilities | score 67
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity and liabilities | score 65
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Employee benefit liabilities | MATCH WORD equity | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Provision | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD current assets | score 20
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD current liabilities | score 21
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD noncurrent assets | score 28
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD noncurrent liabilities | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD non current assets | score 28
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD non current liabilities | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD equity and liabilities | score 20
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Provision | MATCH WORD equity | score 15
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('current assets', 21), ('assets', 19), ('noncurrent assets', 14)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 42
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('liabilities', 25)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('current liabilities', 48), ('current assets', 42), ('assets', 38), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Cash flow hedge | [('assets', 32), ('current assets', 30), ('noncurrent assets', 30), ('current liabilities', 21), ('noncurrent liabilities', 21), ('liabilities', 20), ('equity and liabilities', 19), ('equity liabilities', 15), ('equity', 10)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash flow hedge | MATCH WORD current assets | score 28
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash flow hedge | MATCH WORD current liabilities | score 24
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash flow hedge | MATCH WORD noncurrent assets | score 29
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash flow hedge | MATCH WORD noncurrent liabilities | score 26
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash flow hedge | MATCH WORD non current assets | score 24
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash flow hedge | MATCH WORD non current liabilities | score 23
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash flow hedge | MATCH WORD equity and liabilities | score 22
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Cash flow hedge | MATCH WORD equity | score 15
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Other reserves | [('current assets', 32), ('noncurrent assets', 32), ('assets', 24), ('current liabilities', 23), ('noncurrent liabilities', 23), ('equity liabilities', 16), ('equity and liabilities', 14), ('equity', 11), ('liabilities', 0)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other reserves | MATCH WORD current assets | score 43
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other reserves | MATCH WORD current liabilities | score 30
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other reserves | MATCH WORD noncurrent assets | score 45
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other reserves | MATCH WORD noncurrent liabilities | score 37
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other reserves | MATCH WORD non current assets | score 44
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other reserves | MATCH WORD non current liabilities | score 32
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other reserves | MATCH WORD equity and liabilities | score 25
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Other reserves | MATCH WORD equity | score 15
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - Total equity and liabilities | [('equity and liabilities', 85), ('equity liabilities', 72), ('current liabilities', 49), ('noncurrent liabilities', 43), ('liabilities', 41), ('equity', 41), ('current assets', 28), ('noncurrent assets', 28), ('assets', 21)]
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD current assets | score 32
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD current liabilities | score 69
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrent assets | score 31
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrent liabilities | score 64
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD non current assets | score 35
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD non current liabilities | score 63
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD equity and liabilities | score 95
2023-05-09 13:59:00+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD equity | score 90
2023-05-09 13:59:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-09 13:59:00+0530 - sLogger - DEBUG - set_section_details started
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating activities | working capital adjustments
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net income tax refunded/(paid) | adiustments for movements in working capital
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from/(used in) operating activities | operating cash flow before working capital changes
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing activities | movements in working capital
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from sale of property, plant and equipment | operating profit before changes in assets and liabilities
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment ofloan from Boyne Smelters Limited | operating profit before working capital changes
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from investing activities | adjustments for increase decrease in operating assets
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing activities | changes in working capital
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 1 January | changes in operating assets and liabilities
2023-05-09 13:59:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 December | changes in operating assets and liabilities
2023-05-09 13:59:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-05-09 13:59:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-05-09 13:59:02+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-05-09 13:59:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 13:59:02+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 13:59:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-05-09 13:59:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-05-09 13:59:02+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-05-09 13:59:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 13:59:02+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 13:59:02+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('cash and bank balances', 33), ('cash and cash equivalents', 32), (' cash and cash equivalents', 32), ('other bank balances', 29), ('cash and short term deposits', 26), ('bank balances other than above', 19), ('bank balances other than cash and cash equivalents', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('cash and cash equivalents', 43), (' cash and cash equivalents', 43), ('bank balances other than cash and cash equivalents', 33), ('bank balances other than above', 33), ('cash and short term deposits', 33), ('other bank balances', 30), ('cash and bank balances', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('cash and bank balances', 33), ('cash and cash equivalents', 32), (' cash and cash equivalents', 32), ('other bank balances', 29), ('cash and short term deposits', 26), ('bank balances other than above', 19), ('bank balances other than cash and cash equivalents', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('cash and cash equivalents', 43), (' cash and cash equivalents', 43), ('bank balances other than cash and cash equivalents', 33), ('bank balances other than above', 33), ('cash and short term deposits', 33), ('other bank balances', 30), ('cash and bank balances', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('inventories', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 8223876.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [8223876.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('inventories', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 23326384.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [23326384.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (lines 1 and 2) alumina , res_fuzz_match = [(' stores and other consumables at cost', 48), (' cranes - in transit', 46), (' inventories', 44), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 33), (' finished goods at cost', 31), (' spare parts', 30), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (lines 1 and 2) hot metal , res_fuzz_match = [(' stores and other consumables at cost', 52), (' cranes - in transit', 46), (' finished goods at cost', 44), (' inventories', 44), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 35), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (lines 1 and 2) cast metal , res_fuzz_match = [(' stores and other consumables at cost', 56), (' cranes - in transit', 54), (' finished goods at cost', 50), (' inventories', 44), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 34), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (lines 1 and 2) , res_fuzz_match = [(' stores and other consumables at cost', 58), (' cranes - in transit', 46), (' inventories', 44), (' goods in transit', 42), (' cranes', 40), (' provision for inventory obsolescence', 37), (' finished goods', 36), (' finished goods', 36), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods at cost', 25), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (line 3) alumina , res_fuzz_match = [(' stores and other consumables at cost', 52), (' inventories', 44), (' goods in transit', 42), (' cranes', 40), (' cranes - in transit', 38), (' provision for inventory obsolescence', 35), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' work in progress', 23), (' finished goods at cost', 19)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (line 3) hot metal , res_fuzz_match = [(' stores and other consumables at cost', 48), (' inventories', 44), (' goods in transit', 42), (' cranes', 40), (' finished goods at cost', 38), (' cranes - in transit', 38), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 36), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (line 3) cast metal , res_fuzz_match = [(' stores and other consumables at cost', 50), (' cranes - in transit', 46), (' inventories', 44), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' finished goods at cost', 38), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 35), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (line 3) , res_fuzz_match = [(' stores and other consumables at cost', 60), (' goods in transit', 42), (' provision for inventory obsolescence', 40), (' cranes', 40), (' cranes - in transit', 38), (' inventories', 33), (' work in progress', 31), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods at cost', 27), (' finished goods', 18), (' finished goods', 18)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = others at cost , res_fuzz_match = [(' stores and other consumables at cost', 90), (' finished goods at cost', 60), (' goods in transit', 50), (' provision for inventory obsolescence', 50), (' work in progress', 40), (' cranes - in transit', 40), ('raw materials', 30), (' finished goods', 30), (' raw materials', 30), (' finished goods', 30), (' spare parts', 30), (' inventories', 22), (' cranes', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = others total inventories at the lower cost and net realisable value , res_fuzz_match = [(' inventories', 100), (' finished goods at cost', 56), (' provision for inventory obsolescence', 55), (' stores and other consumables at cost', 52), (' goods in transit', 50), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (lines 1 and 2) alumina , res_fuzz_match = [(' stores and other consumables at cost', 48), (' cranes - in transit', 46), (' inventories', 44), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 33), (' finished goods at cost', 31), (' spare parts', 30), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (lines 1 and 2) hot metal , res_fuzz_match = [(' stores and other consumables at cost', 52), (' cranes - in transit', 46), (' finished goods at cost', 44), (' inventories', 44), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 35), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (lines 1 and 2) cast metal , res_fuzz_match = [(' stores and other consumables at cost', 56), (' cranes - in transit', 54), (' finished goods at cost', 50), (' inventories', 44), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 34), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (lines 1 and 2) , res_fuzz_match = [(' stores and other consumables at cost', 58), (' cranes - in transit', 46), (' inventories', 44), (' goods in transit', 42), (' cranes', 40), (' provision for inventory obsolescence', 37), (' finished goods', 36), (' finished goods', 36), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods at cost', 25), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (line 3) alumina , res_fuzz_match = [(' stores and other consumables at cost', 52), (' inventories', 44), (' goods in transit', 42), (' cranes', 40), (' cranes - in transit', 38), (' provision for inventory obsolescence', 35), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' work in progress', 23), (' finished goods at cost', 19)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (line 3) hot metal , res_fuzz_match = [(' stores and other consumables at cost', 48), (' inventories', 44), (' goods in transit', 42), (' cranes', 40), (' finished goods at cost', 38), (' cranes - in transit', 38), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 36), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (line 3) cast metal , res_fuzz_match = [(' stores and other consumables at cost', 50), (' cranes - in transit', 46), (' inventories', 44), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' finished goods at cost', 38), (' finished goods', 36), (' finished goods', 36), (' provision for inventory obsolescence', 35), (' work in progress', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = stock on hand (line 3) , res_fuzz_match = [(' stores and other consumables at cost', 60), (' goods in transit', 42), (' provision for inventory obsolescence', 40), (' cranes', 40), (' cranes - in transit', 38), (' inventories', 33), (' work in progress', 31), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods at cost', 27), (' finished goods', 18), (' finished goods', 18)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = others at cost , res_fuzz_match = [(' stores and other consumables at cost', 90), (' finished goods at cost', 60), (' goods in transit', 50), (' provision for inventory obsolescence', 50), (' work in progress', 40), (' cranes - in transit', 40), ('raw materials', 30), (' finished goods', 30), (' raw materials', 30), (' finished goods', 30), (' spare parts', 30), (' inventories', 22), (' cranes', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = others total inventories at the lower cost and net realisable value , res_fuzz_match = [(' inventories', 100), (' finished goods at cost', 56), (' provision for inventory obsolescence', 55), (' stores and other consumables at cost', 52), (' goods in transit', 50), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 18, 19], 'score': [90, 100, 90, 100], 'value': [3728649.0, 23326384.0, 2906086.0, 8223876.0], 'label': ['Others At cost', 'Others Total inventories at the lower cost and net realisable value', 'Others At cost', 'Others Total inventories at the lower cost and net realisable value'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets', 40), ('other current assets', 26), ('other financial assets', 26), ('prepayments', 20), ('other current financial assets', 19)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('other financial assets', 34), ('other current financial assets', 33), ('other current assets', 29), ('prepayments', 27), ('other assets', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 81, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets', 40), ('other current assets', 26), ('other financial assets', 26), ('prepayments', 20), ('other current financial assets', 19)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('other financial assets', 34), ('other current financial assets', 33), ('other current assets', 29), ('prepayments', 27), ('other assets', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 81, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets', 40), ('other current assets', 26), (' other current assets', 26), (' other financial assets', 26), (' biological assets', 25), (' financial assets', 24), (' trade and other receivables', 15), (' income tax receivable from related parties', 11), (' deferred operating expenditure', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [(' income tax receivable from related parties', 65), (' trade and other receivables', 63), (' other financial assets', 34), ('other current assets', 29), (' other current assets', 29), (' financial assets', 28), (' deferred operating expenditure', 27), ('other assets', 22), (' biological assets', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 18170313.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '8'], 'line_item_value': [0.0, 18170313.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('other assets', 40), ('other current assets', 26), (' other current assets', 26), (' other financial assets', 26), (' biological assets', 25), (' financial assets', 24), (' trade and other receivables', 15), (' income tax receivable from related parties', 11), (' deferred operating expenditure', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [(' income tax receivable from related parties', 65), (' trade and other receivables', 63), (' other financial assets', 34), ('other current assets', 29), (' other current assets', 29), (' financial assets', 28), (' deferred operating expenditure', 27), ('other assets', 22), (' biological assets', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 9232194.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, '8'], 'line_item_value': [0.0, 9232194.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), (' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' income tax receivable from related parties', 55), (' other deposits receivable - related party', 55), (' rental bond', 55), (' long service leave receivable', 51), ('foreign exchange derivatives at fair value', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' bank guarantee', 38), ('other assets', 36), (' related party disclosures', 35), (' lng', 33), (' deposits', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current trade receivables related entity (note 20) , res_fuzz_match = [('current', 100), (' other receivables - related party', 75), (' interest receivable', 67), (' related party receivable', 67), (' current investments', 64), (' other deposits receivable - related party', 62), (' income tax receivable from related parties', 61), (' amount receivable from controlling entity', 61), (' other', 60), (' rental bond', 55), (' accrued rebates', 55), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' share of jv prepayments', 50), (' related party disclosures', 48), (' long service leave receivable', 48), (' accrued interest', 43), (' condensate', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('current', 100), (' other', 100), (' other debtors and prepayments', 78), (' interest receivable', 73), (' other receivables - related party', 72), (' related party receivable', 67), (' share of jv prepayments', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' income tax receivable from related parties', 52), (' long service leave receivable', 48), (' electricity derivatives at fair value', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' forward exchange contracts', 43), ('foreign exchange derivatives at fair value', 42), (' foreign exchange forward contracts', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' lng', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current loan to boyne smelters limited (note 20) , res_fuzz_match = [('current', 100), (' rental bond', 64), (' current investments', 64), (' other', 60), ('other assets', 45), (' accrued rebates', 45), (' long service leave receivable', 44), (' accrued interest', 43), (' condensate', 43), (' interest receivable', 40), ('foreign exchange derivatives at fair value', 39), (' amount receivable from controlling entity', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' other receivables - related party', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' income tax receivable from related parties', 37), (' electricity derivatives at fair value', 36), (' other deposits receivable - related party', 35), (' derivative contracts - fair value', 33), (' share of jv prepayments', 33), (' lng', 33), (' deposits', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), (' interest receivable', 73), (' related party receivable', 67), (' current investments', 64), (' income tax receivable from related parties', 55), (' other deposits receivable - related party', 55), (' rental bond', 55), (' long service leave receivable', 51), ('foreign exchange derivatives at fair value', 50), (' amount receivable from controlling entity', 50), (' other debtors and prepayments', 46), (' other receivables - related party', 45), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' bank guarantee', 38), ('other assets', 36), (' related party disclosures', 35), (' lng', 33), (' deposits', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current trade receivables related entity (note 20) , res_fuzz_match = [('current', 100), (' other receivables - related party', 75), (' interest receivable', 67), (' related party receivable', 67), (' current investments', 64), (' other deposits receivable - related party', 62), (' income tax receivable from related parties', 61), (' amount receivable from controlling entity', 61), (' other', 60), (' rental bond', 55), (' accrued rebates', 55), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' share of jv prepayments', 50), (' related party disclosures', 48), (' long service leave receivable', 48), (' accrued interest', 43), (' condensate', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' forward exchange contracts', 42), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('current', 100), (' other', 100), (' other debtors and prepayments', 78), (' interest receivable', 73), (' other receivables - related party', 72), (' related party receivable', 67), (' share of jv prepayments', 67), ('other assets', 64), (' current investments', 64), (' other deposits receivable - related party', 55), (' rental bond', 55), (' income tax receivable from related parties', 52), (' long service leave receivable', 48), (' electricity derivatives at fair value', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' forward exchange contracts', 43), ('foreign exchange derivatives at fair value', 42), (' foreign exchange forward contracts', 39), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' lng', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current loan to boyne smelters limited (note 20) , res_fuzz_match = [('current', 100), (' rental bond', 64), (' current investments', 64), (' other', 60), ('other assets', 45), (' accrued rebates', 45), (' long service leave receivable', 44), (' accrued interest', 43), (' condensate', 43), (' interest receivable', 40), ('foreign exchange derivatives at fair value', 39), (' amount receivable from controlling entity', 39), (' related party receivable', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' other receivables - related party', 38), (' bank guarantee', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' income tax receivable from related parties', 37), (' electricity derivatives at fair value', 36), (' other deposits receivable - related party', 35), (' derivative contracts - fair value', 33), (' share of jv prepayments', 33), (' lng', 33), (' deposits', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 2332066.0, 4784487.0, 2115641.0, 9232194.0, 1960802.0, 11216249.0, 2646519.0, 2346743.0, 18170313.0], 'label': ['Current Trade receivables', 'Current Trade receivables related entity (Note 20)', 'Current Other receivables and prepayments', 'Current Loan to Boyne Smelters Limited (Note 20)', 'Current ', 'Current Trade receivables', 'Current Trade receivables related entity (Note 20)', 'Current Other receivables and prepayments', 'Current Loan to Boyne Smelters Limited (Note 20)', 'Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('current assets', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('current assets', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('current assets', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('current assets', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('plant property equipment', 44), ('property plant equipment', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('plant property equipment', 46), ('property plant equipment', 46)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 18348862.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [18348862.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('plant property equipment', 44), ('property plant equipment', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('plant property equipment', 46), ('property plant equipment', 46)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 17618429.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [17618429.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 14, 15, 16, 25, 26, 27, 36, 37, 38, 47, 48, 49, 58, 59, 60], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 175870.0, 0.0, -692173.0, 4350726.0, 2761116.0, 0.0, 66861238.0, 49618482.0, 0.0, 53453.0, 36174.0, 0.0, 760279.0, 0.0, -692173.0, 72201566.0, 52415772.0], 'label': ['of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 20), ('cost', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 12)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 20), ('cost', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 12)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 20), ('cost', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 12)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 20), ('cost', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 12)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 20), ('cost', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 12)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('net value', 50), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 20), ('cost', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('net value', 20), ('gross', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('net value', 38), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('net value', 50), ('gross', 40), ('cost', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 12)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], 'score': [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80], 'value': [913989.0, 0.0, -153710.0, 0.0, 760279.0, 0.0, 0.0, 0.0, 0.0, 760279.0, 913989.0], 'label': ['10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('plant property equipment', 44), ('property plant equipment', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('plant property equipment', 46), ('property plant equipment', 46)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 18348862.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [18348862.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('plant property equipment', 44), ('property plant equipment', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('plant property equipment', 46), ('property plant equipment', 46)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 17618429.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [17618429.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('work in progress', 38), ('capital work in progress', 37), ('right of use', 33), ('right to use', 33), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('tangible', 29), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 25), ('work in progress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 42), ('work in progress', 42), ('rightofuse', 33), ('righttouse', 33), ('right of use', 33), ('right to use', 33), ('tangible', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('right of use', 56), ('right to use', 56), ('tangible', 43), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('capital work in progress', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('work in progress', 38), ('capital work in progress', 37), ('right of use', 33), ('right to use', 33), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('tangible', 29), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 25), ('work in progress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 42), ('work in progress', 42), ('rightofuse', 33), ('righttouse', 33), ('right of use', 33), ('right to use', 33), ('tangible', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('right of use', 56), ('right to use', 56), ('tangible', 43), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('capital work-in-progress', 32), ('capital workinprogress', 32), ('capital work in progress', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('tangible assets', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('tangible assets', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 80, 'value': 13804.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['11'], 'line_item_value': [13804.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('tangible assets', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('tangible assets', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 80, 'value': 9673.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['11'], 'line_item_value': [9673.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('intangible assets under development', 50), ('intangible under development', 45), ('intangible', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('intangible', 50), ('intangible under development', 42), ('intangible assets under development', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 47), ('intangible under development', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 13804.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['11'], 'line_item_value': [13804.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('intangible assets under development', 50), ('intangible under development', 45), ('intangible', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('intangible', 50), ('intangible under development', 42), ('intangible assets under development', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 47), ('intangible under development', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 9673.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['11'], 'line_item_value': [9673.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('donations', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('donations', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('donations', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('donations', 22)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('donations', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('donations', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('joint ventures and associates', 45), (' investments accounted for using the equity method', 45), ('derivative financial instruments', 36), ('investment', 33), (' investment in joint venture', 32), (' investment in associate', 31)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 58), ('joint ventures and associates', 50), (' investment in associate', 50), (' investments accounted for using the equity method', 50), ('derivative financial instruments', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [(' investment in associate', 56), ('investment', 50), ('joint ventures and associates', 47), (' investments accounted for using the equity method', 47), (' investment in joint venture', 43), ('derivative financial instruments', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 24404000.0, 'line_item_label': ['Other investments'], 'note_numbers': ['13'], 'line_item_value': [24404000.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('joint ventures and associates', 45), (' investments accounted for using the equity method', 45), ('derivative financial instruments', 36), ('investment', 33), (' investment in joint venture', 32), (' investment in associate', 31)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 58), ('joint ventures and associates', 50), (' investment in associate', 50), (' investments accounted for using the equity method', 50), ('derivative financial instruments', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [(' investment in associate', 56), ('investment', 50), ('joint ventures and associates', 47), (' investments accounted for using the equity method', 47), (' investment in joint venture', 43), ('derivative financial instruments', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 90082000.0, 'line_item_label': ['Other investments'], 'note_numbers': ['13'], 'line_item_value': [90082000.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: fclass shares at fair value , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 41)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: f2class shares at fair value , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 41)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: beginning balance , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 38)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: movement of fair value during the year , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 49)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: ending balance , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: fclass shares at fair value , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 41)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: f2class shares at fair value , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 41)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: beginning balance , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 38)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: movement of fair value during the year , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 49)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = investment in boyne smelters limited: ending balance , res_fuzz_match = [('investment in joint venture', 68), (' investment in associate', 62), (' carrying amount at the end of the financial year', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('deferred tax assets', 43), ('deferred tax', 39), ('deferred charges', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('deferred tax assets', 37), ('deferred tax', 29), ('deferred charges', 26)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred charges', 40), ('deferred tax', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('deferred tax assets', 43), ('deferred tax', 39), ('deferred charges', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('deferred tax assets', 37), ('deferred tax', 29), ('deferred charges', 26)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred charges', 40), ('deferred tax', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' loan receivables', 55), (' exploration and evaluation expenditure', 49), ('other assets', 42), (' other assets', 42), (' other non-current assets', 39), (' other non-current assets', 39), (' leased assets', 31), (' financial assets', 29), ('non-current', 28), (' leases', 15)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), (' other assets', 70), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 36), (' leased assets', 36), ('non-current', 32), (' loan receivables', 26), (' leases', 25), (' financial assets', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('other assets', 60), (' other assets', 60), (' financial assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' leased assets', 48), (' exploration and evaluation expenditure', 43), (' loan receivables', 40), ('non-current', 23), (' leases', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 10, 13], 'score': 100, 'value': 45424758.0, 'line_item_label': ['Non-current assets', 'Intangible assets', 'Other non-current assets'], 'note_numbers': [nan, '11', '12'], 'line_item_value': [0.0, 13804.0, 45410954.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' loan receivables', 55), (' exploration and evaluation expenditure', 49), ('other assets', 42), (' other assets', 42), (' other non-current assets', 39), (' other non-current assets', 39), (' leased assets', 31), (' financial assets', 29), ('non-current', 28), (' leases', 15)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), (' other assets', 70), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 36), (' leased assets', 36), ('non-current', 32), (' loan receivables', 26), (' leases', 25), (' financial assets', 24)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('other assets', 60), (' other assets', 60), (' financial assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' leased assets', 48), (' exploration and evaluation expenditure', 43), (' loan receivables', 40), ('non-current', 23), (' leases', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 10, 13], 'score': 100, 'value': 50191030.0, 'line_item_label': ['Non-current assets', 'Intangible assets', 'Other non-current assets'], 'note_numbers': [nan, '11', '12'], 'line_item_value': [0.0, 9673.0, 50181357.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2021 , res_fuzz_match = [(' warehouse and office equipment', 50), ('non-current', 43), (' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' total. properties', 33), (' motor vehicles', 33), (' right-of-use-assets', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost additions internally developed , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' electricity derivatives at fair value', 45), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 36), (' exploration and evaluation expenditure', 36), (' total. properties', 36), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost write-off , res_fuzz_match = [(' allowance for expected credit losses', 54), (' electricity derivatives at fair value', 46), (' warehouse and office equipment', 46), (' total. properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' right-of-use-assets', 31), ('non-current', 29), (' defined benefit plans', 23), (' exploration and evaluation expenditure', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2021 , res_fuzz_match = [('finance receivables', 45), (' allowance for expected credit losses', 45), (' electricity derivatives at fair value', 45), (' motor vehicles', 45), (' right-of-use-assets', 36), (' exploration and evaluation expenditure', 36), (' total. properties', 36), (' warehouse and office equipment', 36), (' defined benefit plans', 27), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment amortisation , res_fuzz_match = [(' total. properties', 50), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 39), ('finance receivables', 38), (' defined benefit plans', 33), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment write-off , res_fuzz_match = [(' warehouse and office equipment', 46), (' exploration and evaluation expenditure', 44), (' total. properties', 43), (' motor vehicles', 42), ('finance receivables', 38), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), ('non-current', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment at: 31 december 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' exploration and evaluation expenditure', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' total. properties', 36), (' defined benefit plans', 33), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [(' exploration and evaluation expenditure', 45), (' total. properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 40), ('finance receivables', 38), (' warehouse and office equipment', 35), (' allowance for expected credit losses', 30), ('non-current', 29), (' defined benefit plans', 28), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [(' exploration and evaluation expenditure', 45), (' total. properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 40), ('finance receivables', 38), (' warehouse and office equipment', 35), (' allowance for expected credit losses', 30), ('non-current', 29), (' defined benefit plans', 28), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = software $ , res_fuzz_match = [(' total. properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('non-current', 29), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2021 , res_fuzz_match = [(' warehouse and office equipment', 50), ('non-current', 43), (' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' total. properties', 33), (' motor vehicles', 33), (' right-of-use-assets', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost additions internally developed , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' electricity derivatives at fair value', 45), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 36), (' exploration and evaluation expenditure', 36), (' total. properties', 36), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost write-off , res_fuzz_match = [(' allowance for expected credit losses', 54), (' electricity derivatives at fair value', 46), (' warehouse and office equipment', 46), (' total. properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' right-of-use-assets', 31), ('non-current', 29), (' defined benefit plans', 23), (' exploration and evaluation expenditure', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2021 , res_fuzz_match = [('finance receivables', 45), (' allowance for expected credit losses', 45), (' electricity derivatives at fair value', 45), (' motor vehicles', 45), (' right-of-use-assets', 36), (' exploration and evaluation expenditure', 36), (' total. properties', 36), (' warehouse and office equipment', 36), (' defined benefit plans', 27), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment amortisation , res_fuzz_match = [(' total. properties', 50), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 39), ('finance receivables', 38), (' defined benefit plans', 33), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment write-off , res_fuzz_match = [(' warehouse and office equipment', 46), (' exploration and evaluation expenditure', 44), (' total. properties', 43), (' motor vehicles', 42), ('finance receivables', 38), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), ('non-current', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment at: 31 december 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' exploration and evaluation expenditure', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' total. properties', 36), (' defined benefit plans', 33), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [(' exploration and evaluation expenditure', 45), (' total. properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 40), ('finance receivables', 38), (' warehouse and office equipment', 35), (' allowance for expected credit losses', 30), ('non-current', 29), (' defined benefit plans', 28), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [(' exploration and evaluation expenditure', 45), (' total. properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 40), ('finance receivables', 38), (' warehouse and office equipment', 35), (' allowance for expected credit losses', 30), ('non-current', 29), (' defined benefit plans', 28), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = customer assets $ , res_fuzz_match = [(' right-of-use-assets', 58), (' allowance for expected credit losses', 42), (' motor vehicles', 35), (' electricity derivatives at fair value', 33), (' exploration and evaluation expenditure', 33), (' total. properties', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2021 , res_fuzz_match = [(' warehouse and office equipment', 50), ('non-current', 43), (' allowance for expected credit losses', 42), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' total. properties', 33), (' motor vehicles', 33), (' right-of-use-assets', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost additions internally developed , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' electricity derivatives at fair value', 45), (' warehouse and office equipment', 42), (' defined benefit plans', 39), (' allowance for expected credit losses', 36), (' exploration and evaluation expenditure', 36), (' total. properties', 36), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost write-off , res_fuzz_match = [(' allowance for expected credit losses', 54), (' electricity derivatives at fair value', 46), (' warehouse and office equipment', 46), (' total. properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' right-of-use-assets', 31), ('non-current', 29), (' defined benefit plans', 23), (' exploration and evaluation expenditure', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2021 , res_fuzz_match = [('finance receivables', 45), (' allowance for expected credit losses', 45), (' electricity derivatives at fair value', 45), (' motor vehicles', 45), (' right-of-use-assets', 36), (' exploration and evaluation expenditure', 36), (' total. properties', 36), (' warehouse and office equipment', 36), (' defined benefit plans', 27), ('non-current', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment amortisation , res_fuzz_match = [(' total. properties', 50), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' exploration and evaluation expenditure', 41), (' allowance for expected credit losses', 39), ('finance receivables', 38), (' defined benefit plans', 33), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment write-off , res_fuzz_match = [(' warehouse and office equipment', 46), (' exploration and evaluation expenditure', 44), (' total. properties', 43), (' motor vehicles', 42), ('finance receivables', 38), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), ('non-current', 29)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation and impairment at: 31 december 2021 , res_fuzz_match = [('finance receivables', 46), (' warehouse and office equipment', 46), (' exploration and evaluation expenditure', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 36), (' electricity derivatives at fair value', 36), (' total. properties', 36), (' defined benefit plans', 33), ('non-current', 29), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2021 , res_fuzz_match = [(' exploration and evaluation expenditure', 45), (' total. properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 40), ('finance receivables', 38), (' warehouse and office equipment', 35), (' allowance for expected credit losses', 30), ('non-current', 29), (' defined benefit plans', 28), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [(' exploration and evaluation expenditure', 45), (' total. properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 40), ('finance receivables', 38), (' warehouse and office equipment', 35), (' allowance for expected credit losses', 30), ('non-current', 29), (' defined benefit plans', 28), (' right-of-use-assets', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' total. properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('non-current', 20), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [18, 19, 20, 21, 22, 23, 24, 25, 26], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [35197570.0, 3323.0, -6018.0, 35194875.0, 3182.0, -1746.0, 35185202.0, 9673.0, 13804.0], 'label': ['Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $', 'Total $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('non-current assets total', 39)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('non-current assets total', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('non-current assets total', 47)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 13], 'score': 84, 'value': 45410954.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, '12'], 'line_item_value': [0.0, 45410954.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('non-current assets total', 39)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('non-current assets total', 32)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('non-current assets total', 47)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 13], 'score': 84, 'value': 50181357.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, '12'], 'line_item_value': [0.0, 50181357.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 55), (' bank overdraft', 33), (' loans and borrowings', 32), ('short-term debt', 28), ('shortterm debt', 28), ('short term debt', 27), (' leases', 23), ('shortterm borrowings', 21), ('borrowings', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('short-term debt', 37), ('shortterm debt', 37), ('short term debt', 36), ('shortterm borrowings', 30), ('lease liabilities', 29), (' loans and borrowings', 26), (' bank overdraft', 26), (' leases', 21), ('borrowings', 13)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 55), (' bank overdraft', 33), (' loans and borrowings', 32), ('short-term debt', 28), ('shortterm debt', 28), ('short term debt', 27), (' leases', 23), ('shortterm borrowings', 21), ('borrowings', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('short-term debt', 37), ('shortterm debt', 37), ('short term debt', 36), ('shortterm borrowings', 30), ('lease liabilities', 29), (' loans and borrowings', 26), (' bank overdraft', 26), (' leases', 21), ('borrowings', 13)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('other current liabilities', 48), ('other financial liabilities', 43), ('current maturities of long-term debt', 41), ('current maturities of longterm debt', 41), ('current maturities', 34)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('other financial liabilities', 50), ('other current liabilities', 36), ('current maturities of long-term debt', 31), ('current maturities of longterm debt', 31), ('current maturities', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('other current liabilities', 48), ('other financial liabilities', 43), ('current maturities of long-term debt', 41), ('current maturities of longterm debt', 41), ('current maturities', 34)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('other financial liabilities', 50), ('other current liabilities', 36), ('current maturities of long-term debt', 31), ('current maturities of longterm debt', 31), ('current maturities', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('note payable(debt)', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('note payable(debt)', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('note payable(debt)', 42)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('note payable(debt)', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('accounts payable', 44), ('small enterprises', 43), ('micro enterprises and small enterprises', 39), ('micro enterprises', 38), ('other than micro and small enterprises', 38), ('trade and other payables', 36), ('other trade payables', 35), ('outstanding dues of creditors other than', 33), ('total outstanding due of other creditors other than micro and small', 32), ('outstanding dues of micro enterprises and small enterprises', 31), ('trade payable', 29), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('other than micro and small enterprises', 40), ('trade and other payables', 39), ('other trade payables', 38), ('micro enterprises and small enterprises', 37), ('micro enterprises', 36), ('outstanding dues of micro enterprises and small enterprises', 33), ('outstanding dues of creditors other than', 32), ('small enterprises', 31), ('total outstanding due of other creditors other than micro and small', 31), ('outstanding dues of creditors other than micro enterprises and small enterprises', 30), ('trade payable', 28), ('accounts payable', 26)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 39221937.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [39221937.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('accounts payable', 44), ('small enterprises', 43), ('micro enterprises and small enterprises', 39), ('micro enterprises', 38), ('other than micro and small enterprises', 38), ('trade and other payables', 36), ('other trade payables', 35), ('outstanding dues of creditors other than', 33), ('total outstanding due of other creditors other than micro and small', 32), ('outstanding dues of micro enterprises and small enterprises', 31), ('trade payable', 29), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('other than micro and small enterprises', 40), ('trade and other payables', 39), ('other trade payables', 38), ('micro enterprises and small enterprises', 37), ('micro enterprises', 36), ('outstanding dues of micro enterprises and small enterprises', 33), ('outstanding dues of creditors other than', 32), ('small enterprises', 31), ('total outstanding due of other creditors other than micro and small', 31), ('outstanding dues of creditors other than micro enterprises and small enterprises', 30), ('trade payable', 28), ('accounts payable', 26)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 47911992.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [47911992.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = credit allowance account boyne smelters limited , res_fuzz_match = [('current', 57), ('trade creditors', 50), (' amounts payable to controlling entity', 50), (' trade and other payables', 42), (' trade payables', 42), (' trade payables', 42), (' related party payables', 39), (' trade payables - related parties', 38), (' trade payables - other parties', 38), (' other trade payables', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = credit allowance account boyne smelters limited , res_fuzz_match = [('current', 57), ('trade creditors', 50), (' amounts payable to controlling entity', 50), (' trade and other payables', 42), (' trade payables', 42), (' trade payables', 42), (' related party payables', 39), (' trade payables - related parties', 38), (' trade payables - other parties', 38), (' other trade payables', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('other current liabilities', 48), ('other current financial liabilities', 44), ('other financial liabilities', 43), ('trade and other payables', 36), ('other liabilities', 35)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('other financial liabilities', 50), ('other current financial liabilities', 50), ('trade and other payables', 39), ('other current liabilities', 36), ('other liabilities', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18], 'score': 100, 'value': 39221937.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 39221937.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('other current liabilities', 48), ('other current financial liabilities', 44), ('other financial liabilities', 43), ('trade and other payables', 36), ('other liabilities', 35)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('other financial liabilities', 50), ('other current financial liabilities', 50), ('trade and other payables', 39), ('other current liabilities', 36), ('other liabilities', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18], 'score': 100, 'value': 47911992.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 47911992.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = credit allowance account boyne smelters limited , res_fuzz_match = [('accrued expenses', 50), ('interest accrued', 50)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = credit allowance account boyne smelters limited , res_fuzz_match = [('accrued expenses', 50), ('interest accrued', 50)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current tax liabilities', 56), (' income tax payable', 38), ('tax', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('tax', 33), (' income tax payable', 31), ('current tax liabilities', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current tax liabilities', 56), (' income tax payable', 38), ('tax', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('tax', 33), (' income tax payable', 31), ('current tax liabilities', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' foreign exchange contract liability', 49), ('other current liabilities', 48), (' other current liabilities', 48), (' other financial liabilities', 43), (' trade and other payables', 36), (' customer deposits', 33), (' deferred revenue', 29), ('provisions', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' other financial liabilities', 50), (' financial liabilities', 47), (' trade and other payables', 39), (' deferred revenue', 39), ('other current liabilities', 36), (' other current liabilities', 36), (' customer deposits', 32), (' employee benefits', 31), (' foreign exchange contract liability', 29), ('provisions', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19], 'score': 81, 'value': 39828059.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Employee benefit liabilities'], 'note_numbers': [nan, '15', '16'], 'line_item_value': [0.0, 39221937.0, 606122.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' foreign exchange contract liability', 49), ('other current liabilities', 48), (' other current liabilities', 48), (' other financial liabilities', 43), (' trade and other payables', 36), (' customer deposits', 33), (' deferred revenue', 29), ('provisions', 21)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' other financial liabilities', 50), (' financial liabilities', 47), (' trade and other payables', 39), (' deferred revenue', 39), ('other current liabilities', 36), (' other current liabilities', 36), (' customer deposits', 32), (' employee benefits', 31), (' foreign exchange contract liability', 29), ('provisions', 27)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19], 'score': 81, 'value': 48523499.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Employee benefit liabilities'], 'note_numbers': [nan, '15', '16'], 'line_item_value': [0.0, 47911992.0, 611507.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = credit allowance account boyne smelters limited , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' gst liabilities', 50), (' current - liability for annual and long service leave', 49), (' loans from related party', 48), (' total current employee benefits', 48), (' contract liabilites - current', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' provision for associate funding', 41), (' gst payables', 40), (' arising from service contracts', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' share of joint venture payables', 37), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' restructuring', 30), (' make good provisions', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows = credit allowance account boyne smelters limited , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' gst liabilities', 50), (' current - liability for annual and long service leave', 49), (' loans from related party', 48), (' total current employee benefits', 48), (' contract liabilites - current', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' provision for associate funding', 41), (' gst payables', 40), (' arising from service contracts', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' share of joint venture payables', 37), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' restructuring', 30), (' make good provisions', 25)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current liabilities', 56)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('current liabilities', 26)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('current liabilities', 56)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('current liabilities', 26)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term debt', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('long term debt', 10)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term debt', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('long term debt', 10)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 41), (' loans and borrowings', 33), (' borrowings', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 41), (' loans and borrowings', 33), (' borrowings', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 35), ('(bond)', 15)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 35), ('(bond)', 15)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 55), ('interest bearing loans and borrowings', 35)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 55), ('interest bearing loans and borrowings', 35)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 13:59:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 41)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 41)]
2023-05-09 13:59:03+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' other financial liabilities', 43), ('trade and other payables', 36), ('other long term liabilities', 32), (' other non-current liabilities', 29), (' provision for associate funding', 23), (' provisions', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 23, 24], 'score': 100, 'value': 27512448.0, 'line_item_label': ['Non-current liabilities', 'Employee benefit liabilities', 'Provision'], 'note_numbers': [nan, '16', '17'], 'line_item_value': [0.0, 22006.0, 27490442.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [(' employee benefits', 81), (' financial liabilities', 50), (' other financial liabilities', 43), ('trade and other payables', 36), ('other long term liabilities', 32), (' other non-current liabilities', 29), (' provision for associate funding', 23), (' provisions', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 23, 24], 'score': 100, 'value': 29378150.0, 'line_item_label': ['Non-current liabilities', 'Employee benefit liabilities', 'Provision'], 'note_numbers': [nan, '16', '17'], 'line_item_value': [0.0, 20511.0, 29357639.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [(' trade payables - related parties', 60), (' derivative contracts - at fair value', 50), (' employee benefits - non current', 50), (' contract liabilites - non-current', 50), (' total non-current employee benefits', 50), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' provisions - non-current', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 30), (' make good provisions', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' provisions - non-current', 100), (' provision for associate funding', 100), (' make good provisions', 100), (' non-current - liability for long-service leave', 50), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 50), (' trade payables - related parties', 50), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' total non-current employee benefits', 33), ('non-current trade and other payables', 17), (' contract liabilites - non-current', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = unwinding of the discount and changes in discount rate , res_fuzz_match = [(' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 43), (' employee benefits - non current', 41), (' contract liabilites - non-current', 40), (' make good provisions', 38), (' trade payables - related parties', 38), (' provisions - non-current', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 35), (' non-current - liability for long-service leave', 32), (' total non-current employee benefits', 31), (' employee benefits - payroll', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' provisions - non-current', 100), (' provision for associate funding', 100), (' make good provisions', 100), (' non-current - liability for long-service leave', 50), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 50), (' trade payables - related parties', 50), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' total non-current employee benefits', 33), ('non-current trade and other payables', 17), (' contract liabilites - non-current', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = remeasurement of rehabilitation provision , res_fuzz_match = [(' employee benefits - payroll', 50), (' make good provisions', 50), (' trade payables - related parties', 50), (' non-current - liability for long-service leave', 48), (' contract liabilites - non-current', 44), (' provisions - non-current', 43), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 38), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' provision for associate funding', 32), (' total non-current employee benefits', 32), (' abandonment and decommissioning costs', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' provisions - non-current', 100), (' provision for associate funding', 100), (' make good provisions', 100), (' non-current - liability for long-service leave', 50), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 50), (' trade payables - related parties', 50), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' total non-current employee benefits', 33), ('non-current trade and other payables', 17), (' contract liabilites - non-current', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2021 , res_fuzz_match = [(' abandonment and decommissioning costs', 67), ('non-current trade and other payables', 33), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' trade payables - related parties', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 17), (' contract liabilites - non-current', 17), (' provision for associate funding', 17), (' make good provisions', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' provisions - non-current', 100), (' provision for associate funding', 100), (' make good provisions', 100), (' non-current - liability for long-service leave', 50), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 50), (' trade payables - related parties', 50), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' total non-current employee benefits', 33), ('non-current trade and other payables', 17), (' contract liabilites - non-current', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' provisions - non-current', 100), (' provision for associate funding', 100), (' make good provisions', 100), (' non-current - liability for long-service leave', 50), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 50), (' trade payables - related parties', 50), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' total non-current employee benefits', 33), ('non-current trade and other payables', 17), (' contract liabilites - non-current', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 4], 'score': [100, 100, 100, 100, 100, 100], 'value': [27490442.0, 2559370.0, -692173.0, 29357639.0, 29357639.0, 29357639.0], 'label': ['Provisions', 'Provisions', 'Provisions', 'Provisions', ' Non-current', 'Provisions'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'rows', 'columns']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('minority interest', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('minority interest', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('minority interest', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('minority interest', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('long term liabilities', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = employee benefit liabilities , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = provision , res_fuzz_match = [('long term liabilities', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('equity share capital', 57), ('perpetual equity instrument', 38), ('share capital', 36), ('common stock', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('share capital', 40), ('equity share capital', 38), ('common stock', 23), ('perpetual equity instrument', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('share capital', 35), ('equity share capital', 33), ('perpetual equity instrument', 32), ('common stock', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('equity share capital', 57), ('perpetual equity instrument', 38), ('share capital', 36), ('common stock', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('share capital', 40), ('equity share capital', 38), ('common stock', 23), ('perpetual equity instrument', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('share capital', 35), ('equity share capital', 33), ('perpetual equity instrument', 32), ('common stock', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other equity', 48), ('additional paid in capital', 48), ('additional paid up capital', 48), ('reserves and surplus', 41), ('other reserves', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('other equity', 31), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 26), ('other reserves', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('other reserves', 100), ('reserves and surplus', 48), ('other equity', 42), ('additional paid in capital', 14), ('additional paid up capital', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [32], 'score': 100, 'value': -138406.0, 'line_item_label': ['Other reserves'], 'note_numbers': ['18'], 'line_item_value': [-138406.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other equity', 48), ('additional paid in capital', 48), ('additional paid up capital', 48), ('reserves and surplus', 41), ('other reserves', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('other equity', 31), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 26), ('other reserves', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('other reserves', 100), ('reserves and surplus', 48), ('other equity', 42), ('additional paid in capital', 14), ('additional paid up capital', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [32], 'score': 100, 'value': 45836194.0, 'line_item_label': ['Other reserves'], 'note_numbers': ['18'], 'line_item_value': [45836194.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['share premium', 'securities premium'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['share premium', 'securities premium'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('share premium', 29), ('securities premium', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [('share premium', 46), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('share premium', 38), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('share premium', 31), ('securities premium', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2020 , res_fuzz_match = [('share premium', 33), ('securities premium', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [('share premium', 46), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('share premium', 38), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('share premium', 31), ('securities premium', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 december 2021 , res_fuzz_match = [('share premium', 44), ('securities premium', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('share premium', 29), ('securities premium', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [('share premium', 46), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('share premium', 38), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('share premium', 31), ('securities premium', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2020 , res_fuzz_match = [('share premium', 33), ('securities premium', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [('share premium', 46), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('share premium', 38), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('share premium', 31), ('securities premium', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 december 2021 , res_fuzz_match = [('share premium', 44), ('securities premium', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [('share premium', 38), ('securities premium', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('share premium', 29), ('securities premium', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [('share premium', 46), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('share premium', 38), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('share premium', 31), ('securities premium', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2020 , res_fuzz_match = [('share premium', 33), ('securities premium', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [('share premium', 46), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('share premium', 38), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('share premium', 31), ('securities premium', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 december 2021 , res_fuzz_match = [('share premium', 44), ('securities premium', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [('share premium', 42), ('securities premium', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('share premium', 29), ('securities premium', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [('share premium', 46), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('share premium', 38), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('share premium', 31), ('securities premium', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2020 , res_fuzz_match = [('share premium', 33), ('securities premium', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [('share premium', 46), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('share premium', 38), ('securities premium', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('share premium', 31), ('securities premium', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 december 2021 , res_fuzz_match = [('share premium', 44), ('securities premium', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('share premium', 0), ('securities premium', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('other reserves', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('other reserves', 100)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [32], 'score': 100, 'value': -138406.0, 'line_item_label': ['Other reserves'], 'note_numbers': ['18'], 'line_item_value': [-138406.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('other reserves', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('other reserves', 100)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [32], 'score': 100, 'value': 45836194.0, 'line_item_label': ['Other reserves'], 'note_numbers': ['18'], 'line_item_value': [45836194.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('foreign currency translation reserve', 43), (' reserve in joint venture', 43), (' cash flow hedge reserve', 14), (' other reserve', 14), (' total other reserves', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [(' cash flow hedge reserve', 43), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), ('foreign currency translation reserve', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' cash flow hedge reserve', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), (' cash flow hedge reserve', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2020 , res_fuzz_match = [('foreign currency translation reserve', 33), (' cash flow hedge reserve', 33), (' reserve in joint venture', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [(' cash flow hedge reserve', 43), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), ('foreign currency translation reserve', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' cash flow hedge reserve', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), (' cash flow hedge reserve', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 december 2021 , res_fuzz_match = [('foreign currency translation reserve', 56), (' cash flow hedge reserve', 33), (' reserve in joint venture', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('foreign currency translation reserve', 43), (' reserve in joint venture', 43), (' cash flow hedge reserve', 14), (' other reserve', 14), (' total other reserves', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [(' cash flow hedge reserve', 43), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), ('foreign currency translation reserve', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' cash flow hedge reserve', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), (' cash flow hedge reserve', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2020 , res_fuzz_match = [('foreign currency translation reserve', 33), (' cash flow hedge reserve', 33), (' reserve in joint venture', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [(' cash flow hedge reserve', 43), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), ('foreign currency translation reserve', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' cash flow hedge reserve', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), (' cash flow hedge reserve', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 december 2021 , res_fuzz_match = [('foreign currency translation reserve', 56), (' cash flow hedge reserve', 33), (' reserve in joint venture', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = cash flow hedge reserve , res_fuzz_match = [(' cash flow hedge reserve', 100), (' other reserve', 75), (' total other reserves', 61), ('foreign currency translation reserve', 52), (' reserve in joint venture', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('foreign currency translation reserve', 43), (' reserve in joint venture', 43), (' cash flow hedge reserve', 14), (' other reserve', 14), (' total other reserves', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [(' cash flow hedge reserve', 43), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), ('foreign currency translation reserve', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' cash flow hedge reserve', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), (' cash flow hedge reserve', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2020 , res_fuzz_match = [('foreign currency translation reserve', 33), (' cash flow hedge reserve', 33), (' reserve in joint venture', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [(' cash flow hedge reserve', 43), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), ('foreign currency translation reserve', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' cash flow hedge reserve', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), (' cash flow hedge reserve', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 december 2021 , res_fuzz_match = [('foreign currency translation reserve', 56), (' cash flow hedge reserve', 33), (' reserve in joint venture', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other reserves , res_fuzz_match = [(' other reserve', 100), (' total other reserves', 100), (' cash flow hedge reserve', 75), ('foreign currency translation reserve', 67), (' reserve in joint venture', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('foreign currency translation reserve', 43), (' reserve in joint venture', 43), (' cash flow hedge reserve', 14), (' other reserve', 14), (' total other reserves', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [(' cash flow hedge reserve', 43), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), ('foreign currency translation reserve', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' cash flow hedge reserve', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), (' cash flow hedge reserve', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at 31 december 2020 , res_fuzz_match = [('foreign currency translation reserve', 33), (' cash flow hedge reserve', 33), (' reserve in joint venture', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net loss on a hedge of commodity, net of tax , res_fuzz_match = [(' cash flow hedge reserve', 43), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), ('foreign currency translation reserve', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = fair value gain on equity instruments designated at fair value , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' cash flow hedge reserve', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = through oci, net of tax , res_fuzz_match = [('foreign currency translation reserve', 42), (' reserve in joint venture', 42), (' other reserve', 33), (' total other reserves', 33), (' cash flow hedge reserve', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 december 2021 , res_fuzz_match = [('foreign currency translation reserve', 56), (' cash flow hedge reserve', 33), (' reserve in joint venture', 33), (' other reserve', 33), (' total other reserves', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' total other reserves', 100), ('foreign currency translation reserve', 40), (' cash flow hedge reserve', 20), (' reserve in joint venture', 20), (' other reserve', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 71944.0, -3523367.0, 0.0, 0.0, -3451423.0, -1581811.0, 0.0, 0.0, -5033234.0, 7331294.0, 0.0, 0.0, -7469700.0, -138406.0, 0.0, 0.0, 45974600.0, 45836194.0, 7403238.0, -3523367.0, 0.0, -7469700.0, -3589829.0, -1581811.0, 0.0, 45974600.0, 40802960.0], 'label': ['Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Cash flow hedge reserve', 'Other reserves', 'Other reserves', 'Other reserves', 'Other reserves', 'Other reserves', 'Other reserves', 'Other reserves', 'Other reserves', 'Other reserves', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total', 'Total'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('retained earnings', 50), ('other equity', 48), (' accumulated losses', 28), ('reserves surplus', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('other equity', 31), (' accumulated losses', 31), ('retained earnings', 24), ('reserves surplus', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('reserves surplus', 48), ('retained earnings', 43), ('other equity', 42), (' accumulated losses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [30], 'score': 100, 'value': 50150146.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [50150146.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('retained earnings', 50), ('other equity', 48), (' accumulated losses', 28), ('reserves surplus', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('other equity', 31), (' accumulated losses', 31), ('retained earnings', 24), ('reserves surplus', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('reserves surplus', 48), ('retained earnings', 43), ('other equity', 42), (' accumulated losses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [30], 'score': 100, 'value': 53023882.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [53023882.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves', 14), ('reserves', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('other reserves', 23), ('reserves', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('other reserves', 100), ('reserves', 67)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [32], 'score': 100, 'value': -138406.0, 'line_item_label': ['Other reserves'], 'note_numbers': ['18'], 'line_item_value': [-138406.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('other reserves', 14), ('reserves', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('other reserves', 23), ('reserves', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('other reserves', 100), ('reserves', 67)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [32], 'score': 100, 'value': 45836194.0, 'line_item_label': ['Other reserves'], 'note_numbers': ['18'], 'line_item_value': [45836194.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('shareholders equity(a)', 47)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('shareholders equity(a)', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('shareholders equity(a)', 28)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = liabilities and equity , res_fuzz_match = [('shareholders equity(a)', 47)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedge , res_fuzz_match = [('shareholders equity(a)', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other reserves , res_fuzz_match = [('shareholders equity(a)', 28)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('plant property equipment', 44), ('property plant equipment', 44)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('plant property equipment', 46), ('property plant equipment', 46)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 18348862.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [18348862.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('plant property equipment', 44), ('property plant equipment', 44)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = retirement benefit assets , res_fuzz_match = [('plant property equipment', 46), ('property plant equipment', 46)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 91, 'value': 17618429.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [17618429.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('gross', 20), ('cost', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('gross', 20), ('cost', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('gross', 20), ('cost', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('gross', 20), ('cost', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('gross', 20), ('cost', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('gross', 20), ('cost', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], 'score': [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80], 'value': [913989.0, 0.0, -153710.0, 0.0, 760279.0, 0.0, 0.0, 0.0, 0.0, 760279.0, 913989.0], 'label': ['10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $', '10. Property, plant and equipment Work in progress $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33), ('net value', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33), ('net value', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27), ('net value', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment land $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33), ('net value', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33), ('net value', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27), ('net value', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment building and structure $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33), ('net value', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33), ('net value', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27), ('net value', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment plant and equipment $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33), ('net value', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33), ('net value', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27), ('net value', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment motor vehicle $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33), ('net value', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33), ('net value', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27), ('net value', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment work in progress $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at1 january 2021 , res_fuzz_match = [('net value', 50), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20), ('net value', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = disposals , res_fuzz_match = [('depreciatio', 33), ('accumulated depreciation', 33), ('net value', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = of at31 of december rehabilitation provision 2021 accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = at31 of december rehabilitation provision 2021 accumulated depreciation at 1 january 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the year , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33), ('net value', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = charge for the 2021 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 27), ('net value', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2021 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net book value 2020 , res_fuzz_match = [('net value', 62), ('depreciatio', 27), ('accumulated depreciation', 8)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment total $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 14, 15, 16, 25, 26, 27, 36, 37, 38, 47, 48, 49, 58, 59, 60], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 175870.0, 0.0, -692173.0, 4350726.0, 2761116.0, 0.0, 66861238.0, 49618482.0, 0.0, 53453.0, 36174.0, 0.0, 760279.0, 0.0, -692173.0, 72201566.0, 52415772.0], 'label': ['of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'of At31 of December rehabilitation provision 2021 Accumulated depreciation', 'At31 of December rehabilitation provision 2021 Accumulated depreciation At 1 January 2021'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('account receivables', 25), ('trade receivables', 25), ('government subsidies receivable', 25), ('receivable', 25), ('trade and other receivables', 25), ('billed', 0), ('unbilled', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 71), ('trade and other receivables', 62), ('government subsidies receivable', 56), ('billed', 25), ('unbilled', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': 18360971.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivables'], 'note_numbers': ['8', nan], 'line_item_value': [18170313.0, 190658.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash , res_fuzz_match = [('account receivables', 25), ('trade receivables', 25), ('government subsidies receivable', 25), ('receivable', 25), ('trade and other receivables', 25), ('billed', 0), ('unbilled', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 71), ('trade and other receivables', 62), ('government subsidies receivable', 56), ('billed', 25), ('unbilled', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': 9232194.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivables'], 'note_numbers': ['8', nan], 'line_item_value': [9232194.0, 0.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), ('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 60), (' other debtors', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables related entity (note 20) , res_fuzz_match = [('current', 100), ('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 56), (' other debtors', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('current', 100), ('trade receivables', 75), (' related party receivables', 67), (' other debtors', 58), (' share of joint venture receivables', 56), (' net trade debtors', 44)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current loan to boyne smelters limited (note 20) , res_fuzz_match = [('current', 100), (' net trade debtors', 44), (' other debtors', 42), (' share of joint venture receivables', 40), (' related party receivables', 39), ('trade receivables', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' share of joint venture receivables', 57), (' other debtors', 43), ('trade receivables', 29), (' related party receivables', 29), (' net trade debtors', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables , res_fuzz_match = [('current', 100), ('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 60), (' other debtors', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current trade receivables related entity (note 20) , res_fuzz_match = [('current', 100), ('trade receivables', 100), (' related party receivables', 67), (' net trade debtors', 62), (' share of joint venture receivables', 56), (' other debtors', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current other receivables and prepayments , res_fuzz_match = [('current', 100), ('trade receivables', 75), (' related party receivables', 67), (' other debtors', 58), (' share of joint venture receivables', 56), (' net trade debtors', 44)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current loan to boyne smelters limited (note 20) , res_fuzz_match = [('current', 100), (' net trade debtors', 44), (' other debtors', 42), (' share of joint venture receivables', 40), (' related party receivables', 39), ('trade receivables', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' share of joint venture receivables', 57), (' other debtors', 43), ('trade receivables', 29), (' related party receivables', 29), (' net trade debtors', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 2332066.0, 4784487.0, 2115641.0, 9232194.0, 1960802.0, 11216249.0, 2646519.0, 2346743.0, 18170313.0], 'label': ['Current Trade receivables', 'Current Trade receivables related entity (Note 20)', 'Current Other receivables and prepayments', 'Current Loan to Boyne Smelters Limited (Note 20)', 'Current ', 'Current Trade receivables', 'Current Trade receivables related entity (Note 20)', 'Current Other receivables and prepayments', 'Current Loan to Boyne Smelters Limited (Note 20)', 'Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 34), ('revenue from operations', 30), ('from trading business', 30), (' Sales revenue', 29), ('net sales', 26), (' Sale of coal', 25), (' Revenue', 22), ('sale of products', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('revenue from operations', 39), (' Sales revenue', 38), (' Revenue', 38), ('transmission and distribution business', 33), ('from trading business', 27), ('net sales', 26), (' Sale of coal', 25), ('sale of products', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('revenue from operations', 38), ('transmission and distribution business', 37), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 25), ('net sales', 24), ('from trading business', 24), (' Sale of coal', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 37), ('net sales', 35), ('from trading business', 33), ('revenue from operations', 26), ('transmission and distribution business', 23), (' Sales revenue', 23), (' Revenue', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('revenue from operations', 42), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('transmission and distribution business', 36), ('sale of products', 31), (' Sale of coal', 28), (' Sales revenue', 26), ('net sales', 23), (' Revenue', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('from trading business', 41), ('net sales', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sales revenue', 29), (' Sale of coal', 24), ('sale of products', 22), (' Revenue', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations', 45), ('revenue from contracts with customers', 36), ('from trading business', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), ('sale of products', 33), (' Sale of coal', 24), (' Sales revenue', 23), (' Revenue', 20), ('net sales', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 30), ('revenue from operations', 25), ('sale of products', 21), (' Sales revenue', 21), ('from trading business', 20), ('net sales', 19), (' Sale of coal', 19), (' Revenue', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('sale of products', 41), ('net sales', 40), ('transmission and distribution business', 40), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('from trading business', 32), (' Sales revenue', 30), (' Sale of coal', 26), (' Revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' Sale of coal', 43), ('from trading business', 41), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('sale of products', 31), ('revenue from operations', 27), ('net sales', 27), (' Sales revenue', 24), ('transmission and distribution business', 19), (' Revenue', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('transmission and distribution business', 46), ('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 38), ('net sales', 34), ('revenue from operations', 33), (' Sale of coal', 29), ('sale of products', 27), (' Sales revenue', 27), (' Revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('revenue from contracts with customers', 36), ('from trading business', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('sale of products', 34), ('net sales', 29), ('revenue from operations', 28), (' Sale of coal', 28), ('transmission and distribution business', 26), (' Revenue', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 144455407.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['4'], 'line_item_value': [144455407.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 34), ('revenue from operations', 30), ('from trading business', 30), (' Sales revenue', 29), ('net sales', 26), (' Sale of coal', 25), (' Revenue', 22), ('sale of products', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('revenue from operations', 39), (' Sales revenue', 38), (' Revenue', 38), ('transmission and distribution business', 33), ('from trading business', 27), ('net sales', 26), (' Sale of coal', 25), ('sale of products', 22), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('revenue from operations', 38), ('transmission and distribution business', 37), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 25), ('net sales', 24), ('from trading business', 24), (' Sale of coal', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 37), ('net sales', 35), ('from trading business', 33), ('revenue from operations', 26), ('transmission and distribution business', 23), (' Sales revenue', 23), (' Revenue', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('revenue from operations', 42), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('transmission and distribution business', 36), ('sale of products', 31), (' Sale of coal', 28), (' Sales revenue', 26), ('net sales', 23), (' Revenue', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('from trading business', 41), ('net sales', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sales revenue', 29), (' Sale of coal', 24), ('sale of products', 22), (' Revenue', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('revenue from operations', 45), ('revenue from contracts with customers', 36), ('from trading business', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), ('sale of products', 33), (' Sale of coal', 24), (' Sales revenue', 23), (' Revenue', 20), ('net sales', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 30), ('revenue from operations', 25), ('sale of products', 21), (' Sales revenue', 21), ('from trading business', 20), ('net sales', 19), (' Sale of coal', 19), (' Revenue', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('sale of products', 41), ('net sales', 40), ('transmission and distribution business', 40), ('revenue from operations', 37), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('from trading business', 32), (' Sales revenue', 30), (' Sale of coal', 26), (' Revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' Sale of coal', 43), ('from trading business', 41), ('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('sale of products', 31), ('revenue from operations', 27), ('net sales', 27), (' Sales revenue', 24), ('transmission and distribution business', 19), (' Revenue', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('transmission and distribution business', 46), ('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 38), ('net sales', 34), ('revenue from operations', 33), (' Sale of coal', 29), ('sale of products', 27), (' Sales revenue', 27), (' Revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('revenue from contracts with customers', 36), ('from trading business', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('sale of products', 34), ('net sales', 29), ('revenue from operations', 28), (' Sale of coal', 28), ('transmission and distribution business', 26), (' Revenue', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 160766403.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['4'], 'line_item_value': [160766403.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods sale of aluminium ingots , res_fuzz_match = [(' LNG', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Spareparts', 58), ('Sale of goods', 56), (' Sale of goods - Marine', 53), (' Goods sold to customer from warehouse', 47), (' Condensate', 43), (' Goods sold to customer direct from supplier', 43), (' Sale of goods - Motorcycles', 42), (' Total Revenue', 42), (' Domgas', 40), (' Gas transportation income', 39), (' Feed gas income', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods supply of power , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Spareparts', 58), (' Goods sold to customer direct from supplier', 55), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Motorcycles', 47), (' Goods sold to customer from warehouse', 45), (' Condensate', 43), (' LNG', 33), (' Gas transportation income', 33), (' Total Revenue', 33), (' Feed gas income', 31), (' Domgas', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 53), (' Goods sold to customer from warehouse', 53), (' Gas transportation income', 50), (' Goods sold to customer direct from supplier', 46), (' Domgas', 40), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Condensate', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods japan , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Spareparts', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Sale of goods - Motorcycles', 47), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33), (' Gas transportation income', 33), (' Goods sold to customer from warehouse', 33), (' Goods sold to customer direct from supplier', 33), (' Condensate', 29), (' Total Revenue', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods australia , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Spareparts', 53), (' Goods sold to customer from warehouse', 47), (' Goods sold to customer direct from supplier', 47), (' Condensate', 43), (' Domgas', 40), (' Gas transportation income', 34), (' LNG', 33), (' Total Revenue', 33), (' Feed gas income', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods total from contracts with customers , res_fuzz_match = [('Sale of goods', 67), (' Total Revenue', 58), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Goods sold to customer from warehouse', 47), (' Goods sold to customer direct from supplier', 47), (' Feed gas income', 46), (' Condensate', 43), (' Domgas', 40), (' LNG', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition goods transferred at a point in time , res_fuzz_match = [(' Total Revenue', 67), (' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 37), (' Goods sold to customer direct from supplier', 35), (' LNG', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total revenue from contracts with , res_fuzz_match = [(' Total Revenue', 100), (' Gas transportation income', 44), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Goods sold to customer direct from supplier', 41), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), ('Sale of goods', 33), (' LNG', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods sale of aluminium ingots , res_fuzz_match = [(' LNG', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Spareparts', 58), ('Sale of goods', 56), (' Sale of goods - Marine', 53), (' Goods sold to customer from warehouse', 47), (' Condensate', 43), (' Goods sold to customer direct from supplier', 43), (' Sale of goods - Motorcycles', 42), (' Total Revenue', 42), (' Domgas', 40), (' Gas transportation income', 39), (' Feed gas income', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods supply of power , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Spareparts', 58), (' Goods sold to customer direct from supplier', 55), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Motorcycles', 47), (' Goods sold to customer from warehouse', 45), (' Condensate', 43), (' LNG', 33), (' Gas transportation income', 33), (' Total Revenue', 33), (' Feed gas income', 31), (' Domgas', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 53), (' Goods sold to customer from warehouse', 53), (' Gas transportation income', 50), (' Goods sold to customer direct from supplier', 46), (' Domgas', 40), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Condensate', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods japan , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Spareparts', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Sale of goods - Motorcycles', 47), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33), (' Gas transportation income', 33), (' Goods sold to customer from warehouse', 33), (' Goods sold to customer direct from supplier', 33), (' Condensate', 29), (' Total Revenue', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods australia , res_fuzz_match = [('Sale of goods', 67), (' Sale of goods - Cars', 62), (' Sale of goods - Marine', 60), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Spareparts', 53), (' Goods sold to customer from warehouse', 47), (' Goods sold to customer direct from supplier', 47), (' Condensate', 43), (' Domgas', 40), (' Gas transportation income', 34), (' LNG', 33), (' Total Revenue', 33), (' Feed gas income', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = type of goods total from contracts with customers , res_fuzz_match = [('Sale of goods', 67), (' Total Revenue', 58), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Gas transportation income', 50), (' Sale of goods - Spareparts', 47), (' Goods sold to customer from warehouse', 47), (' Goods sold to customer direct from supplier', 47), (' Feed gas income', 46), (' Condensate', 43), (' Domgas', 40), (' LNG', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition goods transferred at a point in time , res_fuzz_match = [(' Total Revenue', 67), (' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 37), (' Goods sold to customer direct from supplier', 35), (' LNG', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total revenue from contracts with , res_fuzz_match = [(' Total Revenue', 100), (' Gas transportation income', 44), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Goods sold to customer direct from supplier', 41), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), ('Sale of goods', 33), (' LNG', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 7, 10, 15], 'score': [100, 100, 100, 100], 'value': [160766403.0, 160766403.0, 144455407.0, 144455407.0], 'label': ['Type of goods Total revenue from contracts with customers', 'Timing of revenue recognition Total revenue from contracts with', 'Type of goods Total revenue from contracts with customers', 'Timing of revenue recognition Total revenue from contracts with'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Cost of goods and services sold', 36), ('total expenses', 33), ('purchase of stock-in-trade', 32), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Personnel costs', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 27), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('expense', 57), ('total expenses', 44), (' Cost of inventory sold', 41), ('expenditure', 40), ('total expenditure', 32), (' Cost of goods and services sold', 30), (' Personnel costs', 28), (' cost of coal sold', 21), (' Cost of product sold', 19), ('purchase of stock-in-trade', 18), ('cost of sales', 17), ('Cost of sales', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Cost of goods and services sold', 43), (' Cost of inventory sold', 40), ('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenditure', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('total expenditure', 33), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 22), ('expense', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 33), (' Personnel costs', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 28), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), (' cost of coal sold', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), ('expenditure', 24), ('expense', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), ('total expenditure', 28), ('total expenses', 26), (' cost of coal sold', 26), (' Personnel costs', 26), ('cost of sales', 22), ('Cost of sales', 22), ('expenditure', 16), ('expense', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('total expenditure', 42), ('total expenses', 41), (' Cost of product sold', 41), (' Personnel costs', 39), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 34), ('expenditure', 31), ('purchase of stock-in-trade', 29), ('expense', 29), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('cost of sales', 43), ('Cost of sales', 43), (' cost of coal sold', 43), (' Cost of product sold', 39), ('purchase of stock-in-trade', 36), (' Cost of goods and services sold', 36), (' Cost of inventory sold', 36), (' Personnel costs', 36), ('total expenses', 23), ('expenditure', 17), ('total expenditure', 13), ('expense', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('purchase of stock-in-trade', 38), (' Cost of inventory sold', 38), ('total expenditure', 37), (' Cost of goods and services sold', 34), (' Cost of product sold', 32), ('total expenses', 31), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 23), ('expense', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('total expenditure', 39), ('total expenses', 38), (' Cost of inventory sold', 37), (' cost of coal sold', 36), (' Cost of product sold', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 24), ('expense', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -138314663.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-138314663.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Cost of goods and services sold', 36), ('total expenses', 33), ('purchase of stock-in-trade', 32), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Personnel costs', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 27), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('expense', 57), ('total expenses', 44), (' Cost of inventory sold', 41), ('expenditure', 40), ('total expenditure', 32), (' Cost of goods and services sold', 30), (' Personnel costs', 28), (' cost of coal sold', 21), (' Cost of product sold', 19), ('purchase of stock-in-trade', 18), ('cost of sales', 17), ('Cost of sales', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Cost of goods and services sold', 43), (' Cost of inventory sold', 40), ('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenditure', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Cost of product sold', 41), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' Cost of goods and services sold', 35), (' Cost of inventory sold', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('total expenditure', 33), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 22), ('expense', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 33), (' Personnel costs', 32), (' Cost of goods and services sold', 29), (' Cost of inventory sold', 28), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), (' cost of coal sold', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 37), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' cost of coal sold', 32), ('total expenditure', 30), ('cost of sales', 30), ('Cost of sales', 30), ('total expenses', 28), (' Cost of inventory sold', 28), ('expenditure', 24), ('expense', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), ('total expenditure', 28), ('total expenses', 26), (' cost of coal sold', 26), (' Personnel costs', 26), ('cost of sales', 22), ('Cost of sales', 22), ('expenditure', 16), ('expense', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('total expenditure', 42), ('total expenses', 41), (' Cost of product sold', 41), (' Personnel costs', 39), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 34), ('expenditure', 31), ('purchase of stock-in-trade', 29), ('expense', 29), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('cost of sales', 43), ('Cost of sales', 43), (' cost of coal sold', 43), (' Cost of product sold', 39), ('purchase of stock-in-trade', 36), (' Cost of goods and services sold', 36), (' Cost of inventory sold', 36), (' Personnel costs', 36), ('total expenses', 23), ('expenditure', 17), ('total expenditure', 13), ('expense', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('purchase of stock-in-trade', 38), (' Cost of inventory sold', 38), ('total expenditure', 37), (' Cost of goods and services sold', 34), (' Cost of product sold', 32), ('total expenses', 31), (' cost of coal sold', 30), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 23), ('expense', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('total expenditure', 39), ('total expenses', 38), (' Cost of inventory sold', 37), (' cost of coal sold', 36), (' Cost of product sold', 34), ('purchase of stock-in-trade', 33), (' Cost of goods and services sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 24), ('expense', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -147518859.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-147518859.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Logistics and distribution', 39), (' Selling Expenses', 38), (' Marketing expenses', 36), (' Sales and marketing', 35), ('other expenses', 33), (' Other expenses', 33), (' Lease expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Administrative and other expenses', 32), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 28), (' Advertising expenses', 26), (' depreciation', 21), ('Distribution expenses', 21), (' Occupancy ', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' Advertising expenses', 80), (' Depreciation expenses', 76), (' Depreciation expenses', 76), ('Distribution expenses', 71), (' Administrative expenses', 65), (' Administration expenses', 65), (' Amortisation expenses', 62), (' Selling & distribution expenses', 61), (' Administrative and other expenses', 49), (' Lease expenses', 46), (' Selling Expenses', 46), ('other expenses', 44), (' Occupancy expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' depreciation', 36), (' Logistics and distribution', 34), (' Sales and marketing', 27), (' Occupancy ', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Depreciation expenses', 70), (' Depreciation expenses', 70), (' Amortisation expenses', 70), (' Advertising expenses', 59), (' Administrative and other expenses', 58), (' Administrative expenses', 57), (' Administration expenses', 57), ('Distribution expenses', 52), (' Selling & distribution expenses', 47), (' depreciation', 42), (' Logistics and distribution', 39), (' Sales and marketing', 39), ('other expenses', 32), (' Occupancy expenses', 32), (' Other expenses', 32), (' Lease expenses', 32), (' Selling Expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Occupancy ', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 39), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), ('Distribution expenses', 32), (' Management expenses', 30), (' Logistics and distribution', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' depreciation', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Logistics and distribution', 34), ('Distribution expenses', 33), ('other expenses', 31), (' Other expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' Administrative and other expenses', 30), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Advertising expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Occupancy expenses', 26), (' Lease expenses', 26), (' Management expenses', 26), (' depreciation', 24), (' Selling Expenses', 21), (' Occupancy ', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' Depreciation expenses', 53), (' Depreciation expenses', 53), (' Administrative and other expenses', 52), ('other expenses', 50), (' Administrative expenses', 50), (' Other expenses', 50), (' Administration expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Amortisation expenses', 42), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Lease expenses', 29), (' Marketing expenses', 27), (' Advertising expenses', 26), (' Sales and marketing', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Selling Expenses', 23), (' Management expenses', 22), (' depreciation', 19), (' Occupancy expenses', 17), (' Occupancy ', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Administrative and other expenses', 31), (' Logistics and distribution', 29), (' Selling & distribution expenses', 28), ('other expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Lease expenses', 24), (' Selling Expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Sales and marketing', 23), ('Distribution expenses', 22), (' Management expenses', 21), (' Advertising expenses', 20), (' Occupancy expenses', 18), (' depreciation', 17), (' Occupancy ', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Logistics and distribution', 38), ('Distribution expenses', 37), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Selling & distribution expenses', 33), (' Administrative and other expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Advertising expenses', 32), (' Sales and marketing', 32), (' Occupancy expenses', 29), (' depreciation', 28), (' Amortisation expenses', 28), (' Occupancy ', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Logistics and distribution', 35), (' Lease expenses', 32), (' Administrative and other expenses', 30), (' Amortisation expenses', 29), (' Advertising expenses', 28), (' Sales and marketing', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Selling & distribution expenses', 23), (' Management expenses', 23), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), ('Distribution expenses', 20), (' Occupancy ', 11), (' depreciation', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' Logistics and distribution', 42), (' Sales and marketing', 42), (' Administrative and other expenses', 37), (' Administrative expenses', 33), (' Selling & distribution expenses', 33), (' Administration expenses', 33), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Management expenses', 27), (' Marketing expenses', 26), (' Amortisation expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 15), (' Occupancy ', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' Administrative and other expenses', 39), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Sales and marketing', 32), (' Lease expenses', 31), (' Selling Expenses', 31), (' Marketing expenses', 30), (' Management expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Administrative expenses', 25), (' Depreciation expenses', 25), (' Administration expenses', 25), (' Advertising expenses', 25), (' Depreciation expenses', 25), ('Distribution expenses', 21), (' depreciation', 17), (' Occupancy ', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6], 'score': 100, 'value': -5120702.0, 'line_item_label': ['Delivery expenses', 'Other expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-4102173.0, -1018529.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Logistics and distribution', 39), (' Selling Expenses', 38), (' Marketing expenses', 36), (' Sales and marketing', 35), ('other expenses', 33), (' Other expenses', 33), (' Lease expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Administrative and other expenses', 32), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 28), (' Advertising expenses', 26), (' depreciation', 21), ('Distribution expenses', 21), (' Occupancy ', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' Advertising expenses', 80), (' Depreciation expenses', 76), (' Depreciation expenses', 76), ('Distribution expenses', 71), (' Administrative expenses', 65), (' Administration expenses', 65), (' Amortisation expenses', 62), (' Selling & distribution expenses', 61), (' Administrative and other expenses', 49), (' Lease expenses', 46), (' Selling Expenses', 46), ('other expenses', 44), (' Occupancy expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' depreciation', 36), (' Logistics and distribution', 34), (' Sales and marketing', 27), (' Occupancy ', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Depreciation expenses', 70), (' Depreciation expenses', 70), (' Amortisation expenses', 70), (' Advertising expenses', 59), (' Administrative and other expenses', 58), (' Administrative expenses', 57), (' Administration expenses', 57), ('Distribution expenses', 52), (' Selling & distribution expenses', 47), (' depreciation', 42), (' Logistics and distribution', 39), (' Sales and marketing', 39), ('other expenses', 32), (' Occupancy expenses', 32), (' Other expenses', 32), (' Lease expenses', 32), (' Selling Expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Occupancy ', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 39), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), ('Distribution expenses', 32), (' Management expenses', 30), (' Logistics and distribution', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' depreciation', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Logistics and distribution', 34), ('Distribution expenses', 33), ('other expenses', 31), (' Other expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' Administrative and other expenses', 30), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Advertising expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Occupancy expenses', 26), (' Lease expenses', 26), (' Management expenses', 26), (' depreciation', 24), (' Selling Expenses', 21), (' Occupancy ', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' Depreciation expenses', 53), (' Depreciation expenses', 53), (' Administrative and other expenses', 52), ('other expenses', 50), (' Administrative expenses', 50), (' Other expenses', 50), (' Administration expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Amortisation expenses', 42), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Selling & distribution expenses', 36), (' Administrative and other expenses', 36), ('Distribution expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Logistics and distribution', 32), (' Lease expenses', 29), (' Marketing expenses', 27), (' Advertising expenses', 26), (' Sales and marketing', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Selling Expenses', 23), (' Management expenses', 22), (' depreciation', 19), (' Occupancy expenses', 17), (' Occupancy ', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Administrative and other expenses', 31), (' Logistics and distribution', 29), (' Selling & distribution expenses', 28), ('other expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Administrative expenses', 25), (' Administration expenses', 25), (' Lease expenses', 24), (' Selling Expenses', 24), (' Marketing expenses', 23), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Sales and marketing', 23), ('Distribution expenses', 22), (' Management expenses', 21), (' Advertising expenses', 20), (' Occupancy expenses', 18), (' depreciation', 17), (' Occupancy ', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Logistics and distribution', 38), ('Distribution expenses', 37), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Selling & distribution expenses', 33), (' Administrative and other expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Advertising expenses', 32), (' Sales and marketing', 32), (' Occupancy expenses', 29), (' depreciation', 28), (' Amortisation expenses', 28), (' Occupancy ', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Logistics and distribution', 35), (' Lease expenses', 32), (' Administrative and other expenses', 30), (' Amortisation expenses', 29), (' Advertising expenses', 28), (' Sales and marketing', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Selling & distribution expenses', 23), (' Management expenses', 23), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), ('Distribution expenses', 20), (' Occupancy ', 11), (' depreciation', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' Logistics and distribution', 42), (' Sales and marketing', 42), (' Administrative and other expenses', 37), (' Administrative expenses', 33), (' Selling & distribution expenses', 33), (' Administration expenses', 33), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Management expenses', 27), (' Marketing expenses', 26), (' Amortisation expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 15), (' Occupancy ', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' Administrative and other expenses', 39), ('other expenses', 38), (' Other expenses', 38), (' Other expenses', 38), (' Sales and marketing', 32), (' Lease expenses', 31), (' Selling Expenses', 31), (' Marketing expenses', 30), (' Management expenses', 30), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Administrative expenses', 25), (' Depreciation expenses', 25), (' Administration expenses', 25), (' Advertising expenses', 25), (' Depreciation expenses', 25), ('Distribution expenses', 21), (' depreciation', 17), (' Occupancy ', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6], 'score': 100, 'value': -4728706.0, 'line_item_label': ['Delivery expenses', 'Other expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-3782163.0, -946543.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 30), (' Occupancy expenses', 28), ('Rent', 23), (' Occupancy', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' Administration expenses', 65), (' Occupancy expenses', 44), (' Rental expenses', 43), ('Rent', 32), (' Occupancy', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Administration expenses', 57), (' Occupancy expenses', 32), (' Rental expenses', 31), ('Rent', 20), (' Occupancy', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 28), (' Occupancy expenses', 26), ('Rent', 19), (' Occupancy', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 50), (' Occupancy expenses', 44), ('Rent', 21), (' Occupancy', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 17), ('Rent', 14), (' Occupancy', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 26), (' Administration expenses', 25), (' Occupancy expenses', 18), ('Rent', 12), (' Occupancy', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' Rental expenses', 40), (' Administration expenses', 32), (' Occupancy expenses', 29), ('Rent', 23), (' Occupancy', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' Rental expenses', 39), (' Administration expenses', 33), ('Rent', 22), (' Occupancy expenses', 22), (' Occupancy', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' Rental expenses', 37), (' Occupancy expenses', 26), (' Administration expenses', 25), ('Rent', 18), (' Occupancy', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 30), (' Occupancy expenses', 28), ('Rent', 23), (' Occupancy', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' Administration expenses', 65), (' Occupancy expenses', 44), (' Rental expenses', 43), ('Rent', 32), (' Occupancy', 10)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Administration expenses', 57), (' Occupancy expenses', 32), (' Rental expenses', 31), ('Rent', 20), (' Occupancy', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 28), (' Occupancy expenses', 26), ('Rent', 19), (' Occupancy', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 50), (' Occupancy expenses', 44), ('Rent', 21), (' Occupancy', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 25), (' Occupancy expenses', 17), ('Rent', 14), (' Occupancy', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 26), (' Administration expenses', 25), (' Occupancy expenses', 18), ('Rent', 12), (' Occupancy', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' Rental expenses', 40), (' Administration expenses', 32), (' Occupancy expenses', 29), ('Rent', 23), (' Occupancy', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' Rental expenses', 39), (' Administration expenses', 33), ('Rent', 22), (' Occupancy expenses', 22), (' Occupancy', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' Rental expenses', 37), (' Occupancy expenses', 26), (' Administration expenses', 25), ('Rent', 18), (' Occupancy', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Other income', 33), ('Other revenue', 28), ('other operating', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('Other revenue', 44), ('other operating', 32), (' Other income', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('Other revenue', 42), ('other operating', 28), (' Other income', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Other income', 42), ('other operating', 27), ('Other revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Other income', 29), ('other operating', 24), ('Other revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('Other revenue', 35), ('other operating', 31), (' Other income', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' Other income', 40), ('other operating', 33), ('Other revenue', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('Other revenue', 36), ('other operating', 23), (' Other income', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('other operating', 39), (' Other income', 38), ('Other revenue', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Other income', 33), ('Other revenue', 28), ('other operating', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('Other revenue', 44), ('other operating', 32), (' Other income', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('Other revenue', 42), ('other operating', 28), (' Other income', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' Other income', 42), ('other operating', 27), ('Other revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other operating', 47), (' Other income', 40), ('Other revenue', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Other income', 29), ('other operating', 24), ('Other revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('Other revenue', 35), ('other operating', 31), (' Other income', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' Other income', 40), ('other operating', 33), ('Other revenue', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('Other revenue', 36), ('other operating', 23), (' Other income', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('other operating', 39), (' Other income', 38), ('Other revenue', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Net finance costs', 48), (' Finance income and costs', 46), (' Finance income and finance costs', 44), ('finance income', 42), ('Finance income', 42), ('other income', 33), (' Interest revenue', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' Interest revenue', 47), ('other income', 23), (' Finance income and finance costs', 23), ('finance income', 22), ('Finance income', 22), (' Finance income and costs', 22), (' Net finance costs', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), ('other income', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), ('finance income', 36), ('Finance income', 36), (' Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('finance income', 50), ('Finance income', 50), (' Finance income and costs', 44), (' Finance income and finance costs', 42), ('other income', 40), (' Interest revenue', 36), (' Net finance costs', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), (' Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17), ('Finance income', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 33), ('other income', 29), (' Finance income and costs', 28), (' Net finance costs', 28), (' Interest revenue', 23), ('finance income', 18), ('Finance income', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' Interest revenue', 38), (' Net finance costs', 32), (' Finance income and costs', 28), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' Net finance costs', 41), ('other income', 40), (' Finance income and costs', 29), (' Finance income and finance costs', 24), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' Finance income and costs', 41), (' Finance income and finance costs', 39), (' Interest revenue', 38), (' Net finance costs', 38), ('finance income', 27), ('Finance income', 27), ('other income', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 35), (' Finance income and finance costs', 32), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 10], 'score': 100, 'value': -3372216.0, 'line_item_label': ['Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [425632.0, -2111740.0, -1686108.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' Net finance costs', 48), (' Finance income and costs', 46), (' Finance income and finance costs', 44), ('finance income', 42), ('Finance income', 42), ('other income', 33), (' Interest revenue', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' Interest revenue', 47), ('other income', 23), (' Finance income and finance costs', 23), ('finance income', 22), ('Finance income', 22), (' Finance income and costs', 22), (' Net finance costs', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), ('other income', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('other income', 42), (' Net finance costs', 38), ('finance income', 36), ('Finance income', 36), (' Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('finance income', 50), ('Finance income', 50), (' Finance income and costs', 44), (' Finance income and finance costs', 42), ('other income', 40), (' Interest revenue', 36), (' Net finance costs', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('other income', 40), (' Net finance costs', 36), (' Finance income and costs', 31), (' Interest revenue', 31), (' Finance income and finance costs', 31), ('finance income', 17), ('Finance income', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 33), ('other income', 29), (' Finance income and costs', 28), (' Net finance costs', 28), (' Interest revenue', 23), ('finance income', 18), ('Finance income', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' Interest revenue', 38), (' Net finance costs', 32), (' Finance income and costs', 28), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' Net finance costs', 41), ('other income', 40), (' Finance income and costs', 29), (' Finance income and finance costs', 24), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' Finance income and costs', 41), (' Finance income and finance costs', 39), (' Interest revenue', 38), (' Net finance costs', 38), ('finance income', 27), ('Finance income', 27), ('other income', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' Net finance costs', 39), ('other income', 38), (' Finance income and costs', 35), (' Finance income and finance costs', 32), ('finance income', 26), ('Finance income', 26), (' Interest revenue', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 10], 'score': 100, 'value': -4646576.0, 'line_item_label': ['Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [236082.0, -2559370.0, -2323288.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Sublease interest income', 100), (' Interest income', 100), (' Interest received - Bank', 71), (' Interest received - Loan', 71), (' Share of JV interest received/(paid)', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 71), ('Bank interest', 62), (' Bank Deposits - cash and cash equivalents', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance income , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 100), (' Interest income', 50), (' Sublease interest income', 50), (' Interest income', 50), ('Bank interest', 42), (' Interest received - Bank', 33), (' Interest received - Loan', 33), (' Bank Deposits - cash and cash equivalents', 33), ('interest', 25), (' Share of JV interest received/(paid)', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = unwinding of discount and changes in discount rate , res_fuzz_match = [('interest', 50), ('Bank interest', 46), (' Bank Deposits - cash and cash equivalents', 44), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 44), (' Interest income', 43), (' Interest income', 43), (' Sublease interest income', 41), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Share of JV interest received/(paid)', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 82), (' Bank Deposits - cash and cash equivalents', 45), ('interest', 38), (' Interest income', 38), (' Sublease interest income', 38), (' Interest income', 38), ('Bank interest', 36), (' Interest received - Bank', 36), (' Interest received - Loan', 36), (' Share of JV interest received/(paid)', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net finance costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 55), (' Bank Deposits - cash and cash equivalents', 47), (' Interest received - Bank', 40), (' Interest received - Loan', 40), (' Share of JV interest received/(paid)', 40), ('interest', 38), ('Bank interest', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Sublease interest income', 100), (' Interest income', 100), (' Interest received - Bank', 71), (' Interest received - Loan', 71), (' Share of JV interest received/(paid)', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 71), ('Bank interest', 62), (' Bank Deposits - cash and cash equivalents', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance income , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 100), (' Interest income', 50), (' Sublease interest income', 50), (' Interest income', 50), ('Bank interest', 42), (' Interest received - Bank', 33), (' Interest received - Loan', 33), (' Bank Deposits - cash and cash equivalents', 33), ('interest', 25), (' Share of JV interest received/(paid)', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = unwinding of discount and changes in discount rate , res_fuzz_match = [('interest', 50), ('Bank interest', 46), (' Bank Deposits - cash and cash equivalents', 44), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 44), (' Interest income', 43), (' Interest income', 43), (' Sublease interest income', 41), (' Interest received - Bank', 35), (' Interest received - Loan', 35), (' Share of JV interest received/(paid)', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 82), (' Bank Deposits - cash and cash equivalents', 45), ('interest', 38), (' Interest income', 38), (' Sublease interest income', 38), (' Interest income', 38), ('Bank interest', 36), (' Interest received - Bank', 36), (' Interest received - Loan', 36), (' Share of JV interest received/(paid)', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net finance costs , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 55), (' Bank Deposits - cash and cash equivalents', 47), (' Interest received - Bank', 40), (' Interest received - Loan', 40), (' Share of JV interest received/(paid)', 40), ('interest', 38), ('Bank interest', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 5, 6, 8], 'score': [100, 100, 82, 100, 100, 82], 'value': [236082.0, 236082.0, 2559370.0, 425632.0, 425632.0, 2111740.0], 'label': [' Interest income', ' Finance income', ' Finance costs', ' Interest income', ' Finance income', ' Finance costs'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' net finance costs ', 48), (' finance expenses', 41), ('finance cost', 33), ('finance costs', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 20), ('finance cost', 15), ('finance costs', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 36), ('finance cost', 29), ('finance costs', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 28), (' finance expenses', 23), ('finance cost', 21), ('finance costs', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 31), ('finance costs', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': -3797848.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '5'], 'line_item_value': [-2111740.0, -1686108.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' net finance costs ', 48), (' finance expenses', 41), ('finance cost', 33), ('finance costs', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 20), ('finance cost', 15), ('finance costs', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 36), ('finance cost', 29), ('finance costs', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 28), (' finance expenses', 23), ('finance cost', 21), ('finance costs', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 31), ('finance costs', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': -4882658.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '5'], 'line_item_value': [-2559370.0, -2323288.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), ('Interest expenses', 71), ('  Other interest expense', 71), (' Interest on bank overdrafts and loans (other than those from related parties)', 71), (' Interest accrued on loans', 71), (' Interest accrued on lease liabilities', 71), (' Lease interest expense', 71), (' Interest expense on financial liabilities using the effective interest rate method - other', 71), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 71), (' Lease liabilities interest expense', 71), (' Interest on leases', 69), ('debt', 50), (' Discount unwind on the provision for asset retirement obligation', 43), ('debenture', 38), ('cash credit', 29), ('loan', 25), ('bonds', 25), ('bank facilities', 20), ('borrowings', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance income , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other', 67), ('loan', 50), (' Interest income', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), (' Interest accrued on loans', 42), (' Interest accrued on lease liabilities', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease liabilities interest expense', 42), ('bank facilities', 40), (' Discount unwind on the provision for asset retirement obligation', 33), ('cash credit', 27), ('bonds', 25), ('interest', 25), ('Interest expenses', 25), ('  Other interest expense', 25), (' Interest on leases', 25), (' Lease interest expense', 25), ('borrowings', 17), ('debenture', 12), ('debt', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = unwinding of discount and changes in discount rate , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 54), ('loan', 50), ('bonds', 50), ('interest', 50), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), ('cash credit', 45), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Interest income', 43), (' Interest accrued on loans', 42), ('bank facilities', 40), ('Interest expenses', 40), (' Lease interest expense', 40), ('debenture', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Lease liabilities interest expense', 37), ('debt', 25), ('borrowings', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other', 64), ('loan', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 45), ('bank facilities', 42), ('interest', 38), (' Interest income', 38), ('cash credit', 36), ('Interest expenses', 36), (' Discount unwind on the provision for asset retirement obligation', 36), ('  Other interest expense', 36), (' Interest on leases', 36), (' Interest accrued on loans', 36), (' Interest accrued on lease liabilities', 36), (' Lease interest expense', 36), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 36), (' Lease liabilities interest expense', 36), ('debt', 25), ('debenture', 25), ('bonds', 25), ('borrowings', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net finance costs , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other', 60), (' Interest income', 57), (' Interest on bank overdrafts and loans (other than those from related parties)', 53), ('loan', 50), ('debt', 50), ('bank facilities', 50), (' Discount unwind on the provision for asset retirement obligation', 47), (' Interest accrued on loans', 47), (' Interest accrued on lease liabilities', 47), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 47), ('Interest expenses', 40), ('  Other interest expense', 40), (' Lease interest expense', 40), (' Lease liabilities interest expense', 40), ('interest', 38), (' Interest on leases', 38), ('cash credit', 36), ('debenture', 25), ('bonds', 25), ('borrowings', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = interest income , res_fuzz_match = [('interest', 100), (' Interest income', 100), ('Interest expenses', 71), ('  Other interest expense', 71), (' Interest on bank overdrafts and loans (other than those from related parties)', 71), (' Interest accrued on loans', 71), (' Interest accrued on lease liabilities', 71), (' Lease interest expense', 71), (' Interest expense on financial liabilities using the effective interest rate method - other', 71), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 71), (' Lease liabilities interest expense', 71), (' Interest on leases', 69), ('debt', 50), (' Discount unwind on the provision for asset retirement obligation', 43), ('debenture', 38), ('cash credit', 29), ('loan', 25), ('bonds', 25), ('bank facilities', 20), ('borrowings', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance income , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other', 67), ('loan', 50), (' Interest income', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), (' Interest accrued on loans', 42), (' Interest accrued on lease liabilities', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease liabilities interest expense', 42), ('bank facilities', 40), (' Discount unwind on the provision for asset retirement obligation', 33), ('cash credit', 27), ('bonds', 25), ('interest', 25), ('Interest expenses', 25), ('  Other interest expense', 25), (' Interest on leases', 25), (' Lease interest expense', 25), ('borrowings', 17), ('debenture', 12), ('debt', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = unwinding of discount and changes in discount rate , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 54), ('loan', 50), ('bonds', 50), ('interest', 50), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), ('cash credit', 45), (' Interest expense on financial liabilities using the effective interest rate method - other', 44), (' Interest income', 43), (' Interest accrued on loans', 42), ('bank facilities', 40), ('Interest expenses', 40), (' Lease interest expense', 40), ('debenture', 38), ('  Other interest expense', 38), (' Interest accrued on lease liabilities', 38), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 38), (' Lease liabilities interest expense', 37), ('debt', 25), ('borrowings', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other', 64), ('loan', 50), (' Interest on bank overdrafts and loans (other than those from related parties)', 45), ('bank facilities', 42), ('interest', 38), (' Interest income', 38), ('cash credit', 36), ('Interest expenses', 36), (' Discount unwind on the provision for asset retirement obligation', 36), ('  Other interest expense', 36), (' Interest on leases', 36), (' Interest accrued on loans', 36), (' Interest accrued on lease liabilities', 36), (' Lease interest expense', 36), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 36), (' Lease liabilities interest expense', 36), ('debt', 25), ('debenture', 25), ('bonds', 25), ('borrowings', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net finance costs , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other', 60), (' Interest income', 57), (' Interest on bank overdrafts and loans (other than those from related parties)', 53), ('loan', 50), ('debt', 50), ('bank facilities', 50), (' Discount unwind on the provision for asset retirement obligation', 47), (' Interest accrued on loans', 47), (' Interest accrued on lease liabilities', 47), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 47), ('Interest expenses', 40), ('  Other interest expense', 40), (' Lease interest expense', 40), (' Lease liabilities interest expense', 40), ('interest', 38), (' Interest on leases', 38), ('cash credit', 36), ('debenture', 25), ('bonds', 25), ('borrowings', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5], 'score': [100, 100], 'value': [236082.0, 425632.0], 'label': [' Interest income', ' Interest income'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' net finance costs ', 48), (' finance expenses', 41), ('finance cost', 33), ('finance costs', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 20), ('finance cost', 15), ('finance costs', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 36), ('finance cost', 29), ('finance costs', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 28), (' finance expenses', 23), ('finance cost', 21), ('finance costs', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 31), ('finance costs', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': -3797848.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '5'], 'line_item_value': [-2111740.0, -1686108.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' net finance costs ', 48), (' finance expenses', 41), ('finance cost', 33), ('finance costs', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 20), ('finance cost', 15), ('finance costs', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 36), ('finance cost', 29), ('finance costs', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 28), (' finance expenses', 23), ('finance cost', 21), ('finance costs', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [(' net finance costs ', 39), (' finance expenses', 33), ('finance cost', 31), ('finance costs', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': -4882658.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '5'], 'line_item_value': [-2559370.0, -2323288.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = interest income , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' margin charge income', 64), (' quota lease income', 64), (' other', 60), (' sundry income', 58), (' profit from discontinued operation', 50), (' secondment income (tw recovery)', 50), (' net foreign exchange gain', 43), (' effective portion of changes in fair value of cash flow', 43), (' net of tax', 43), (' net foreign exchange gains/(losses)', 43), (' paid by customers - at amortised cost', 43), (' net foreign exchange (loss)/gain', 43), (' net ppe disposal (loss)/gain', 43), (' other miscellaneous - net (loss)/gain', 43), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), (' insurance proceeds', 36), (' foreign exchange gain', 36), (' dividend from other parties', 36), (' japan recoveries', 36), (' net (loss)/profit on disposal of non-current assets', 36), ('  government grants', 33), (' commission revenue', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance income , res_fuzz_match = [(' share of jv income', 64), (' secondment income (tw recovery)', 58), (' margin charge income', 58), (' quota lease income', 58), (' sundry income', 58), (' other income', 55), (' net foreign exchange gains/(losses)', 50), (' foreign exchange gain', 43), (' net foreign exchange gain', 43), (' dividend from other parties', 42), (' effective portion of changes in fair value of cash flow', 42), (' profit from discontinued operation', 42), (' japan recoveries', 42), (' paid by customers - at amortised cost', 42), (' net foreign exchange (loss)/gain', 42), (' other miscellaneous - net (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' net other foreign exchange (losses)/gains', 42), (' insurance proceeds', 36), (' net of tax', 29), (' commission revenue', 25), ('  government grants', 25), (' net ppe disposal (loss)/gain', 25), (' other', 20), ('other revenue', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = unwinding of discount and changes in discount rate , res_fuzz_match = [(' margin charge income', 61), (' net of tax', 57), (' share of jv income', 55), ('  government grants', 50), (' foreign exchange gain', 50), (' net foreign exchange gain', 50), (' sundry income', 50), (' profit from discontinued operation', 48), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other income', 45), (' quota lease income', 44), (' secondment income (tw recovery)', 43), ('other revenue', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' other', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' effective portion of changes in fair value of cash flow', 38), (' other miscellaneous - net (loss)/gain', 38), (' commission revenue', 36), (' dividend from other parties', 36), (' japan recoveries', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [(' secondment income (tw recovery)', 55), (' paid by customers - at amortised cost', 55), (' foreign exchange gain', 45), (' net foreign exchange gain', 45), (' effective portion of changes in fair value of cash flow', 45), (' japan recoveries', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' other miscellaneous - net (loss)/gain', 45), (' net (loss)/profit on disposal of non-current assets', 45), (' net other foreign exchange (losses)/gains', 45), (' net of tax', 43), (' other', 40), (' insurance proceeds', 38), (' share of jv income', 38), (' margin charge income', 38), (' quota lease income', 38), (' sundry income', 38), ('  government grants', 36), (' dividend from other parties', 36), (' other income', 36), (' profit from discontinued operation', 36), (' net ppe disposal (loss)/gain', 36), (' commission revenue', 18), ('other revenue', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net finance costs , res_fuzz_match = [(' net foreign exchange gain', 60), (' net foreign exchange gains/(losses)', 60), (' net foreign exchange (loss)/gain', 60), (' net of tax', 57), (' secondment income (tw recovery)', 53), (' effective portion of changes in fair value of cash flow', 47), (' paid by customers - at amortised cost', 47), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' net other foreign exchange (losses)/gains', 47), (' other income', 45), (' share of jv income', 45), (' sundry income', 42), (' margin charge income', 41), (' quota lease income', 41), (' foreign exchange gain', 40), (' other', 40), (' dividend from other parties', 40), (' profit from discontinued operation', 40), (' other miscellaneous - net (loss)/gain', 40), (' insurance proceeds', 38), (' japan recoveries', 36), ('  government grants', 33), ('other revenue', 25), (' commission revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = interest income , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' margin charge income', 64), (' quota lease income', 64), (' other', 60), (' sundry income', 58), (' profit from discontinued operation', 50), (' secondment income (tw recovery)', 50), (' net foreign exchange gain', 43), (' effective portion of changes in fair value of cash flow', 43), (' net of tax', 43), (' net foreign exchange gains/(losses)', 43), (' paid by customers - at amortised cost', 43), (' net foreign exchange (loss)/gain', 43), (' net ppe disposal (loss)/gain', 43), (' other miscellaneous - net (loss)/gain', 43), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), (' insurance proceeds', 36), (' foreign exchange gain', 36), (' dividend from other parties', 36), (' japan recoveries', 36), (' net (loss)/profit on disposal of non-current assets', 36), ('  government grants', 33), (' commission revenue', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance income , res_fuzz_match = [(' share of jv income', 64), (' secondment income (tw recovery)', 58), (' margin charge income', 58), (' quota lease income', 58), (' sundry income', 58), (' other income', 55), (' net foreign exchange gains/(losses)', 50), (' foreign exchange gain', 43), (' net foreign exchange gain', 43), (' dividend from other parties', 42), (' effective portion of changes in fair value of cash flow', 42), (' profit from discontinued operation', 42), (' japan recoveries', 42), (' paid by customers - at amortised cost', 42), (' net foreign exchange (loss)/gain', 42), (' other miscellaneous - net (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' net other foreign exchange (losses)/gains', 42), (' insurance proceeds', 36), (' net of tax', 29), (' commission revenue', 25), ('  government grants', 25), (' net ppe disposal (loss)/gain', 25), (' other', 20), ('other revenue', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = unwinding of discount and changes in discount rate , res_fuzz_match = [(' margin charge income', 61), (' net of tax', 57), (' share of jv income', 55), ('  government grants', 50), (' foreign exchange gain', 50), (' net foreign exchange gain', 50), (' sundry income', 50), (' profit from discontinued operation', 48), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other income', 45), (' quota lease income', 44), (' secondment income (tw recovery)', 43), ('other revenue', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' other', 40), (' net (loss)/profit on disposal of non-current assets', 39), (' effective portion of changes in fair value of cash flow', 38), (' other miscellaneous - net (loss)/gain', 38), (' commission revenue', 36), (' dividend from other parties', 36), (' japan recoveries', 36)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = finance costs , res_fuzz_match = [(' secondment income (tw recovery)', 55), (' paid by customers - at amortised cost', 55), (' foreign exchange gain', 45), (' net foreign exchange gain', 45), (' effective portion of changes in fair value of cash flow', 45), (' japan recoveries', 45), (' net foreign exchange gains/(losses)', 45), (' net foreign exchange (loss)/gain', 45), (' other miscellaneous - net (loss)/gain', 45), (' net (loss)/profit on disposal of non-current assets', 45), (' net other foreign exchange (losses)/gains', 45), (' net of tax', 43), (' other', 40), (' insurance proceeds', 38), (' share of jv income', 38), (' margin charge income', 38), (' quota lease income', 38), (' sundry income', 38), ('  government grants', 36), (' dividend from other parties', 36), (' other income', 36), (' profit from discontinued operation', 36), (' net ppe disposal (loss)/gain', 36), (' commission revenue', 18), ('other revenue', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = net finance costs , res_fuzz_match = [(' net foreign exchange gain', 60), (' net foreign exchange gains/(losses)', 60), (' net foreign exchange (loss)/gain', 60), (' net of tax', 57), (' secondment income (tw recovery)', 53), (' effective portion of changes in fair value of cash flow', 47), (' paid by customers - at amortised cost', 47), (' net ppe disposal (loss)/gain', 47), (' net (loss)/profit on disposal of non-current assets', 47), (' net other foreign exchange (losses)/gains', 47), (' other income', 45), (' share of jv income', 45), (' sundry income', 42), (' margin charge income', 41), (' quota lease income', 41), (' foreign exchange gain', 40), (' other', 40), (' dividend from other parties', 40), (' profit from discontinued operation', 40), (' other miscellaneous - net (loss)/gain', 40), (' insurance proceeds', 38), (' japan recoveries', 36), ('  government grants', 33), ('other revenue', 25), (' commission revenue', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('NULL', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('NULL', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('NULL', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('NULL', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 50), (' income tax benefit/(expense)', 47), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), (' tax (expense)/benefit', 37), (' income tax', 35), ('provision for taxation previous year', 33), ('earlier year', 33), ('current tax', 29), ('deferred tax', 25), ('prior year ', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' tax (expense)/benefit', 61), ('earlier year', 52), (' income tax benefit/(expense)', 51), ('deferred tax', 50), (' income tax expense', 39), ('provision for taxation previous year', 32), ('prior year ', 32), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 30), ('amount transferred to retained earnings', 29), (' income tax', 25), ('current tax', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('amount transferred to retained earnings', 53), (' tax (expense)/benefit', 45), (' income tax benefit/(expense)', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('prior year ', 28), (' income tax benefit', 28), ('current tax', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' income tax benefit', 59), ('provision for taxation previous year', 54), (' income tax expense', 51), (' income tax benefit/(expense)', 51), (' income tax', 50), (' tax (expense)/benefit', 44), ('minimum alternate tax credit entitlement', 41), ('deferred tax', 39), ('current tax', 37), ('amount transferred to retained earnings', 33), ('prior year ', 32), ('earlier year', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' income tax benefit/(expense)', 100), (' tax (expense)/benefit', 86), (' income tax benefit', 83), (' income tax expense', 80), ('minimum alternate tax credit entitlement', 57), (' income tax', 55), ('amount transferred to retained earnings', 43), ('deferred tax', 42), ('current tax', 40), ('provision for taxation previous year', 38), ('prior year ', 29), ('earlier year', 28)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('provision for taxation previous year', 37), ('minimum alternate tax credit entitlement', 33), ('amount transferred to retained earnings', 33), (' income tax expense', 32), (' income tax benefit/(expense)', 30), (' tax (expense)/benefit', 29), (' income tax benefit', 27), ('prior year ', 22), (' income tax', 22), ('current tax', 21), ('earlier year', 18), ('deferred tax', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax expense', 47), ('deferred tax', 45), ('minimum alternate tax credit entitlement', 44), ('prior year ', 44), ('provision for taxation previous year', 43), ('amount transferred to retained earnings', 41), (' income tax', 39), ('current tax', 36), ('earlier year', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('earlier year', 31), (' income tax expense', 27), (' income tax', 26), ('prior year ', 25), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), ('amount transferred to retained earnings', 20), ('provision for taxation previous year', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('current tax', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('minimum alternate tax credit entitlement', 46), ('current tax', 41), ('amount transferred to retained earnings', 40), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('provision for taxation previous year', 35), (' tax (expense)/benefit', 35), ('earlier year', 31), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 24), ('prior year ', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 46), (' income tax expense', 46), (' income tax benefit', 41), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 35), ('prior year ', 35), ('earlier year', 34), ('minimum alternate tax credit entitlement', 33), (' income tax', 32), ('current tax', 31), (' tax (expense)/benefit', 31), ('deferred tax', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1905387.0, 'line_item_label': ['Income tax (expense) )/benefit'], 'note_numbers': ['6'], 'line_item_value': [1905387.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [(' income tax expense', 51), (' income tax benefit', 50), (' income tax benefit/(expense)', 47), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), (' tax (expense)/benefit', 37), (' income tax', 35), ('provision for taxation previous year', 33), ('earlier year', 33), ('current tax', 29), ('deferred tax', 25), ('prior year ', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [(' tax (expense)/benefit', 61), ('earlier year', 52), (' income tax benefit/(expense)', 51), ('deferred tax', 50), (' income tax expense', 39), ('provision for taxation previous year', 32), ('prior year ', 32), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 30), ('amount transferred to retained earnings', 29), (' income tax', 25), ('current tax', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('amount transferred to retained earnings', 53), (' tax (expense)/benefit', 45), (' income tax benefit/(expense)', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('prior year ', 28), (' income tax benefit', 28), ('current tax', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [(' income tax benefit', 59), ('provision for taxation previous year', 54), (' income tax expense', 51), (' income tax benefit/(expense)', 51), (' income tax', 50), (' tax (expense)/benefit', 44), ('minimum alternate tax credit entitlement', 41), ('deferred tax', 39), ('current tax', 37), ('amount transferred to retained earnings', 33), ('prior year ', 32), ('earlier year', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [(' income tax benefit/(expense)', 100), (' tax (expense)/benefit', 86), (' income tax benefit', 83), (' income tax expense', 80), ('minimum alternate tax credit entitlement', 57), (' income tax', 55), ('amount transferred to retained earnings', 43), ('deferred tax', 42), ('current tax', 40), ('provision for taxation previous year', 38), ('prior year ', 29), ('earlier year', 28)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 64), ('earlier year', 50), ('prior year ', 47), ('amount transferred to retained earnings', 35), ('current tax', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), ('deferred tax', 30), (' income tax expense', 30), (' income tax benefit', 29), (' income tax', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('provision for taxation previous year', 37), ('minimum alternate tax credit entitlement', 33), ('amount transferred to retained earnings', 33), (' income tax expense', 32), (' income tax benefit/(expense)', 30), (' tax (expense)/benefit', 29), (' income tax benefit', 27), ('prior year ', 22), (' income tax', 22), ('current tax', 21), ('earlier year', 18), ('deferred tax', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax expense', 47), ('deferred tax', 45), ('minimum alternate tax credit entitlement', 44), ('prior year ', 44), ('provision for taxation previous year', 43), ('amount transferred to retained earnings', 41), (' income tax', 39), ('current tax', 36), ('earlier year', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('earlier year', 31), (' income tax expense', 27), (' income tax', 26), ('prior year ', 25), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), ('amount transferred to retained earnings', 20), ('provision for taxation previous year', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('current tax', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('minimum alternate tax credit entitlement', 46), ('current tax', 41), ('amount transferred to retained earnings', 40), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('provision for taxation previous year', 35), (' tax (expense)/benefit', 35), ('earlier year', 31), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 24), ('prior year ', 23)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('provision for taxation previous year', 46), (' income tax expense', 46), (' income tax benefit', 41), (' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 35), ('prior year ', 35), ('earlier year', 34), ('minimum alternate tax credit entitlement', 33), (' income tax', 32), ('current tax', 31), (' tax (expense)/benefit', 31), ('deferred tax', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': -1322253.0, 'line_item_label': ['Income tax (expense) )/benefit'], 'note_numbers': ['6'], 'line_item_value': [-1322253.0]}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = profit/loss before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), ('income tax expense', 56), (' total tax (expense)/benefit in income statement', 56), (' total income tax expense / (benefit)', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 34)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = income tax using the group's statutory income tax rate of30% (2020: 30%) , res_fuzz_match = [(' deferred income tax', 73), (' current income tax', 71), ('income tax expense', 69), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' total tax (expense)/benefit in income statement', 48)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = permanent differences , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' current income tax', 31), (' deferred income tax', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under accrual , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35), (' income tax expense on continuing operations', 35), (' total tax (expense)/benefit in income statement', 34), (' total income tax expense / (benefit)', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = profit/loss before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), ('income tax expense', 56), (' total tax (expense)/benefit in income statement', 56), (' total income tax expense / (benefit)', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 34)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = income tax using the group's statutory income tax rate of30% (2020: 30%) , res_fuzz_match = [(' deferred income tax', 73), (' current income tax', 71), ('income tax expense', 69), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' total tax (expense)/benefit in income statement', 48)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = permanent differences , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), ('income tax expense', 31), (' current income tax', 31), (' deferred income tax', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = prior year (over)/under accrual , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35), (' income tax expense on continuing operations', 35), (' total tax (expense)/benefit in income statement', 34), (' total income tax expense / (benefit)', 31)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 6], 'score': [87, 87], 'value': [4195989.0, -7513492.0], 'label': [' Profit/loss before income tax', ' Profit/loss before income tax'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' current income tax', 29), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 29), ('income tax expense', 14), (' deferred income tax', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = tax (expenseyincome during the period recognised in profit or loss tax (expenseyincome during the period recognised in profit or loss tax (expenseyincome during the period recognised in profit or loss tax (expenseyincome during the period recognised in profit or loss tax (expenseyincome during the period recognised in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 60), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' current income tax', 47)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = tax (expense)/income during the period recognised in oci tax (expense)/income during the period recognised in oci tax (expense)/income during the period recognised in oci tax (expense)/income during the period recognised in oci , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = as at31 december , res_fuzz_match = [('income tax expense', 44), (' current income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' deferred income tax', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' current income tax', 29), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 29), ('income tax expense', 14), (' deferred income tax', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = tax (expenseyincome during the period recognised in profit or loss tax (expenseyincome during the period recognised in profit or loss tax (expenseyincome during the period recognised in profit or loss tax (expenseyincome during the period recognised in profit or loss tax (expenseyincome during the period recognised in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 60), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' current income tax', 47)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = tax (expense)/income during the period recognised in oci tax (expense)/income during the period recognised in oci tax (expense)/income during the period recognised in oci tax (expense)/income during the period recognised in oci , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = as at31 december , res_fuzz_match = [('income tax expense', 44), (' current income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' deferred income tax', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = intangible , res_fuzz_match = [(' current income tax', 50), (' deferred income tax', 36), ('income tax expense', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provision , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = revaluations of financial assets at fair value through oci , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 43), (' current income tax', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value through oci , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value other , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value deferred tax expense/(benefit) , res_fuzz_match = [(' total income tax expense / (benefit)', 73), ('income tax expense', 69), (' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 55), (' income tax expense on continuing operations', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value net deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = financial position as follow: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = financial position as follow: deferred tax liabilities, net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 34)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = intangible , res_fuzz_match = [(' current income tax', 50), (' deferred income tax', 36), ('income tax expense', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provision , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = revaluations of financial assets at fair value through oci , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 43), (' current income tax', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value through oci , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value other , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value deferred tax expense/(benefit) , res_fuzz_match = [(' total income tax expense / (benefit)', 73), ('income tax expense', 69), (' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 55), (' income tax expense on continuing operations', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value net deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = financial position as follow: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = financial position as follow: deferred tax liabilities, net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 34)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of financial position , res_fuzz_match = [(' current income tax', 53), ('income tax expense', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = intangible , res_fuzz_match = [(' current income tax', 50), (' deferred income tax', 36), ('income tax expense', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provision , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = revaluations of financial assets at fair value through oci , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 43), (' current income tax', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value through oci , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value other , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value deferred tax expense/(benefit) , res_fuzz_match = [(' total income tax expense / (benefit)', 73), ('income tax expense', 69), (' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 55), (' income tax expense on continuing operations', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value net deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = financial position as follow: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = financial position as follow: deferred tax liabilities, net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 34)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = intangible , res_fuzz_match = [(' current income tax', 50), (' deferred income tax', 36), ('income tax expense', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = provision , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = revaluations of financial assets at fair value through oci , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 43), (' current income tax', 41), (' deferred income tax', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value through oci , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value other , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value deferred tax expense/(benefit) , res_fuzz_match = [(' total income tax expense / (benefit)', 73), ('income tax expense', 69), (' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 55), (' income tax expense on continuing operations', 53), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = derivative financial instruments at fair value net deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = financial position as follow: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = financial position as follow: deferred tax liabilities, net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 34)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = consolidated statement of profit or loss and other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax expense , res_fuzz_match = [('income tax expense', 100), (' current income tax', 100), (' deferred income tax', 73), (' total income tax expense / (benefit)', 63), (' income tax expense on continuing operations', 62), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current income tax: prior year (over)/under accrual , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' total income tax expense / (benefit)', 57), (' income tax expense on continuing operations', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = deferred tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = deferred tax: total income tax expense/(benefit) , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 72), (' deferred income tax', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 60)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax expense , res_fuzz_match = [('income tax expense', 100), (' current income tax', 100), (' deferred income tax', 73), (' total income tax expense / (benefit)', 63), (' income tax expense on continuing operations', 62), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = current income tax: prior year (over)/under accrual , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' total income tax expense / (benefit)', 57), (' income tax expense on continuing operations', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = deferred tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43), (' current income tax', 41), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows = deferred tax: total income tax expense/(benefit) , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' income tax expense on continuing operations', 72), (' deferred income tax', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 60)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4, 5, 7], 'score': [100, 100, 100, 100, 100, 100], 'value': [92191.0, -68451.0, 1322253.0, 1215248.0, 132263.0, -1905387.0], 'label': ['Current income tax: Current income tax expense', 'Current income tax: Prior year (over)/under accrual', 'Deferred tax: Total income tax expense/(benefit)', 'Current income tax: Current income tax expense', 'Current income tax: Prior year (over)/under accrual', 'Deferred tax: Total income tax expense/(benefit)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('share of', 28), ('share in', 28)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('share of', 32), ('share in', 32)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('prior period', 37), ('exceptional', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('prior period', 37), ('exceptional', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 29), ('prior period', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('prior period', 41), ('exceptional', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('prior period', 33), ('exceptional', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('prior period', 24), ('exceptional', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('exceptional', 20), ('prior period', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('prior period', 27), ('exceptional', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('prior period', 30), ('exceptional', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('prior period', 37), ('exceptional', 29)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('prior period', 37), ('exceptional', 25)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 29), ('prior period', 22)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('prior period', 41), ('exceptional', 24)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('prior period', 33), ('exceptional', 27)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('prior period', 24), ('exceptional', 14)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('exceptional', 20), ('prior period', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('prior period', 27), ('exceptional', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('prior period', 30), ('exceptional', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 13:59:04+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 13:59:04+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('NULL', 17)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('NULL', 16)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:04+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 13:59:04+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 13:59:04+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = net foreign exchange incomel(loss) , res_fuzz_match = [('NULL', 17)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = delivery expenses , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = profit/(loss) before income tax , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = income tax (expense) )/benefit , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = profit/(loss) for the year , res_fuzz_match = [('NULL', 7)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/(loss) that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 9)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = in subsequent periods (net of tax): , res_fuzz_match = [('NULL', 15)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = cash flow hedges , res_fuzz_match = [('NULL', 11)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = change in fair value of equity instruments , res_fuzz_match = [('NULL', 16)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - txt_particular = total comprehensive incomel(loss) for the year , res_fuzz_match = [('NULL', 13)]
2023-05-09 13:59:05+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

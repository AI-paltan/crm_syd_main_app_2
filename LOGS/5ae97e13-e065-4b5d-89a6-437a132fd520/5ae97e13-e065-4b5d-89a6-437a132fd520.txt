2023-08-09 15:23:26+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-09 15:23:26+0530 - sLogger - DEBUG - {'fileid': '5ae97e13-e065-4b5d-89a6-437a132fd520', 'filename': 'Kubota Australia Pty Ltd (Consol) -31 December 2022 FS signed 29.06.23.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/Kubota Australia Pty Ltd (Consol) -31 December 2022 FS signed 29.06.23.pdf', 'status': 'Processing'}
2023-08-09 15:23:26+0530 - sLogger - DEBUG - save file completed
2023-08-09 15:23:26+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-09 15:23:26+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-09 15:23:26+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-09 15:23:26+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-09 15:23:26+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-09 15:23:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:23:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:23:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:23:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:23:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:23:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:23:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:23:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:23:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:23:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:23:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:23:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:23:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:23:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:23:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:23:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:23:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:23:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:23:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:23:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:23:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:23:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:23:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:23:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:23:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:23:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:23:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:23:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:23:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:23:45+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:23:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:45+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:23:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:23:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:23:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:23:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:23:50+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:23:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:50+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:23:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:23:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:23:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:23:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:23:54+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:23:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:54+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:23:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:23:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:23:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:23:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:23:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:23:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:23:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:03+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:03+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:11+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:11+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:19+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:19+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:24+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:24+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:48+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:48+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:24:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:24:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:24:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:24:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:24:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:24:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:24:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:11+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:17+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:17+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:33+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:33+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:37+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:37+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:45+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:45+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:50+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:50+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:54+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:54+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:25:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:25:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:25:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:25:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:25:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:25:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:25:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:09+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:09+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:18+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:18+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:30+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:30+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:34+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:34+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:41+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-09 15:26:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-09 15:26:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-09 15:26:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-09 15:26:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-09 15:26:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-09 15:26:54+0530 - sLogger - DEBUG - function: predict completed.
2023-08-09 15:26:54+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-09 15:26:54+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [7, 25, 26, 35], 'predicted_cpl_pages': [6, 24], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [7], 'filtered_cpl_pages': [6], 'filtered_ccf_pages': [8], 'month': 'december', 'status': 'Page Classification Completed'}
2023-08-09 15:26:54+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-09 15:26:54+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-09 15:26:54+0530 - sLogger - DEBUG - process file completed
2023-08-09 15:26:54+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-09 15:26:54+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-09 15:26:54+0530 - sLogger - DEBUG - TE process file started
2023-08-09 15:31:03+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-09 15:31:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-09 15:31:19+0530 - sLogger - DEBUG - process_main_pages started
2023-08-09 15:31:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 15:31:19+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 15:31:19+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 15:31:19+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 15:31:19+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 15:31:19+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 15:31:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 15:31:20+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 15:31:20+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 15:31:20+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: notes_number_processing
2023-08-09 15:31:20+0530 - sLogger - ERROR - error occured: 'int' object has no attribute 'strip'
2023-08-09 15:31:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 15:31:20+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Current tax assets | [('current assets', 87), ('noncurrent assets', 67), ('current liabilities', 58), ('currentassets', 55), ('currentliabilities', 54), ('noncurrentassets', 50), ('noncurrentliabilities', 48), ('assets', 45), ('noncurrent liabilities', 39), ('equity and liabilities', 35), ('equity liabilities', 33), ('equityandliabilities', 29), ('equity', 26), ('equityliabilities', 24), ('liabilities', 9)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD current assets | score 95
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD currentassets | score 84
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD current liabilities | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD currentliabilities | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrent assets | score 80
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrentassets | score 76
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrent liabilities | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD non current assets | score 84
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD non current liabilities | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrentliabilities | score 51
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrentassets | score 76
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD noncurrentliabilities | score 51
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD equity and liabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax assets | MATCH WORD equityandliabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentassets | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equityandliabilities | score 25
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Total current | [('current liabilities', 74), ('currentliabilities', 73), ('currentassets', 64), ('noncurrentliabilities', 64), ('noncurrentassets', 57), ('current assets', 54), ('equity liabilities', 38), ('equity and liabilities', 33), ('equityandliabilities', 33), ('noncurrent assets', 31), ('noncurrent liabilities', 30), ('equityliabilities', 29), ('assets', 22), ('liabilities', 21), ('equity', 21)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD current assets | score 66
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD currentassets | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD current liabilities | score 66
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD currentliabilities | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD noncurrent assets | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD noncurrentassets | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD noncurrent liabilities | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD non current assets | score 66
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD non current liabilities | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD noncurrentliabilities | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD noncurrentassets | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD noncurrentliabilities | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD equity and liabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current | MATCH WORD equityandliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Other receivables | [('noncurrentliabilities', 42), ('currentliabilities', 38), ('noncurrentassets', 37), ('currentassets', 33), ('current assets', 32), ('current liabilities', 31), ('noncurrent assets', 24), ('equity liabilities', 24), ('noncurrent liabilities', 23), ('equity', 22), ('equity and liabilities', 21), ('equityliabilities', 20), ('equityandliabilities', 17), ('assets', 12), ('liabilities', 11)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD current assets | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD currentassets | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD current liabilities | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD currentliabilities | score 51
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD noncurrent assets | score 41
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD noncurrentassets | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD noncurrent liabilities | score 51
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD non current assets | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD non current liabilities | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD noncurrentliabilities | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD noncurrentassets | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD noncurrentliabilities | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD equity and liabilities | score 41
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Other receivables | MATCH WORD equityandliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Total noncurrent | [('noncurrentliabilities', 72), ('noncurrentassets', 64), ('currentliabilities', 55), ('noncurrent assets', 54), ('current liabilities', 52), ('noncurrent liabilities', 52), ('currentassets', 48), ('current assets', 38), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 29), ('liabilities', 21), ('equity', 21), ('assets', 11)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD current assets | score 47
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD currentassets | score 52
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD current liabilities | score 54
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD currentliabilities | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD noncurrent assets | score 73
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD noncurrentassets | score 66
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD noncurrent liabilities | score 73
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD non current assets | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD non current liabilities | score 51
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD noncurrentliabilities | score 62
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD noncurrentassets | score 66
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD noncurrentliabilities | score 62
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD equity and liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent | MATCH WORD equityandliabilities | score 22
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Employee benefits provisions | [('equity and liabilities', 36), ('equity liabilities', 34), ('current liabilities', 33), ('equityliabilities', 33), ('currentliabilities', 32), ('equityandliabilities', 30), ('noncurrent assets', 29), ('equity', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('current assets', 23), ('noncurrentassets', 22), ('liabilities', 21), ('assets', 15)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD current assets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD currentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD current liabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD currentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrent assets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrent liabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD non current assets | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD non current liabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD equity and liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD equity | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD equityandliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Current tax liability | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current assets | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD currentassets | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current liabilities | score 80
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD currentliabilities | score 77
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent assets | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentassets | score 49
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent liabilities | score 74
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current assets | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current liabilities | score 73
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentliabilities | score 71
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentassets | score 49
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentliabilities | score 71
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity and liabilities | score 60
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equityandliabilities | score 54
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentassets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentliabilities | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equityandliabilities | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Employee benefits provisions | [('equity and liabilities', 36), ('equity liabilities', 34), ('current liabilities', 33), ('equityliabilities', 33), ('currentliabilities', 32), ('equityandliabilities', 30), ('noncurrent assets', 29), ('equity', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('current assets', 23), ('noncurrentassets', 22), ('liabilities', 21), ('assets', 15)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD current assets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD currentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD current liabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD currentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrent assets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrent liabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD non current assets | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD non current liabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD noncurrentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD equity and liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD equity | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Employee benefits provisions | MATCH WORD equityandliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Deferred revenue | [('current assets', 40), ('currentliabilities', 38), ('currentassets', 33), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('current liabilities', 31), ('noncurrentassets', 30), ('equity and liabilities', 28), ('noncurrent liabilities', 23), ('equity', 22), ('equityliabilities', 20), ('equityandliabilities', 17), ('equity liabilities', 16), ('assets', 12), ('liabilities', 0)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD current assets | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD currentassets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD current liabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD currentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrent assets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrentassets | score 31
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrent liabilities | score 26
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD non current assets | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD non current liabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrentliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrentassets | score 31
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrentliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD equity and liabilities | score 25
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD equityandliabilities | score 17
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentassets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD currentliabilities | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentassets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrentliabilities | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equityandliabilities | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Foreign currency translation reserve | [('currentassets', 47), ('current liabilities', 44), ('noncurrentassets', 43), ('currentliabilities', 40), ('noncurrentliabilities', 37), ('current assets', 32), ('equity and liabilities', 29), ('equityandliabilities', 29), ('noncurrent assets', 27), ('equity liabilities', 23), ('noncurrent liabilities', 22), ('equityliabilities', 21), ('assets', 17), ('liabilities', 16), ('equity', 16)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD current assets | score 58
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD currentassets | score 56
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD current liabilities | score 52
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD currentliabilities | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD noncurrent assets | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD noncurrentassets | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD noncurrent liabilities | score 52
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD non current assets | score 55
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD non current liabilities | score 54
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD noncurrentliabilities | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD noncurrentassets | score 50
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD noncurrentliabilities | score 53
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD equity and liabilities | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Foreign currency translation reserve | MATCH WORD equityandliabilities | score 45
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-09 15:31:20+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-09 15:31:20+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-09 15:31:20+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-09 15:31:20+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash receipts from customers | adiustments for movements in working capital
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash paid to suppliers and employees | changes in operating assets and liabilities
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Issuance of loans receivable | changes in assets liabilities
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Collection of loans receivable | changes in working capital
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes paid | changes in working capital
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in operating activities | operating cash flow before working capital changes
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for acquisition of property, plant and equipment | adjustments for increase decrease in operating liabilities
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for acquisition of intangible assets | adjustments for increase decrease in operating assets
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from borrowings | operating cash flow before working capital changes
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Lease payments | movements in working capital
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from/(used in) by financing activities | operating cash flow before working capital changes
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the financialyear | changes in operating assets and liabilities
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash and cash equivalent | changes in operating assets and liabilities
2023-08-09 15:31:20+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the financial year | changes in operating assets and liabilities
2023-08-09 15:31:21+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('cash asset', 59), ('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), (' cash and cash equivalents', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('cash asset', 35), ('cash asset', 35), ('other bank balances', 33), ('bank balances other than above', 30), ('cash and short term deposits', 30), ('Cash and short term deposits', 30), ('cash and cash equivalents', 24), ('cash and bank balances', 24), (' cash and cash equivalents', 24), ('bank balances other than cash and cash equivalents', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), (' cash and cash equivalents', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('other bank balances', 34), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash asset', 27), ('cash asset', 27), ('bank balances other than cash and cash equivalents', 21), ('cash and bank balances', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), ('cash asset', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), (' cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('cash asset', 64), ('cash asset', 64), ('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('other bank balances', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('bank balances other than above', 35), ('other bank balances', 33), ('cash and bank balances', 30), ('cash and short term deposits', 30), ('Cash and short term deposits', 30), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('bank balances other than cash and cash equivalents', 28), ('cash asset', 17), ('cash asset', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 14085.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['14'], 'line_item_value': [14085.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('cash asset', 59), ('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), (' cash and cash equivalents', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('cash asset', 35), ('cash asset', 35), ('other bank balances', 33), ('bank balances other than above', 30), ('cash and short term deposits', 30), ('Cash and short term deposits', 30), ('cash and cash equivalents', 24), ('cash and bank balances', 24), (' cash and cash equivalents', 24), ('bank balances other than cash and cash equivalents', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), (' cash and cash equivalents', 33), ('other bank balances', 25), ('cash and bank balances', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('other bank balances', 34), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash asset', 27), ('cash asset', 27), ('bank balances other than cash and cash equivalents', 21), ('cash and bank balances', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), (' cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), ('cash asset', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('cash asset', 56), ('cash asset', 56), ('cash and short term deposits', 33), ('Cash and short term deposits', 33), ('cash and cash equivalents', 28), (' cash and cash equivalents', 28), ('bank balances other than cash and cash equivalents', 24), ('bank balances other than above', 19), ('other bank balances', 19), ('cash and bank balances', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('cash asset', 64), ('cash asset', 64), ('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('other bank balances', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('bank balances other than above', 35), ('other bank balances', 33), ('cash and bank balances', 30), ('cash and short term deposits', 30), ('Cash and short term deposits', 30), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('bank balances other than cash and cash equivalents', 28), ('cash asset', 17), ('cash asset', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 15247.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['14'], 'line_item_value': [15247.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = nan nan bank balances nan , res_fuzz_match = [(' cash at bank', 67), (' cash at bank and on hand', 67), (' cash on hand and at bank', 61), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), ('cash on hand', 44), (' cash and cash equivalents', 43), (' short term deposits', 11)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = nan nan cash and cash equivalents nan , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' short term deposits', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = nan nan bank balances nan , res_fuzz_match = [(' cash at bank', 67), (' cash at bank and on hand', 67), (' cash on hand and at bank', 61), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 48), ('cash on hand', 44), (' cash and cash equivalents', 43), (' short term deposits', 11)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = nan nan cash and cash equivalents nan , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 42), (' short term deposits', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': [100, 100], 'value': [15247.0, 14085.0], 'label': ['nan nan Cash and cash equivalents nan', 'nan nan Cash and cash equivalents nan'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 201712.0, 'line_item_label': ['Inventories'], 'note_numbers': ['16'], 'line_item_value': [201712.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('inventories', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('inventories', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 203744.0, 'line_item_label': ['Inventories'], 'note_numbers': ['16'], 'line_item_value': [203744.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = none nan inventory trading stock , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 55), (' cranes - in transit', 54), (' goods in transit', 50), (' work in progress', 46), (' finished goods at cost', 44), (' stores and other consumables at cost', 44), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' finished goods', 36), (' finished goods', 36)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' stores and other consumables at cost', 100), (' work in progress', 100), (' finished goods', 100), (' goods in transit', 100), (' provision for inventory obsolescence', 100), (' cranes - in transit', 100), (' spare parts', 100), ('raw materials', 0), (' raw materials', 0), (' inventories', 0), (' cranes', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = none nan less: provision for stock obsolescence , res_fuzz_match = [(' provision for inventory obsolescence', 81), (' cranes', 60), (' stores and other consumables at cost', 52), (' finished goods at cost', 50), (' spare parts', 50), (' work in progress', 46), (' cranes - in transit', 46), (' finished goods', 45), (' finished goods', 45), (' goods in transit', 42), (' inventories', 33), ('raw materials', 30), (' raw materials', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' stores and other consumables at cost', 100), (' work in progress', 100), (' finished goods', 100), (' goods in transit', 100), (' provision for inventory obsolescence', 100), (' cranes - in transit', 100), (' spare parts', 100), ('raw materials', 0), (' raw materials', 0), (' inventories', 0), (' cranes', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = none nan inventory trading stock (net) , res_fuzz_match = [(' inventories', 100), (' cranes', 60), (' provision for inventory obsolescence', 55), (' cranes - in transit', 54), (' goods in transit', 50), (' work in progress', 46), (' finished goods at cost', 44), (' stores and other consumables at cost', 44), ('raw materials', 40), (' raw materials', 40), (' spare parts', 40), (' finished goods', 36), (' finished goods', 36)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' stores and other consumables at cost', 100), (' work in progress', 100), (' finished goods', 100), (' goods in transit', 100), (' provision for inventory obsolescence', 100), (' cranes - in transit', 100), (' spare parts', 100), ('raw materials', 0), (' raw materials', 0), (' inventories', 0), (' cranes', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = none nan inventory trading stock , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 55), (' cranes - in transit', 54), (' goods in transit', 50), (' work in progress', 46), (' finished goods at cost', 44), (' stores and other consumables at cost', 44), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' spare parts', 40), (' finished goods', 36), (' finished goods', 36)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' stores and other consumables at cost', 100), (' work in progress', 100), (' finished goods', 100), (' goods in transit', 100), (' provision for inventory obsolescence', 100), (' cranes - in transit', 100), (' spare parts', 100), ('raw materials', 0), (' raw materials', 0), (' inventories', 0), (' cranes', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = none nan less: provision for stock obsolescence , res_fuzz_match = [(' provision for inventory obsolescence', 81), (' cranes', 60), (' stores and other consumables at cost', 52), (' finished goods at cost', 50), (' spare parts', 50), (' work in progress', 46), (' cranes - in transit', 46), (' finished goods', 45), (' finished goods', 45), (' goods in transit', 42), (' inventories', 33), ('raw materials', 30), (' raw materials', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' stores and other consumables at cost', 100), (' work in progress', 100), (' finished goods', 100), (' goods in transit', 100), (' provision for inventory obsolescence', 100), (' cranes - in transit', 100), (' spare parts', 100), ('raw materials', 0), (' raw materials', 0), (' inventories', 0), (' cranes', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = none nan inventory trading stock (net) , res_fuzz_match = [(' inventories', 100), (' cranes', 60), (' provision for inventory obsolescence', 55), (' cranes - in transit', 54), (' goods in transit', 50), (' work in progress', 46), (' finished goods at cost', 44), (' stores and other consumables at cost', 44), ('raw materials', 40), (' raw materials', 40), (' spare parts', 40), (' finished goods', 36), (' finished goods', 36)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' stores and other consumables at cost', 100), (' work in progress', 100), (' finished goods', 100), (' goods in transit', 100), (' provision for inventory obsolescence', 100), (' cranes - in transit', 100), (' spare parts', 100), ('raw materials', 0), (' raw materials', 0), (' inventories', 0), (' cranes', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 'score': [100, 100, 81, 100, 100, 100, 100, 100, 81, 100, 100, 100], 'value': [211304.0, 211304.0, -7560.0, -7560.0, 203744.0, 203744.0, 208459.0, 208459.0, -6747.0, -6747.0, 201712.0, 201712.0], 'label': ['None nan Inventory trading stock', "$'000's", 'None nan Less: Provision for stock obsolescence', "$'000's", 'None nan Inventory trading stock (net)', "$'000's", 'None nan Inventory trading stock', "$'000's", 'None nan Less: Provision for stock obsolescence', "$'000's", 'None nan Inventory trading stock (net)', "$'000's"], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns']}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('other current assets', 83), ('other current financial assets', 68), ('other financial assets', 50), ('other assets', 50), ('prepayments', 26)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('other current assets', 62), ('other current financial assets', 50), ('other assets', 42), ('prepayments', 32), ('other financial assets', 31)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [('other assets', 43), ('other current assets', 32), ('other financial assets', 32), ('other current financial assets', 31), ('prepayments', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other financial assets', 42), ('other assets', 40), ('other current financial assets', 39), ('prepayments', 20)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets', 54), ('other current assets', 53), ('other financial assets', 47), ('other current financial assets', 43), ('prepayments', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('other financial assets', 65), ('other assets', 61), ('other current assets', 52), ('other current financial assets', 51), ('prepayments', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('other current assets', 44), ('other financial assets', 38), ('other current financial assets', 35), ('other assets', 25), ('prepayments', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': 2413.0, 'line_item_label': ['Current tax assets', 'Other assets'], 'note_numbers': ['17', nan], 'line_item_value': [0.0, 2413.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('other current assets', 83), ('other current financial assets', 68), ('other financial assets', 50), ('other assets', 50), ('prepayments', 26)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('other current assets', 62), ('other current financial assets', 50), ('other assets', 42), ('prepayments', 32), ('other financial assets', 31)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), ('other current assets', 53), ('other financial assets', 53), ('other current financial assets', 48), ('prepayments', 19)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [('other assets', 43), ('other current assets', 32), ('other financial assets', 32), ('other current financial assets', 31), ('prepayments', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other current assets', 42), ('other financial assets', 42), ('other assets', 40), ('other current financial assets', 39), ('prepayments', 20)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('other assets', 54), ('other current assets', 53), ('other financial assets', 47), ('other current financial assets', 43), ('prepayments', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('other financial assets', 65), ('other assets', 61), ('other current assets', 52), ('other current financial assets', 51), ('prepayments', 22)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('other current assets', 44), ('other financial assets', 38), ('other current financial assets', 35), ('other assets', 25), ('prepayments', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 100, 'value': 8688.0, 'line_item_label': ['Current tax assets', 'Other assets'], 'note_numbers': ['17', nan], 'line_item_value': [3018.0, 5670.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('other current assets', 83), (' other current assets', 83), (' financial assets', 53), ('other assets', 50), (' other financial assets', 50), (' income tax receivable from related parties', 44), (' biological assets', 41), (' trade and other receivables', 41), (' deferred operating expenditure', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('other current assets', 62), (' other current assets', 62), ('other assets', 42), (' biological assets', 40), (' income tax receivable from related parties', 35), (' deferred operating expenditure', 35), (' trade and other receivables', 34), (' financial assets', 31), (' other financial assets', 31)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' trade and other receivables', 43), (' income tax receivable from related parties', 42), (' deferred operating expenditure', 39)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [(' trade and other receivables', 71), ('other assets', 43), (' income tax receivable from related parties', 40), (' deferred operating expenditure', 36), ('other current assets', 32), (' financial assets', 32), (' other current assets', 32), (' other financial assets', 32), (' biological assets', 25)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), (' trade and other receivables', 43), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), ('other assets', 40), (' income tax receivable from related parties', 39), (' financial assets', 32), (' biological assets', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets', 59), ('other assets', 54), ('other current assets', 53), (' other current assets', 53), (' financial assets', 50), (' other financial assets', 47), (' trade and other receivables', 32), (' deferred operating expenditure', 28), (' income tax receivable from related parties', 25)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' biological assets', 67), (' other financial assets', 65), ('other assets', 61), ('other current assets', 52), (' other current assets', 52), (' trade and other receivables', 35), (' income tax receivable from related parties', 27), (' deferred operating expenditure', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('other current assets', 44), (' other current assets', 44), (' trade and other receivables', 40), (' income tax receivable from related parties', 39), (' other financial assets', 38), (' deferred operating expenditure', 29), ('other assets', 25), (' biological assets', 24), (' financial assets', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5, 11], 'score': 80, 'value': 336687.0, 'line_item_label': ['Trade and other receivables', 'Current tax assets', 'Other assets', 'Intangible assets'], 'note_numbers': ['15', '17', nan, nan], 'line_item_value': [332290.0, 0.0, 2413.0, 1984.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('other current assets', 83), (' other current assets', 83), (' financial assets', 53), ('other assets', 50), (' other financial assets', 50), (' income tax receivable from related parties', 44), (' biological assets', 41), (' trade and other receivables', 41), (' deferred operating expenditure', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('other current assets', 62), (' other current assets', 62), ('other assets', 42), (' biological assets', 40), (' income tax receivable from related parties', 35), (' deferred operating expenditure', 35), (' trade and other receivables', 34), (' financial assets', 31), (' other financial assets', 31)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('other assets', 62), (' financial assets', 57), ('other current assets', 53), (' other current assets', 53), (' other financial assets', 53), (' biological assets', 44), (' trade and other receivables', 43), (' income tax receivable from related parties', 42), (' deferred operating expenditure', 39)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [(' trade and other receivables', 71), ('other assets', 43), (' income tax receivable from related parties', 40), (' deferred operating expenditure', 36), ('other current assets', 32), (' financial assets', 32), (' other current assets', 32), (' other financial assets', 32), (' biological assets', 25)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure', 49), (' trade and other receivables', 43), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), ('other assets', 40), (' income tax receivable from related parties', 39), (' financial assets', 32), (' biological assets', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' biological assets', 59), ('other assets', 54), ('other current assets', 53), (' other current assets', 53), (' financial assets', 50), (' other financial assets', 47), (' trade and other receivables', 32), (' deferred operating expenditure', 28), (' income tax receivable from related parties', 25)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' biological assets', 67), (' other financial assets', 65), ('other assets', 61), ('other current assets', 52), (' other current assets', 52), (' trade and other receivables', 35), (' income tax receivable from related parties', 27), (' deferred operating expenditure', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('other current assets', 44), (' other current assets', 44), (' trade and other receivables', 40), (' income tax receivable from related parties', 39), (' other financial assets', 38), (' deferred operating expenditure', 29), ('other assets', 25), (' biological assets', 24), (' financial assets', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5, 11], 'score': 80, 'value': 429862.0, 'line_item_label': ['Trade and other receivables', 'Current tax assets', 'Other assets', 'Intangible assets'], 'note_numbers': ['15', '17', nan, nan], 'line_item_value': [419338.0, 3018.0, 5670.0, 1836.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' lng', 67), (' amount receivable from controlling entity', 56), (' rental bond', 56), (' other debtors and prepayments', 56), ('other assets', 44), (' income tax receivable from related parties', 44), (' derivative contracts - fair value', 44), (' other', 40), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' other receivables - related party', 33), (' other deposits receivable - related party', 33), (' interest receivable', 33), (' bank guarantee', 33), (' related party receivable', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' forward exchange contracts', 33), (' condensate', 29), (' long service leave receivable', 22), (' share of jv prepayments', 22), (' accrued rebates', 22), ('current', 14), (' deposits', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' lng', 67), (' amount receivable from controlling entity', 56), (' rental bond', 56), (' other debtors and prepayments', 56), ('other assets', 44), (' income tax receivable from related parties', 44), (' derivative contracts - fair value', 44), (' other', 40), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' other receivables - related party', 33), (' other deposits receivable - related party', 33), (' interest receivable', 33), (' bank guarantee', 33), (' related party receivable', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' forward exchange contracts', 33), (' condensate', 29), (' long service leave receivable', 22), (' share of jv prepayments', 22), (' accrued rebates', 22), ('current', 14), (' deposits', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables , res_fuzz_match = [(' interest receivable', 73), (' income tax receivable from related parties', 69), (' other deposits receivable - related party', 62), (' related party receivable', 62), ('foreign exchange derivatives at fair value', 56), (' long service leave receivable', 56), (' other receivables - related party', 56), (' amount receivable from controlling entity', 56), (' foreign exchange forward contracts', 50), (' other debtors and prepayments', 50), (' bank guarantee', 46), (' accrued rebates', 45), (' electricity derivatives at fair value', 44), (' derivative contracts - fair value', 44), (' forward exchange contracts', 44), (' accrued interest', 43), (' share of jv prepayments', 42), (' other', 40), ('other assets', 36), (' rental bond', 36), (' current investments', 36), (' lng', 33), (' related party disclosures', 31), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 37), (' amount receivable from controlling entity', 37), ('other assets', 36), (' electricity derivatives at fair value', 33), (' derivative contracts - fair value', 33), (' lng', 33), (' related party disclosures', 32), (' long service leave receivable', 32), (' other receivables - related party', 32), (' other deposits receivable - related party', 32), (' foreign exchange forward contracts', 32), (' forward exchange contracts', 32), (' bank guarantee', 31), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' interest receivable', 27), (' rental bond', 27), (' accrued rebates', 27), (' other debtors and prepayments', 26), (' share of jv prepayments', 25), (' related party receivable', 23), (' other', 20), ('current', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables (net) , res_fuzz_match = [(' interest receivable', 73), (' income tax receivable from related parties', 60), (' other receivables - related party', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' related party receivable', 56), ('foreign exchange derivatives at fair value', 50), (' long service leave receivable', 50), (' foreign exchange forward contracts', 50), (' bank guarantee', 46), (' accrued rebates', 45), (' forward exchange contracts', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 40), (' other', 40), (' other debtors and prepayments', 40), ('other assets', 36), (' derivative contracts - fair value', 36), (' rental bond', 36), (' lng', 33), (' related party disclosures', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables , res_fuzz_match = [(' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), ('foreign exchange derivatives at fair value', 53), (' interest receivable', 53), (' other receivables - related party', 47), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' other debtors and prepayments', 47), (' bank guarantee', 46), (' rental bond', 45), (' condensate', 43), (' other', 40), (' derivative contracts - fair value', 40), (' accrued interest', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), ('current', 29), (' deposits', 29), (' current investments', 29), ('other assets', 27), (' electricity derivatives at fair value', 27)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 37), (' amount receivable from controlling entity', 37), ('other assets', 36), (' electricity derivatives at fair value', 33), (' derivative contracts - fair value', 33), (' lng', 33), (' related party disclosures', 32), (' long service leave receivable', 32), (' other receivables - related party', 32), (' other deposits receivable - related party', 32), (' foreign exchange forward contracts', 32), (' forward exchange contracts', 32), (' bank guarantee', 31), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' interest receivable', 27), (' rental bond', 27), (' accrued rebates', 27), (' other debtors and prepayments', 26), (' share of jv prepayments', 25), (' related party receivable', 23), (' other', 20), ('current', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables (net) , res_fuzz_match = [(' long service leave receivable', 59), (' income tax receivable from related parties', 58), (' other receivables - related party', 58), (' other deposits receivable - related party', 58), (' amount receivable from controlling entity', 58), (' related party receivable', 56), (' interest receivable', 53), ('foreign exchange derivatives at fair value', 47), (' foreign exchange forward contracts', 47), (' bank guarantee', 46), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 43), (' share of jv prepayments', 42), (' other', 40), (' electricity derivatives at fair value', 37), (' derivative contracts - fair value', 37), (' other debtors and prepayments', 37), ('other assets', 36), (' accrued rebates', 36), (' lng', 33), (' related party disclosures', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade, loans and other receivables (net) , res_fuzz_match = [(' other', 100), (' other receivables - related party', 75), (' interest receivable', 73), ('other assets', 64), (' long service leave receivable', 57), (' related party receivable', 56), (' bank guarantee', 54), (' other deposits receivable - related party', 51), (' current investments', 50), (' other debtors and prepayments', 48), (' forward exchange contracts', 46), (' amount receivable from controlling entity', 45), (' rental bond', 45), (' foreign exchange forward contracts', 44), ('current', 43), (' accrued interest', 43), (' related party disclosures', 43), (' deposits', 43), (' condensate', 43), (' income tax receivable from related parties', 42), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 39), (' derivative contracts - fair value', 38), (' electricity derivatives at fair value', 36), (' accrued rebates', 36), (' lng', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' lng', 67), (' amount receivable from controlling entity', 56), (' rental bond', 56), (' other debtors and prepayments', 56), ('other assets', 44), (' income tax receivable from related parties', 44), (' derivative contracts - fair value', 44), (' other', 40), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' other receivables - related party', 33), (' other deposits receivable - related party', 33), (' interest receivable', 33), (' bank guarantee', 33), (' related party receivable', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' forward exchange contracts', 33), (' condensate', 29), (' long service leave receivable', 22), (' share of jv prepayments', 22), (' accrued rebates', 22), ('current', 14), (' deposits', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' lng', 67), (' amount receivable from controlling entity', 56), (' rental bond', 56), (' other debtors and prepayments', 56), ('other assets', 44), (' income tax receivable from related parties', 44), (' derivative contracts - fair value', 44), (' other', 40), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' accrued interest', 33), (' related party disclosures', 33), (' other receivables - related party', 33), (' other deposits receivable - related party', 33), (' interest receivable', 33), (' bank guarantee', 33), (' related party receivable', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' forward exchange contracts', 33), (' condensate', 29), (' long service leave receivable', 22), (' share of jv prepayments', 22), (' accrued rebates', 22), ('current', 14), (' deposits', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables , res_fuzz_match = [(' interest receivable', 73), (' income tax receivable from related parties', 69), (' other deposits receivable - related party', 62), (' related party receivable', 62), ('foreign exchange derivatives at fair value', 56), (' long service leave receivable', 56), (' other receivables - related party', 56), (' amount receivable from controlling entity', 56), (' foreign exchange forward contracts', 50), (' other debtors and prepayments', 50), (' bank guarantee', 46), (' accrued rebates', 45), (' electricity derivatives at fair value', 44), (' derivative contracts - fair value', 44), (' forward exchange contracts', 44), (' accrued interest', 43), (' share of jv prepayments', 42), (' other', 40), ('other assets', 36), (' rental bond', 36), (' current investments', 36), (' lng', 33), (' related party disclosures', 31), ('current', 29), (' deposits', 29), (' condensate', 29)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 37), (' amount receivable from controlling entity', 37), ('other assets', 36), (' electricity derivatives at fair value', 33), (' derivative contracts - fair value', 33), (' lng', 33), (' related party disclosures', 32), (' long service leave receivable', 32), (' other receivables - related party', 32), (' other deposits receivable - related party', 32), (' foreign exchange forward contracts', 32), (' forward exchange contracts', 32), (' bank guarantee', 31), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' interest receivable', 27), (' rental bond', 27), (' accrued rebates', 27), (' other debtors and prepayments', 26), (' share of jv prepayments', 25), (' related party receivable', 23), (' other', 20), ('current', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables (net) , res_fuzz_match = [(' interest receivable', 73), (' income tax receivable from related parties', 60), (' other receivables - related party', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' related party receivable', 56), ('foreign exchange derivatives at fair value', 50), (' long service leave receivable', 50), (' foreign exchange forward contracts', 50), (' bank guarantee', 46), (' accrued rebates', 45), (' forward exchange contracts', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 40), (' other', 40), (' other debtors and prepayments', 40), ('other assets', 36), (' derivative contracts - fair value', 36), (' rental bond', 36), (' lng', 33), (' related party disclosures', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables , res_fuzz_match = [(' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), ('foreign exchange derivatives at fair value', 53), (' interest receivable', 53), (' other receivables - related party', 47), (' foreign exchange forward contracts', 47), (' forward exchange contracts', 47), (' other debtors and prepayments', 47), (' bank guarantee', 46), (' rental bond', 45), (' condensate', 43), (' other', 40), (' derivative contracts - fair value', 40), (' accrued interest', 36), (' accrued rebates', 36), (' related party disclosures', 33), (' share of jv prepayments', 33), (' lng', 33), ('current', 29), (' deposits', 29), (' current investments', 29), ('other assets', 27), (' electricity derivatives at fair value', 27)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' condensate', 43), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 37), (' amount receivable from controlling entity', 37), ('other assets', 36), (' electricity derivatives at fair value', 33), (' derivative contracts - fair value', 33), (' lng', 33), (' related party disclosures', 32), (' long service leave receivable', 32), (' other receivables - related party', 32), (' other deposits receivable - related party', 32), (' foreign exchange forward contracts', 32), (' forward exchange contracts', 32), (' bank guarantee', 31), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' interest receivable', 27), (' rental bond', 27), (' accrued rebates', 27), (' other debtors and prepayments', 26), (' share of jv prepayments', 25), (' related party receivable', 23), (' other', 20), ('current', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables (net) , res_fuzz_match = [(' long service leave receivable', 59), (' income tax receivable from related parties', 58), (' other receivables - related party', 58), (' other deposits receivable - related party', 58), (' amount receivable from controlling entity', 58), (' related party receivable', 56), (' interest receivable', 53), ('foreign exchange derivatives at fair value', 47), (' foreign exchange forward contracts', 47), (' bank guarantee', 46), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' forward exchange contracts', 43), (' share of jv prepayments', 42), (' other', 40), (' electricity derivatives at fair value', 37), (' derivative contracts - fair value', 37), (' other debtors and prepayments', 37), ('other assets', 36), (' accrued rebates', 36), (' lng', 33), (' related party disclosures', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade, loans and other receivables (net) , res_fuzz_match = [(' other', 100), (' other receivables - related party', 75), (' interest receivable', 73), ('other assets', 64), (' long service leave receivable', 57), (' related party receivable', 56), (' bank guarantee', 54), (' other deposits receivable - related party', 51), (' current investments', 50), (' other debtors and prepayments', 48), (' forward exchange contracts', 46), (' amount receivable from controlling entity', 45), (' rental bond', 45), (' foreign exchange forward contracts', 44), ('current', 43), (' accrued interest', 43), (' related party disclosures', 43), (' deposits', 43), (' condensate', 43), (' income tax receivable from related parties', 42), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 39), (' derivative contracts - fair value', 38), (' electricity derivatives at fair value', 36), (' accrued rebates', 36), (' lng', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 17], 'score': [100, 100], 'value': [419338.0, 332290.0], 'label': ['15.0 nan Trade, loans and other receivables (net)', '15.0 nan Trade, loans and other receivables (net)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables (net) , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables (net) , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade, loans and other receivables (net) , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables (net) , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables (net) , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade, loans and other receivables (net) , res_fuzz_match = [(' ', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2022.0, 0.0, 234244.0, -2898.0, 231346.0, 189931.0, -1939.0, 187992.0, 419338.0, 2021.0, 0.0, 157088.0, -2580.0, 154508.0, 179857.0, -2075.0, 177782.0, 332290.0], 'label': ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_assets
2023-08-09 15:31:33+0530 - sLogger - ERROR - error occured: 2021
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_assets
2023-08-09 15:31:33+0530 - sLogger - ERROR - error occured: 2021
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [(' interest bearing liabilites', 36), ('short-term debt', 33), ('shortterm debt', 33), (' bank overdraft', 33), ('short term debt', 32), ('borrowings', 29), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 24), (' leases', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [(' interest bearing liabilites', 60), ('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [(' interest bearing liabilites', 36), ('short-term debt', 33), ('shortterm debt', 33), (' bank overdraft', 33), ('short term debt', 32), ('borrowings', 29), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 24), (' leases', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('short-term debt', 38), ('shortterm debt', 38), ('short term debt', 37), (' loans and borrowings', 30), ('shortterm borrowings', 29), (' interest bearing liabilites', 29), (' bank overdraft', 23), ('borrowings', 22), ('lease liabilities', 17), (' leases', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5, 7, 10], 'score': 100, 'value': 259350.0, 'line_item_label': ['Borrowings', 'Lease liability', 'Borrowings', 'Lease liability'], 'note_numbers': ['22', nan, '22', nan], 'line_item_value': [89000.0, 755.0, 169000.0, 595.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [(' interest bearing liabilites', 36), ('short-term debt', 33), ('shortterm debt', 33), (' bank overdraft', 33), ('short term debt', 32), ('borrowings', 29), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 24), (' leases', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [(' interest bearing liabilites', 60), ('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [(' interest bearing liabilites', 36), ('short-term debt', 33), ('shortterm debt', 33), (' bank overdraft', 33), ('short term debt', 32), ('borrowings', 29), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 24), (' leases', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('short-term debt', 38), ('shortterm debt', 38), ('short term debt', 37), (' loans and borrowings', 30), ('shortterm borrowings', 29), (' interest bearing liabilites', 29), (' bank overdraft', 23), ('borrowings', 22), ('lease liabilities', 17), (' leases', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5, 7, 10], 'score': 100, 'value': 368185.0, 'line_item_label': ['Borrowings', 'Lease liability', 'Borrowings', 'Lease liability'], 'note_numbers': ['22', nan, '22', nan], 'line_item_value': [131527.0, 884.0, 235000.0, 774.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35), ('other trade payables', 33), ('trade payable', 25)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 201218.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['21'], 'line_item_value': [201218.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35), ('other trade payables', 33), ('trade payable', 25)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 170118.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['21'], 'line_item_value': [170118.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('trade and other payables', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('trade and other payables', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 201218.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['21'], 'line_item_value': [201218.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('trade and other payables', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('trade and other payables', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 170118.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['21'], 'line_item_value': [170118.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('provision', 100), ('tax', 33), (' income tax payable', 31), ('current tax liabilities', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('provision', 100), ('tax', 33), (' income tax payable', 31), ('current tax liabilities', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('provision', 33), ('current tax liabilities', 25), (' income tax payable', 8), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 6, 8, 11], 'score': 100, 'value': 43483.0, 'line_item_label': ['Liabilities', 'Employee benefits provisions', 'Current tax liability', 'Provisions', 'Employee benefits provisions', 'Provisions'], 'note_numbers': [nan, '23', '17', '24', '23', '24'], 'line_item_value': [0.0, 5202.0, 6933.0, 29792.0, 266.0, 1290.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('provision', 100), ('tax', 33), (' income tax payable', 31), ('current tax liabilities', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [('provision', 100), ('tax', 33), (' income tax payable', 31), ('current tax liabilities', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('provision', 33), ('current tax liabilities', 25), (' income tax payable', 8), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 6, 8, 11], 'score': 100, 'value': 37515.0, 'line_item_label': ['Liabilities', 'Employee benefits provisions', 'Current tax liability', 'Provisions', 'Employee benefits provisions', 'Provisions'], 'note_numbers': [nan, '23', '17', '24', '23', '24'], 'line_item_value': [0.0, 5744.0, 0.0, 29946.0, 186.0, 1639.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [(' employee benefits', 81), ('provisions', 43), ('other current liabilities', 38), (' other current liabilities', 38), (' deferred revenue', 35), (' other financial liabilities', 33), (' customer deposits', 33), (' trade and other payables', 32), (' foreign exchange contract liability', 30), (' financial liabilities', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [(' employee benefits', 81), ('provisions', 43), ('other current liabilities', 38), (' other current liabilities', 38), (' deferred revenue', 35), (' other financial liabilities', 33), (' customer deposits', 33), (' trade and other payables', 32), (' foreign exchange contract liability', 30), (' financial liabilities', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [(' deferred revenue', 100), (' employee benefits', 37), (' trade and other payables', 35), ('other current liabilities', 25), (' other current liabilities', 25), (' foreign exchange contract liability', 23), ('provisions', 22), (' other financial liabilities', 19), (' financial liabilities', 15), (' customer deposits', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 6, 8, 9, 11], 'score': 100, 'value': 246500.0, 'line_item_label': ['Trade and other payables', 'Employee benefits provisions', 'Current tax liability', 'Provisions', 'Employee benefits provisions', 'Deferred revenue', 'Provisions'], 'note_numbers': ['21', '23', '17', '24', '23', nan, '24'], 'line_item_value': [201218.0, 5202.0, 6933.0, 29792.0, 266.0, 1799.0, 1290.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [(' employee benefits', 81), ('provisions', 43), ('other current liabilities', 38), (' other current liabilities', 38), (' deferred revenue', 35), (' other financial liabilities', 33), (' customer deposits', 33), (' trade and other payables', 32), (' foreign exchange contract liability', 30), (' financial liabilities', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = employee benefits provisions , res_fuzz_match = [(' employee benefits', 81), ('provisions', 43), ('other current liabilities', 38), (' other current liabilities', 38), (' deferred revenue', 35), (' other financial liabilities', 33), (' customer deposits', 33), (' trade and other payables', 32), (' foreign exchange contract liability', 30), (' financial liabilities', 28)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [(' deferred revenue', 100), (' employee benefits', 37), (' trade and other payables', 35), ('other current liabilities', 25), (' other current liabilities', 25), (' foreign exchange contract liability', 23), ('provisions', 22), (' other financial liabilities', 19), (' financial liabilities', 15), (' customer deposits', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 6, 8, 9, 11], 'score': 100, 'value': 210073.0, 'line_item_label': ['Trade and other payables', 'Employee benefits provisions', 'Current tax liability', 'Provisions', 'Employee benefits provisions', 'Deferred revenue', 'Provisions'], 'note_numbers': ['21', '23', '17', '24', '23', nan, '24'], 'line_item_value': [170118.0, 5744.0, 0.0, 29946.0, 186.0, 2440.0, 1639.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 57), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('perpetual equity instrument', 32), ('contributed equity', 30), ('contributed equity', 30), ('equity share capital', 29), ('common stock', 28), ('share capital', 24), (' issued capital', 24), (' share capital ', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 21000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['25'], 'line_item_value': [21000.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 57), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('perpetual equity instrument', 32), ('contributed equity', 30), ('contributed equity', 30), ('equity share capital', 29), ('common stock', 28), ('share capital', 24), (' issued capital', 24), (' share capital ', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 21000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['25'], 'line_item_value': [21000.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('retained earnings', 43), ('reserves surplus', 41), (' accumulated losses', 28), ('other equity', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 275518.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [275518.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('retained earnings', 43), ('reserves surplus', 41), (' accumulated losses', 28), ('other equity', 23)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 305695.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [305695.0]}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('non controlling interest', 39), ('noncontrolling interest', 36), (' non-controlling interest', 36), ('minority interest', 31), ('minority interest', 31)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('non controlling interest', 39), ('noncontrolling interest', 36), (' non-controlling interest', 36), ('minority interest', 31), ('minority interest', 31)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('shareholders equity(a)', 25)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('shareholders equity(a)', 25)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 15:31:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('other reserves ', 42), (' reserves', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:33+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = foreign currency translation reserve , res_fuzz_match = [('other reserves ', 42), (' reserves', 32)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-09 15:31:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:33+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('unbilled', 40), ('account receivables', 36), ('government subsidies receivable', 35), ('trade and other receivables', 35), ('trade receivables', 33), ('receivable', 33), ('billed', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('trade receivables', 42), ('account receivables', 40), ('unbilled', 40), ('trade and other receivables', 38), ('receivable', 33), ('billed', 25), ('government subsidies receivable', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('trade receivables', 35), ('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 22), ('billed', 0), ('unbilled', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('account receivables', 75), ('trade receivables', 75), ('government subsidies receivable', 58), ('billed', 25), ('unbilled', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('trade receivables', 50), ('trade and other receivables', 44), ('account receivables', 43), ('government subsidies receivable', 43), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 30), ('trade and other receivables', 27), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('trade receivables', 35), ('account receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('receivable', 17), ('billed', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('trade and other receivables', 38), ('trade receivables', 33), ('account receivables', 32), ('billed', 25), ('government subsidies receivable', 23), ('unbilled', 20), ('receivable', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 8], 'score': 100, 'value': 548403.0, 'line_item_label': ['Trade and other receivables', 'Other receivables'], 'note_numbers': ['15', '20'], 'line_item_value': [332290.0, 216113.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = current tax assets , res_fuzz_match = [('unbilled', 40), ('account receivables', 36), ('government subsidies receivable', 35), ('trade and other receivables', 35), ('trade receivables', 33), ('receivable', 33), ('billed', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total current , res_fuzz_match = [('trade receivables', 42), ('account receivables', 40), ('unbilled', 40), ('trade and other receivables', 38), ('receivable', 33), ('billed', 25), ('government subsidies receivable', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('trade and other receivables', 40), ('trade receivables', 35), ('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 22), ('billed', 0), ('unbilled', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('account receivables', 75), ('trade receivables', 75), ('government subsidies receivable', 58), ('billed', 25), ('unbilled', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('trade receivables', 50), ('trade and other receivables', 44), ('account receivables', 43), ('government subsidies receivable', 43), ('unbilled', 40), ('receivable', 33), ('billed', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('government subsidies receivable', 33), ('receivable', 33), ('account receivables', 30), ('trade and other receivables', 27), ('trade receivables', 26), ('billed', 25), ('unbilled', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('trade receivables', 35), ('account receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('receivable', 17), ('billed', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total non-current , res_fuzz_match = [('trade and other receivables', 38), ('trade receivables', 33), ('account receivables', 32), ('billed', 25), ('government subsidies receivable', 23), ('unbilled', 20), ('receivable', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 8], 'score': 100, 'value': 639881.0, 'line_item_label': ['Trade and other receivables', 'Other receivables'], 'note_numbers': ['15', '20'], 'line_item_value': [419338.0, 220543.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' net trade debtors', 44), ('charges paid in advance', 44), ('trade receivables', 33), (' related party receivables', 33), (' other debtors', 33), (' share of joint venture receivables', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' net trade debtors', 44), ('charges paid in advance', 44), ('trade receivables', 33), (' related party receivables', 33), (' other debtors', 33), (' share of joint venture receivables', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 69), (' related party receivables', 62), (' net trade debtors', 56), (' other debtors', 42), ('charges paid in advance', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' net trade debtors', 31), (' share of joint venture receivables', 26), ('trade receivables', 25), (' other debtors', 25), (' related party receivables', 23), ('charges paid in advance', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables (net) , res_fuzz_match = [('trade receivables', 100), (' related party receivables', 56), (' net trade debtors', 56), (' share of joint venture receivables', 55), (' other debtors', 42), ('charges paid in advance', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 67), (' share of joint venture receivables', 60), (' net trade debtors', 33), ('charges paid in advance', 33), (' other debtors', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' net trade debtors', 31), (' share of joint venture receivables', 26), ('trade receivables', 25), (' other debtors', 25), (' related party receivables', 23), ('charges paid in advance', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables (net) , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 56), (' share of joint venture receivables', 53), (' net trade debtors', 44), ('charges paid in advance', 35), (' other debtors', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade, loans and other receivables (net) , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' other debtors', 58), (' related party receivables', 56), (' net trade debtors', 56), ('charges paid in advance', 41)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' net trade debtors', 44), ('charges paid in advance', 44), ('trade receivables', 33), (' related party receivables', 33), (' other debtors', 33), (' share of joint venture receivables', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 total nan , res_fuzz_match = [(' net trade debtors', 44), ('charges paid in advance', 44), ('trade receivables', 33), (' related party receivables', 33), (' other debtors', 33), (' share of joint venture receivables', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 69), (' related party receivables', 62), (' net trade debtors', 56), (' other debtors', 42), ('charges paid in advance', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' net trade debtors', 31), (' share of joint venture receivables', 26), ('trade receivables', 25), (' other debtors', 25), (' related party receivables', 23), ('charges paid in advance', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade receivables (net) , res_fuzz_match = [('trade receivables', 100), (' related party receivables', 56), (' net trade debtors', 56), (' share of joint venture receivables', 55), (' other debtors', 42), ('charges paid in advance', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 67), (' share of joint venture receivables', 60), (' net trade debtors', 33), ('charges paid in advance', 33), (' other debtors', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan less: loss allowance , res_fuzz_match = [(' net trade debtors', 31), (' share of joint venture receivables', 26), ('trade receivables', 25), (' other debtors', 25), (' related party receivables', 23), ('charges paid in advance', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan loan receivables (net) , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 56), (' share of joint venture receivables', 53), (' net trade debtors', 44), ('charges paid in advance', 35), (' other debtors', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = 15.0 nan trade, loans and other receivables (net) , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 64), (' other debtors', 58), (' related party receivables', 56), (' net trade debtors', 56), ('charges paid in advance', 41)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 11, 13], 'score': [100, 100, 100, 100], 'value': [234244.0, 231346.0, 157088.0, 154508.0], 'label': ['15.0 nan Trade receivables', '15.0 nan Trade receivables (net)', '15.0 nan Trade receivables', '15.0 nan Trade receivables (net)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none loan receivables , res_fuzz_match = [('trade receivables', 67), (' share of joint venture receivables', 62), (' related party receivables', 56), (' other debtors', 42), (' net trade debtors', 39), ('charges paid in advance', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' share of joint venture receivables', 100), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none less: loss allowance , res_fuzz_match = [(' other debtors', 42), (' net trade debtors', 38), ('trade receivables', 25), (' share of joint venture receivables', 25), (' related party receivables', 23), ('charges paid in advance', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' share of joint venture receivables', 100), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none loan receivables (net) , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 56), (' share of joint venture receivables', 55), (' net trade debtors', 44), (' other debtors', 42), ('charges paid in advance', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' share of joint venture receivables', 100), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none loan receivables , res_fuzz_match = [('trade receivables', 67), (' share of joint venture receivables', 62), (' related party receivables', 56), (' other debtors', 42), (' net trade debtors', 39), ('charges paid in advance', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' share of joint venture receivables', 100), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none less: loss allowance , res_fuzz_match = [(' other debtors', 42), (' net trade debtors', 38), ('trade receivables', 25), (' share of joint venture receivables', 25), (' related party receivables', 23), ('charges paid in advance', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' share of joint venture receivables', 100), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none loan receivables (net) , res_fuzz_match = [('trade receivables', 67), (' related party receivables', 56), (' share of joint venture receivables', 55), (' net trade debtors', 44), (' other debtors', 42), ('charges paid in advance', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' share of joint venture receivables', 100), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' net trade debtors', 0), ('charges paid in advance', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [222810.0, -2267.0, 220543.0, 218625.0, -2512.0, 216113.0], 'label': ["$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), (' revenue from continuing activities', 39), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 33), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('transmission and distribution business', 21), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19), (' revenue from continuing activities', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' Sales revenue', 38), ('from trading business', 33), ('revenue from operations', 32), ('sale of products', 30), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 26), (' revenue from continuing activities', 25), (' Sale of coal', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), (' revenue from continuing activities', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), (' revenue from continuing activities', 19), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('revenue from operations', 42), ('from trading business', 38), (' Sales revenue', 36), ('sale of products', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('transmission and distribution business', 31), (' Revenue', 26), (' revenue from continuing activities', 24), (' Sale of coal', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('transmission and distribution business', 29), ('from trading business', 29), ('revenue from operations', 28), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' revenue from continuing activities', 21), (' Sale of coal', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' revenue from continuing activities', 49), ('revenue from contracts with customers', 47), ('Revenue from contract with customers', 47), ('revenue from operations', 46), ('from trading business', 38), ('transmission and distribution business', 33), ('sale of products', 27), ('net sales', 20), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), (' revenue from continuing activities', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('from trading business', 36), (' revenue from continuing activities', 36), ('revenue from operations', 35), ('transmission and distribution business', 31), ('sale of products', 29), (' Sales revenue', 29), ('net sales', 26), (' Revenue', 22), (' Sale of coal', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('from trading business', 40), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('sale of products', 38), (' revenue from continuing activities', 37), (' Sales revenue', 35), ('revenue from operations', 31), ('transmission and distribution business', 29), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 650842.0, 'line_item_label': ['Revenue'], 'note_numbers': ['5'], 'line_item_value': [650842.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), (' revenue from continuing activities', 39), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 33), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('transmission and distribution business', 21), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19), (' revenue from continuing activities', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' Sales revenue', 38), ('from trading business', 33), ('revenue from operations', 32), ('sale of products', 30), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 26), (' revenue from continuing activities', 25), (' Sale of coal', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), (' revenue from continuing activities', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), (' revenue from continuing activities', 19), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('revenue from operations', 42), ('from trading business', 38), (' Sales revenue', 36), ('sale of products', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('transmission and distribution business', 31), (' Revenue', 26), (' revenue from continuing activities', 24), (' Sale of coal', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('transmission and distribution business', 29), ('from trading business', 29), ('revenue from operations', 28), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' revenue from continuing activities', 21), (' Sale of coal', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' revenue from continuing activities', 49), ('revenue from contracts with customers', 47), ('Revenue from contract with customers', 47), ('revenue from operations', 46), ('from trading business', 38), ('transmission and distribution business', 33), ('sale of products', 27), ('net sales', 20), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), (' revenue from continuing activities', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('from trading business', 36), (' revenue from continuing activities', 36), ('revenue from operations', 35), ('transmission and distribution business', 31), ('sale of products', 29), (' Sales revenue', 29), ('net sales', 26), (' Revenue', 22), (' Sale of coal', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('from trading business', 40), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('sale of products', 38), (' revenue from continuing activities', 37), (' Sales revenue', 35), ('revenue from operations', 31), ('transmission and distribution business', 29), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 732130.0, 'line_item_label': ['Revenue'], 'note_numbers': ['5'], 'line_item_value': [732130.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 82), (' Sale of goods - Motorcycles', 64), (' Sale of goods - Marine', 64), (' Condensate', 57), (' Feed gas income', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 36), (' Goods sold to customer direct from supplier', 36), (' LNG', 33), (' Total Revenue', 33), (' Gas transportation income', 29), (' Domgas', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = revenue is derived from the transfer of goods and services at the point in time, none has been derived over time. $'000's , res_fuzz_match = [('Sale of goods', 78), (' Sale of goods - Cars', 69), (' Sale of goods - Marine', 67), (' Sale of goods - Spareparts', 58), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Feed gas income', 46), (' Condensate', 43), (' Goods sold to customer direct from supplier', 43), (' Total Revenue', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 40), (' LNG', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 82), (' Sale of goods - Motorcycles', 64), (' Sale of goods - Marine', 64), (' Condensate', 57), (' Feed gas income', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 36), (' Goods sold to customer direct from supplier', 36), (' LNG', 33), (' Total Revenue', 33), (' Gas transportation income', 29), (' Domgas', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = revenue is derived from the transfer of goods and services at the point in time, none has been derived over time. $'000's , res_fuzz_match = [('Sale of goods', 78), (' Sale of goods - Cars', 69), (' Sale of goods - Marine', 67), (' Sale of goods - Spareparts', 58), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Feed gas income', 46), (' Condensate', 43), (' Goods sold to customer direct from supplier', 43), (' Total Revenue', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 40), (' LNG', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [732130.0, 650842.0], 'label': ['None Sale of goods', 'None Sale of goods'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' cost of goods sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('total expenses', 67), ('expense', 57), ('total expenditure', 52), ('expenditure', 48), (' Personnel costs', 41), (' Cost of product sold', 38), (' Cost of goods and services sold', 35), ('purchase of stock-in-trade', 29), (' Cost of inventory sold', 29), ('cost of sales', 25), ('Cost of sales', 25), (' cost of coal sold', 21), (' cost of goods sold', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('total expenses', 62), ('total expenditure', 55), ('expense', 52), ('expenditure', 52), (' Personnel costs', 45), (' Cost of goods and services sold', 38), (' Cost of product sold', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), (' cost of coal sold', 26), ('cost of sales', 23), ('Cost of sales', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), (' Cost of product sold', 20), (' cost of coal sold', 15), (' cost of goods sold', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 39), (' Cost of inventory sold', 35), ('total expenditure', 33), (' Cost of product sold', 33), ('total expenses', 32), (' Personnel costs', 30), (' cost of goods sold', 30), ('purchase of stock-in-trade', 27), (' cost of coal sold', 26), ('expenditure', 24), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 16)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold', 27), (' Cost of product sold', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold', 24), ('expense', 16)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' Cost of inventory sold', 45), ('total expenses', 43), ('purchase of stock-in-trade', 41), ('total expenditure', 39), (' cost of coal sold', 36), (' Cost of goods and services sold', 36), (' Personnel costs', 36), (' Cost of product sold', 34), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), ('expense', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': 100, 'value': -542321.0, 'line_item_label': ['Cost of sales', 'expenses'], 'note_numbers': [nan, '10'], 'line_item_value': [-534112.0, -8209.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' cost of goods sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('total expenses', 67), ('expense', 57), ('total expenditure', 52), ('expenditure', 48), (' Personnel costs', 41), (' Cost of product sold', 38), (' Cost of goods and services sold', 35), ('purchase of stock-in-trade', 29), (' Cost of inventory sold', 29), ('cost of sales', 25), ('Cost of sales', 25), (' cost of coal sold', 21), (' cost of goods sold', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10), (' cost of goods sold', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('total expenses', 62), ('total expenditure', 55), ('expense', 52), ('expenditure', 52), (' Personnel costs', 45), (' Cost of goods and services sold', 38), (' Cost of product sold', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), (' cost of coal sold', 26), ('cost of sales', 23), ('Cost of sales', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), (' Cost of product sold', 20), (' cost of coal sold', 15), (' cost of goods sold', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 39), (' Cost of inventory sold', 35), ('total expenditure', 33), (' Cost of product sold', 33), ('total expenses', 32), (' Personnel costs', 30), (' cost of goods sold', 30), ('purchase of stock-in-trade', 27), (' cost of coal sold', 26), ('expenditure', 24), ('cost of sales', 24), ('Cost of sales', 24), ('expense', 16)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold', 27), (' Cost of product sold', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold', 24), ('expense', 16)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' Cost of inventory sold', 45), ('total expenses', 43), ('purchase of stock-in-trade', 41), ('total expenditure', 39), (' cost of coal sold', 36), (' Cost of goods and services sold', 36), (' Personnel costs', 36), (' Cost of product sold', 34), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), ('expense', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': 100, 'value': -630050.0, 'line_item_label': ['Cost of sales', 'expenses'], 'note_numbers': [nan, '10'], 'line_item_value': [-621520.0, -8530.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['Included in cost of sales'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none legal , res_fuzz_match = [('Included in cost of sales', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none audit , res_fuzz_match = [('Included in cost of sales', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none printing and stationery , res_fuzz_match = [('Included in cost of sales', 50)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none subscriptions , res_fuzz_match = [('Included in cost of sales', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none consultancy , res_fuzz_match = [('Included in cost of sales', 50)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none communications , res_fuzz_match = [('Included in cost of sales', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none others , res_fuzz_match = [('Included in cost of sales', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Included in cost of sales', 50)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none legal , res_fuzz_match = [('Included in cost of sales', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none audit , res_fuzz_match = [('Included in cost of sales', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none printing and stationery , res_fuzz_match = [('Included in cost of sales', 50)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none subscriptions , res_fuzz_match = [('Included in cost of sales', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none consultancy , res_fuzz_match = [('Included in cost of sales', 50)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none communications , res_fuzz_match = [('Included in cost of sales', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none others , res_fuzz_match = [('Included in cost of sales', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Included in cost of sales', 50)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('other expenses', 74), (' Other expenses', 74), (' Other expenses', 74), (' Marketing expenses', 71), (' Occupancy expenses', 67), (' Lease expenses', 62), (' Selling Expenses', 62), (' Management expenses', 52), (' Administrative and other expenses', 49), (' depreciation', 45), (' Selling & distribution expenses', 44), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Administrative expenses', 39), (' Administration expenses', 39), (' Sales and marketing', 33), (' Logistics and distribution', 29), (' Occupancy ', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other expenses', 83), (' Other expenses', 83), (' Other expenses', 83), (' Occupancy expenses', 62), (' Marketing expenses', 60), (' Lease expenses', 57), (' Selling Expenses', 57), (' Administrative and other expenses', 56), (' Management expenses', 48), (' Selling & distribution expenses', 42), (' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Amortisation expenses', 39), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' depreciation', 33), (' Logistics and distribution', 32), (' Sales and marketing', 31), (' Occupancy ', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Logistics and distribution', 24), (' Sales and marketing', 21), (' Occupancy ', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' Administrative and other expenses', 34), (' Logistics and distribution', 31), (' Advertising expenses', 30), (' Amortisation expenses', 30), (' Sales and marketing', 30), ('other expenses', 27), (' Marketing expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Selling & distribution expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Selling Expenses', 19), (' Occupancy ', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 46), (' Management expenses', 38), (' Marketing expenses', 37), (' Lease expenses', 34), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 29), (' Selling Expenses', 29), (' Logistics and distribution', 28), (' Selling & distribution expenses', 27), (' Amortisation expenses', 27), ('Distribution expenses', 26), (' depreciation', 22), (' Advertising expenses', 22), (' Occupancy ', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 43), (' Other expenses', 43), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Sales and marketing', 32), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Administrative expenses', 27), (' Administration expenses', 27), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 19), (' Occupancy ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 8], 'score': 83, 'value': -44472.0, 'line_item_label': ['Selling expenses', 'Other operating expenses'], 'note_numbers': ['7', '11'], 'line_item_value': [-39538.0, -4934.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('other expenses', 74), (' Other expenses', 74), (' Other expenses', 74), (' Marketing expenses', 71), (' Occupancy expenses', 67), (' Lease expenses', 62), (' Selling Expenses', 62), (' Management expenses', 52), (' Administrative and other expenses', 49), (' depreciation', 45), (' Selling & distribution expenses', 44), (' Depreciation expenses', 41), (' Depreciation expenses', 41), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Administrative expenses', 39), (' Administration expenses', 39), (' Sales and marketing', 33), (' Logistics and distribution', 29), (' Occupancy ', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other expenses', 83), (' Other expenses', 83), (' Other expenses', 83), (' Occupancy expenses', 62), (' Marketing expenses', 60), (' Lease expenses', 57), (' Selling Expenses', 57), (' Administrative and other expenses', 56), (' Management expenses', 48), (' Selling & distribution expenses', 42), (' Depreciation expenses', 39), (' Depreciation expenses', 39), (' Amortisation expenses', 39), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' depreciation', 33), (' Logistics and distribution', 32), (' Sales and marketing', 31), (' Occupancy ', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Logistics and distribution', 24), (' Sales and marketing', 21), (' Occupancy ', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' Administrative and other expenses', 34), (' Logistics and distribution', 31), (' Advertising expenses', 30), (' Amortisation expenses', 30), (' Sales and marketing', 30), ('other expenses', 27), (' Marketing expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Selling & distribution expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 25), (' Administrative expenses', 25), (' Administration expenses', 25), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Selling Expenses', 19), (' Occupancy ', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Administrative and other expenses', 46), (' Management expenses', 38), (' Marketing expenses', 37), (' Lease expenses', 34), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Occupancy expenses', 29), (' Selling Expenses', 29), (' Logistics and distribution', 28), (' Selling & distribution expenses', 27), (' Amortisation expenses', 27), ('Distribution expenses', 26), (' depreciation', 22), (' Advertising expenses', 22), (' Occupancy ', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 43), (' Other expenses', 43), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Sales and marketing', 32), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Administrative expenses', 27), (' Administration expenses', 27), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 19), (' Occupancy ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 8], 'score': 83, 'value': -47338.0, 'line_item_label': ['Selling expenses', 'Other operating expenses'], 'note_numbers': ['7', '11'], 'line_item_value': [-44045.0, -3293.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none insurance , res_fuzz_match = [('csr', 67), ('consum', 50), ('Included in administrative expenses', 50), (' Compulsory superannuation contributions', 50), ('power', 40), ('equipment', 40), ('donation', 40), (' Administrative expenses', 40), (' Wages and salaries', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('research', 38), ('machinery', 33), ('social', 33), (' Depreciation – property', 30), (' plant and equipment', 30), (' Depreciation – right-of-use assets', 30), ('exchange', 29), ('loss on', 25), ('miscellaneous', 22), ('charges', 20), ('loss allowance', 20), (' Staff welfare', 20), ('analytical', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none warranty , res_fuzz_match = [('analytical', 50), (' Compulsory superannuation contributions', 46), ('power', 40), ('charges', 40), ('donation', 40), ('research', 38), ('Included in administrative expenses', 38), (' Depreciation – property', 38), (' plant and equipment', 38), (' Wages and salaries', 38), (' Payroll on-costs (excluding employee benefit provision)', 38), ('machinery', 35), ('consum', 33), ('csr', 33), ('miscellaneous', 33), (' Staff welfare', 33), (' Depreciation – right-of-use assets', 31), ('loss allowance', 30), ('exchange', 29), ('loss on', 25), (' Administrative expenses', 23), ('equipment', 20), ('social', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none delivery , res_fuzz_match = [(' Wages and salaries', 46), ('machinery', 44), ('power', 40), ('equipment', 40), ('donation', 40), ('research', 38), ('Included in administrative expenses', 38), (' plant and equipment', 38), (' Depreciation – right-of-use assets', 38), (' Compulsory superannuation contributions', 38), (' Payroll on-costs (excluding employee benefit provision)', 38), ('consum', 33), ('csr', 33), (' Staff welfare', 33), (' Depreciation – property', 31), (' Administrative expenses', 31), ('loss allowance', 30), ('loss on', 25), ('miscellaneous', 22), ('charges', 20), ('analytical', 17), ('social', 17), ('exchange', 14)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none advertising , res_fuzz_match = [('Included in administrative expenses', 46), (' plant and equipment', 46), (' Wages and salaries', 46), (' Payroll on-costs (excluding employee benefit provision)', 46), ('machinery', 44), ('power', 40), ('equipment', 40), ('donation', 40), (' Depreciation – property', 40), (' Depreciation – right-of-use assets', 38), (' Compulsory superannuation contributions', 38), ('consum', 33), ('analytical', 33), ('csr', 33), ('social', 33), (' Administrative expenses', 31), ('loss allowance', 30), ('exchange', 29), ('research', 25), ('loss on', 25), (' Staff welfare', 25), ('miscellaneous', 22), ('charges', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none dealer development , res_fuzz_match = [('research', 50), ('loss on', 50), (' Payroll on-costs (excluding employee benefit provision)', 47), ('power', 40), ('charges', 40), ('equipment', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 40), ('Included in administrative expenses', 37), (' Depreciation – property', 34), ('consum', 33), ('machinery', 33), ('analytical', 33), ('csr', 33), ('social', 33), (' plant and equipment', 33), (' Staff welfare', 33), (' Compulsory superannuation contributions', 32), (' Administrative expenses', 31), ('exchange', 29), ('miscellaneous', 22), (' Depreciation – right-of-use assets', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none travel , res_fuzz_match = [(' Compulsory superannuation contributions', 45), (' Payroll on-costs (excluding employee benefit provision)', 45), ('power', 40), ('donation', 40), ('loss allowance', 40), ('Included in administrative expenses', 36), (' plant and equipment', 36), (' Depreciation – right-of-use assets', 36), (' Administrative expenses', 36), (' Wages and salaries', 36), (' Staff welfare', 36), ('consum', 33), ('machinery', 33), ('analytical', 33), ('csr', 33), ('social', 33), ('exchange', 29), (' Depreciation – property', 27), ('research', 25), ('loss on', 25), ('miscellaneous', 22), ('charges', 20), ('equipment', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none others , res_fuzz_match = [('power', 60), (' Compulsory superannuation contributions', 60), ('charges', 44), ('donation', 40), (' Depreciation – property', 40), (' plant and equipment', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('research', 38), ('machinery', 35), ('consum', 33), ('analytical', 33), ('csr', 33), ('loss allowance', 30), ('Included in administrative expenses', 30), (' Depreciation – right-of-use assets', 30), (' Administrative expenses', 30), (' Wages and salaries', 30), (' Staff welfare', 30), ('exchange', 29), ('loss on', 25), ('equipment', 20), ('social', 17), ('miscellaneous', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('social', 50), (' Compulsory superannuation contributions', 50), ('power', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('consum', 33), ('analytical', 33), ('Included in administrative expenses', 30), (' Depreciation – property', 30), (' plant and equipment', 30), (' Depreciation – right-of-use assets', 30), (' Staff welfare', 30), ('exchange', 29), ('research', 25), ('loss on', 25), ('machinery', 22), ('miscellaneous', 22), ('charges', 20), ('equipment', 20), (' Administrative expenses', 20), ('csr', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none insurance , res_fuzz_match = [('csr', 67), ('consum', 50), ('Included in administrative expenses', 50), (' Compulsory superannuation contributions', 50), ('power', 40), ('equipment', 40), ('donation', 40), (' Administrative expenses', 40), (' Wages and salaries', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('research', 38), ('machinery', 33), ('social', 33), (' Depreciation – property', 30), (' plant and equipment', 30), (' Depreciation – right-of-use assets', 30), ('exchange', 29), ('loss on', 25), ('miscellaneous', 22), ('charges', 20), ('loss allowance', 20), (' Staff welfare', 20), ('analytical', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none warranty , res_fuzz_match = [('analytical', 50), (' Compulsory superannuation contributions', 46), ('power', 40), ('charges', 40), ('donation', 40), ('research', 38), ('Included in administrative expenses', 38), (' Depreciation – property', 38), (' plant and equipment', 38), (' Wages and salaries', 38), (' Payroll on-costs (excluding employee benefit provision)', 38), ('machinery', 35), ('consum', 33), ('csr', 33), ('miscellaneous', 33), (' Staff welfare', 33), (' Depreciation – right-of-use assets', 31), ('loss allowance', 30), ('exchange', 29), ('loss on', 25), (' Administrative expenses', 23), ('equipment', 20), ('social', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none delivery , res_fuzz_match = [(' Wages and salaries', 46), ('machinery', 44), ('power', 40), ('equipment', 40), ('donation', 40), ('research', 38), ('Included in administrative expenses', 38), (' plant and equipment', 38), (' Depreciation – right-of-use assets', 38), (' Compulsory superannuation contributions', 38), (' Payroll on-costs (excluding employee benefit provision)', 38), ('consum', 33), ('csr', 33), (' Staff welfare', 33), (' Depreciation – property', 31), (' Administrative expenses', 31), ('loss allowance', 30), ('loss on', 25), ('miscellaneous', 22), ('charges', 20), ('analytical', 17), ('social', 17), ('exchange', 14)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none advertising , res_fuzz_match = [('Included in administrative expenses', 46), (' plant and equipment', 46), (' Wages and salaries', 46), (' Payroll on-costs (excluding employee benefit provision)', 46), ('machinery', 44), ('power', 40), ('equipment', 40), ('donation', 40), (' Depreciation – property', 40), (' Depreciation – right-of-use assets', 38), (' Compulsory superannuation contributions', 38), ('consum', 33), ('analytical', 33), ('csr', 33), ('social', 33), (' Administrative expenses', 31), ('loss allowance', 30), ('exchange', 29), ('research', 25), ('loss on', 25), (' Staff welfare', 25), ('miscellaneous', 22), ('charges', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none dealer development , res_fuzz_match = [('research', 50), ('loss on', 50), (' Payroll on-costs (excluding employee benefit provision)', 47), ('power', 40), ('charges', 40), ('equipment', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 40), ('Included in administrative expenses', 37), (' Depreciation – property', 34), ('consum', 33), ('machinery', 33), ('analytical', 33), ('csr', 33), ('social', 33), (' plant and equipment', 33), (' Staff welfare', 33), (' Compulsory superannuation contributions', 32), (' Administrative expenses', 31), ('exchange', 29), ('miscellaneous', 22), (' Depreciation – right-of-use assets', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none travel , res_fuzz_match = [(' Compulsory superannuation contributions', 45), (' Payroll on-costs (excluding employee benefit provision)', 45), ('power', 40), ('donation', 40), ('loss allowance', 40), ('Included in administrative expenses', 36), (' plant and equipment', 36), (' Depreciation – right-of-use assets', 36), (' Administrative expenses', 36), (' Wages and salaries', 36), (' Staff welfare', 36), ('consum', 33), ('machinery', 33), ('analytical', 33), ('csr', 33), ('social', 33), ('exchange', 29), (' Depreciation – property', 27), ('research', 25), ('loss on', 25), ('miscellaneous', 22), ('charges', 20), ('equipment', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none others , res_fuzz_match = [('power', 60), (' Compulsory superannuation contributions', 60), ('charges', 44), ('donation', 40), (' Depreciation – property', 40), (' plant and equipment', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('research', 38), ('machinery', 35), ('consum', 33), ('analytical', 33), ('csr', 33), ('loss allowance', 30), ('Included in administrative expenses', 30), (' Depreciation – right-of-use assets', 30), (' Administrative expenses', 30), (' Wages and salaries', 30), (' Staff welfare', 30), ('exchange', 29), ('loss on', 25), ('equipment', 20), ('social', 17), ('miscellaneous', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('social', 50), (' Compulsory superannuation contributions', 50), ('power', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 40), (' Payroll on-costs (excluding employee benefit provision)', 40), ('consum', 33), ('analytical', 33), ('Included in administrative expenses', 30), (' Depreciation – property', 30), (' plant and equipment', 30), (' Depreciation – right-of-use assets', 30), (' Staff welfare', 30), ('exchange', 29), ('research', 25), ('loss on', 25), ('machinery', 22), ('miscellaneous', 22), ('charges', 20), ('equipment', 20), (' Administrative expenses', 20), ('csr', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [475.0, 66.0, 33840.0, 6803.0, 934.0, 909.0, 1018.0, 44045.0, 395.0, 2450.0, 28495.0, 6349.0, 584.0, 391.0, 874.0, 39538.0], 'label': ["$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none net (gain)/loss on disposal of property, plant and equipment 29 , res_fuzz_match = [('equipment', 100), ('loss on', 100), (' plant and equipment', 100), (' Depreciation – property', 61), ('power', 60), ('loss allowance', 60), ('analytical', 50), (' Wages and salaries', 47), ('machinery', 44), ('miscellaneous', 44), ('exchange', 43), ('Included in administrative expenses', 43), ('donation', 40), (' Compulsory superannuation contributions', 40), ('research', 38), (' Administrative expenses', 38), (' Depreciation – right-of-use assets', 36), (' Payroll on-costs (excluding employee benefit provision)', 35), ('consum', 33), ('csr', 33), ('social', 33), (' Staff welfare', 33), ('charges', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none net foreign exchange (gain)/loss nan , res_fuzz_match = [('exchange', 100), ('loss on', 100), ('charges', 80), ('loss allowance', 60), ('analytical', 50), (' Wages and salaries', 47), ('power', 40), ('equipment', 40), ('donation', 40), (' plant and equipment', 40), ('Included in administrative expenses', 39), ('research', 38), (' Administrative expenses', 38), (' Compulsory superannuation contributions', 37), (' Payroll on-costs (excluding employee benefit provision)', 37), (' Depreciation – right-of-use assets', 36), ('consum', 33), ('machinery', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), (' Depreciation – property', 33), (' Staff welfare', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none debt collection & credit reporting nan , res_fuzz_match = [('csr', 67), (' Depreciation – property', 50), (' plant and equipment', 47), (' Administrative expenses', 44), ('Included in administrative expenses', 43), (' Payroll on-costs (excluding employee benefit provision)', 43), ('power', 40), ('charges', 40), ('equipment', 40), ('donation', 40), (' Depreciation – right-of-use assets', 40), ('research', 38), ('consum', 33), ('machinery', 33), ('analytical', 33), ('social', 33), ('miscellaneous', 33), (' Wages and salaries', 33), (' Compulsory superannuation contributions', 33), (' Staff welfare', 33), ('loss allowance', 30), ('exchange', 29), ('loss on', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none depreciation expense property plant & equipment 19/29 , res_fuzz_match = [('equipment', 100), (' plant and equipment', 73), (' Depreciation – property', 67), ('power', 60), (' Administrative expenses', 56), (' Depreciation – right-of-use assets', 52), ('analytical', 50), ('Included in administrative expenses', 48), ('machinery', 44), ('miscellaneous', 44), ('exchange', 43), ('donation', 40), (' Wages and salaries', 40), (' Compulsory superannuation contributions', 40), ('research', 38), (' Payroll on-costs (excluding employee benefit provision)', 38), ('csr', 33), ('social', 33), (' Staff welfare', 33), ('loss allowance', 30), ('loss on', 25), ('charges', 20), ('consum', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none amortisation intangible assets 29 , res_fuzz_match = [('loss on', 50), (' Depreciation – right-of-use assets', 48), ('miscellaneous', 44), ('exchange', 43), (' Staff welfare', 42), ('power', 40), ('charges', 40), ('donation', 40), ('loss allowance', 40), (' plant and equipment', 40), (' Compulsory superannuation contributions', 40), ('Included in administrative expenses', 39), (' Administrative expenses', 38), (' Payroll on-costs (excluding employee benefit provision)', 36), ('consum', 33), ('machinery', 33), ('analytical', 33), ('csr', 33), ('social', 33), (' Depreciation – property', 33), (' Wages and salaries', 33), ('research', 25), ('equipment', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none bank charges nan , res_fuzz_match = [('charges', 100), ('exchange', 57), (' Wages and salaries', 47), ('machinery', 44), ('power', 40), ('donation', 40), ('research', 38), (' Depreciation – right-of-use assets', 37), (' Compulsory superannuation contributions', 37), (' Payroll on-costs (excluding employee benefit provision)', 37), ('consum', 33), ('analytical', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), (' plant and equipment', 33), (' Staff welfare', 33), ('Included in administrative expenses', 32), (' Administrative expenses', 31), ('loss allowance', 30), ('loss on', 25), (' Depreciation – property', 23), ('equipment', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none provision for doubtful debts nan , res_fuzz_match = [('donation', 60), (' Depreciation – property', 44), (' Depreciation – right-of-use assets', 44), ('exchange', 43), ('power', 40), ('equipment', 40), ('loss allowance', 40), (' Compulsory superannuation contributions', 37), (' Payroll on-costs (excluding employee benefit provision)', 37), ('consum', 33), ('analytical', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), (' Staff welfare', 33), (' Administrative expenses', 31), ('Included in administrative expenses', 30), (' plant and equipment', 27), (' Wages and salaries', 27), ('research', 25), ('loss on', 25), ('machinery', 22), ('charges', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('analytical', 50), ('social', 50), ('power', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 37), ('Included in administrative expenses', 36), (' plant and equipment', 36), (' Depreciation – right-of-use assets', 36), (' Compulsory superannuation contributions', 36), (' Payroll on-costs (excluding employee benefit provision)', 36), ('consum', 33), ('miscellaneous', 33), (' Staff welfare', 33), ('exchange', 29), (' Depreciation – property', 29), (' Administrative expenses', 29), ('research', 25), ('loss on', 25), ('machinery', 22), ('charges', 20), ('equipment', 20), ('csr', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none net (gain)/loss on disposal of property, plant and equipment 29 , res_fuzz_match = [('equipment', 100), ('loss on', 100), (' plant and equipment', 100), (' Depreciation – property', 61), ('power', 60), ('loss allowance', 60), ('analytical', 50), (' Wages and salaries', 47), ('machinery', 44), ('miscellaneous', 44), ('exchange', 43), ('Included in administrative expenses', 43), ('donation', 40), (' Compulsory superannuation contributions', 40), ('research', 38), (' Administrative expenses', 38), (' Depreciation – right-of-use assets', 36), (' Payroll on-costs (excluding employee benefit provision)', 35), ('consum', 33), ('csr', 33), ('social', 33), (' Staff welfare', 33), ('charges', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none net foreign exchange (gain)/loss nan , res_fuzz_match = [('exchange', 100), ('loss on', 100), ('charges', 80), ('loss allowance', 60), ('analytical', 50), (' Wages and salaries', 47), ('power', 40), ('equipment', 40), ('donation', 40), (' plant and equipment', 40), ('Included in administrative expenses', 39), ('research', 38), (' Administrative expenses', 38), (' Compulsory superannuation contributions', 37), (' Payroll on-costs (excluding employee benefit provision)', 37), (' Depreciation – right-of-use assets', 36), ('consum', 33), ('machinery', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), (' Depreciation – property', 33), (' Staff welfare', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none debt collection & credit reporting nan , res_fuzz_match = [('csr', 67), (' Depreciation – property', 50), (' plant and equipment', 47), (' Administrative expenses', 44), ('Included in administrative expenses', 43), (' Payroll on-costs (excluding employee benefit provision)', 43), ('power', 40), ('charges', 40), ('equipment', 40), ('donation', 40), (' Depreciation – right-of-use assets', 40), ('research', 38), ('consum', 33), ('machinery', 33), ('analytical', 33), ('social', 33), ('miscellaneous', 33), (' Wages and salaries', 33), (' Compulsory superannuation contributions', 33), (' Staff welfare', 33), ('loss allowance', 30), ('exchange', 29), ('loss on', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none depreciation expense property plant & equipment 19/29 , res_fuzz_match = [('equipment', 100), (' plant and equipment', 73), (' Depreciation – property', 67), ('power', 60), (' Administrative expenses', 56), (' Depreciation – right-of-use assets', 52), ('analytical', 50), ('Included in administrative expenses', 48), ('machinery', 44), ('miscellaneous', 44), ('exchange', 43), ('donation', 40), (' Wages and salaries', 40), (' Compulsory superannuation contributions', 40), ('research', 38), (' Payroll on-costs (excluding employee benefit provision)', 38), ('csr', 33), ('social', 33), (' Staff welfare', 33), ('loss allowance', 30), ('loss on', 25), ('charges', 20), ('consum', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none amortisation intangible assets 29 , res_fuzz_match = [('loss on', 50), (' Depreciation – right-of-use assets', 48), ('miscellaneous', 44), ('exchange', 43), (' Staff welfare', 42), ('power', 40), ('charges', 40), ('donation', 40), ('loss allowance', 40), (' plant and equipment', 40), (' Compulsory superannuation contributions', 40), ('Included in administrative expenses', 39), (' Administrative expenses', 38), (' Payroll on-costs (excluding employee benefit provision)', 36), ('consum', 33), ('machinery', 33), ('analytical', 33), ('csr', 33), ('social', 33), (' Depreciation – property', 33), (' Wages and salaries', 33), ('research', 25), ('equipment', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none bank charges nan , res_fuzz_match = [('charges', 100), ('exchange', 57), (' Wages and salaries', 47), ('machinery', 44), ('power', 40), ('donation', 40), ('research', 38), (' Depreciation – right-of-use assets', 37), (' Compulsory superannuation contributions', 37), (' Payroll on-costs (excluding employee benefit provision)', 37), ('consum', 33), ('analytical', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), (' plant and equipment', 33), (' Staff welfare', 33), ('Included in administrative expenses', 32), (' Administrative expenses', 31), ('loss allowance', 30), ('loss on', 25), (' Depreciation – property', 23), ('equipment', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none provision for doubtful debts nan , res_fuzz_match = [('donation', 60), (' Depreciation – property', 44), (' Depreciation – right-of-use assets', 44), ('exchange', 43), ('power', 40), ('equipment', 40), ('loss allowance', 40), (' Compulsory superannuation contributions', 37), (' Payroll on-costs (excluding employee benefit provision)', 37), ('consum', 33), ('analytical', 33), ('csr', 33), ('social', 33), ('miscellaneous', 33), (' Staff welfare', 33), (' Administrative expenses', 31), ('Included in administrative expenses', 30), (' plant and equipment', 27), (' Wages and salaries', 27), ('research', 25), ('loss on', 25), ('machinery', 22), ('charges', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total nan , res_fuzz_match = [('analytical', 50), ('social', 50), ('power', 40), ('donation', 40), ('loss allowance', 40), (' Wages and salaries', 37), ('Included in administrative expenses', 36), (' plant and equipment', 36), (' Depreciation – right-of-use assets', 36), (' Compulsory superannuation contributions', 36), (' Payroll on-costs (excluding employee benefit provision)', 36), ('consum', 33), ('miscellaneous', 33), (' Staff welfare', 33), ('exchange', 29), (' Depreciation – property', 29), (' Administrative expenses', 29), ('research', 25), ('loss on', 25), ('machinery', 22), ('charges', 20), ('equipment', 20), ('csr', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('consum', 100), ('research', 100), ('loss on', 100), ('csr', 100), ('social', 100), ('miscellaneous', 100), ('loss allowance', 100), ('Included in administrative expenses', 100), (' Depreciation – right-of-use assets', 100), (' Administrative expenses', 100), (' Wages and salaries', 100), (' Compulsory superannuation contributions', 100), (' Payroll on-costs (excluding employee benefit provision)', 100), (' Staff welfare', 100), ('power', 0), ('machinery', 0), ('charges', 0), ('analytical', 0), ('equipment', 0), ('exchange', 0), ('donation', 0), (' Depreciation – property', 0), (' plant and equipment', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 15], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, -513.0, -513.0, 785.0, 1823.0, 1823.0, 1186.0, 82.0, 82.0, -70.0, 3293.0, -5.0, -5.0, -62.0, -62.0, 750.0, 1713.0, 1713.0, 1234.0, 70.0, 70.0, 1234.0, 4934.0], 'label': ['None Net (gain)/loss on disposal of property, plant and equipment 29', "$'000's", 'None Net foreign exchange (gain)/loss nan', "$'000's", "$'000's", 'None Depreciation expense property plant & equipment 19/29', "$'000's", "$'000's", 'None Bank charges nan', "$'000's", "$'000's", "$'000's", 'None Net (gain)/loss on disposal of property, plant and equipment 29', "$'000's", 'None Net foreign exchange (gain)/loss nan', "$'000's", "$'000's", 'None Depreciation expense property plant & equipment 19/29', "$'000's", "$'000's", 'None Bank charges nan', "$'000's", "$'000's", "$'000's"], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' Rental expenses', 71), (' Occupancy expenses', 67), (' Administration expenses', 39), ('Rent', 32), (' Occupancy', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' Occupancy expenses', 62), (' Rental expenses', 60), (' Administration expenses', 36), ('Rent', 29), (' Occupancy', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 25), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' Rental expenses', 37), (' Administration expenses', 30), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 21), (' Occupancy', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' Rental expenses', 71), (' Occupancy expenses', 67), (' Administration expenses', 39), ('Rent', 32), (' Occupancy', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' Occupancy expenses', 62), (' Rental expenses', 60), (' Administration expenses', 36), ('Rent', 29), (' Occupancy', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 25), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' Rental expenses', 37), (' Administration expenses', 30), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 21), (' Occupancy', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('other operating', 48), (' Other income', 38), ('Other revenue', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other operating', 74), (' Other income', 57), ('Other revenue', 34)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('other operating', 33), (' Other income', 33), ('Other revenue', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' Other income', 54), ('other operating', 45), ('Other revenue', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 2167.0, 'line_item_label': ['Other income'], 'note_numbers': ['6'], 'line_item_value': [2167.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('other operating', 48), (' Other income', 38), ('Other revenue', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other operating', 74), (' Other income', 57), ('Other revenue', 34)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('other operating', 33), (' Other income', 33), ('Other revenue', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' Other income', 54), ('other operating', 45), ('Other revenue', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1840.0, 'line_item_label': ['Other income'], 'note_numbers': ['6'], 'line_item_value': [1840.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['Other income', ' Commission revenue', ' Rent'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none service department training & tools , res_fuzz_match = [(' Rent', 50), ('Other income', 45), (' Commission revenue', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' Commission revenue', 100), ('Other income', 0), (' Rent', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none finance fees , res_fuzz_match = [('Other income', 55), (' Commission revenue', 36), (' Rent', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' Commission revenue', 100), ('Other income', 0), (' Rent', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Rent', 50), ('Other income', 40), (' Commission revenue', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' Commission revenue', 100), ('Other income', 0), (' Rent', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none service department training & tools , res_fuzz_match = [(' Rent', 50), ('Other income', 45), (' Commission revenue', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' Commission revenue', 100), ('Other income', 0), (' Rent', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none finance fees , res_fuzz_match = [('Other income', 55), (' Commission revenue', 36), (' Rent', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' Commission revenue', 100), ('Other income', 0), (' Rent', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Rent', 50), ('Other income', 40), (' Commission revenue', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [(' Commission revenue', 100), ('Other income', 0), (' Rent', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [542.0, 1298.0, 1840.0, 328.0, 1839.0, 2167.0], 'label': ["$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Interest revenue', 38), ('other income', 27), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' Interest revenue', 40), ('other income', 38), (' Finance income and costs', 28), (' Net finance costs', 27), (' Finance income and finance costs', 23), ('finance income', 22), ('Finance income', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other income', 57), (' Interest revenue', 38), (' Finance income and costs', 26), (' Net finance costs', 25), (' Finance income and finance costs', 22), ('finance income', 21), ('Finance income', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), (' Interest revenue', 36), ('other income', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('other income', 33), (' Finance income and costs', 30), (' Finance income and finance costs', 30), (' Net finance costs', 30), (' Interest revenue', 26), ('finance income', 23), ('Finance income', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('other income', 54), (' Net finance costs', 49), (' Finance income and costs', 39), (' Finance income and finance costs', 38), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 28)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 9], 'score': 100, 'value': 17894.0, 'line_item_label': ['Other income', 'Finance income'], 'note_numbers': ['6', '12'], 'line_item_value': [2167.0, 15727.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Interest revenue', 38), ('other income', 27), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' Interest revenue', 40), ('other income', 38), (' Finance income and costs', 28), (' Net finance costs', 27), (' Finance income and finance costs', 23), ('finance income', 22), ('Finance income', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other income', 57), (' Interest revenue', 38), (' Finance income and costs', 26), (' Net finance costs', 25), (' Finance income and finance costs', 22), ('finance income', 21), ('Finance income', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), (' Interest revenue', 36), ('other income', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('other income', 33), (' Finance income and costs', 30), (' Finance income and finance costs', 30), (' Net finance costs', 30), (' Interest revenue', 26), ('finance income', 23), ('Finance income', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('other income', 54), (' Net finance costs', 49), (' Finance income and costs', 39), (' Finance income and finance costs', 38), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 28)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 9], 'score': 100, 'value': 19178.0, 'line_item_label': ['Other income', 'Finance income'], 'note_numbers': ['6', '12'], 'line_item_value': [1840.0, 17338.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none service department training & tools , res_fuzz_match = [(' Interest income', 50), (' Interest income', 50), (' Interest received - Loan', 45), (' Sublease interest income', 45), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), (' Interest received - Bank', 40), (' Share of JV interest received/(paid)', 39), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 34), ('Bank interest', 31)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Interest income', 100), (' Interest received - Bank', 100), (' Interest received - Loan', 100), (' Sublease interest income', 100), (' Share of JV interest received/(paid)', 100), (' Bank Deposits - cash and cash equivalents', 100), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 100), (' Interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none finance fees , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Share of JV interest received/(paid)', 47), ('Bank interest', 46), (' Interest income', 43), (' Interest income', 43), (' Sublease interest income', 40), (' Bank Deposits - cash and cash equivalents', 40), ('interest', 38), (' Interest received - Bank', 33), (' Interest received - Loan', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Interest income', 100), (' Interest received - Bank', 100), (' Interest received - Loan', 100), (' Sublease interest income', 100), (' Share of JV interest received/(paid)', 100), (' Bank Deposits - cash and cash equivalents', 100), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 100), (' Interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 30), (' Interest income', 30), (' Interest received - Bank', 30), (' Sublease interest income', 30), (' Share of JV interest received/(paid)', 30), (' Interest income', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Interest income', 100), (' Interest received - Bank', 100), (' Interest received - Loan', 100), (' Sublease interest income', 100), (' Share of JV interest received/(paid)', 100), (' Bank Deposits - cash and cash equivalents', 100), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 100), (' Interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none service department training & tools , res_fuzz_match = [(' Interest income', 50), (' Interest income', 50), (' Interest received - Loan', 45), (' Sublease interest income', 45), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), (' Interest received - Bank', 40), (' Share of JV interest received/(paid)', 39), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 34), ('Bank interest', 31)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Interest income', 100), (' Interest received - Bank', 100), (' Interest received - Loan', 100), (' Sublease interest income', 100), (' Share of JV interest received/(paid)', 100), (' Bank Deposits - cash and cash equivalents', 100), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 100), (' Interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none finance fees , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Share of JV interest received/(paid)', 47), ('Bank interest', 46), (' Interest income', 43), (' Interest income', 43), (' Sublease interest income', 40), (' Bank Deposits - cash and cash equivalents', 40), ('interest', 38), (' Interest received - Bank', 33), (' Interest received - Loan', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Interest income', 100), (' Interest received - Bank', 100), (' Interest received - Loan', 100), (' Sublease interest income', 100), (' Share of JV interest received/(paid)', 100), (' Bank Deposits - cash and cash equivalents', 100), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 100), (' Interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 30), (' Interest income', 30), (' Interest received - Bank', 30), (' Sublease interest income', 30), (' Share of JV interest received/(paid)', 30), (' Interest income', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Interest income', 100), (' Interest received - Bank', 100), (' Interest received - Loan', 100), (' Sublease interest income', 100), (' Share of JV interest received/(paid)', 100), (' Bank Deposits - cash and cash equivalents', 100), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 100), (' Interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [542.0, 1298.0, 1840.0, 328.0, 1839.0, 2167.0], 'label': ["$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none service department training & tools , res_fuzz_match = [('Interest expense', 40), ('interest expense', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none finance fees , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Interest expense', 30), ('interest expense', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none service department training & tools , res_fuzz_match = [('Interest expense', 40), ('interest expense', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none finance fees , res_fuzz_match = [('Interest expense', 33), ('interest expense', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('Interest expense', 30), ('interest expense', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [542.0, 1298.0, 1840.0, 328.0, 1839.0, 2167.0], 'label': ["$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 59), (' Interest income', 57), (' Interest income', 57), ('interest', 50), ('Bank interest', 46), (' Sublease interest income', 41), (' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 38), (' Interest received - Bank', 35), (' Share of JV interest received/(paid)', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 59), (' Interest income', 57), (' Interest income', 57), ('interest', 50), ('Bank interest', 46), (' Sublease interest income', 41), (' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 38), (' Interest received - Bank', 35), (' Share of JV interest received/(paid)', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Interest received - Loan', 77), (' Sublease interest income', 77), (' Interest received - Bank', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Share of JV interest received/(paid)', 55), (' Bank Deposits - cash and cash equivalents', 41)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Sublease interest income', 77), (' Interest received - Bank', 75), (' Interest received - Loan', 65), (' Share of JV interest received/(paid)', 58), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 57), (' Bank Deposits - cash and cash equivalents', 41)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 58), (' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 50), ('Bank interest', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 64), (' Interest received - Bank', 60), (' Interest received - Loan', 60), (' Sublease interest income', 59), (' Share of JV interest received/(paid)', 50), (' Bank Deposits - cash and cash equivalents', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 59), (' Interest income', 57), (' Interest income', 57), ('Bank interest', 46), (' Interest received - Loan', 45), (' Sublease interest income', 45), ('interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 37), (' Interest received - Bank', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [(' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 57), (' Interest income', 57), (' Sublease interest income', 55), ('Bank interest', 46), (' Share of JV interest received/(paid)', 42), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 59), (' Interest income', 57), (' Interest income', 57), ('interest', 50), ('Bank interest', 46), (' Sublease interest income', 41), (' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 38), (' Interest received - Bank', 35), (' Share of JV interest received/(paid)', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 59), (' Interest income', 57), (' Interest income', 57), ('interest', 50), ('Bank interest', 46), (' Sublease interest income', 41), (' Interest received - Loan', 40), (' Bank Deposits - cash and cash equivalents', 38), (' Interest received - Bank', 35), (' Share of JV interest received/(paid)', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Interest received - Loan', 77), (' Sublease interest income', 77), (' Interest received - Bank', 67), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Share of JV interest received/(paid)', 55), (' Bank Deposits - cash and cash equivalents', 41)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [('interest', 100), (' Interest income', 100), (' Interest income', 100), ('Bank interest', 77), (' Sublease interest income', 77), (' Interest received - Bank', 75), (' Interest received - Loan', 65), (' Share of JV interest received/(paid)', 58), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 57), (' Bank Deposits - cash and cash equivalents', 41)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 58), (' Interest income', 57), (' Interest income', 57), (' Sublease interest income', 50), ('Bank interest', 46), (' Interest received - Bank', 45), (' Interest received - Loan', 45), ('interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [('interest', 100), ('Bank interest', 77), (' Interest income', 71), (' Interest income', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 64), (' Interest received - Bank', 60), (' Interest received - Loan', 60), (' Sublease interest income', 59), (' Share of JV interest received/(paid)', 50), (' Bank Deposits - cash and cash equivalents', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 59), (' Interest income', 57), (' Interest income', 57), ('Bank interest', 46), (' Interest received - Loan', 45), (' Sublease interest income', 45), ('interest', 38), (' Share of JV interest received/(paid)', 38), (' Bank Deposits - cash and cash equivalents', 37), (' Interest received - Bank', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [(' Interest income', 57), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 57), (' Interest income', 57), (' Sublease interest income', 55), ('Bank interest', 46), (' Share of JV interest received/(paid)', 42), (' Interest received - Bank', 40), (' Interest received - Loan', 40), ('interest', 38), (' Bank Deposits - cash and cash equivalents', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 3, 5, 10, 11, 13], 'score': [100, 100, 100, 100, 100, 100], 'value': [17184.0, 154.0, -6318.0, 15727.0, 0.0, -5647.0], 'label': ['Net finance income / (expense) Interest income loans', 'Net finance income / (expense) Interest income bank deposits', 'Net finance income / (expense) Interest expense', 'Net finance income / (expense) Interest income loans', 'Net finance income / (expense) Interest income bank deposits', 'Net finance income / (expense) Interest expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [('Interest expense', 67), ('interest expense', 67)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [('Interest expense', 67), ('interest expense', 67)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [('Interest expense', 67), ('interest expense', 67)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [('Interest expense', 67), ('interest expense', 67)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 13], 'score': [100, 100], 'value': [-6318.0, -5647.0], 'label': ['Net finance income / (expense) Interest expense', 'Net finance income / (expense) Interest expense'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' finance expenses', 47), (' net finance costs ', 25), ('finance cost', 14), ('finance costs', 14)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' finance expenses', 31), (' net finance costs ', 30), ('finance cost', 28), ('finance costs', 28)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 37), ('finance cost', 34), ('finance costs', 34)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -5647.0, 'line_item_label': ['Finance expense'], 'note_numbers': ['12'], 'line_item_value': [-5647.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' finance expenses', 47), (' net finance costs ', 25), ('finance cost', 14), ('finance costs', 14)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' finance expenses', 31), (' net finance costs ', 30), ('finance cost', 28), ('finance costs', 28)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 37), ('finance cost', 34), ('finance costs', 34)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -6318.0, 'line_item_label': ['Finance expense'], 'note_numbers': ['12'], 'line_item_value': [-6318.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 55), ('  Other interest expense', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('debenture', 50), ('interest', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), (' Discount unwind on the provision for asset retirement obligation', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest accrued on lease liabilities', 43), (' Interest accrued on loans', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), ('bank facilities', 40), (' Interest on leases', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 55), ('  Other interest expense', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('debenture', 50), ('interest', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), (' Discount unwind on the provision for asset retirement obligation', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest accrued on lease liabilities', 43), (' Interest accrued on loans', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), ('bank facilities', 40), (' Interest on leases', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest accrued on loans', 79), (' Interest on leases', 69), ('Interest expenses', 67), (' Lease interest expense', 65), ('  Other interest expense', 62), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Lease liabilities interest expense', 52), ('debt', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 49), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Discount unwind on the provision for asset retirement obligation', 42), ('bank facilities', 40), ('debenture', 38), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [('interest', 100), (' Interest on leases', 69), (' Interest accrued on loans', 68), ('Interest expenses', 67), (' Lease interest expense', 65), ('  Other interest expense', 62), (' Interest accrued on lease liabilities', 54), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 47), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), (' Discount unwind on the provision for asset retirement obligation', 40), ('debenture', 38), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 55), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), ('  Other interest expense', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('bank facilities', 50), (' Interest accrued on lease liabilities', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Discount unwind on the provision for asset retirement obligation', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), (' Interest accrued on loans', 42), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Lease interest expense', 90), ('  Other interest expense', 81), (' Interest on leases', 77), (' Lease liabilities interest expense', 67), (' Interest accrued on loans', 53), (' Interest expense on financial liabilities using the effective interest rate method - other', 51), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 51), ('loan', 50), ('debt', 50), (' Interest accrued on lease liabilities', 46), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), ('bank facilities', 40), ('debenture', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 60), (' Interest expense on financial liabilities using the effective interest rate method - other', 54), ('  Other interest expense', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('bank facilities', 50), (' Interest accrued on lease liabilities', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 46), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on loans', 37), ('cash credit', 36), ('debt', 25), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 55), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('bank facilities', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 50), ('  Other interest expense', 48), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 48), (' Interest accrued on loans', 43), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 55), ('  Other interest expense', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('debenture', 50), ('interest', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), (' Discount unwind on the provision for asset retirement obligation', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest accrued on lease liabilities', 43), (' Interest accrued on loans', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), ('bank facilities', 40), (' Interest on leases', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 55), ('  Other interest expense', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('debenture', 50), ('interest', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 48), (' Discount unwind on the provision for asset retirement obligation', 45), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Interest accrued on lease liabilities', 43), (' Interest accrued on loans', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), ('bank facilities', 40), (' Interest on leases', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest accrued on loans', 79), (' Interest on leases', 69), ('Interest expenses', 67), (' Lease interest expense', 65), ('  Other interest expense', 62), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Lease liabilities interest expense', 52), ('debt', 50), ('bonds', 50), (' Interest accrued on lease liabilities', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 49), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 44), (' Discount unwind on the provision for asset retirement obligation', 42), ('bank facilities', 40), ('debenture', 38), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [('interest', 100), (' Interest on leases', 69), (' Interest accrued on loans', 68), ('Interest expenses', 67), (' Lease interest expense', 65), ('  Other interest expense', 62), (' Interest accrued on lease liabilities', 54), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('bank facilities', 50), ('bonds', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 47), ('cash credit', 45), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), (' Discount unwind on the provision for asset retirement obligation', 40), ('debenture', 38), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 55), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), ('  Other interest expense', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('bank facilities', 50), (' Interest accrued on lease liabilities', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 44), (' Discount unwind on the provision for asset retirement obligation', 42), (' Interest on bank overdrafts and loans (other than those from related parties)', 42), (' Interest accrued on loans', 42), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), (' Lease interest expense', 90), ('  Other interest expense', 81), (' Interest on leases', 77), (' Lease liabilities interest expense', 67), (' Interest accrued on loans', 53), (' Interest expense on financial liabilities using the effective interest rate method - other', 51), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 51), ('loan', 50), ('debt', 50), (' Interest accrued on lease liabilities', 46), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), ('bank facilities', 40), ('debenture', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 60), (' Interest expense on financial liabilities using the effective interest rate method - other', 54), ('  Other interest expense', 52), (' Lease liabilities interest expense', 52), ('loan', 50), ('bank facilities', 50), (' Interest accrued on lease liabilities', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 46), (' Discount unwind on the provision for asset retirement obligation', 41), (' Interest on bank overdrafts and loans (other than those from related parties)', 41), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), (' Interest accrued on loans', 37), ('cash credit', 36), ('debt', 25), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [('Interest expenses', 60), (' Lease interest expense', 55), (' Lease liabilities interest expense', 52), ('loan', 50), ('debt', 50), ('bank facilities', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 50), ('  Other interest expense', 48), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 48), (' Interest accrued on loans', 43), (' Interest accrued on lease liabilities', 42), (' Discount unwind on the provision for asset retirement obligation', 40), (' Interest on bank overdrafts and loans (other than those from related parties)', 40), ('debenture', 38), ('interest', 38), (' Interest on leases', 38), ('cash credit', 36), ('bonds', 25), ('borrowings', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Lease liabilities interest expense', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 3, 5, 10, 11, 13], 'score': [100, 100, 100, 100, 100, 100], 'value': [17184.0, 154.0, -6318.0, 15727.0, 0.0, -5647.0], 'label': ['Net finance income / (expense) Interest income loans', 'Net finance income / (expense) Interest income bank deposits', 'Net finance income / (expense) Interest expense', 'Net finance income / (expense) Interest income loans', 'Net finance income / (expense) Interest income bank deposits', 'Net finance income / (expense) Interest expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['interest income'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [('interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [('interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [('interest income', 71)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [('interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [('interest income', 100)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [('interest income', 71)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [('interest income', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 3, 10, 11], 'score': [100, 100, 100, 100], 'value': [17184.0, 154.0, 15727.0, 0.0], 'label': ['Net finance income / (expense) Interest income loans', 'Net finance income / (expense) Interest income bank deposits', 'Net finance income / (expense) Interest income loans', 'Net finance income / (expense) Interest income bank deposits'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' finance expenses', 47), (' net finance costs ', 25), ('finance cost', 14), ('finance costs', 14)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' finance expenses', 31), (' net finance costs ', 30), ('finance cost', 28), ('finance costs', 28)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 37), ('finance cost', 34), ('finance costs', 34)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -5647.0, 'line_item_label': ['Finance expense'], 'note_numbers': ['12'], 'line_item_value': [-5647.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 27), ('finance cost', 23), ('finance costs', 23)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' finance expenses', 47), (' net finance costs ', 25), ('finance cost', 14), ('finance costs', 14)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [(' finance expenses', 31), (' net finance costs ', 30), ('finance cost', 28), ('finance costs', 28)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 37), ('finance cost', 34), ('finance costs', 34)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -6318.0, 'line_item_label': ['Finance expense'], 'note_numbers': ['12'], 'line_item_value': [-6318.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' other income', 55), (' secondment income (tw recovery)', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' net other foreign exchange (losses)/gains', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' effective portion of changes in fair value of cash flow', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' foreign exchange gain', 40), (' other', 40), (' other miscellaneous - net (loss)/gain', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' dividend from other parties', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' other income', 55), (' secondment income (tw recovery)', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' net other foreign exchange (losses)/gains', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' effective portion of changes in fair value of cash flow', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' foreign exchange gain', 40), (' other', 40), (' other miscellaneous - net (loss)/gain', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' dividend from other parties', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' other', 60), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other miscellaneous - net (loss)/gain', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' effective portion of changes in fair value of cash flow', 40), (' paid by customers - at amortised cost', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' other', 60), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other miscellaneous - net (loss)/gain', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' effective portion of changes in fair value of cash flow', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' other income', 55), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' quota lease income', 50), (' net foreign exchange gains/(losses)', 48), (' net other foreign exchange (losses)/gains', 46), (' foreign exchange gain', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' other miscellaneous - net (loss)/gain', 41), (' other', 40), (' effective portion of changes in fair value of cash flow', 39), (' paid by customers - at amortised cost', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' dividend from other parties', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [(' share of jv income', 64), (' other', 60), (' sundry income', 58), (' net of tax', 57), (' other income', 55), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), ('other revenue', 50), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' quota lease income', 50), (' net foreign exchange gains/(losses)', 48), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), ('  government grants', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' other miscellaneous - net (loss)/gain', 41), (' paid by customers - at amortised cost', 38), (' dividend from other parties', 36), (' effective portion of changes in fair value of cash flow', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' other income', 55), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' quota lease income', 50), (' net foreign exchange gains/(losses)', 48), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' net (loss)/profit on disposal of non-current assets', 44), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), ('  government grants', 42), (' net ppe disposal (loss)/gain', 42), (' other miscellaneous - net (loss)/gain', 41), (' other', 40), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' dividend from other parties', 36), (' paid by customers - at amortised cost', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' other income', 55), (' secondment income (tw recovery)', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' foreign exchange gain', 45), (' other miscellaneous - net (loss)/gain', 45), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), ('  government grants', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' effective portion of changes in fair value of cash flow', 41), (' profit from discontinued operation', 41), (' other', 40), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' dividend from other parties', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' other income', 55), (' secondment income (tw recovery)', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' net other foreign exchange (losses)/gains', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' effective portion of changes in fair value of cash flow', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' foreign exchange gain', 40), (' other', 40), (' other miscellaneous - net (loss)/gain', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' dividend from other parties', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) total , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' other income', 55), (' secondment income (tw recovery)', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' net other foreign exchange (losses)/gains', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' effective portion of changes in fair value of cash flow', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' foreign exchange gain', 40), (' other', 40), (' other miscellaneous - net (loss)/gain', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' dividend from other parties', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income loans , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' other', 60), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other miscellaneous - net (loss)/gain', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' effective portion of changes in fair value of cash flow', 40), (' paid by customers - at amortised cost', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest income bank deposits , res_fuzz_match = [(' other income', 73), (' share of jv income', 73), (' other', 60), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other miscellaneous - net (loss)/gain', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' effective portion of changes in fair value of cash flow', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance income , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' other income', 55), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' quota lease income', 50), (' net foreign exchange gains/(losses)', 48), (' net other foreign exchange (losses)/gains', 46), (' foreign exchange gain', 45), (' japan recoveries', 43), ('other revenue', 42), ('  government grants', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' other miscellaneous - net (loss)/gain', 41), (' other', 40), (' effective portion of changes in fair value of cash flow', 39), (' paid by customers - at amortised cost', 38), (' profit from discontinued operation', 37), (' insurance proceeds', 36), (' dividend from other parties', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) interest expense , res_fuzz_match = [(' share of jv income', 64), (' other', 60), (' sundry income', 58), (' net of tax', 57), (' other income', 55), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), ('other revenue', 50), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' quota lease income', 50), (' net foreign exchange gains/(losses)', 48), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), ('  government grants', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' other miscellaneous - net (loss)/gain', 41), (' paid by customers - at amortised cost', 38), (' dividend from other parties', 36), (' effective portion of changes in fair value of cash flow', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) finance expense , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' other income', 55), (' secondment income (tw recovery)', 52), (' net foreign exchange (loss)/gain', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' quota lease income', 50), (' net foreign exchange gains/(losses)', 48), (' insurance proceeds', 45), (' foreign exchange gain', 45), (' net (loss)/profit on disposal of non-current assets', 44), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), ('  government grants', 42), (' net ppe disposal (loss)/gain', 42), (' other miscellaneous - net (loss)/gain', 41), (' other', 40), (' effective portion of changes in fair value of cash flow', 38), (' profit from discontinued operation', 37), (' dividend from other parties', 36), (' paid by customers - at amortised cost', 33)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = net finance income / (expense) net finance income , res_fuzz_match = [(' share of jv income', 64), (' sundry income', 58), (' net of tax', 57), (' quota lease income', 56), (' other income', 55), (' secondment income (tw recovery)', 52), (' commission revenue', 50), (' net foreign exchange gain', 50), (' margin charge income', 50), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 48), (' foreign exchange gain', 45), (' other miscellaneous - net (loss)/gain', 45), (' japan recoveries', 43), (' net other foreign exchange (losses)/gains', 43), ('other revenue', 42), ('  government grants', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' effective portion of changes in fair value of cash flow', 41), (' profit from discontinued operation', 41), (' other', 40), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' dividend from other parties', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('NULL', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('NULL', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('NULL', 6)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('NULL', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('NULL', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('NULL', 6)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('earlier year', 35), ('amount transferred to retained earnings', 32), ('deferred tax', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), ('provision for taxation previous year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' income tax expense', 58), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 46), ('prior year ', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('deferred tax', 33), ('amount transferred to retained earnings', 33), ('current tax', 31), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' income tax expense', 61), (' income tax benefit/(expense)', 49), (' tax (expense)/benefit', 46), ('prior year ', 44), ('earlier year', 41), ('provision for taxation previous year', 39), ('deferred tax', 38), ('amount transferred to retained earnings', 36), (' income tax benefit', 35), (' income tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('deferred tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 33), ('earlier year', 32), ('minimum alternate tax credit entitlement', 31), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('provision for taxation previous year', 49), ('minimum alternate tax credit entitlement', 44), (' income tax benefit/(expense)', 43), ('current tax', 42), ('amount transferred to retained earnings', 41), (' income tax benefit', 41), (' tax (expense)/benefit', 40), ('deferred tax', 39), (' income tax expense', 38), (' income tax', 34), ('earlier year', 32), ('prior year ', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' income tax expense', 61), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 46), ('current tax', 44), ('minimum alternate tax credit entitlement', 42), (' tax (expense)/benefit', 42), ('provision for taxation previous year', 41), ('amount transferred to retained earnings', 39), ('deferred tax', 36), ('prior year ', 35), ('earlier year', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': -15369.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['13'], 'line_item_value': [-15369.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('earlier year', 35), ('amount transferred to retained earnings', 32), ('deferred tax', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), ('provision for taxation previous year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [(' income tax expense', 58), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 46), ('prior year ', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('deferred tax', 33), ('amount transferred to retained earnings', 33), ('current tax', 31), (' income tax benefit', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' income tax expense', 61), (' income tax benefit/(expense)', 49), (' tax (expense)/benefit', 46), ('prior year ', 44), ('earlier year', 41), ('provision for taxation previous year', 39), ('deferred tax', 38), ('amount transferred to retained earnings', 36), (' income tax benefit', 35), (' income tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('deferred tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 33), ('earlier year', 32), ('minimum alternate tax credit entitlement', 31), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('provision for taxation previous year', 49), ('minimum alternate tax credit entitlement', 44), (' income tax benefit/(expense)', 43), ('current tax', 42), ('amount transferred to retained earnings', 41), (' income tax benefit', 41), (' tax (expense)/benefit', 40), ('deferred tax', 39), (' income tax expense', 38), (' income tax', 34), ('earlier year', 32), ('prior year ', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [(' income tax expense', 61), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 46), ('current tax', 44), ('minimum alternate tax credit entitlement', 42), (' tax (expense)/benefit', 42), ('provision for taxation previous year', 41), ('amount transferred to retained earnings', 39), ('deferred tax', 36), ('prior year ', 35), ('earlier year', 29)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': -12595.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['13'], 'line_item_value': [-12595.0]}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = current tax expense current year nan , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 66), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 63), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense / (benefit)', 53), (' deferred income tax', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = current tax expense (over)/under provision in prior years nan , res_fuzz_match = [('income tax expense', 75), (' current income tax', 65), (' income tax expense on continuing operations', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 55), (' deferred income tax', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = current tax expense total nan , res_fuzz_match = [('income tax expense', 75), (' current income tax', 65), (' income tax expense on continuing operations', 57), (' total tax (expense)/benefit in income statement', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total income tax expense / (benefit)', 52), (' deferred income tax', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = deferred tax expense origination and reversal oftemporary differences 18 , res_fuzz_match = [('income tax expense', 69), (' deferred income tax', 60), (' income tax expense on continuing operations', 59), (' total tax (expense)/benefit in income statement', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 47), (' current income tax', 41)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = deferred tax expense foreign currency exchange difference nan , res_fuzz_match = [('income tax expense', 69), (' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' income tax expense on continuing operations', 59), (' current income tax', 53), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = total total income tax expense nan , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 86), (' income tax expense on continuing operations', 78), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' deferred income tax', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 59)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = current tax expense current year nan , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 66), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 63), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense / (benefit)', 53), (' deferred income tax', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = current tax expense (over)/under provision in prior years nan , res_fuzz_match = [('income tax expense', 75), (' current income tax', 65), (' income tax expense on continuing operations', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 55), (' deferred income tax', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = current tax expense total nan , res_fuzz_match = [('income tax expense', 75), (' current income tax', 65), (' income tax expense on continuing operations', 57), (' total tax (expense)/benefit in income statement', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total income tax expense / (benefit)', 52), (' deferred income tax', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = deferred tax expense origination and reversal oftemporary differences 18 , res_fuzz_match = [('income tax expense', 69), (' deferred income tax', 60), (' income tax expense on continuing operations', 59), (' total tax (expense)/benefit in income statement', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 47), (' current income tax', 41)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = deferred tax expense foreign currency exchange difference nan , res_fuzz_match = [('income tax expense', 69), (' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' income tax expense on continuing operations', 59), (' current income tax', 53), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = total total income tax expense nan , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 86), (' income tax expense on continuing operations', 78), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 75), (' deferred income tax', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 59)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = other comprehensive income $'000's , res_fuzz_match = [(' current income tax', 65), (' deferred income tax', 64), (' total tax (expense)/benefit in income statement', 54), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total income tax expense / (benefit)', 46), ('income tax expense', 44), (' income tax expense on continuing operations', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 11], 'score': [100, 100], 'value': [12595.0, 15369.0], 'label': ['Total Total income tax expense nan', 'Total Total income tax expense nan'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none profit before tax , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), (' deferred income tax', 47), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none income tax at the australian tax rate of 30% (2021: 30%) , res_fuzz_match = [(' deferred income tax', 73), ('income tax expense', 69), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none expenses , res_fuzz_match = [('income tax expense', 64), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' income tax expense on continuing operations', 64), (' total income tax expense / (benefit)', 64), (' total tax (expense)/benefit in income statement', 64), (' current income tax', 36), (' deferred income tax', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none effect of different tax rate of subsidiary operating in other , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' current income tax', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = tax jurisdictions (over)/under provision in prior years , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = tax jurisdictions income tax expense on pre- tax net profit , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 70), (' income tax expense on continuing operations', 69), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total tax (expense)/benefit in income statement', 53)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = tax jurisdictions tax expense for the year , res_fuzz_match = [('income tax expense', 81), (' income tax expense on continuing operations', 66), (' total income tax expense / (benefit)', 63), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), (' total tax (expense)/benefit in income statement', 54), (' current income tax', 47), (' deferred income tax', 47)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none profit before tax , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), (' deferred income tax', 47), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none income tax at the australian tax rate of 30% (2021: 30%) , res_fuzz_match = [(' deferred income tax', 73), ('income tax expense', 69), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 42)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none expenses , res_fuzz_match = [('income tax expense', 64), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' income tax expense on continuing operations', 64), (' total income tax expense / (benefit)', 64), (' total tax (expense)/benefit in income statement', 64), (' current income tax', 36), (' deferred income tax', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = none effect of different tax rate of subsidiary operating in other , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' current income tax', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 38)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = tax jurisdictions (over)/under provision in prior years , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = tax jurisdictions income tax expense on pre- tax net profit , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 70), (' income tax expense on continuing operations', 69), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total tax (expense)/benefit in income statement', 53)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = tax jurisdictions tax expense for the year , res_fuzz_match = [('income tax expense', 81), (' income tax expense on continuing operations', 66), (' total income tax expense / (benefit)', 63), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), (' total tax (expense)/benefit in income statement', 54), (' current income tax', 47), (' deferred income tax', 47)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_rows = $'000's , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 100), (' income tax expense on continuing operations', 100), (' total income tax expense / (benefit)', 100), (' total tax (expense)/benefit in income statement', 100), (' current income tax', 0), (' deferred income tax', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13], 'score': [100, 100, 100, 100, 100, 100, 100, 81, 100, 100, 100, 100, 100, 100, 100, 100, 81, 100], 'value': [42772.0, 12860.0, -31.0, 21.0, -255.0, 12595.0, 12595.0, 12595.0, 12595.0, 50167.0, 15003.0, 123.0, -50.0, 293.0, 15369.0, 15369.0, 15369.0, 15369.0], 'label': ["$'000's", "$'000's", "$'000's", "$'000's", "$'000's", 'tax jurisdictions Income tax expense on pre- tax net profit', "$'000's", 'tax jurisdictions Tax expense for the year', "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", "$'000's", 'tax jurisdictions Income tax expense on pre- tax net profit', "$'000's", 'tax jurisdictions Tax expense for the year', "$'000's"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns']}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('prior period', 52), ('exceptional', 48)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('prior period', 48), ('exceptional', 43)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('exceptional', 32), ('prior period', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('prior period', 32), ('exceptional', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 34), ('exceptional', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('prior period', 52), ('exceptional', 48)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('prior period', 48), ('exceptional', 43)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('exceptional', 32), ('prior period', 32)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('prior period', 32), ('exceptional', 21)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 34), ('exceptional', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 15:31:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 15:31:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('NULL', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('NULL', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('NULL', 6)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 15:31:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 15:31:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = property expenses , res_fuzz_match = [('NULL', 11)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = finance expense , res_fuzz_match = [('NULL', 12)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit before tax from operating activities , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income (net of tax) , res_fuzz_match = [('NULL', 6)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 15:31:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

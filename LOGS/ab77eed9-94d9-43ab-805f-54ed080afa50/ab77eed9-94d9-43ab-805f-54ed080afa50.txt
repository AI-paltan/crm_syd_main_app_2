2023-08-28 17:48:00+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-28 17:48:00+0530 - sLogger - DEBUG - {'fileid': 'ab77eed9-94d9-43ab-805f-54ed080afa50', 'filename': 'Hino Motor Sales_FY 23 - Final Signed Annual Report.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/Hino Motor Sales_FY 23 - Final Signed Annual Report.pdf', 'status': 'Processing'}
2023-08-28 17:48:00+0530 - sLogger - DEBUG - save file completed
2023-08-28 17:48:00+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-28 17:48:00+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-28 17:48:00+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-28 17:48:00+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-28 17:48:00+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-28 17:48:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:02+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:02+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:11+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:11+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:18+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:18+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:22+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:22+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:23+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:23+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:26+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:26+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:32+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:32+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:48:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:48:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:48:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:48:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:48:55+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:48:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:48:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:49:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:49:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:49:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:49:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:49:03+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:49:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:49:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:49:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:49:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:49:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:49:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:49:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:49:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:49:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:49:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:49:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:49:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:49:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:49:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:49:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:49:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:49:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:49:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:49:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:49:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:49:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:49:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:49:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:49:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:49:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:49:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:49:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:49:37+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:49:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:49:37+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:49:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:49:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:49:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:49:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:49:44+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:49:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:49:45+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:49:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:49:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:49:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:49:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:49:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:49:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:49:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:49:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:49:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:49:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:49:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:49:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:49:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:49:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:00+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:00+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:09+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:09+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:15+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:15+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:20+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:20+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:24+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:24+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:34+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:34+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:34+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:34+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:34+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:38+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:38+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:47+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:47+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:47+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:47+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:47+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:50+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:50+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:50:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:50:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:50:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:50:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:50:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:50:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 17:50:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 17:51:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 17:51:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 17:51:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 17:51:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 17:51:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 17:51:05+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-28 17:51:05+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [8], 'predicted_cpl_pages': [6, 9], 'predicted_ccf_pages': [10], 'filtered_cbs_pages': [8], 'filtered_cpl_pages': [9, 6], 'filtered_ccf_pages': [10], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-28 17:51:05+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-28 17:51:05+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-28 17:51:05+0530 - sLogger - DEBUG - process file completed
2023-08-28 17:51:05+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-28 17:51:05+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-28 17:51:05+0530 - sLogger - DEBUG - TE process file started
2023-08-28 17:55:15+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-28 17:55:15+0530 - sLogger - DEBUG - process_main_pages started
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 17:55:15+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 17:55:15+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 17:55:15+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 17:55:15+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 17:55:15+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 17:55:15+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 17:55:15+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 17:55:15+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-28 17:55:15+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-28 17:55:15+0530 - sLogger - ERROR - error occured: 'Notes'
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-28 17:55:15+0530 - sLogger - DEBUG - set_section_details started
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentassets | score 56
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equityandliabilities | score 25
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Loans and borrowings | [('equity and liabilities', 44), ('noncurrentliabilities', 37), ('current assets', 36), ('noncurrent assets', 36), ('current liabilities', 34), ('noncurrent liabilities', 34), ('noncurrentassets', 33), ('equityandliabilities', 31), ('liabilities', 29), ('currentliabilities', 25), ('currentassets', 22), ('equity liabilities', 21), ('assets', 10), ('equityliabilities', 9), ('equity', 0)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD current assets | score 28
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD currentassets | score 28
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD current liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD currentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrent assets | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentassets | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrent liabilities | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD non current assets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD non current liabilities | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentassets | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equity and liabilities | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equity | score 15
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equityandliabilities | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentassets | score 56
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentliabilities | score 88
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 55
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equityandliabilities | score 65
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Share capital | [('current assets', 42), ('assets', 38), ('equity and liabilities', 36), ('currentassets', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('current liabilities', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('equityandliabilities', 27), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('equityliabilities', 21)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current assets | score 37
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent assets | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent liabilities | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current assets | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current liabilities | score 41
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity and liabilities | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equityandliabilities | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-28 17:55:15+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-28 17:55:15+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-28 17:55:15+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-28 17:55:15+0530 - sLogger - DEBUG - set_section_details started
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash receipts from customers | adiustments for movements in working capital
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash paid to suppliers and employees | changes in operating assets and liabilities
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash used in from operations | operating cash flow before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Borrowing costs paid | operating profit before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid on lease liabilities | adjustments for increase decrease in operating liabilities
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refund received/(paid) | operating profit before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in operating activities | operating cash flow before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of property, plant and equipment | changes in operating assets and liabilities
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of intangible assets | adjustments for increase decrease in operating assets
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from new borrowings | operating profit before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of lease liabilities | changes in operating assets and liabilities
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from financing activities | operating cash flow before working capital changes
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at beginning of year | changes in operating assets and liabilities
2023-08-28 17:55:15+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at end of year | changes in operating assets and liabilities
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 17:55:17+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-28 17:55:17+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset ', ' Term deposit']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), (' Cash', 44), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits ', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits ', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33), (' Cash', 32)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits ', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), (' Cash', 15)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits ', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14), (' Cash', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), (' Cash', 20), ('cash and short term deposits', 18), ('Cash and short term deposits ', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits ', 47), (' Cash', 40), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 13194828.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['8'], 'line_item_value': [13194828.0]}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), (' Cash', 44), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits ', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits ', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33), (' Cash', 32)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits ', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), (' Cash', 15)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits ', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14), (' Cash', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), (' Cash', 20), ('cash and short term deposits', 18), ('Cash and short term deposits ', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('cash asset', 67), ('other bank balances', 50), ('cash and short term deposits', 47), ('Cash and short term deposits ', 47), (' Cash', 40), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 17144081.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['8'], 'line_item_value': [17144081.0]}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset ', ' Term deposit'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = none cash on hand , res_fuzz_match = [('cash on hand ', 100), (' cash at bank ', 78), (' cash on hand and at bank ', 64), (' cash asset ', 63), (' cash at bank and on hand ', 57), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash and cash equivalents ', 50), ('  cash and bank balances ', 43), (' bank balances ', 36), (' short term deposits ', 29), (' Term deposit', 25)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset ', 0), (' Term deposit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = none bank balances , res_fuzz_match = [(' bank balances ', 100), ('  cash and bank balances ', 81), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash on hand and at bank ', 50), (' cash at bank ', 44), (' cash and cash equivalents ', 38), ('cash on hand ', 33), (' cash asset ', 30), (' short term deposits ', 19), (' Term deposit', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset ', 0), (' Term deposit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents ', 100), ('cash on hand ', 89), (' cash at bank ', 78), (' cash on hand and at bank ', 61), ('  cash and bank balances ', 60), (' cash asset ', 60), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 46), (' short term deposits ', 39), (' bank balances ', 36), (' Term deposit', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset ', 0), (' Term deposit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = none cash on hand , res_fuzz_match = [('cash on hand ', 100), (' cash at bank ', 78), (' cash on hand and at bank ', 64), (' cash asset ', 63), (' cash at bank and on hand ', 57), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash and cash equivalents ', 50), ('  cash and bank balances ', 43), (' bank balances ', 36), (' short term deposits ', 29), (' Term deposit', 25)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset ', 0), (' Term deposit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = none bank balances , res_fuzz_match = [(' bank balances ', 100), ('  cash and bank balances ', 81), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 50), (' cash on hand and at bank ', 50), (' cash at bank ', 44), (' cash and cash equivalents ', 38), ('cash on hand ', 33), (' cash asset ', 30), (' short term deposits ', 19), (' Term deposit', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset ', 0), (' Term deposit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = none cash and cash equivalents in the statement of cash flows , res_fuzz_match = [(' cash and cash equivalents ', 100), ('cash on hand ', 89), (' cash at bank ', 78), (' cash on hand and at bank ', 61), ('  cash and bank balances ', 60), (' cash asset ', 60), (' cash at bank and on hand ', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 46), (' short term deposits ', 39), (' bank balances ', 36), (' Term deposit', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand ', 0), (' cash at bank ', 0), (' cash at bank and on hand ', 0), (' short term deposits ', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates ', 0), (' cash and cash equivalents ', 0), (' cash on hand and at bank ', 0), (' bank balances ', 0), ('  cash and bank balances ', 0), (' cash asset ', 0), (' Term deposit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [0.0, 17144081.0, 17144081.0, 1588.0, 13193240.0, 13194828.0], 'label': ['None Cash on hand', 'None Bank balances', 'None Cash and cash equivalents in the statement of cash flows', 'None Cash on hand', 'None Bank balances', 'None Cash and cash equivalents in the statement of cash flows'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:17+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['inventories ', ' Contract assets']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' spare parts at cost ', ' parts and accessories (at cost) ', ' stock in transit ', ' Stock in transit at cost ', ' allowance for obsolescence ', ' Finished goods in transit']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['inventories ', ' Contract assets'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' Contract assets', 100), ('inventories ', 40)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 22)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories ', 100), (' Contract assets', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' Contract assets', 33), ('inventories ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' Contract assets', 73), ('inventories ', 22)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 111489925.0, 'line_item_label': ['Assets', 'Inventories'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 111489925.0]}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['inventories ', ' Contract assets'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' Contract assets', 100), ('inventories ', 40)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 22)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories ', 100), (' Contract assets', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' Contract assets', 33), ('inventories ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' Contract assets', 73), ('inventories ', 22)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 100, 'value': 119512569.0, 'line_item_label': ['Assets', 'Inventories'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 119512569.0]}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' spare parts at cost ', ' parts and accessories (at cost) ', ' stock in transit ', ' Stock in transit at cost ', ' allowance for obsolescence ', ' Finished goods in transit'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = vehicles at cost , res_fuzz_match = [(' parts and accessories (at cost) ', 64), (' finished goods at cost ', 55), (' stores and other consumables at cost ', 55), (' provision for inventory obsolescence ', 55), (' spare parts at cost ', 55), (' Stock in transit at cost ', 55), (' cranes - in transit ', 36), (' stock in transit ', 36), (' spare parts ', 30), (' finished goods ', 27), (' work in progress ', 27), (' goods in transit ', 27), (' allowance for obsolescence ', 27), (' Finished goods in transit', 27), (' inventories ', 22), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = vehicles at net realisable value , res_fuzz_match = [(' cranes ', 60), (' inventories ', 56), (' cranes - in transit ', 54), (' stock in transit ', 46), (' goods in transit ', 42), (' provision for inventory obsolescence ', 41), ('raw materials ', 40), (' raw materials ', 40), (' Stock in transit at cost ', 39), (' stores and other consumables at cost ', 32), (' Finished goods in transit', 32), (' finished goods at cost ', 31), (' work in progress ', 31), (' spare parts ', 30), (' finished goods ', 29), (' allowance for obsolescence ', 28), (' spare parts at cost ', 27), (' parts and accessories (at cost) ', 27)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = vehicles total , res_fuzz_match = [(' spare parts at cost ', 43), (' provision for inventory obsolescence ', 42), (' parts and accessories (at cost) ', 42), (' Finished goods in transit', 42), (' finished goods at cost ', 33), (' stores and other consumables at cost ', 33), (' inventories ', 33), (' cranes - in transit ', 33), (' stock in transit ', 33), (' Stock in transit at cost ', 33), (' spare parts ', 30), (' finished goods ', 27), (' goods in transit ', 25), (' allowance for obsolescence ', 25), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20), (' work in progress ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 100), (' stores and other consumables at cost ', 53), (' parts and accessories (at cost) ', 53), (' Stock in transit at cost ', 53), (' finished goods at cost ', 47), (' work in progress ', 46), (' cranes - in transit ', 46), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' allowance for obsolescence ', 40), (' goods in transit ', 33), (' provision for inventory obsolescence ', 33), (' inventories ', 33), (' Finished goods in transit', 33), (' stock in transit ', 31), (' finished goods ', 18)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts provision for obsolescence , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 80), (' allowance for obsolescence ', 78), (' provision for inventory obsolescence ', 67), ('raw materials ', 50), (' raw materials ', 50), (' parts and accessories (at cost) ', 48), (' work in progress ', 46), (' cranes - in transit ', 46), (' finished goods ', 45), (' finished goods at cost ', 44), (' stores and other consumables at cost ', 44), (' cranes ', 40), (' Stock in transit at cost ', 39), (' goods in transit ', 33), (' inventories ', 33), (' Finished goods in transit', 32), (' stock in transit ', 31)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 87), (' stores and other consumables at cost ', 50), (' parts and accessories (at cost) ', 44), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' Stock in transit at cost ', 39), (' work in progress ', 38), (' provision for inventory obsolescence ', 38), (' cranes - in transit ', 38), (' allowance for obsolescence ', 38), (' finished goods at cost ', 31), (' stock in transit ', 31), (' Finished goods in transit', 31), (' goods in transit ', 25), (' inventories ', 22), (' finished goods ', 18)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts demonstrator units at cost , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 80), (' parts and accessories (at cost) ', 65), (' Stock in transit at cost ', 61), (' stores and other consumables at cost ', 57), ('raw materials ', 50), (' finished goods at cost ', 50), (' raw materials ', 50), (' goods in transit ', 50), (' cranes - in transit ', 46), (' stock in transit ', 46), (' provision for inventory obsolescence ', 45), (' inventories ', 44), (' cranes ', 40), (' work in progress ', 38), (' Finished goods in transit', 37), (' finished goods ', 36), (' allowance for obsolescence ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts training vehicles at cost , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 80), (' parts and accessories (at cost) ', 65), (' Stock in transit at cost ', 61), (' cranes ', 60), (' inventories ', 56), (' cranes - in transit ', 54), (' stock in transit ', 54), (' stores and other consumables at cost ', 52), ('raw materials ', 50), (' finished goods at cost ', 50), (' raw materials ', 50), (' goods in transit ', 50), (' provision for inventory obsolescence ', 46), (' work in progress ', 38), (' Finished goods in transit', 37), (' finished goods ', 36), (' allowance for obsolescence ', 28)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts stock in transit at cost , res_fuzz_match = [(' spare parts ', 100), (' stock in transit ', 100), (' Stock in transit at cost ', 100), (' spare parts at cost ', 87), (' goods in transit ', 75), (' cranes - in transit ', 69), (' parts and accessories (at cost) ', 61), (' cranes ', 60), (' stores and other consumables at cost ', 56), (' Finished goods in transit', 53), (' finished goods at cost ', 44), (' provision for inventory obsolescence ', 41), ('raw materials ', 40), (' raw materials ', 40), (' allowance for obsolescence ', 39), (' work in progress ', 38), (' finished goods ', 36), (' inventories ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 87), (' stores and other consumables at cost ', 50), (' parts and accessories (at cost) ', 44), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' Stock in transit at cost ', 39), (' work in progress ', 38), (' provision for inventory obsolescence ', 38), (' cranes - in transit ', 38), (' allowance for obsolescence ', 38), (' finished goods at cost ', 31), (' stock in transit ', 31), (' Finished goods in transit', 31), (' goods in transit ', 25), (' inventories ', 22), (' finished goods ', 18)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = vehicles at cost , res_fuzz_match = [(' parts and accessories (at cost) ', 64), (' finished goods at cost ', 55), (' stores and other consumables at cost ', 55), (' provision for inventory obsolescence ', 55), (' spare parts at cost ', 55), (' Stock in transit at cost ', 55), (' cranes - in transit ', 36), (' stock in transit ', 36), (' spare parts ', 30), (' finished goods ', 27), (' work in progress ', 27), (' goods in transit ', 27), (' allowance for obsolescence ', 27), (' Finished goods in transit', 27), (' inventories ', 22), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = vehicles at net realisable value , res_fuzz_match = [(' cranes ', 60), (' inventories ', 56), (' cranes - in transit ', 54), (' stock in transit ', 46), (' goods in transit ', 42), (' provision for inventory obsolescence ', 41), ('raw materials ', 40), (' raw materials ', 40), (' Stock in transit at cost ', 39), (' stores and other consumables at cost ', 32), (' Finished goods in transit', 32), (' finished goods at cost ', 31), (' work in progress ', 31), (' spare parts ', 30), (' finished goods ', 29), (' allowance for obsolescence ', 28), (' spare parts at cost ', 27), (' parts and accessories (at cost) ', 27)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = vehicles total , res_fuzz_match = [(' spare parts at cost ', 43), (' provision for inventory obsolescence ', 42), (' parts and accessories (at cost) ', 42), (' Finished goods in transit', 42), (' finished goods at cost ', 33), (' stores and other consumables at cost ', 33), (' inventories ', 33), (' cranes - in transit ', 33), (' stock in transit ', 33), (' Stock in transit at cost ', 33), (' spare parts ', 30), (' finished goods ', 27), (' goods in transit ', 25), (' allowance for obsolescence ', 25), ('raw materials ', 20), (' raw materials ', 20), (' cranes ', 20), (' work in progress ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 100), (' stores and other consumables at cost ', 53), (' parts and accessories (at cost) ', 53), (' Stock in transit at cost ', 53), (' finished goods at cost ', 47), (' work in progress ', 46), (' cranes - in transit ', 46), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' allowance for obsolescence ', 40), (' goods in transit ', 33), (' provision for inventory obsolescence ', 33), (' inventories ', 33), (' Finished goods in transit', 33), (' stock in transit ', 31), (' finished goods ', 18)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts provision for obsolescence , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 80), (' allowance for obsolescence ', 78), (' provision for inventory obsolescence ', 67), ('raw materials ', 50), (' raw materials ', 50), (' parts and accessories (at cost) ', 48), (' work in progress ', 46), (' cranes - in transit ', 46), (' finished goods ', 45), (' finished goods at cost ', 44), (' stores and other consumables at cost ', 44), (' cranes ', 40), (' Stock in transit at cost ', 39), (' goods in transit ', 33), (' inventories ', 33), (' Finished goods in transit', 32), (' stock in transit ', 31)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 87), (' stores and other consumables at cost ', 50), (' parts and accessories (at cost) ', 44), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' Stock in transit at cost ', 39), (' work in progress ', 38), (' provision for inventory obsolescence ', 38), (' cranes - in transit ', 38), (' allowance for obsolescence ', 38), (' finished goods at cost ', 31), (' stock in transit ', 31), (' Finished goods in transit', 31), (' goods in transit ', 25), (' inventories ', 22), (' finished goods ', 18)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts demonstrator units at cost , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 80), (' parts and accessories (at cost) ', 65), (' Stock in transit at cost ', 61), (' stores and other consumables at cost ', 57), ('raw materials ', 50), (' finished goods at cost ', 50), (' raw materials ', 50), (' goods in transit ', 50), (' cranes - in transit ', 46), (' stock in transit ', 46), (' provision for inventory obsolescence ', 45), (' inventories ', 44), (' cranes ', 40), (' work in progress ', 38), (' Finished goods in transit', 37), (' finished goods ', 36), (' allowance for obsolescence ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts training vehicles at cost , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 80), (' parts and accessories (at cost) ', 65), (' Stock in transit at cost ', 61), (' cranes ', 60), (' inventories ', 56), (' cranes - in transit ', 54), (' stock in transit ', 54), (' stores and other consumables at cost ', 52), ('raw materials ', 50), (' finished goods at cost ', 50), (' raw materials ', 50), (' goods in transit ', 50), (' provision for inventory obsolescence ', 46), (' work in progress ', 38), (' Finished goods in transit', 37), (' finished goods ', 36), (' allowance for obsolescence ', 28)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts stock in transit at cost , res_fuzz_match = [(' spare parts ', 100), (' stock in transit ', 100), (' Stock in transit at cost ', 100), (' spare parts at cost ', 87), (' goods in transit ', 75), (' cranes - in transit ', 69), (' parts and accessories (at cost) ', 61), (' cranes ', 60), (' stores and other consumables at cost ', 56), (' Finished goods in transit', 53), (' finished goods at cost ', 44), (' provision for inventory obsolescence ', 41), ('raw materials ', 40), (' raw materials ', 40), (' allowance for obsolescence ', 39), (' work in progress ', 38), (' finished goods ', 36), (' inventories ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = spare parts total , res_fuzz_match = [(' spare parts ', 100), (' spare parts at cost ', 87), (' stores and other consumables at cost ', 50), (' parts and accessories (at cost) ', 44), ('raw materials ', 40), (' raw materials ', 40), (' cranes ', 40), (' Stock in transit at cost ', 39), (' work in progress ', 38), (' provision for inventory obsolescence ', 38), (' cranes - in transit ', 38), (' allowance for obsolescence ', 38), (' finished goods at cost ', 31), (' stock in transit ', 31), (' Finished goods in transit', 31), (' goods in transit ', 25), (' inventories ', 22), (' finished goods ', 18)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [18689399.0, -474531.0, 18214868.0, 2052535.0, 275665.0, 46946929.0, 119512569.0, 14367964.0, -379530.0, 13988434.0, 1844631.0, 0.0, 42775001.0, 111489925.0], 'label': ['Spare parts At cost', 'Spare parts Provision for obsolescence', 'Spare parts Total', 'Spare parts Demonstrator units at cost', 'Spare parts Training vehicles at cost', 'Spare parts Stock in transit at cost', 'Spare parts Total', 'Spare parts At cost', 'Spare parts Provision for obsolescence', 'Spare parts Total', 'Spare parts Demonstrator units at cost', 'Spare parts Training vehicles at cost', 'Spare parts Stock in transit at cost', 'Spare parts Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:17+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables ']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables '] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables ', 22), (' prepayments ', 18)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables ', 26), (' prepayments ', 13)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables ', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets ', 100), (' other current assets ', 73), (' other financial assets ', 73), (' other current financial assets ', 58), (' trade and other receivables ', 42), (' prepayments ', 12)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5], 'score': 100, 'value': 121878392.0, 'line_item_label': ['Trade and other receivables', 'Prepayments', 'Other assets'], 'note_numbers': ['9', nan, '11'], 'line_item_value': [121289307.0, 559696.0, 29389.0]}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables '] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables ', 22), (' prepayments ', 18)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables ', 26), (' prepayments ', 13)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables ', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets ', 100), (' other current assets ', 73), (' other financial assets ', 73), (' other current financial assets ', 58), (' trade and other receivables ', 42), (' prepayments ', 12)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5], 'score': 100, 'value': 127849435.0, 'line_item_label': ['Trade and other receivables', 'Prepayments', 'Other assets'], 'note_numbers': ['9', nan, '11'], 'line_item_value': [126398542.0, 1427037.0, 23856.0]}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current trade receivables nan , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 62), (' prepaid expense ', 50), (' in advance ', 50), (' prepaid expenditure ', 44), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 41), (' prepayments ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [('current ', 100), (' other prepayments ', 50), (' other receivables and prepayments ', 48), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expense ', 36), (' charges paid in advance', 35), (' prepaid expenditure ', 33), (' prepayments ', 33), (' in advance ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 77), (' other prepayments ', 67), (' in advance ', 50), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 41), (' prepaid expense ', 36), (' prepaid expenditure ', 33), (' prepayments ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('current ', 100), (' in advance ', 50), (' charges paid in advance', 41), (' prepaid expense ', 36), (' other receivables and prepayments ', 35), (' prepayments ', 33), (' other prepayments ', 33), (' prepaid expenditure ', 29), (' prepaid ', 29), (' prepaid ', 29)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current trade receivables nan , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 62), (' prepaid expense ', 50), (' in advance ', 50), (' prepaid expenditure ', 44), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' charges paid in advance', 41), (' prepayments ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [('current ', 100), (' other prepayments ', 50), (' other receivables and prepayments ', 48), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expense ', 36), (' charges paid in advance', 35), (' prepaid expenditure ', 33), (' prepayments ', 33), (' in advance ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 77), (' other prepayments ', 67), (' in advance ', 50), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 41), (' prepaid expense ', 36), (' prepaid expenditure ', 33), (' prepayments ', 33)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('current ', 100), (' in advance ', 50), (' charges paid in advance', 41), (' prepaid expense ', 36), (' other receivables and prepayments ', 35), (' prepayments ', 33), (' other prepayments ', 33), (' prepaid expenditure ', 29), (' prepaid ', 29), (' prepaid ', 29)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [125686659.0, 679869.0, 32014.0, 126398542.0, 120689684.0, 563747.0, 35876.0, 121289307.0], 'label': ['Current Trade receivables nan', 'Current Amounts due from related party 20', 'Current Other receivables nan', 'Current Total nan', 'Current Trade receivables nan', 'Current Amounts due from related party 20', 'Current Other receivables nan', 'Current Total nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 46), (' prepaid expenditure ', 44), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 35), (' prepayments ', 33), (' other prepayments ', 33), (' in advance ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current ', 100), (' other prepayments ', 42), (' prepayments ', 33), (' prepaid expense ', 31), (' prepaid expenditure ', 31), (' other receivables and prepayments ', 31), (' prepaid ', 29), (' prepaid ', 29), (' charges paid in advance', 23), (' in advance ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 38), (' prepayments ', 33), (' other prepayments ', 33), (' charges paid in advance', 31), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expense ', 23), (' prepaid expenditure ', 23), (' in advance ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 46), (' prepaid expenditure ', 44), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 35), (' prepayments ', 33), (' other prepayments ', 33), (' in advance ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current ', 100), (' other prepayments ', 42), (' prepayments ', 33), (' prepaid expense ', 31), (' prepaid expenditure ', 31), (' other receivables and prepayments ', 31), (' prepaid ', 29), (' prepaid ', 29), (' charges paid in advance', 23), (' in advance ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current ', 100), (' other receivables and prepayments ', 38), (' prepayments ', 33), (' other prepayments ', 33), (' charges paid in advance', 31), (' prepaid ', 29), (' prepaid ', 29), (' prepaid expense ', 23), (' prepaid expenditure ', 23), (' in advance ', 17)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['Current Bond deposits', 'Current Other', 'Current Total', 'Current Bond deposits', 'Current Other', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:17+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:17+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 17:55:17+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' Restricted deposits ', 29), (' Capitalised contract cost ', 29), (' trade and other receivables ', 22), (' Income tax receivable', 19), (' income tax receivable from related parties ', 16), (' Income tax refund due ', 16), (' deferred operating expenditure ', 15), (' Other investment including derivatives ', 13)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), (' Income tax receivable', 43), (' biological assets ', 36), (' financial assets ', 35), (' Income tax refund due ', 34), (' income tax receivable from related parties ', 33), (' Capitalised contract cost ', 32), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' Other investment including derivatives ', 30), (' Restricted deposits ', 27), (' deferred operating expenditure ', 19)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), (' Income tax receivable', 63), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' Income tax refund due ', 43), (' Other investment including derivatives ', 43), (' other assets ', 42), (' Restricted deposits ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' Capitalised contract cost ', 36), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' Other investment including derivatives ', 41), (' other assets ', 40), (' Restricted deposits ', 40), (' Income tax receivable', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' Income tax refund due ', 34), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables ', 26), (' Capitalised contract cost ', 25), (' income tax receivable from related parties ', 24)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' Restricted deposits ', 27), (' Income tax receivable', 27), (' Income tax refund due ', 23), (' deferred operating expenditure ', 22), (' financial assets ', 21), (' income tax receivable from related parties ', 21), (' trade and other receivables ', 21), (' Capitalised contract cost ', 21), ('other current assets ', 16), (' other financial assets ', 16), (' Other investment including derivatives ', 13), (' other assets ', 12), (' biological assets ', 11)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets ', 100), ('other current assets ', 73), (' other financial assets ', 73), (' biological assets ', 61), (' financial assets ', 50), (' Other investment including derivatives ', 44), (' trade and other receivables ', 42), (' deferred operating expenditure ', 38), (' Restricted deposits ', 37), (' Capitalised contract cost ', 35), (' Income tax refund due ', 26), (' income tax receivable from related parties ', 23), (' Income tax receivable', 22)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 100, 'value': 121318696.0, 'line_item_label': ['Trade and other receivables', 'Other assets'], 'note_numbers': ['9', '11'], 'line_item_value': [121289307.0, 29389.0]}
2023-08-28 17:55:17+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:17+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' Restricted deposits ', 29), (' Capitalised contract cost ', 29), (' trade and other receivables ', 22), (' Income tax receivable', 19), (' income tax receivable from related parties ', 16), (' Income tax refund due ', 16), (' deferred operating expenditure ', 15), (' Other investment including derivatives ', 13)]
2023-08-28 17:55:17+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), (' Income tax receivable', 43), (' biological assets ', 36), (' financial assets ', 35), (' Income tax refund due ', 34), (' income tax receivable from related parties ', 33), (' Capitalised contract cost ', 32), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' Other investment including derivatives ', 30), (' Restricted deposits ', 27), (' deferred operating expenditure ', 19)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), (' Income tax receivable', 63), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' Income tax refund due ', 43), (' Other investment including derivatives ', 43), (' other assets ', 42), (' Restricted deposits ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' Capitalised contract cost ', 36), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' Other investment including derivatives ', 41), (' other assets ', 40), (' Restricted deposits ', 40), (' Income tax receivable', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' Income tax refund due ', 34), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables ', 26), (' Capitalised contract cost ', 25), (' income tax receivable from related parties ', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' Restricted deposits ', 27), (' Income tax receivable', 27), (' Income tax refund due ', 23), (' deferred operating expenditure ', 22), (' financial assets ', 21), (' income tax receivable from related parties ', 21), (' trade and other receivables ', 21), (' Capitalised contract cost ', 21), ('other current assets ', 16), (' other financial assets ', 16), (' Other investment including derivatives ', 13), (' other assets ', 12), (' biological assets ', 11)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' other assets ', 100), ('other current assets ', 73), (' other financial assets ', 73), (' biological assets ', 61), (' financial assets ', 50), (' Other investment including derivatives ', 44), (' trade and other receivables ', 42), (' deferred operating expenditure ', 38), (' Restricted deposits ', 37), (' Capitalised contract cost ', 35), (' Income tax refund due ', 26), (' income tax receivable from related parties ', 23), (' Income tax receivable', 22)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 100, 'value': 126422398.0, 'line_item_label': ['Trade and other receivables', 'Other assets'], 'note_numbers': ['9', '11'], 'line_item_value': [126398542.0, 23856.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current trade receivables nan , res_fuzz_match = [('current', 100), (' other receivables ', 75), (' interest receivable', 73), (' GST receivable ', 70), (' related party receivable', 67), (' current investments', 64), (' accrued interest receivable ', 62), (' Intercompany receivable ', 58), (' rental bond', 55), (' other deposits receivable - related party', 54), (' Debtors retention ', 54), (' Fuel tax credits ', 53), ('foreign exchange derivatives at fair value', 50), (' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' other receivables - related party', 49), (' electricity derivatives at fair value', 48), (' long service leave receivable', 48), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' other debtors and prepayments ', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 42), (' Forward exchange contracts used for hedging keyword', 42), (' Prepaid subscription ', 41), (' other', 40), (' Income tax refund due ', 40), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' Capitalised contract cost ', 35), (' lng', 33), (' deposits', 29), (' Deposits ', 29), (' Accrued income ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [('current', 100), (' current investments', 71), (' income tax receivable from related parties', 67), (' other receivables - related party', 67), (' rental bond', 64), (' amount receivable from controlling entity', 63), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' accrued rebates', 55), (' related party disclosures', 52), (' other debtors and prepayments ', 48), (' Fuel tax credits ', 47), (' Intercompany receivable ', 47), (' Debtors retention ', 46), (' Forward exchange contracts used for hedging keyword', 46), ('foreign exchange derivatives at fair value', 45), (' Income tax refund due ', 45), (' foreign exchange forward contracts', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' Deposits ', 43), (' accrued interest receivable ', 43), (' derivative contracts - fair value', 42), (' share of jv prepayments', 42), (' other receivables ', 42), (' electricity derivatives at fair value', 41), (' interest receivable', 41), (' other', 40), (' GST receivable ', 40), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' Accrued income ', 36), (' Capitalised contract cost ', 35), (' Prepaid subscription ', 35), (' lng', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [('current', 100), (' other', 100), (' other receivables ', 100), (' interest receivable', 73), (' other receivables - related party', 70), (' GST receivable ', 70), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' accrued interest receivable ', 62), (' Intercompany receivable ', 58), (' rental bond', 55), (' other deposits receivable - related party', 54), (' Debtors retention ', 54), (' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' long service leave receivable', 48), (' Fuel tax credits ', 47), ('foreign exchange derivatives at fair value', 46), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments ', 43), (' Deposits ', 43), (' electricity derivatives at fair value', 42), (' share of jv prepayments', 42), (' Forward exchange contracts used for hedging keyword', 42), (' derivative contracts - fair value', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' Accrued income ', 36), (' Capitalised contract cost ', 35), (' Income tax refund due ', 35), (' related party disclosures', 33), (' lng', 33), (' bank guarantee', 31), (' Prepaid subscription ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('current', 100), (' lng', 67), (' rental bond', 64), (' current investments', 64), (' accrued rebates', 45), (' condensate', 43), (' electricity derivatives at fair value', 41), (' derivative contracts - fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' forward exchange contracts', 41), (' other debtors and prepayments ', 41), (' Capitalised contract cost ', 41), (' Forward exchange contracts used for hedging keyword', 41), (' other', 40), (' Fuel tax credits ', 40), (' bank guarantee', 38), (' Debtors retention ', 38), ('other assets', 36), (' accrued interest', 36), (' Accrued income ', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' other deposits receivable - related party', 35), (' related party receivable', 35), (' Income tax refund due ', 35), (' accrued interest receivable ', 35), (' share of jv prepayments', 33), (' deposits', 29), (' Deposits ', 29), (' interest receivable', 27), (' other receivables ', 25), (' related party disclosures', 24), (' long service leave receivable', 24), (' Prepaid subscription ', 24), (' Intercompany receivable ', 24), (' GST receivable ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current trade receivables nan , res_fuzz_match = [('current', 100), (' other receivables ', 75), (' interest receivable', 73), (' GST receivable ', 70), (' related party receivable', 67), (' current investments', 64), (' accrued interest receivable ', 62), (' Intercompany receivable ', 58), (' rental bond', 55), (' other deposits receivable - related party', 54), (' Debtors retention ', 54), (' Fuel tax credits ', 53), ('foreign exchange derivatives at fair value', 50), (' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' other receivables - related party', 49), (' electricity derivatives at fair value', 48), (' long service leave receivable', 48), (' accrued rebates', 45), (' accrued interest', 43), (' condensate', 43), (' other debtors and prepayments ', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 42), (' Forward exchange contracts used for hedging keyword', 42), (' Prepaid subscription ', 41), (' other', 40), (' Income tax refund due ', 40), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' Capitalised contract cost ', 35), (' lng', 33), (' deposits', 29), (' Deposits ', 29), (' Accrued income ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [('current', 100), (' current investments', 71), (' income tax receivable from related parties', 67), (' other receivables - related party', 67), (' rental bond', 64), (' amount receivable from controlling entity', 63), (' related party receivable', 61), (' other deposits receivable - related party', 59), (' accrued rebates', 55), (' related party disclosures', 52), (' other debtors and prepayments ', 48), (' Fuel tax credits ', 47), (' Intercompany receivable ', 47), (' Debtors retention ', 46), (' Forward exchange contracts used for hedging keyword', 46), ('foreign exchange derivatives at fair value', 45), (' Income tax refund due ', 45), (' foreign exchange forward contracts', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' deposits', 43), (' condensate', 43), (' Deposits ', 43), (' accrued interest receivable ', 43), (' derivative contracts - fair value', 42), (' share of jv prepayments', 42), (' other receivables ', 42), (' electricity derivatives at fair value', 41), (' interest receivable', 41), (' other', 40), (' GST receivable ', 40), (' bank guarantee', 38), (' forward exchange contracts', 38), ('other assets', 36), (' Accrued income ', 36), (' Capitalised contract cost ', 35), (' Prepaid subscription ', 35), (' lng', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [('current', 100), (' other', 100), (' other receivables ', 100), (' interest receivable', 73), (' other receivables - related party', 70), (' GST receivable ', 70), (' related party receivable', 67), ('other assets', 64), (' current investments', 64), (' accrued interest receivable ', 62), (' Intercompany receivable ', 58), (' rental bond', 55), (' other deposits receivable - related party', 54), (' Debtors retention ', 54), (' income tax receivable from related parties', 50), (' amount receivable from controlling entity', 50), (' long service leave receivable', 48), (' Fuel tax credits ', 47), ('foreign exchange derivatives at fair value', 46), (' accrued rebates', 45), (' accrued interest', 43), (' deposits', 43), (' condensate', 43), (' other debtors and prepayments ', 43), (' Deposits ', 43), (' electricity derivatives at fair value', 42), (' share of jv prepayments', 42), (' Forward exchange contracts used for hedging keyword', 42), (' derivative contracts - fair value', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' Accrued income ', 36), (' Capitalised contract cost ', 35), (' Income tax refund due ', 35), (' related party disclosures', 33), (' lng', 33), (' bank guarantee', 31), (' Prepaid subscription ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('current', 100), (' lng', 67), (' rental bond', 64), (' current investments', 64), (' accrued rebates', 45), (' condensate', 43), (' electricity derivatives at fair value', 41), (' derivative contracts - fair value', 41), (' amount receivable from controlling entity', 41), (' foreign exchange forward contracts', 41), (' forward exchange contracts', 41), (' other debtors and prepayments ', 41), (' Capitalised contract cost ', 41), (' Forward exchange contracts used for hedging keyword', 41), (' other', 40), (' Fuel tax credits ', 40), (' bank guarantee', 38), (' Debtors retention ', 38), ('other assets', 36), (' accrued interest', 36), (' Accrued income ', 36), ('foreign exchange derivatives at fair value', 35), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' other deposits receivable - related party', 35), (' related party receivable', 35), (' Income tax refund due ', 35), (' accrued interest receivable ', 35), (' share of jv prepayments', 33), (' deposits', 29), (' Deposits ', 29), (' interest receivable', 27), (' other receivables ', 25), (' related party disclosures', 24), (' long service leave receivable', 24), (' Prepaid subscription ', 24), (' Intercompany receivable ', 24), (' GST receivable ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [125686659.0, 679869.0, 32014.0, 126398542.0, 120689684.0, 563747.0, 35876.0, 121289307.0], 'label': ['Current Trade receivables nan', 'Current Amounts due from related party 20', 'Current Other receivables nan', 'Current Total nan', 'Current Trade receivables nan', 'Current Amounts due from related party 20', 'Current Other receivables nan', 'Current Total nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current trade receivables nan , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current trade receivables nan , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [125686659.0, 679869.0, 32014.0, 126398542.0, 120689684.0, 563747.0, 35876.0, 121289307.0], 'label': ['', '', '', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), (' deposits', 100), (' Deposits ', 100), (' rental bond', 82), (' current investments', 64), (' condensate', 57), (' other debtors and prepayments ', 46), ('foreign exchange derivatives at fair value', 45), (' other deposits receivable - related party', 45), (' accrued rebates', 45), (' Capitalised contract cost ', 41), (' Prepaid subscription ', 41), (' accrued interest receivable ', 41), (' other', 40), (' related party disclosures', 40), (' amount receivable from controlling entity', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' Income tax refund due ', 40), (' Forward exchange contracts used for hedging keyword', 40), (' related party receivable', 39), (' Debtors retention ', 38), (' Intercompany receivable ', 37), ('other assets', 36), (' accrued interest', 36), (' Accrued income ', 36), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' interest receivable', 33), (' lng', 33), (' Fuel tax credits ', 33), (' other receivables ', 33), (' bank guarantee', 32), (' electricity derivatives at fair value', 30), (' derivative contracts - fair value', 30), (' GST receivable ', 30), (' long service leave receivable', 26), (' share of jv prepayments', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), (' other', 100), (' current investments', 69), (' rental bond', 57), (' Forward exchange contracts used for hedging keyword', 54), (' accrued interest', 48), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' Capitalised contract cost ', 46), (' accrued interest receivable ', 46), ('other assets', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), (' Deposits ', 43), (' other receivables ', 43), (' Income tax refund due ', 42), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' interest receivable', 38), (' bank guarantee', 38), (' other debtors and prepayments ', 38), (' Debtors retention ', 38), (' Fuel tax credits ', 38), (' Accrued income ', 36), (' share of jv prepayments', 33), (' lng', 33), (' GST receivable ', 32), (' long service leave receivable', 31), (' Prepaid subscription ', 31), (' Intercompany receivable ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' Capitalised contract cost ', 46), (' Forward exchange contracts used for hedging keyword', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), (' Debtors retention ', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments ', 38), (' Fuel tax credits ', 38), (' accrued interest receivable ', 38), (' Accrued income ', 36), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' Income tax refund due ', 31), (' deposits', 29), (' Deposits ', 29), ('other assets', 27), (' other receivables ', 25), (' long service leave receivable', 23), (' related party receivable', 23), (' Prepaid subscription ', 23), (' Intercompany receivable ', 23), (' GST receivable ', 21)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [('current', 100), (' deposits', 100), (' Deposits ', 100), (' rental bond', 82), (' current investments', 64), (' condensate', 57), (' other debtors and prepayments ', 46), ('foreign exchange derivatives at fair value', 45), (' other deposits receivable - related party', 45), (' accrued rebates', 45), (' Capitalised contract cost ', 41), (' Prepaid subscription ', 41), (' accrued interest receivable ', 41), (' other', 40), (' related party disclosures', 40), (' amount receivable from controlling entity', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' Income tax refund due ', 40), (' Forward exchange contracts used for hedging keyword', 40), (' related party receivable', 39), (' Debtors retention ', 38), (' Intercompany receivable ', 37), ('other assets', 36), (' accrued interest', 36), (' Accrued income ', 36), (' income tax receivable from related parties', 35), (' other receivables - related party', 35), (' interest receivable', 33), (' lng', 33), (' Fuel tax credits ', 33), (' other receivables ', 33), (' bank guarantee', 32), (' electricity derivatives at fair value', 30), (' derivative contracts - fair value', 30), (' GST receivable ', 30), (' long service leave receivable', 26), (' share of jv prepayments', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [('current', 100), (' other', 100), (' current investments', 69), (' rental bond', 57), (' Forward exchange contracts used for hedging keyword', 54), (' accrued interest', 48), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' related party receivable', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' Capitalised contract cost ', 46), (' accrued interest receivable ', 46), ('other assets', 45), (' accrued rebates', 45), (' deposits', 43), (' condensate', 43), (' Deposits ', 43), (' other receivables ', 43), (' Income tax refund due ', 42), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' related party disclosures', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' interest receivable', 38), (' bank guarantee', 38), (' other debtors and prepayments ', 38), (' Debtors retention ', 38), (' Fuel tax credits ', 38), (' Accrued income ', 36), (' share of jv prepayments', 33), (' lng', 33), (' GST receivable ', 32), (' long service leave receivable', 31), (' Prepaid subscription ', 31), (' Intercompany receivable ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current investments', 62), (' rental bond', 57), (' income tax receivable from related parties', 46), (' amount receivable from controlling entity', 46), (' foreign exchange forward contracts', 46), (' forward exchange contracts', 46), (' Capitalised contract cost ', 46), (' Forward exchange contracts used for hedging keyword', 46), (' accrued rebates', 45), (' condensate', 43), (' accrued interest', 40), (' other', 40), (' Debtors retention ', 40), ('foreign exchange derivatives at fair value', 38), (' electricity derivatives at fair value', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' other debtors and prepayments ', 38), (' Fuel tax credits ', 38), (' accrued interest receivable ', 38), (' Accrued income ', 36), (' share of jv prepayments', 33), (' lng', 33), (' related party disclosures', 31), (' interest receivable', 31), (' bank guarantee', 31), (' Income tax refund due ', 31), (' deposits', 29), (' Deposits ', 29), ('other assets', 27), (' other receivables ', 25), (' long service leave receivable', 23), (' related party receivable', 23), (' Prepaid subscription ', 23), (' Intercompany receivable ', 23), (' GST receivable ', 21)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['Current Bond deposits', 'Current Other', 'Current Total', 'Current Bond deposits', 'Current Other', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current bond deposits , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [23856.0, 0.0, 23856.0, 27876.0, 1513.0, 29389.0], 'label': ['', '', '', '', '', ''], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_assets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment ', 37), (' plant and equipment ', 37), (' Property ', 30), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 91, 'value': 10142258.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [10142258.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment ', 37), (' plant and equipment ', 37), (' Property ', 30), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 91, 'value': 10584276.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [10584276.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land and buildings ', 70), (' Leasehold buildings', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), ('depreciation', 43), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land and buildings ', 83), (' Leasehold buildings', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Marine ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Construction in progress ', 33), (' Capitalised pre stripping costs ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Assets under construction ', 43), (' Marine ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Construction in progress ', 28), (' Workshop tooling ', 23), (' Subsea ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Development properties ', 31), (' Pipeline Asset ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Construction in progress ', 28), (' Leasehold buildings', 27), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' Workshop tooling ', 46), (' Stripping WIP ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), ('accumulated depreciation ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Development properties ', 38), (' Other assets ', 36), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' under construction ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Construction in progress ', 33), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Development properties ', 50), (' Mining properties ', 46), (' Stripping WIP ', 44), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Construction in progress ', 34), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), (' Workshop tooling ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Development properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings', 33), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Marine ', 60), (' Mining properties ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Pipeline Asset ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 35), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' land and improvement ', 47), (' Other assets ', 45), (' Building & mine infrastructure ', 43), ('accumulated depreciation ', 40), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Freehold land and buildings ', 33), (' Construction in progress ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Leasehold buildings', 20), (' Development properties ', 19), (' Fishing vessels & equipment ', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' Construction in progress ', 61), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), (' Subsea ', 50), (' Mining properties ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), (' Development properties ', 44), ('depreciation', 43), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 7, 10, 11, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 29, 34, 35, 36, 37, 44, 45, 46, 47, 54, 55, 56, 57], 'score': [100, 100, 100, 100, 83, 83, 83, 83, 100, 83, 100, 83, 100, 83, 100, 83, 83, 83, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 0.0, 5056574.0, 91317.0, 0.0, 5147891.0, 2392768.0, 2392768.0, 141116.0, 141116.0, 0.0, 0.0, 2533884.0, 2533884.0, 2663806.0, 2614007.0, 4600445.0, 1067939.0, -29330.0, 5639054.0, 2319803.0, 2319803.0, 507865.0, 507865.0, -29074.0, -29074.0, 2798594.0, 2798594.0, 2280642.0, 2840460.0, 1156508.0, 107050.0, 0.0, 1263558.0, 0.0, 0.0, 0.0, 0.0, 5869079.0, 756031.0, -29074.0, 6596036.0], 'label': ['Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Accumulated depreciation Balance at 1 April 2022', 'Furniture and fixtures Freehold land Buildings', 'Accumulated depreciation Depreciation', 'Furniture and fixtures Freehold land Buildings', 'Accumulated depreciation Disposals', 'Furniture and fixtures Freehold land Buildings', 'Accumulated depreciation Balance at 31 March 2023', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Accumulated depreciation Balance at 1 April 2022', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Accumulated depreciation Depreciation', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Accumulated depreciation Disposals', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Accumulated depreciation Balance at 31 March 2023', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023', 'Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023', 'Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('gross', 80), ('net value', 38), ('net book value', 38), ('cost', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('cost', 25), ('net value', 25), ('gross', 20), ('net book value', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('gross', 80), ('cost', 50), ('net value', 40), ('net book value', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 40, 40, 41, 41, 42, 42, 43, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 55, 56, 57, 58, 59], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80], 'value': [3756486.0, 0.0, 0.0, 3756486.0, 5056574.0, 91317.0, 0.0, 5147891.0, 4600445.0, 1067939.0, -29330.0, 5639054.0, 2468809.0, 0.0, 0.0, 2468809.0, 0.0, 0.0, 39049.0, 39049.0, 0.0, 0.0, 168072.0, 168072.0, 0.0, 0.0, 0.0, 0.0, 129023.0, 168072.0, 16011337.0, 16011337.0, 1198305.0, 1198305.0, -29330.0, -29330.0, 17180312.0, 17180312.0, 5869079.0, 756031.0, -29074.0, 6596036.0, 10142258.0, 10584276.0], 'label': ['Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Capital works in progress Capital works in progress Capital works in progress', 'Cost Additions', 'Capital works in progress Capital works in progress Capital works in progress', 'Cost Disposals', 'Capital works in progress Capital works in progress Capital works in progress', 'Cost Balance at 31 March 2023', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Cost Balance at 1 April 2022', 'Capital works in progress Capital works in progress Total', 'Cost Additions', 'Capital works in progress Capital works in progress Total', 'Cost Disposals', 'Capital works in progress Capital works in progress Total', 'Cost Balance at 31 March 2023', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 91, 'value': 10142258.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [10142258.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 91, 'value': 10584276.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [10584276.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 10142258.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [10142258.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 10584276.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [10584276.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress', 37), ('construction in progress ', 34)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress', 37), ('construction in progress ', 34)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress', 37), ('construction in progress ', 34)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress', 37), ('construction in progress ', 34)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' capital works in progress', 32), ('construction in progress ', 28), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress', 37), ('construction in progress ', 34)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' work in progress ', 38), (' capital works in progress', 37), ('construction in progress ', 34)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 23)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 39049.0, 0.0, 168072.0, 0.0, 0.0, 0.0, 0.0, 129023.0, 168072.0, 16011337.0, 1198305.0, -29330.0, 17180312.0, 5869079.0, 756031.0, -29074.0, 6596036.0, 10142258.0, 10584276.0], 'label': ['Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 79320.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [79320.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 105119.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [105119.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 79320.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [79320.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 105119.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [105119.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 10221578.0, 'line_item_label': ['Property, plant and equipment', 'Intangible assets'], 'note_numbers': ['12', '14'], 'line_item_value': [10142258.0, 79320.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 10689395.0, 'line_item_label': ['Property, plant and equipment', 'Intangible assets'], 'note_numbers': ['12', '14'], 'line_item_value': [10584276.0, 105119.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' software ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' carrying amounts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' development and software ', 53), (' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' software ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' carrying amounts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' goodwill ', 43), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' mining rights ', 40), (' consumer contracts ', 33), (' water licenses', 33), (' computer software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' software ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' carrying amounts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' software ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' carrying amounts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' software ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' carrying amounts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' software ', 43), (' computer software ', 43), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), ('Other intangibles ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' water licenses', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25), (' carrying amounts ', 25), (' software ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' water licenses', 42), (' consumer contracts ', 40), (' development and software ', 38), (' computer software ', 36), ('Other intangibles ', 33), (' carrying amounts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' development and software ', 47), (' carrying amounts ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' software ', 57), (' computer software ', 43), ('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 32), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9, 18, 19, 28, 29, 38, 39, 48, 49, 58, 59], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [3756486.0, 3756486.0, 2663806.0, 2614007.0, 2280642.0, 2840460.0, 1312301.0, 1205251.0, 129023.0, 168072.0, 10142258.0, 10584276.0], 'label': ['Carrying amounts 2022 At31 March 2022', 'Carrying amounts 2023 At31 March 2023', 'Carrying amounts 2022 At31 March 2022', 'Carrying amounts 2023 At31 March 2023', 'Carrying amounts 2022 At31 March 2022', 'Carrying amounts 2023 At31 March 2023', 'Carrying amounts 2022 At31 March 2022', 'Carrying amounts 2023 At31 March 2023', 'Carrying amounts 2022 At31 March 2022', 'Carrying amounts 2023 At31 March 2023', 'Carrying amounts 2022 At31 March 2022', 'Carrying amounts 2023 At31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software at cost , res_fuzz_match = [(' software ', 100), (' development and software ', 58), (' computer software ', 58), (' water licenses', 55), (' consumer contracts ', 50), ('Other intangibles ', 43), (' carrying amounts ', 42), (' goodwill ', 29), (' mining rights ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation , res_fuzz_match = [(' software ', 100), (' carrying amounts ', 50), (' consumer contracts ', 47), (' computer software ', 44), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' development and software ', 37), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software net carrying amount , res_fuzz_match = [(' software ', 100), (' carrying amounts ', 100), ('Other intangibles ', 50), (' computer software ', 50), (' mining rights ', 50), (' water licenses', 42), (' development and software ', 37), (' consumer contracts ', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud , res_fuzz_match = [(' carrying amounts ', 100), (' consumer contracts ', 47), (' goodwill ', 43), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 , res_fuzz_match = [(' carrying amounts ', 50), (' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 47), (' software ', 43), (' computer software ', 43), (' mining rights ', 40), (' development and software ', 38), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 , res_fuzz_match = [(' carrying amounts ', 50), (' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 , res_fuzz_match = [(' carrying amounts ', 100), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software at cost , res_fuzz_match = [(' software ', 100), (' development and software ', 58), (' computer software ', 58), (' water licenses', 55), (' consumer contracts ', 50), ('Other intangibles ', 43), (' carrying amounts ', 42), (' goodwill ', 29), (' mining rights ', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation , res_fuzz_match = [(' software ', 100), (' carrying amounts ', 50), (' consumer contracts ', 47), (' computer software ', 44), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' development and software ', 37), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software net carrying amount , res_fuzz_match = [(' software ', 100), (' carrying amounts ', 100), ('Other intangibles ', 50), (' computer software ', 50), (' mining rights ', 50), (' water licenses', 42), (' development and software ', 37), (' consumer contracts ', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud , res_fuzz_match = [(' carrying amounts ', 100), (' consumer contracts ', 47), (' goodwill ', 43), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 , res_fuzz_match = [(' carrying amounts ', 50), (' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 47), (' software ', 43), (' computer software ', 43), (' mining rights ', 40), (' development and software ', 38), ('Other intangibles ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 , res_fuzz_match = [(' carrying amounts ', 50), (' consumer contracts ', 47), (' computer software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 29), (' software ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [(' carrying amounts ', 100), (' computer software ', 50), (' consumer contracts ', 47), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 40), (' development and software ', 37), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 , res_fuzz_match = [(' carrying amounts ', 100), (' software ', 43), (' computer software ', 43), ('Other intangibles ', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 35), (' water licenses', 33), (' goodwill ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 22, 23], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [190619.0, -85500.0, 105119.0, 0.0, 79320.0, 105119.0, 128219.0, -48899.0, 79320.0, 0.0, 79320.0, 105119.0], 'label': ['Software At cost', 'Software Accumulated amortisation', 'Software Net carrying amount', 'Reconciliation of carrying amount In AUD', 'Carrying amounts At31 March 2022', 'Carrying amounts At 31 March 2023', 'Software At cost', 'Software Accumulated amortisation', 'Software Net carrying amount', 'Reconciliation of carrying amount In AUD', 'Carrying amounts At31 March 2022', 'Carrying amounts At 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year ', ' Interest swap']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' Other investment including derivatives', 50), ('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method ', 38), ('investment', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33), (' Other investment including derivatives', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method ', 50), (' Other investment including derivatives', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), (' Other investment including derivatives', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' Other investment including derivatives', 50), ('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method ', 38), ('investment', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33), (' Other investment including derivatives', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method ', 50), (' Other investment including derivatives', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), (' Other investment including derivatives', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5298488.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['7'], 'line_item_value': [5298488.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5013075.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['7'], 'line_item_value': [5013075.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 22, 23, 24, 25, 26, 27], 'score': [100, 100, 100, 100, 100, 100, 100], 'value': [5380799.0, 0.0, 0.0, 0.0, 5380799.0, -367724.0, 5013075.0], 'label': ['Recognised in profit or loss Deferred tax assets', 'Recognised in profit or loss Deferred tax assets', 'Recognised in profit or loss Deferred tax assets', 'Recognised in profit or loss Deferred tax assets', 'Recognised in profit or loss Deferred tax assets', 'Recognised in profit or loss Deferred tax assets', 'Recognised in profit or loss Deferred tax assets'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none profit before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax using company's domestic tax rate 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none origination and reversal of temporary differences , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none changes in estimates related to prior years , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none income tax expense , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none profit before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax using company's domestic tax rate 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none origination and reversal of temporary differences , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none changes in estimates related to prior years , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none income tax expense , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none provisions 5963695 244625 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment (809,097) 116103 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none prepayments (250,215) nan , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward 33377 nan , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off 4937760 360728 , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax nan nan , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 53)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets nan nan , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none provisions 5963695 244625 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment (809,097) 116103 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none prepayments (250,215) nan , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward 33377 nan , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off 4937760 360728 , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax nan nan , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 53)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets nan nan , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none provisions 5963695 244625 , res_fuzz_match = [('deferred tax assets', 27), (' deferred tax balances', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment (809,097) 116103 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none prepayments (250,215) nan , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward 33377 nan , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 50)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off 4937760 360728 , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 31)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax nan nan , res_fuzz_match = [(' deferred tax balances', 56), ('deferred tax assets', 53)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets nan nan , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 56)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [6208320.0, -692994.0, -250215.0, 33377.0, 5298488.0, 0.0, 5298488.0, 6208320.0, 0.0, 0.0, 33377.0, 6241697.0, -943209.0, 5298488.0], 'label': ['Deferred tax assets Net', 'Deferred tax assets Net', 'Deferred tax assets Net', 'Deferred tax assets Net', 'Deferred tax assets Net', 'Deferred tax assets Net', 'Deferred tax assets Net', 'Deferred tax assets Deferred tax assets', 'Deferred tax assets Deferred tax assets', 'Deferred tax assets Deferred tax assets', 'Deferred tax assets Deferred tax assets', 'Deferred tax assets Deferred tax assets', 'Deferred tax assets Deferred tax assets', 'Deferred tax assets Deferred tax assets'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current tax expense current year , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current tax expense adjustment for prior years , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current tax expense total , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) origination and reversal of temporary differences , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) total , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) total income tax expense , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current tax expense current year , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current tax expense adjustment for prior years , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current tax expense total , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) origination and reversal of temporary differences , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) total , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) total income tax expense , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 79320.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [79320.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 105119.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['14'], 'line_item_value': [105119.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software at cost , res_fuzz_match = [(' total properties', 50), (' motor vehicles', 43), (' allowance for expected credit losses', 42), (' right-of-use-assets', 42), (' electricity derivatives at fair value', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), (' exploration and evaluation expenditure', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation , res_fuzz_match = [(' total properties', 50), (' motor vehicles', 42), (' allowance for expected credit losses', 35), ('finance receivables', 31), (' exploration and evaluation expenditure', 30), (' warehouse and office equipment', 30), (' defined benefit plans', 28), (' electricity derivatives at fair value', 27), (' right-of-use-assets', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software net carrying amount , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 50), (' electricity derivatives at fair value', 45), (' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' right-of-use-assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' defined benefit plans', 34), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' motor vehicles', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' allowance for expected credit losses', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' defined benefit plans', 35), (' motor vehicles', 33), (' right-of-use-assets', 13)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' allowance for expected credit losses', 60), (' electricity derivatives at fair value', 50), (' warehouse and office equipment', 50), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 30), (' defined benefit plans', 30), (' total properties', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' exploration and evaluation expenditure', 35), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 13)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' total properties', 50), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' warehouse and office equipment', 35), (' electricity derivatives at fair value', 33), (' right-of-use-assets', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 26), (' defined benefit plans', 22)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' motor vehicles', 42), (' electricity derivatives at fair value', 36), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' allowance for expected credit losses', 32), (' right-of-use-assets', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 44), (' motor vehicles', 43), ('finance receivables', 40), (' warehouse and office equipment', 39), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' total properties', 29), (' allowance for expected credit losses', 28)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software at cost , res_fuzz_match = [(' total properties', 50), (' motor vehicles', 43), (' allowance for expected credit losses', 42), (' right-of-use-assets', 42), (' electricity derivatives at fair value', 33), (' warehouse and office equipment', 33), ('finance receivables', 25), (' defined benefit plans', 25), (' exploration and evaluation expenditure', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software accumulated amortisation , res_fuzz_match = [(' total properties', 50), (' motor vehicles', 42), (' allowance for expected credit losses', 35), ('finance receivables', 31), (' exploration and evaluation expenditure', 30), (' warehouse and office equipment', 30), (' defined benefit plans', 28), (' electricity derivatives at fair value', 27), (' right-of-use-assets', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = software net carrying amount , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 50), (' electricity derivatives at fair value', 45), (' total properties', 43), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' right-of-use-assets', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = reconciliation of carrying amount in aud , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), ('finance receivables', 38), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' defined benefit plans', 34), (' right-of-use-assets', 33), (' warehouse and office equipment', 33), (' motor vehicles', 33)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' total properties', 50), ('finance receivables', 48), (' allowance for expected credit losses', 41), (' exploration and evaluation expenditure', 41), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' defined benefit plans', 35), (' motor vehicles', 33), (' right-of-use-assets', 13)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' allowance for expected credit losses', 60), (' electricity derivatives at fair value', 50), (' warehouse and office equipment', 50), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 30), (' defined benefit plans', 30), (' total properties', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' warehouse and office equipment', 41), (' electricity derivatives at fair value', 35), (' exploration and evaluation expenditure', 35), (' motor vehicles', 33), (' allowance for expected credit losses', 29), (' defined benefit plans', 29), (' right-of-use-assets', 13)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 1 april 2022 , res_fuzz_match = [('finance receivables', 48), (' total properties', 43), (' motor vehicles', 42), (' electricity derivatives at fair value', 41), (' allowance for expected credit losses', 39), (' defined benefit plans', 39), (' warehouse and office equipment', 38), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation amortisation , res_fuzz_match = [(' total properties', 50), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' warehouse and office equipment', 35), (' electricity derivatives at fair value', 33), (' right-of-use-assets', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 26), (' defined benefit plans', 22)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = accumulated amortisation balance at 31 march 2023 , res_fuzz_match = [('finance receivables', 48), (' motor vehicles', 42), (' electricity derivatives at fair value', 36), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' warehouse and office equipment', 33), (' allowance for expected credit losses', 32), (' right-of-use-assets', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts at31 march 2022 , res_fuzz_match = [(' right-of-use-assets', 40), (' electricity derivatives at fair value', 39), ('finance receivables', 38), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' exploration and evaluation expenditure', 33), (' motor vehicles', 33), (' allowance for expected credit losses', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amounts at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 44), (' motor vehicles', 43), ('finance receivables', 40), (' warehouse and office equipment', 39), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), (' total properties', 29), (' allowance for expected credit losses', 28)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation ']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation '] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' Lease obligation ', 50), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' cash ', 20), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation ', 67), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' loans and borrowings ', 31), (' cash ', 27), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' Lease obligation ', 31), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15), (' cash ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' loans and borrowings ', 100), (' borrowings ', 57), (' shortterm borrowings ', 52), (' bank overdraft ', 48), (' short-term debt ', 34), (' shortterm debt ', 34), ('short term debt ', 33), (' cash and cash equivalents ', 33), (' interest bearing liabilites ', 32), (' Lease obligation ', 32), (' lease liabilities ', 31), ('  leases ', 21), (' cash ', 11)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' Lease obligation ', 25), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' Lease obligation ', 24), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' borrowings ', 19), (' cash ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), ('short term debt ', 30), (' loans and borrowings ', 30), (' Lease obligation ', 29), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' cash ', 18), (' borrowings ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 111835511.0, 'line_item_label': ['Lease liabilities', 'Loans and borrowings'], 'note_numbers': ['13', '16'], 'line_item_value': [600799.0, 111234712.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation '] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' Lease obligation ', 50), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' cash ', 20), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation ', 67), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' loans and borrowings ', 31), (' cash ', 27), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' Lease obligation ', 31), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15), (' cash ', 15)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' loans and borrowings ', 100), (' borrowings ', 57), (' shortterm borrowings ', 52), (' bank overdraft ', 48), (' short-term debt ', 34), (' shortterm debt ', 34), ('short term debt ', 33), (' cash and cash equivalents ', 33), (' interest bearing liabilites ', 32), (' Lease obligation ', 32), (' lease liabilities ', 31), ('  leases ', 21), (' cash ', 11)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' Lease obligation ', 25), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' interest bearing liabilites ', 38), (' short-term debt ', 34), (' shortterm debt ', 34), (' bank overdraft ', 34), ('short term debt ', 33), (' loans and borrowings ', 27), (' shortterm borrowings ', 26), (' Lease obligation ', 24), (' lease liabilities ', 23), (' cash and cash equivalents ', 22), ('  leases ', 21), (' borrowings ', 19), (' cash ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), ('short term debt ', 30), (' loans and borrowings ', 30), (' Lease obligation ', 29), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' cash ', 18), (' borrowings ', 17)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 141604315.0, 'line_item_label': ['Lease liabilities', 'Loans and borrowings'], 'note_numbers': ['13', '16'], 'line_item_value': [655853.0, 140948462.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none related party loan aud 2023 , res_fuzz_match = [(' loans from related party ', 67), (' bank loans', 67), (' not later than one year ', 57), (' leases ', 50), (' not later than 1 year ', 49), (' secured long-term bank loans ', 48), (' lease liabilities ', 45), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' current ', 43), (' obligations under finance lease ', 43), (' lease liabilities - current ', 42), (' cash overdraft ', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying face value , res_fuzz_match = [(' obligations under finance lease ', 47), (' current ', 43), (' not later than 1 year ', 40), (' not later than one year ', 40), (' secured long-term bank loans ', 40), (' lease liabilities ', 36), (' cash overdraft ', 36), (' loans from related party ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank loans', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' utilised bank borrowings ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none unsecured bank loans aud 2023 , res_fuzz_match = [(' bank loans', 100), (' secured long-term bank loans ', 62), (' current ', 57), ('bank borrowings ', 55), (' not later than one year ', 52), (' bank overdraft ', 52), (' obligations under finance lease ', 52), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' loans from related party ', 38), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' balance at the end of period ', 33), (' cash overdraft ', 29), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying face value , res_fuzz_match = [(' obligations under finance lease ', 47), (' current ', 43), (' not later than 1 year ', 40), (' not later than one year ', 40), (' secured long-term bank loans ', 40), (' lease liabilities ', 36), (' cash overdraft ', 36), (' loans from related party ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank loans', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' utilised bank borrowings ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' bank loans', 56), (' leases ', 50), (' not later than 1 year ', 50), (' not later than one year ', 50), (' secured long-term bank loans ', 50), (' loans from related party ', 44), (' obligations under finance lease ', 44), (' lease liabilities ', 36), (' utilised bank borrowings ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' cash overdraft ', 21), (' current ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying face value , res_fuzz_match = [(' obligations under finance lease ', 47), (' current ', 43), (' not later than 1 year ', 40), (' not later than one year ', 40), (' secured long-term bank loans ', 40), (' lease liabilities ', 36), (' cash overdraft ', 36), (' loans from related party ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank loans', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' utilised bank borrowings ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none related party loan aud 2023 , res_fuzz_match = [(' loans from related party ', 67), (' bank loans', 67), (' not later than one year ', 57), (' leases ', 50), (' not later than 1 year ', 49), (' secured long-term bank loans ', 48), (' lease liabilities ', 45), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' current ', 43), (' obligations under finance lease ', 43), (' lease liabilities - current ', 42), (' cash overdraft ', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 50), (' lease liabilities - current ', 50), (' current ', 43), (' not later than 1 year ', 42), (' not later than one year ', 42), (' cash overdraft ', 42), ('bank borrowings ', 36), (' utilised bank borrowings ', 33), (' loans from related party ', 33), (' bank overdraft ', 33), (' balance at the end of period ', 33), (' obligations under finance lease ', 33), (' bank loans', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none unsecured bank loans aud 2023 , res_fuzz_match = [(' bank loans', 100), (' secured long-term bank loans ', 62), (' current ', 57), ('bank borrowings ', 55), (' not later than one year ', 52), (' bank overdraft ', 52), (' obligations under finance lease ', 52), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' loans from related party ', 38), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' balance at the end of period ', 33), (' cash overdraft ', 29), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 50), (' lease liabilities - current ', 50), (' current ', 43), (' not later than 1 year ', 42), (' not later than one year ', 42), (' cash overdraft ', 42), ('bank borrowings ', 36), (' utilised bank borrowings ', 33), (' loans from related party ', 33), (' bank overdraft ', 33), (' balance at the end of period ', 33), (' obligations under finance lease ', 33), (' bank loans', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' bank loans', 56), (' leases ', 50), (' not later than 1 year ', 50), (' not later than one year ', 50), (' secured long-term bank loans ', 50), (' loans from related party ', 44), (' obligations under finance lease ', 44), (' lease liabilities ', 36), (' utilised bank borrowings ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' cash overdraft ', 21), (' current ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 50), (' lease liabilities - current ', 50), (' current ', 43), (' not later than 1 year ', 42), (' not later than one year ', 42), (' cash overdraft ', 42), ('bank borrowings ', 36), (' utilised bank borrowings ', 33), (' loans from related party ', 33), (' bank overdraft ', 33), (' balance at the end of period ', 33), (' obligations under finance lease ', 33), (' bank loans', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none related party loan aud 2023 , res_fuzz_match = [(' loans from related party ', 67), (' bank loans', 67), (' not later than one year ', 57), (' leases ', 50), (' not later than 1 year ', 49), (' secured long-term bank loans ', 48), (' lease liabilities ', 45), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' current ', 43), (' obligations under finance lease ', 43), (' lease liabilities - current ', 42), (' cash overdraft ', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying face value , res_fuzz_match = [(' obligations under finance lease ', 47), (' current ', 43), (' not later than 1 year ', 40), (' not later than one year ', 40), (' secured long-term bank loans ', 40), (' lease liabilities ', 36), (' cash overdraft ', 36), (' loans from related party ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank loans', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' utilised bank borrowings ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none unsecured bank loans aud 2023 , res_fuzz_match = [(' bank loans', 100), (' secured long-term bank loans ', 62), (' current ', 57), ('bank borrowings ', 55), (' not later than one year ', 52), (' bank overdraft ', 52), (' obligations under finance lease ', 52), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' loans from related party ', 38), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' balance at the end of period ', 33), (' cash overdraft ', 29), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying face value , res_fuzz_match = [(' obligations under finance lease ', 47), (' current ', 43), (' not later than 1 year ', 40), (' not later than one year ', 40), (' secured long-term bank loans ', 40), (' lease liabilities ', 36), (' cash overdraft ', 36), (' loans from related party ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank loans', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' utilised bank borrowings ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' bank loans', 56), (' leases ', 50), (' not later than 1 year ', 50), (' not later than one year ', 50), (' secured long-term bank loans ', 50), (' loans from related party ', 44), (' obligations under finance lease ', 44), (' lease liabilities ', 36), (' utilised bank borrowings ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' cash overdraft ', 21), (' current ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying face value , res_fuzz_match = [(' obligations under finance lease ', 47), (' current ', 43), (' not later than 1 year ', 40), (' not later than one year ', 40), (' secured long-term bank loans ', 40), (' lease liabilities ', 36), (' cash overdraft ', 36), (' loans from related party ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank loans', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' utilised bank borrowings ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none related party loan aud 2023 , res_fuzz_match = [(' loans from related party ', 67), (' bank loans', 67), (' not later than one year ', 57), (' leases ', 50), (' not later than 1 year ', 49), (' secured long-term bank loans ', 48), (' lease liabilities ', 45), (' bank overdraft ', 43), (' balance at the end of period ', 43), (' current ', 43), (' obligations under finance lease ', 43), (' lease liabilities - current ', 42), (' cash overdraft ', 36), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 50), (' lease liabilities - current ', 50), (' current ', 43), (' not later than 1 year ', 42), (' not later than one year ', 42), (' cash overdraft ', 42), ('bank borrowings ', 36), (' utilised bank borrowings ', 33), (' loans from related party ', 33), (' bank overdraft ', 33), (' balance at the end of period ', 33), (' obligations under finance lease ', 33), (' bank loans', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none unsecured bank loans aud 2023 , res_fuzz_match = [(' bank loans', 100), (' secured long-term bank loans ', 62), (' current ', 57), ('bank borrowings ', 55), (' not later than one year ', 52), (' bank overdraft ', 52), (' obligations under finance lease ', 52), (' utilised bank borrowings ', 50), (' not later than 1 year ', 47), (' loans from related party ', 38), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' balance at the end of period ', 33), (' cash overdraft ', 29), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 50), (' lease liabilities - current ', 50), (' current ', 43), (' not later than 1 year ', 42), (' not later than one year ', 42), (' cash overdraft ', 42), ('bank borrowings ', 36), (' utilised bank borrowings ', 33), (' loans from related party ', 33), (' bank overdraft ', 33), (' balance at the end of period ', 33), (' obligations under finance lease ', 33), (' bank loans', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = none total nan nan , res_fuzz_match = [(' bank loans', 56), (' leases ', 50), (' not later than 1 year ', 50), (' not later than one year ', 50), (' secured long-term bank loans ', 50), (' loans from related party ', 44), (' obligations under finance lease ', 44), (' lease liabilities ', 36), (' utilised bank borrowings ', 33), (' lease liabilities - current ', 33), (' balance at the end of period ', 33), (' bank overdraft ', 29), ('bank borrowings ', 27), (' cash overdraft ', 21), (' current ', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = carrying amount , res_fuzz_match = [(' secured long-term bank loans ', 50), (' lease liabilities - current ', 50), (' current ', 43), (' not later than 1 year ', 42), (' not later than one year ', 42), (' cash overdraft ', 42), ('bank borrowings ', 36), (' utilised bank borrowings ', 33), (' loans from related party ', 33), (' bank overdraft ', 33), (' balance at the end of period ', 33), (' obligations under finance lease ', 33), (' bank loans', 33), (' lease liabilities ', 27), (' leases ', 25)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 7, 10], 'score': [100, 100, 100, 100], 'value': [70948462.0, 70948462.0, 43733593.0, 41234712.0], 'label': ['None Unsecured bank loans AUD 2023', 'None Unsecured bank loans AUD 2023', 'None Unsecured bank loans AUD 2023', 'None Unsecured bank loans AUD 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current related party loan 20 , res_fuzz_match = [(' current ', 100), (' bank loans', 67), (' loans from related party ', 62), (' lease liabilities ', 55), (' secured long-term bank loans ', 54), (' not later than 1 year ', 53), (' leases ', 50), (' not later than one year ', 48), (' balance at the end of period ', 43), (' lease liabilities - current ', 37), (' bank overdraft ', 36), (' cash overdraft ', 36), (' obligations under finance lease ', 35), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current unsecured bank loans nan , res_fuzz_match = [(' current ', 100), (' bank loans', 100), (' secured long-term bank loans ', 67), (' not later than one year ', 57), ('bank borrowings ', 55), (' not later than 1 year ', 53), (' utilised bank borrowings ', 50), (' leases ', 50), (' bank overdraft ', 50), (' obligations under finance lease ', 48), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' loans from related party ', 33), (' balance at the end of period ', 33), (' cash overdraft ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' current ', 100), (' secured long-term bank loans ', 53), (' leases ', 50), (' not later than one year ', 47), (' bank loans', 44), (' not later than 1 year ', 41), (' lease liabilities - current ', 41), (' lease liabilities ', 36), (' utilised bank borrowings ', 35), (' loans from related party ', 35), (' obligations under finance lease ', 35), (' bank overdraft ', 30), (' balance at the end of period ', 29), (' cash overdraft ', 29), ('bank borrowings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current related party loan 20 , res_fuzz_match = [(' current ', 100), (' bank loans', 67), (' loans from related party ', 62), (' lease liabilities ', 55), (' secured long-term bank loans ', 54), (' not later than 1 year ', 53), (' leases ', 50), (' not later than one year ', 48), (' balance at the end of period ', 43), (' lease liabilities - current ', 37), (' bank overdraft ', 36), (' cash overdraft ', 36), (' obligations under finance lease ', 35), (' utilised bank borrowings ', 33), ('bank borrowings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current unsecured bank loans nan , res_fuzz_match = [(' current ', 100), (' bank loans', 100), (' secured long-term bank loans ', 67), (' not later than one year ', 57), ('bank borrowings ', 55), (' not later than 1 year ', 53), (' utilised bank borrowings ', 50), (' leases ', 50), (' bank overdraft ', 50), (' obligations under finance lease ', 48), (' lease liabilities - current ', 37), (' lease liabilities ', 36), (' loans from related party ', 33), (' balance at the end of period ', 33), (' cash overdraft ', 29)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' current ', 100), (' secured long-term bank loans ', 53), (' leases ', 50), (' not later than one year ', 47), (' bank loans', 44), (' not later than 1 year ', 41), (' lease liabilities - current ', 41), (' lease liabilities ', 36), (' utilised bank borrowings ', 35), (' loans from related party ', 35), (' obligations under finance lease ', 35), (' bank overdraft ', 30), (' balance at the end of period ', 29), (' cash overdraft ', 29), ('bank borrowings ', 27)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100], 'value': [70000000.0, 70948462.0, 140948462.0, 70000000.0, 41234712.0, 111234712.0], 'label': ['Current Related party loan 20', 'Current Unsecured bank loans nan', 'Current Total nan', 'Current Related party loan 20', 'Current Unsecured bank loans nan', 'Current Total nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ', ' ', ' Related party payables ', ' trade payables - related parties ', ' Trade payable due to related partiees']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:18+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 17:55:18+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49), ('trade payable', 30), ('other trade payables', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 66271138.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [66271138.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49), ('trade payable', 30), ('other trade payables', 30)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 30), ('trade payable', 22)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 53848711.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [53848711.0]}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:18+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ', ' ', ' Related party payables ', ' trade payables - related parties ', ' Trade payable due to related partiees'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' trade and other payables ', 100), (' payables ', 100), (' trade payables ', 75), (' trade payables - other parties ', 67), (' other trade payables ', 67), (' Related party payables ', 61), (' accounts payable - trade ', 60), ('trade creditors ', 57), (' trade payables - related parties ', 54), (' Trade payable due to related partiees', 48), (' amounts payable to controlling entity ', 46), (' payables to related parties ', 44), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' trade payables ', 58), (' accounts payable - trade ', 51), (' trade and other payables ', 50), (' other trade payables ', 50), (' payables ', 50), (' amounts payable to controlling entity ', 44), (' Related party payables ', 44), ('trade creditors ', 43), (' trade payables - other parties ', 39), (' payables to related parties ', 39), (' trade payables - related parties ', 38), (' Trade payable due to related partiees', 33), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' Trade payable due to related partiees', 70), (' payables to related parties ', 67), (' trade payables - related parties ', 67), (' Related party payables ', 63), (' trade payables - other parties ', 54), ('trade creditors ', 50), (' other trade payables ', 50), (' amounts payable to controlling entity ', 46), (' trade and other payables ', 45), (' accounts payable - trade ', 45), (' trade payables ', 42), (' payables ', 33), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan , res_fuzz_match = [(' accounts payable - trade ', 40), (' Related party payables ', 39), ('trade creditors ', 36), (' trade and other payables ', 35), (' amounts payable to controlling entity ', 35), (' trade payables - related parties ', 35), (' Trade payable due to related partiees', 35), (' payables to related parties ', 34), (' trade payables ', 33), (' other trade payables ', 33), (' trade payables - other parties ', 30), (' payables ', 17), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current fbt payable nan , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' Related party payables ', 67), (' accounts payable - trade ', 60), (' amounts payable to controlling entity ', 59), (' other trade payables ', 56), (' trade and other payables ', 55), (' trade payables - other parties ', 50), (' trade payables - related parties ', 50), (' Trade payable due to related partiees', 50), (' payables to related parties ', 44), ('trade creditors ', 29), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current gst payable nan , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' Related party payables ', 67), (' accounts payable - trade ', 60), (' amounts payable to controlling entity ', 59), (' other trade payables ', 56), (' trade and other payables ', 55), (' trade payables - other parties ', 50), (' trade payables - related parties ', 50), (' Trade payable due to related partiees', 50), (' payables to related parties ', 44), ('trade creditors ', 29), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('trade creditors ', 79), (' other trade payables ', 56), (' trade payables ', 50), (' trade payables - other parties ', 46), (' trade and other payables ', 45), (' trade payables - related parties ', 42), (' accounts payable - trade ', 40), (' amounts payable to controlling entity ', 39), (' payables to related parties ', 39), (' Related party payables ', 39), (' Trade payable due to related partiees', 38), (' payables ', 33), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' accounts payable - trade ', 53), (' trade and other payables ', 47), (' amounts payable to controlling entity ', 47), (' trade payables ', 42), (' Related party payables ', 41), (' trade payables - related parties ', 41), ('trade creditors ', 36), (' trade payables - other parties ', 35), (' other trade payables ', 35), (' Trade payable due to related partiees', 35), (' payables ', 33), (' payables to related parties ', 29), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' trade and other payables ', 100), (' payables ', 100), (' trade payables ', 75), (' trade payables - other parties ', 67), (' other trade payables ', 67), (' Related party payables ', 61), (' accounts payable - trade ', 60), ('trade creditors ', 57), (' trade payables - related parties ', 54), (' Trade payable due to related partiees', 48), (' amounts payable to controlling entity ', 46), (' payables to related parties ', 44), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' trade payables ', 58), (' accounts payable - trade ', 51), (' trade and other payables ', 50), (' other trade payables ', 50), (' payables ', 50), (' amounts payable to controlling entity ', 44), (' Related party payables ', 44), ('trade creditors ', 43), (' trade payables - other parties ', 39), (' payables to related parties ', 39), (' trade payables - related parties ', 38), (' Trade payable due to related partiees', 33), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' Trade payable due to related partiees', 70), (' payables to related parties ', 67), (' trade payables - related parties ', 67), (' Related party payables ', 63), (' trade payables - other parties ', 54), ('trade creditors ', 50), (' other trade payables ', 50), (' amounts payable to controlling entity ', 46), (' trade and other payables ', 45), (' accounts payable - trade ', 45), (' trade payables ', 42), (' payables ', 33), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan , res_fuzz_match = [(' accounts payable - trade ', 40), (' Related party payables ', 39), ('trade creditors ', 36), (' trade and other payables ', 35), (' amounts payable to controlling entity ', 35), (' trade payables - related parties ', 35), (' Trade payable due to related partiees', 35), (' payables to related parties ', 34), (' trade payables ', 33), (' other trade payables ', 33), (' trade payables - other parties ', 30), (' payables ', 17), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current fbt payable nan , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' Related party payables ', 67), (' accounts payable - trade ', 60), (' amounts payable to controlling entity ', 59), (' other trade payables ', 56), (' trade and other payables ', 55), (' trade payables - other parties ', 50), (' trade payables - related parties ', 50), (' Trade payable due to related partiees', 50), (' payables to related parties ', 44), ('trade creditors ', 29), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current gst payable nan , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' Related party payables ', 67), (' accounts payable - trade ', 60), (' amounts payable to controlling entity ', 59), (' other trade payables ', 56), (' trade and other payables ', 55), (' trade payables - other parties ', 50), (' trade payables - related parties ', 50), (' Trade payable due to related partiees', 50), (' payables to related parties ', 44), ('trade creditors ', 29), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('trade creditors ', 79), (' other trade payables ', 56), (' trade payables ', 50), (' trade payables - other parties ', 46), (' trade and other payables ', 45), (' trade payables - related parties ', 42), (' accounts payable - trade ', 40), (' amounts payable to controlling entity ', 39), (' payables to related parties ', 39), (' Related party payables ', 39), (' Trade payable due to related partiees', 38), (' payables ', 33), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' accounts payable - trade ', 53), (' trade and other payables ', 47), (' amounts payable to controlling entity ', 47), (' trade payables ', 42), (' Related party payables ', 41), (' trade payables - related parties ', 41), ('trade creditors ', 36), (' trade payables - other parties ', 35), (' other trade payables ', 35), (' Trade payable due to related partiees', 35), (' payables ', 33), (' payables to related parties ', 29), (' ', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 17:55:18+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 13, 14, 15], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [7802444.0, 7802444.0, 333926.0, 34427416.0, 2795414.0, 754341.0, 754341.0, 5293901.0, 5293901.0, 2441269.0, 53848711.0, 8166254.0, 8166254.0, 785740.0, 44920374.0, 2471759.0, 503541.0, 503541.0, 3376358.0, 3376358.0, 6047112.0, 66271138.0], 'label': ['Current Trade and other payables nan', '', '', '', '', 'Current FBT payable nan', '', 'Current GST payable nan', '', '', '', 'Current Trade and other payables nan', '', '', '', '', 'Current FBT payable nan', '', 'Current GST payable nan', '', '', ''], 'year': [], 'colname_found': ['rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns']}
2023-08-28 17:55:18+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:18+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued ', ' accruals']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 66271138.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [66271138.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [('trade and other payables', 49)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('trade and other payables', 32)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 53848711.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['15'], 'line_item_value': [53848711.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued ', ' accruals'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' interest accrued ', 50), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan , res_fuzz_match = [(' accruals', 43), (' interest accrued ', 36), ('accrued expenses ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable nan , res_fuzz_match = [(' accruals', 43), (' interest accrued ', 36), ('accrued expenses ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current gst payable nan , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 42)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [(' accruals', 100), (' interest accrued ', 64), ('accrued expenses ', 58)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' interest accrued ', 36), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' interest accrued ', 50), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan , res_fuzz_match = [(' accruals', 43), (' interest accrued ', 36), ('accrued expenses ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable nan , res_fuzz_match = [(' accruals', 43), (' interest accrued ', 36), ('accrued expenses ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current gst payable nan , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 42)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [(' accruals', 100), (' interest accrued ', 64), ('accrued expenses ', 58)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' interest accrued ', 36), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 14], 'score': [100, 100], 'value': [2441269.0, 6047112.0], 'label': ['Current Other creditors and accruals nan', 'Current Other creditors and accruals nan'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' Current tax payables ', 50), (' Trade and other payables', 50), (' tax ', 33), (' provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' Current tax payables ', 48), (' Trade and other payables', 45), (' tax ', 33), (' provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' Trade and other payables', 100), (' tax ', 67), (' income tax payable ', 62), (' Current tax payables ', 61), ('current tax liabilities ', 44), (' provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' Trade and other payables', 53), ('current tax liabilities ', 33), (' income tax payable ', 33), (' tax ', 33), (' provision ', 33), (' Current tax payables ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision ', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' Current tax payables ', 17), (' Trade and other payables', 17), (' tax ', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision ', 33), ('current tax liabilities ', 27), (' income tax payable ', 27), (' Current tax payables ', 27), (' Trade and other payables', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' Current tax payables ', 83), (' income tax payable ', 56), (' Trade and other payables', 44), (' provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 6], 'score': 100, 'value': 94982031.0, 'line_item_label': ['Liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '15', '17', nan], 'line_item_value': [0.0, 66271138.0, 28301337.0, 409556.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' Current tax payables ', 50), (' Trade and other payables', 50), (' tax ', 33), (' provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' Current tax payables ', 48), (' Trade and other payables', 45), (' tax ', 33), (' provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' Trade and other payables', 100), (' tax ', 67), (' income tax payable ', 62), (' Current tax payables ', 61), ('current tax liabilities ', 44), (' provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' Trade and other payables', 53), ('current tax liabilities ', 33), (' income tax payable ', 33), (' tax ', 33), (' provision ', 33), (' Current tax payables ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision ', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' Current tax payables ', 17), (' Trade and other payables', 17), (' tax ', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' tax ', 33), (' provision ', 33), ('current tax liabilities ', 27), (' income tax payable ', 27), (' Current tax payables ', 27), (' Trade and other payables', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' Current tax payables ', 83), (' income tax payable ', 56), (' Trade and other payables', 44), (' provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 6], 'score': 100, 'value': 81135058.0, 'line_item_label': ['Liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '15', '17', nan], 'line_item_value': [0.0, 53848711.0, 26652372.0, 633975.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' tax receivable/payable', 59), ('income tax (refundable)/payable ', 57), (' provision for income tax ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 39), (' provision for income tax ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39), (' provision for income tax ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 31), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable nan , res_fuzz_match = [(' tax receivable/payable', 53), ('income tax (refundable)/payable ', 51), (' provision for income tax ', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current gst payable nan , res_fuzz_match = [(' tax receivable/payable', 53), ('income tax (refundable)/payable ', 51), (' provision for income tax ', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' tax receivable/payable', 41), (' provision for income tax ', 40)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 29), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' tax receivable/payable', 59), ('income tax (refundable)/payable ', 57), (' provision for income tax ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 39), (' provision for income tax ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39), (' provision for income tax ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax ', 31), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable nan , res_fuzz_match = [(' tax receivable/payable', 53), ('income tax (refundable)/payable ', 51), (' provision for income tax ', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current gst payable nan , res_fuzz_match = [(' tax receivable/payable', 53), ('income tax (refundable)/payable ', 51), (' provision for income tax ', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' tax receivable/payable', 41), (' provision for income tax ', 40)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [('income tax (refundable)/payable ', 41), (' provision for income tax ', 29), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 37), (' provision for income tax ', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax ', 36), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: in aud warranty dealers , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' provision for income tax ', 56), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4207840 42237073 , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 39)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (3,089,523) (42,969,775) , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 45), ('income tax (refundable)/payable ', 39)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' provision for income tax ', 56), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 37), (' provision for income tax ', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 38), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 39), (' provision for income tax ', 36), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 35), (' tax receivable/payable', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: in aud warranty dealers , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 39)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' provision for income tax ', 56), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4207840 42237073 , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 47), ('income tax (refundable)/payable ', 39)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provision for income tax ', 50), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (3,089,523) (42,969,775) , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 45), ('income tax (refundable)/payable ', 39)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' provision for income tax ', 56), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' derivative liabilities ', 67), (' financial liabilities', 60), (' Contract Liabilities ', 57), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability ', 32), (' employee benefits', 29), (' trade and other payables', 21), (' Derivative financial instruments ', 20), ('provisions', 17), (' Provision ', 17), (' Deferred income', 12), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' derivative liabilities ', 70), (' financial liabilities', 64), (' Contract Liabilities ', 62), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability ', 43), (' trade and other payables', 30), (' Derivative financial instruments ', 29), (' Deferred income', 27), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12), (' Provision ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' derivative liabilities ', 41), (' Derivative financial instruments ', 39), (' Contract Liabilities ', 38), (' deferred revenue', 35), (' foreign exchange contract liability ', 34), (' financial liabilities', 33), (' employee benefits', 32), (' Deferred income', 24), (' customer deposits', 22), ('provisions', 14), (' Provision ', 14)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' trade and other payables', 49), (' derivative liabilities ', 37), (' foreign exchange contract liability ', 35), (' financial liabilities', 34), (' other financial liabilities', 34), (' Contract Liabilities ', 33), (' Deferred income', 31), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' employee benefits', 27), (' Derivative financial instruments ', 26), (' customer deposits', 21), ('provisions', 19), (' Provision ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' Provision ', 100), (' derivative liabilities ', 33), (' customer deposits', 30), (' Derivative financial instruments ', 27), (' Deferred income', 24), (' deferred revenue', 22), (' employee benefits', 19), (' Contract Liabilities ', 19), (' foreign exchange contract liability ', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' Derivative financial instruments ', 31), (' Deferred income', 31), (' derivative liabilities ', 30), (' financial liabilities', 28), (' Contract Liabilities ', 27), (' foreign exchange contract liability ', 26), ('provisions', 19), (' Provision ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' Contract Liabilities ', 61), (' other financial liabilities', 53), (' derivative liabilities ', 53), (' financial liabilities', 50), (' foreign exchange contract liability ', 49), (' trade and other payables', 45), (' customer deposits', 38), (' Derivative financial instruments ', 33), (' employee benefits', 30), (' deferred revenue', 27), (' Deferred income', 21), ('provisions', 17), (' Provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5, 6], 'score': 84, 'value': 97195406.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Employee benefits', 'Current tax liabilities'], 'note_numbers': ['15', '17', '18', nan], 'line_item_value': [66271138.0, 28301337.0, 2213375.0, 409556.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' derivative liabilities ', 67), (' financial liabilities', 60), (' Contract Liabilities ', 57), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability ', 32), (' employee benefits', 29), (' trade and other payables', 21), (' Derivative financial instruments ', 20), ('provisions', 17), (' Provision ', 17), (' Deferred income', 12), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' derivative liabilities ', 70), (' financial liabilities', 64), (' Contract Liabilities ', 62), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability ', 43), (' trade and other payables', 30), (' Derivative financial instruments ', 29), (' Deferred income', 27), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12), (' Provision ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' derivative liabilities ', 41), (' Derivative financial instruments ', 39), (' Contract Liabilities ', 38), (' deferred revenue', 35), (' foreign exchange contract liability ', 34), (' financial liabilities', 33), (' employee benefits', 32), (' Deferred income', 24), (' customer deposits', 22), ('provisions', 14), (' Provision ', 14)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = loans and borrowings , res_fuzz_match = [(' trade and other payables', 49), (' derivative liabilities ', 37), (' foreign exchange contract liability ', 35), (' financial liabilities', 34), (' other financial liabilities', 34), (' Contract Liabilities ', 33), (' Deferred income', 31), (' deferred revenue', 30), ('other current liabilities', 29), (' other current liabilities', 29), (' employee benefits', 27), (' Derivative financial instruments ', 26), (' customer deposits', 21), ('provisions', 19), (' Provision ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' Provision ', 100), (' derivative liabilities ', 33), (' customer deposits', 30), (' Derivative financial instruments ', 27), (' Deferred income', 24), (' deferred revenue', 22), (' employee benefits', 19), (' Contract Liabilities ', 19), (' foreign exchange contract liability ', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' Derivative financial instruments ', 31), (' Deferred income', 31), (' derivative liabilities ', 30), (' financial liabilities', 28), (' Contract Liabilities ', 27), (' foreign exchange contract liability ', 26), ('provisions', 19), (' Provision ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' Contract Liabilities ', 61), (' other financial liabilities', 53), (' derivative liabilities ', 53), (' financial liabilities', 50), (' foreign exchange contract liability ', 49), (' trade and other payables', 45), (' customer deposits', 38), (' Derivative financial instruments ', 33), (' employee benefits', 30), (' deferred revenue', 27), (' Deferred income', 21), ('provisions', 17), (' Provision ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5, 6], 'score': 84, 'value': 83647405.0, 'line_item_label': ['Trade and other payables', 'Provisions', 'Employee benefits', 'Current tax liabilities'], 'note_numbers': ['15', '17', '18', nan], 'line_item_value': [53848711.0, 26652372.0, 2512347.0, 633975.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' other', 100), (' others ', 100), (' Trade payables ', 75), (' gst payables', 70), (' GST Payable', 70), (' Employee payables ', 64), (' Stock and feright payables ', 62), (' rebates', 60), (' current - liability for annual and long service leave', 56), (' share of joint venture payables', 56), (' other related parties', 53), (' Current- liability for annual leave ', 53), (' gst payable and accruals', 50), (' restructuring', 50), (' warranty', 50), (' current- liability for long service leave ', 50), (' Warranty and after sales service ', 50), (' ultimate parent entity', 47), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' Forward currency contract ', 46), (' total current employee benefits ', 45), (' Deferred income ', 45), (' loans from related party', 43), (' provisions - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - payroll', 41), (' provision for annual and long service leave ', 41), (' contract liabilites - current', 40), (' gst liabilities', 40), (' service contracts ', 40), (' make good provisions', 38), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' accrued expenses ', 33), (' provision for associate funding', 32)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 77), (' service contracts ', 67), (' derivative contracts - at fair value', 64), (' current - liability for annual and long service leave', 63), (' Current- liability for annual leave ', 63), (' Forward currency contract ', 62), (' rebates', 60), (' restructuring', 60), (' other', 60), (' others ', 60), (' current- liability for long service leave ', 59), (' Trade payables ', 58), (' forward exchange contracts', 54), (' ultimate parent entity', 53), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' GST Payable', 50), (' share of joint venture payables', 48), (' arising from service contracts', 48), (' total current employee benefits ', 48), (' other related parties', 47), (' Warranty and after sales service ', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Employee entitlements ', 43), (' gst payable and accruals', 42), (' loan payable to relayed party under tax funding agreement', 41), ('other creditors and accruals', 39), (' Stock and feright payables ', 38), (' provision for annual and long service leave ', 37), (' provision for associate funding', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27), (' accrued expenses ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' Forward currency contract ', 54), (' Warranty and after sales service ', 52), (' other creditors', 50), (' other creditors', 50), (' current - liability for annual and long service leave', 50), (' other creditors', 50), (' warranty', 50), (' Current- liability for annual leave ', 50), (' current- liability for long service leave ', 50), (' ultimate parent entity', 49), (' share of joint venture payables', 48), (' total current employee benefits ', 48), (' employee benefits - payroll', 47), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' Stock and feright payables ', 46), (' contract liabilites - current', 44), (' loan payable to relayed party under tax funding agreement', 43), (' employee benefits - current', 43), (' provisions - current', 43), (' Employee entitlements ', 43), ('other creditors and accruals', 42), (' Trade payables ', 42), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' make good provisions', 39), (' provision for annual and long service leave ', 37), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan , res_fuzz_match = [(' current - liability for annual and long service leave', 60), (' rebates', 60), (' Current- liability for annual leave ', 60), (' Forward currency contract ', 56), (' total current employee benefits ', 55), (' current- liability for long service leave ', 55), (' secured long-term bank loans', 50), (' warranty', 50), ('other creditors and accruals', 45), (' Warranty and after sales service ', 45), (' provisions - current', 43), (' other related parties', 41), (' gst liabilities', 40), (' other', 40), (' others ', 40), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' derivative contracts - at fair value', 35), (' loan payable to relayed party under tax funding agreement', 35), (' loans from related party', 35), (' gst payable and accruals', 35), (' employee benefits - current', 35), (' contract liabilites - current', 35), (' provision for associate funding', 35), (' forward exchange contracts', 35), (' Stock and feright payables ', 35), (' gst', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' make good provisions', 31), (' share of joint venture payables', 30), (' gst payables', 30), (' employee benefits - payroll', 30), (' arising from service contracts', 30), (' restructuring', 30), (' provision for annual and long service leave ', 30), (' GST Payable', 30), (' Employee entitlements ', 29), (' Deferred income ', 27), (' abandonment and decommissioning costs', 25), (' Employee payables ', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable nan , res_fuzz_match = [(' gst payables', 80), (' GST Payable', 80), (' Trade payables ', 67), (' current - liability for annual and long service leave', 64), (' Current- liability for annual leave ', 64), (' rebates', 60), (' share of joint venture payables', 59), (' current- liability for long service leave ', 59), (' Employee payables ', 57), (' total current employee benefits ', 55), (' Stock and feright payables ', 55), (' gst payable and accruals', 51), (' secured long-term bank loans', 50), (' gst liabilities', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 45), (' provision for annual and long service leave ', 45), (' Warranty and after sales service ', 45), (' provisions - current', 43), ('other creditors and accruals', 41), (' other related parties', 41), (' contract liabilites - current', 41), (' employee benefits - payroll', 41), (' Forward currency contract ', 41), (' restructuring', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 37), (' Employee entitlements ', 36), (' loans from related party', 35), (' employee benefits - current', 34), (' provision for associate funding', 33), (' gst', 33), (' accrued expenses ', 33), (' forward exchange contracts', 32), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 27), (' service contracts ', 27), (' Deferred income ', 27), (' make good provisions', 25), (' abandonment and decommissioning costs', 23), (' other', 20), (' others ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current gst payable nan , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' GST Payable', 100), (' gst payable and accruals', 72), (' gst liabilities', 70), (' Trade payables ', 67), (' current - liability for annual and long service leave', 64), (' Current- liability for annual leave ', 64), (' rebates', 60), (' share of joint venture payables', 59), (' current- liability for long service leave ', 59), (' Employee payables ', 57), (' total current employee benefits ', 55), (' Stock and feright payables ', 55), (' secured long-term bank loans', 50), (' warranty', 50), (' provisions - current', 43), (' accrued expenses ', 42), ('other creditors and accruals', 41), (' other related parties', 41), (' contract liabilites - current', 41), (' provision for annual and long service leave ', 41), (' Warranty and after sales service ', 41), (' Forward currency contract ', 41), (' restructuring', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 37), (' loan payable to relayed party under tax funding agreement', 36), (' employee benefits - payroll', 36), (' forward exchange contracts', 36), (' Employee entitlements ', 36), (' loans from related party', 34), (' employee benefits - current', 32), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' provision for associate funding', 28), (' arising from service contracts', 27), (' service contracts ', 27), (' abandonment and decommissioning costs', 23), (' other', 20), (' others ', 20), (' Deferred income ', 18)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' others ', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' accrued expenses ', 58), (' current - liability for annual and long service leave', 53), (' Current- liability for annual leave ', 53), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' Trade payables ', 50), (' share of joint venture payables', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' current- liability for long service leave ', 46), (' loans from related party', 43), (' provisions - current', 43), (' Warranty and after sales service ', 43), (' Employee entitlements ', 43), (' forward exchange contracts', 42), (' Forward currency contract ', 42), (' Stock and feright payables ', 42), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - payroll', 41), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' arising from service contracts', 40), (' service contracts ', 40), (' GST Payable', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' total current employee benefits ', 38), (' provision for annual and long service leave ', 38), (' abandonment and decommissioning costs', 37), (' Employee payables ', 36), (' Deferred income ', 36), (' gst', 33), (' gst liabilities', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' Current- liability for annual leave ', 65), (' current- liability for long service leave ', 65), (' Forward currency contract ', 61), (' rebates', 60), (' total current employee benefits ', 59), (' secured long-term bank loans', 53), (' warranty', 50), ('other creditors and accruals', 47), (' loan payable to relayed party under tax funding agreement', 47), (' Warranty and after sales service ', 47), (' ultimate parent entity', 45), (' provisions - current', 43), (' Trade payables ', 42), (' derivative contracts - at fair value', 41), (' employee benefits - current', 41), (' contract liabilites - current', 41), (' share of joint venture payables', 41), (' forward exchange contracts', 41), (' provision for annual and long service leave ', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' other related parties', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' loans from related party', 35), (' gst payable and accruals', 35), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' provision for associate funding', 29), (' arising from service contracts', 29), (' Employee payables ', 29), (' Stock and feright payables ', 29), (' Deferred income ', 27), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current trade and other payables nan , res_fuzz_match = [(' other', 100), (' others ', 100), (' Trade payables ', 75), (' gst payables', 70), (' GST Payable', 70), (' Employee payables ', 64), (' Stock and feright payables ', 62), (' rebates', 60), (' current - liability for annual and long service leave', 56), (' share of joint venture payables', 56), (' other related parties', 53), (' Current- liability for annual leave ', 53), (' gst payable and accruals', 50), (' restructuring', 50), (' warranty', 50), (' current- liability for long service leave ', 50), (' Warranty and after sales service ', 50), (' ultimate parent entity', 47), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' Forward currency contract ', 46), (' total current employee benefits ', 45), (' Deferred income ', 45), (' loans from related party', 43), (' provisions - current', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - payroll', 41), (' provision for annual and long service leave ', 41), (' contract liabilites - current', 40), (' gst liabilities', 40), (' service contracts ', 40), (' make good provisions', 38), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' accrued expenses ', 33), (' provision for associate funding', 32)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current contract liabilities nan , res_fuzz_match = [(' gst liabilities', 80), (' contract liabilites - current', 77), (' service contracts ', 67), (' derivative contracts - at fair value', 64), (' current - liability for annual and long service leave', 63), (' Current- liability for annual leave ', 63), (' Forward currency contract ', 62), (' rebates', 60), (' restructuring', 60), (' other', 60), (' others ', 60), (' current- liability for long service leave ', 59), (' Trade payables ', 58), (' forward exchange contracts', 54), (' ultimate parent entity', 53), (' secured long-term bank loans', 50), (' gst payables', 50), (' warranty', 50), (' GST Payable', 50), (' share of joint venture payables', 48), (' arising from service contracts', 48), (' total current employee benefits ', 48), (' other related parties', 47), (' Warranty and after sales service ', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Employee entitlements ', 43), (' gst payable and accruals', 42), (' loan payable to relayed party under tax funding agreement', 41), ('other creditors and accruals', 39), (' Stock and feright payables ', 38), (' provision for annual and long service leave ', 37), (' provision for associate funding', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' gst', 33), (' employee benefits - payroll', 32), (' make good provisions', 31), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27), (' accrued expenses ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current amounts due to related party 20 , res_fuzz_match = [(' other related parties', 82), (' loans from related party', 71), (' rebates', 60), (' Forward currency contract ', 54), (' Warranty and after sales service ', 52), (' other creditors', 50), (' other creditors', 50), (' current - liability for annual and long service leave', 50), (' other creditors', 50), (' warranty', 50), (' Current- liability for annual leave ', 50), (' current- liability for long service leave ', 50), (' ultimate parent entity', 49), (' share of joint venture payables', 48), (' total current employee benefits ', 48), (' employee benefits - payroll', 47), (' derivative contracts - at fair value', 46), (' secured long-term bank loans', 46), (' forward exchange contracts', 46), (' Stock and feright payables ', 46), (' contract liabilites - current', 44), (' loan payable to relayed party under tax funding agreement', 43), (' employee benefits - current', 43), (' provisions - current', 43), (' Employee entitlements ', 43), ('other creditors and accruals', 42), (' Trade payables ', 42), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' make good provisions', 39), (' provision for annual and long service leave ', 37), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current holdbacks nan , res_fuzz_match = [(' current - liability for annual and long service leave', 60), (' rebates', 60), (' Current- liability for annual leave ', 60), (' Forward currency contract ', 56), (' total current employee benefits ', 55), (' current- liability for long service leave ', 55), (' secured long-term bank loans', 50), (' warranty', 50), ('other creditors and accruals', 45), (' Warranty and after sales service ', 45), (' provisions - current', 43), (' other related parties', 41), (' gst liabilities', 40), (' other', 40), (' others ', 40), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' derivative contracts - at fair value', 35), (' loan payable to relayed party under tax funding agreement', 35), (' loans from related party', 35), (' gst payable and accruals', 35), (' employee benefits - current', 35), (' contract liabilites - current', 35), (' provision for associate funding', 35), (' forward exchange contracts', 35), (' Stock and feright payables ', 35), (' gst', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' make good provisions', 31), (' share of joint venture payables', 30), (' gst payables', 30), (' employee benefits - payroll', 30), (' arising from service contracts', 30), (' restructuring', 30), (' provision for annual and long service leave ', 30), (' GST Payable', 30), (' Employee entitlements ', 29), (' Deferred income ', 27), (' abandonment and decommissioning costs', 25), (' Employee payables ', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current fbt payable nan , res_fuzz_match = [(' gst payables', 80), (' GST Payable', 80), (' Trade payables ', 67), (' current - liability for annual and long service leave', 64), (' Current- liability for annual leave ', 64), (' rebates', 60), (' share of joint venture payables', 59), (' current- liability for long service leave ', 59), (' Employee payables ', 57), (' total current employee benefits ', 55), (' Stock and feright payables ', 55), (' gst payable and accruals', 51), (' secured long-term bank loans', 50), (' gst liabilities', 50), (' warranty', 50), (' loan payable to relayed party under tax funding agreement', 45), (' provision for annual and long service leave ', 45), (' Warranty and after sales service ', 45), (' provisions - current', 43), ('other creditors and accruals', 41), (' other related parties', 41), (' contract liabilites - current', 41), (' employee benefits - payroll', 41), (' Forward currency contract ', 41), (' restructuring', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 37), (' Employee entitlements ', 36), (' loans from related party', 35), (' employee benefits - current', 34), (' provision for associate funding', 33), (' gst', 33), (' accrued expenses ', 33), (' forward exchange contracts', 32), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' arising from service contracts', 27), (' service contracts ', 27), (' Deferred income ', 27), (' make good provisions', 25), (' abandonment and decommissioning costs', 23), (' other', 20), (' others ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current gst payable nan , res_fuzz_match = [(' gst payables', 100), (' gst', 100), (' GST Payable', 100), (' gst payable and accruals', 72), (' gst liabilities', 70), (' Trade payables ', 67), (' current - liability for annual and long service leave', 64), (' Current- liability for annual leave ', 64), (' rebates', 60), (' share of joint venture payables', 59), (' current- liability for long service leave ', 59), (' Employee payables ', 57), (' total current employee benefits ', 55), (' Stock and feright payables ', 55), (' secured long-term bank loans', 50), (' warranty', 50), (' provisions - current', 43), (' accrued expenses ', 42), ('other creditors and accruals', 41), (' other related parties', 41), (' contract liabilites - current', 41), (' provision for annual and long service leave ', 41), (' Warranty and after sales service ', 41), (' Forward currency contract ', 41), (' restructuring', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 37), (' loan payable to relayed party under tax funding agreement', 36), (' employee benefits - payroll', 36), (' forward exchange contracts', 36), (' Employee entitlements ', 36), (' loans from related party', 34), (' employee benefits - current', 32), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' provision for associate funding', 28), (' arising from service contracts', 27), (' service contracts ', 27), (' abandonment and decommissioning costs', 23), (' other', 20), (' others ', 20), (' Deferred income ', 18)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other creditors and accruals nan , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' others ', 100), (' other related parties', 65), (' rebates', 60), (' gst payable and accruals', 59), (' accrued expenses ', 58), (' current - liability for annual and long service leave', 53), (' Current- liability for annual leave ', 53), (' derivative contracts - at fair value', 50), (' restructuring', 50), (' warranty', 50), (' Trade payables ', 50), (' share of joint venture payables', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 46), (' current- liability for long service leave ', 46), (' loans from related party', 43), (' provisions - current', 43), (' Warranty and after sales service ', 43), (' Employee entitlements ', 43), (' forward exchange contracts', 42), (' Forward currency contract ', 42), (' Stock and feright payables ', 42), (' loan payable to relayed party under tax funding agreement', 41), (' employee benefits - payroll', 41), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' arising from service contracts', 40), (' service contracts ', 40), (' GST Payable', 40), (' employee benefits - current', 39), (' make good provisions', 38), (' total current employee benefits ', 38), (' provision for annual and long service leave ', 38), (' abandonment and decommissioning costs', 37), (' Employee payables ', 36), (' Deferred income ', 36), (' gst', 33), (' gst liabilities', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' current - liability for annual and long service leave', 65), (' Current- liability for annual leave ', 65), (' current- liability for long service leave ', 65), (' Forward currency contract ', 61), (' rebates', 60), (' total current employee benefits ', 59), (' secured long-term bank loans', 53), (' warranty', 50), ('other creditors and accruals', 47), (' loan payable to relayed party under tax funding agreement', 47), (' Warranty and after sales service ', 47), (' ultimate parent entity', 45), (' provisions - current', 43), (' Trade payables ', 42), (' derivative contracts - at fair value', 41), (' employee benefits - current', 41), (' contract liabilites - current', 41), (' share of joint venture payables', 41), (' forward exchange contracts', 41), (' provision for annual and long service leave ', 41), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' other related parties', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' loans from related party', 35), (' gst payable and accruals', 35), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' provision for associate funding', 29), (' arising from service contracts', 29), (' Employee payables ', 29), (' Stock and feright payables ', 29), (' Deferred income ', 27), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14], 'score': [100, 80, 82, 80, 100, 100, 100, 80, 82, 80, 100, 100], 'value': [7802444.0, 333926.0, 34427416.0, 754341.0, 5293901.0, 2441269.0, 8166254.0, 785740.0, 44920374.0, 503541.0, 3376358.0, 6047112.0], 'label': ['Current Trade and other payables nan', 'Current Contract liabilities nan', 'Current Amounts due to related party 20', 'Current FBT payable nan', 'Current GST payable nan', 'Current Other creditors and accruals nan', 'Current Trade and other payables nan', 'Current Contract liabilities nan', 'Current Amounts due to related party 20', 'Current FBT payable nan', 'Current GST payable nan', 'Current Other creditors and accruals nan'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' Current- liability for annual leave ', 62), (' rebates', 60), (' current- liability for long service leave ', 54), (' Warranty and after sales service ', 54), (' other related parties', 53), (' secured long-term bank loans', 50), (' restructuring', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' provisions - current', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' total current employee benefits ', 43), (' contract liabilites - current', 42), (' provision for annual and long service leave ', 42), (' Trade payables ', 42), (' Forward currency contract ', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' other', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' employee benefits - current', 35), (' arising from service contracts', 33), (' gst', 33), (' accrued expenses ', 33), (' Stock and feright payables ', 33), (' provision for associate funding', 32), (' gst liabilities', 30), (' Employee payables ', 29), (' employee benefits - payroll', 27), (' Deferred income ', 27), (' abandonment and decommissioning costs', 25), (' make good provisions', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 68), (' Current- liability for annual leave ', 68), (' rebates', 60), (' secured long-term bank loans', 59), (' total current employee benefits ', 59), (' current- liability for long service leave ', 59), (' Deferred income ', 55), (' loan payable to relayed party under tax funding agreement', 50), (' warranty', 50), (' Warranty and after sales service ', 50), ('other creditors and accruals', 47), (' share of joint venture payables', 45), (' provisions - current', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' Trade payables ', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' forward exchange contracts', 41), (' provision for annual and long service leave ', 41), (' Forward currency contract ', 41), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' Stock and feright payables ', 37), (' derivative contracts - at fair value', 36), (' Employee entitlements ', 36), (' loans from related party', 35), (' provision for associate funding', 33), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' arising from service contracts', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 67), (' Current- liability for annual leave ', 67), (' rebates', 60), (' current- liability for long service leave ', 57), (' secured long-term bank loans', 52), (' total current employee benefits ', 52), (' warranty', 50), ('other creditors and accruals', 48), (' Warranty and after sales service ', 48), (' Forward currency contract ', 48), (' derivative contracts - at fair value', 43), (' loan payable to relayed party under tax funding agreement', 43), (' gst payable and accruals', 43), (' provisions - current', 43), (' share of joint venture payables', 43), (' provision for annual and long service leave ', 43), (' ultimate parent entity', 42), (' Trade payables ', 42), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' other related parties', 35), (' loans from related party', 35), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' provision for associate funding', 33), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' Stock and feright payables ', 33), (' employee benefits - payroll', 29), (' arising from service contracts', 29), (' Employee payables ', 29), (' Deferred income ', 27), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [(' make good provisions', 62), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), (' secured long-term bank loans', 48), (' current- liability for long service leave ', 44), (' forward exchange contracts', 42), (' Forward currency contract ', 42), ('other creditors and accruals', 40), (' rebates', 40), (' other', 40), (' total current employee benefits ', 40), (' provision for annual and long service leave ', 40), (' others ', 40), (' warranty', 38), (' Stock and feright payables ', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' other creditors', 36), (' Warranty and after sales service ', 36), (' Employee payables ', 36), (' employee benefits - current', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' share of joint venture payables', 33), (' arising from service contracts', 33), (' gst', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 32), (' provision for associate funding', 32), (' gst payables', 30), (' gst liabilities', 30), (' GST Payable', 30), (' other related parties', 29), (' provisions - current', 29), (' Employee entitlements ', 29), (' employee benefits - payroll', 27), (' Deferred income ', 27), (' restructuring', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [(' secured long-term bank loans', 52), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), ('other creditors and accruals', 48), (' provision for annual and long service leave ', 48), (' derivative contracts - at fair value', 43), (' loan payable to relayed party under tax funding agreement', 43), (' forward exchange contracts', 43), (' current- liability for long service leave ', 43), (' Trade payables ', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' loans from related party', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' warranty', 38), (' total current employee benefits ', 38), (' Forward currency contract ', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' gst', 33), (' Warranty and after sales service ', 33), (' service contracts ', 33), (' Stock and feright payables ', 33), (' gst liabilities', 30), (' restructuring', 30), (' provisions - current', 29), (' arising from service contracts', 29), (' Employee entitlements ', 29), (' Employee payables ', 29), (' Deferred income ', 27), (' accrued expenses ', 25), (' employee benefits - payroll', 24), (' make good provisions', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: in aud warranty dealers , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' make good provisions', 56), (' provision for associate funding', 55), (' Warranty and after sales service ', 52), (' Trade payables ', 50), (' loans from related party', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 43), (' employee benefits - current', 43), (' Current- liability for annual leave ', 43), (' provision for annual and long service leave ', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' total current employee benefits ', 42), (' Stock and feright payables ', 42), (' employee benefits - payroll', 41), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' secured long-term bank loans', 38), (' current- liability for long service leave ', 38), (' Forward currency contract ', 38), (' share of joint venture payables', 37), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Deferred income ', 36), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' provisions - current', 57), (' make good provisions', 56), (' loans from related party', 52), (' gst payable and accruals', 51), (' provision for associate funding', 49), (' other related parties', 47), (' employee benefits - payroll', 45), ('other creditors and accruals', 44), (' current- liability for long service leave ', 43), (' provision for annual and long service leave ', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' Trade payables ', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' total current employee benefits ', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' Current- liability for annual leave ', 39), (' warranty', 38), (' Stock and feright payables ', 38), (' contract liabilites - current', 37), (' share of joint venture payables', 37), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Warranty and after sales service ', 36), (' Deferred income ', 36), (' gst', 33), (' accrued expenses ', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' forward exchange contracts', 29), (' Forward currency contract ', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4207840 42237073 , res_fuzz_match = [(' other', 60), (' others ', 60), (' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 55), (' other related parties', 47), (' provision for annual and long service leave ', 46), (' loan payable to relayed party under tax funding agreement', 44), (' arising from service contracts', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' Trade payables ', 42), (' Forward currency contract ', 42), (' Stock and feright payables ', 42), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' Warranty and after sales service ', 40), (' service contracts ', 40), (' GST Payable', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' Current- liability for annual leave ', 37), (' current- liability for long service leave ', 37), (' gst payable and accruals', 36), (' contract liabilites - current', 36), (' Deferred income ', 36), (' abandonment and decommissioning costs', 35), (' total current employee benefits ', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provisions - current', 64), (' other', 60), (' others ', 60), (' provision for associate funding', 59), (' make good provisions', 56), (' arising from service contracts', 48), (' other related parties', 47), (' provision for annual and long service leave ', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' current- liability for long service leave ', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' loan payable to relayed party under tax funding agreement', 42), (' Trade payables ', 42), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' GST Payable', 40), (' employee benefits - current', 39), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' ultimate parent entity', 37), (' Current- liability for annual leave ', 37), (' Warranty and after sales service ', 37), (' contract liabilites - current', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' abandonment and decommissioning costs', 35), (' total current employee benefits ', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' Forward currency contract ', 33), (' Stock and feright payables ', 33), (' gst payable and accruals', 32), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (3,089,523) (42,969,775) , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 56), (' gst payables', 50), (' Trade payables ', 50), (' GST Payable', 50), (' employee benefits - current', 48), (' other related parties', 47), (' employee benefits - payroll', 45), (' share of joint venture payables', 44), (' total current employee benefits ', 44), (' Employee entitlements ', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' accrued expenses ', 42), (' provision for associate funding', 41), (' service contracts ', 41), (' rebates', 40), (' other', 40), (' others ', 40), (' Stock and feright payables ', 40), (' loan payable to relayed party under tax funding agreement', 39), (' arising from service contracts', 39), (' loans from related party', 38), (' warranty', 38), (' other creditors', 36), (' secured long-term bank loans', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 36), (' other creditors', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' current - liability for annual and long service leave', 35), (' contract liabilites - current', 35), (' Current- liability for annual leave ', 35), (' current- liability for long service leave ', 35), (' provision for annual and long service leave ', 35), (' gst', 33), (' derivative contracts - at fair value', 31), (' gst liabilities', 30), (' forward exchange contracts', 30), (' restructuring', 30), (' Warranty and after sales service ', 30), (' Forward currency contract ', 30), (' gst payable and accruals', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 49), (' loans from related party', 48), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 45), (' Employee entitlements ', 43), (' Employee payables ', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' Trade payables ', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' Current- liability for annual leave ', 39), (' current- liability for long service leave ', 39), (' provision for annual and long service leave ', 39), (' derivative contracts - at fair value', 38), (' warranty', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' arising from service contracts', 36), (' other creditors', 36), (' total current employee benefits ', 36), (' Warranty and after sales service ', 36), (' Deferred income ', 36), (' contract liabilites - current', 33), (' gst', 33), (' Stock and feright payables ', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' forward exchange contracts', 29), (' Forward currency contract ', 29), (' accrued expenses ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' Current- liability for annual leave ', 62), (' rebates', 60), (' current- liability for long service leave ', 54), (' Warranty and after sales service ', 54), (' other related parties', 53), (' secured long-term bank loans', 50), (' restructuring', 50), (' ultimate parent entity', 47), (' loan payable to relayed party under tax funding agreement', 46), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' provisions - current', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' total current employee benefits ', 43), (' contract liabilites - current', 42), (' provision for annual and long service leave ', 42), (' Trade payables ', 42), (' Forward currency contract ', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' other', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' employee benefits - current', 35), (' arising from service contracts', 33), (' gst', 33), (' accrued expenses ', 33), (' Stock and feright payables ', 33), (' provision for associate funding', 32), (' gst liabilities', 30), (' Employee payables ', 29), (' employee benefits - payroll', 27), (' Deferred income ', 27), (' abandonment and decommissioning costs', 25), (' make good provisions', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 68), (' Current- liability for annual leave ', 68), (' rebates', 60), (' secured long-term bank loans', 59), (' total current employee benefits ', 59), (' current- liability for long service leave ', 59), (' Deferred income ', 55), (' loan payable to relayed party under tax funding agreement', 50), (' warranty', 50), (' Warranty and after sales service ', 50), ('other creditors and accruals', 47), (' share of joint venture payables', 45), (' provisions - current', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' Trade payables ', 42), (' other related parties', 41), (' gst payable and accruals', 41), (' forward exchange contracts', 41), (' provision for annual and long service leave ', 41), (' Forward currency contract ', 41), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' Stock and feright payables ', 37), (' derivative contracts - at fair value', 36), (' Employee entitlements ', 36), (' loans from related party', 35), (' provision for associate funding', 33), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' arising from service contracts', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' make good provisions', 25), (' abandonment and decommissioning costs', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [(' current - liability for annual and long service leave', 67), (' Current- liability for annual leave ', 67), (' rebates', 60), (' current- liability for long service leave ', 57), (' secured long-term bank loans', 52), (' total current employee benefits ', 52), (' warranty', 50), ('other creditors and accruals', 48), (' Warranty and after sales service ', 48), (' Forward currency contract ', 48), (' derivative contracts - at fair value', 43), (' loan payable to relayed party under tax funding agreement', 43), (' gst payable and accruals', 43), (' provisions - current', 43), (' share of joint venture payables', 43), (' provision for annual and long service leave ', 43), (' ultimate parent entity', 42), (' Trade payables ', 42), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' other related parties', 35), (' loans from related party', 35), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' provision for associate funding', 33), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' Stock and feright payables ', 33), (' employee benefits - payroll', 29), (' arising from service contracts', 29), (' Employee payables ', 29), (' Deferred income ', 27), (' make good provisions', 25), (' abandonment and decommissioning costs', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [(' make good provisions', 62), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), (' secured long-term bank loans', 48), (' current- liability for long service leave ', 44), (' forward exchange contracts', 42), (' Forward currency contract ', 42), ('other creditors and accruals', 40), (' rebates', 40), (' other', 40), (' total current employee benefits ', 40), (' provision for annual and long service leave ', 40), (' others ', 40), (' warranty', 38), (' Stock and feright payables ', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' other creditors', 36), (' Warranty and after sales service ', 36), (' Employee payables ', 36), (' employee benefits - current', 35), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' share of joint venture payables', 33), (' arising from service contracts', 33), (' gst', 33), (' Trade payables ', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 32), (' provision for associate funding', 32), (' gst payables', 30), (' gst liabilities', 30), (' GST Payable', 30), (' other related parties', 29), (' provisions - current', 29), (' Employee entitlements ', 29), (' employee benefits - payroll', 27), (' Deferred income ', 27), (' restructuring', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [(' secured long-term bank loans', 52), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), ('other creditors and accruals', 48), (' provision for annual and long service leave ', 48), (' derivative contracts - at fair value', 43), (' loan payable to relayed party under tax funding agreement', 43), (' forward exchange contracts', 43), (' current- liability for long service leave ', 43), (' Trade payables ', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' loans from related party', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' warranty', 38), (' total current employee benefits ', 38), (' Forward currency contract ', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' other related parties', 35), (' employee benefits - current', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' gst', 33), (' Warranty and after sales service ', 33), (' service contracts ', 33), (' Stock and feright payables ', 33), (' gst liabilities', 30), (' restructuring', 30), (' provisions - current', 29), (' arising from service contracts', 29), (' Employee entitlements ', 29), (' Employee payables ', 29), (' Deferred income ', 27), (' accrued expenses ', 25), (' employee benefits - payroll', 24), (' make good provisions', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: in aud warranty dealers , res_fuzz_match = [(' warranty', 100), (' provisions - current', 64), (' rebates', 60), (' make good provisions', 56), (' provision for associate funding', 55), (' Warranty and after sales service ', 52), (' Trade payables ', 50), (' loans from related party', 48), (' other related parties', 47), ('other creditors and accruals', 46), (' gst payable and accruals', 45), (' loan payable to relayed party under tax funding agreement', 43), (' employee benefits - current', 43), (' Current- liability for annual leave ', 43), (' provision for annual and long service leave ', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' total current employee benefits ', 42), (' Stock and feright payables ', 42), (' employee benefits - payroll', 41), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' secured long-term bank loans', 38), (' current- liability for long service leave ', 38), (' Forward currency contract ', 38), (' share of joint venture payables', 37), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Deferred income ', 36), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' abandonment and decommissioning costs', 31), (' restructuring', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' provisions - current', 57), (' make good provisions', 56), (' loans from related party', 52), (' gst payable and accruals', 51), (' provision for associate funding', 49), (' other related parties', 47), (' employee benefits - payroll', 45), ('other creditors and accruals', 44), (' current- liability for long service leave ', 43), (' provision for annual and long service leave ', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' Trade payables ', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' total current employee benefits ', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' loan payable to relayed party under tax funding agreement', 39), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' Current- liability for annual leave ', 39), (' warranty', 38), (' Stock and feright payables ', 38), (' contract liabilites - current', 37), (' share of joint venture payables', 37), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Warranty and after sales service ', 36), (' Deferred income ', 36), (' gst', 33), (' accrued expenses ', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' forward exchange contracts', 29), (' Forward currency contract ', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4207840 42237073 , res_fuzz_match = [(' other', 60), (' others ', 60), (' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 55), (' other related parties', 47), (' provision for annual and long service leave ', 46), (' loan payable to relayed party under tax funding agreement', 44), (' arising from service contracts', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' Trade payables ', 42), (' Forward currency contract ', 42), (' Stock and feright payables ', 42), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' Warranty and after sales service ', 40), (' service contracts ', 40), (' GST Payable', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), (' current - liability for annual and long service leave', 37), (' Current- liability for annual leave ', 37), (' current- liability for long service leave ', 37), (' gst payable and accruals', 36), (' contract liabilites - current', 36), (' Deferred income ', 36), (' abandonment and decommissioning costs', 35), (' total current employee benefits ', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' gst liabilities', 30), (' restructuring', 30), (' warranty', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provisions - current', 64), (' other', 60), (' others ', 60), (' provision for associate funding', 59), (' make good provisions', 56), (' arising from service contracts', 48), (' other related parties', 47), (' provision for annual and long service leave ', 45), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' current- liability for long service leave ', 43), (' Employee entitlements ', 43), (' Employee payables ', 43), (' loan payable to relayed party under tax funding agreement', 42), (' Trade payables ', 42), (' employee benefits - payroll', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' GST Payable', 40), (' employee benefits - current', 39), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' ultimate parent entity', 37), (' Current- liability for annual leave ', 37), (' Warranty and after sales service ', 37), (' contract liabilites - current', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' abandonment and decommissioning costs', 35), (' total current employee benefits ', 34), (' derivative contracts - at fair value', 33), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' Forward currency contract ', 33), (' Stock and feright payables ', 33), (' gst payable and accruals', 32), (' gst liabilities', 30), (' restructuring', 30), (' forward exchange contracts', 25), (' warranty', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (3,089,523) (42,969,775) , res_fuzz_match = [(' provisions - current', 71), (' make good provisions', 56), (' gst payables', 50), (' Trade payables ', 50), (' GST Payable', 50), (' employee benefits - current', 48), (' other related parties', 47), (' employee benefits - payroll', 45), (' share of joint venture payables', 44), (' total current employee benefits ', 44), (' Employee entitlements ', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' accrued expenses ', 42), (' provision for associate funding', 41), (' service contracts ', 41), (' rebates', 40), (' other', 40), (' others ', 40), (' Stock and feright payables ', 40), (' loan payable to relayed party under tax funding agreement', 39), (' arising from service contracts', 39), (' loans from related party', 38), (' warranty', 38), (' other creditors', 36), (' secured long-term bank loans', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 36), (' other creditors', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' current - liability for annual and long service leave', 35), (' contract liabilites - current', 35), (' Current- liability for annual leave ', 35), (' current- liability for long service leave ', 35), (' provision for annual and long service leave ', 35), (' gst', 33), (' derivative contracts - at fair value', 31), (' gst liabilities', 30), (' forward exchange contracts', 30), (' restructuring', 30), (' Warranty and after sales service ', 30), (' Forward currency contract ', 30), (' gst payable and accruals', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 49), (' loans from related party', 48), (' other related parties', 47), (' gst payable and accruals', 47), (' employee benefits - payroll', 45), (' Employee entitlements ', 43), (' Employee payables ', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' Trade payables ', 42), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' Current- liability for annual leave ', 39), (' current- liability for long service leave ', 39), (' provision for annual and long service leave ', 39), (' derivative contracts - at fair value', 38), (' warranty', 38), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' other creditors', 36), (' share of joint venture payables', 36), (' arising from service contracts', 36), (' other creditors', 36), (' total current employee benefits ', 36), (' Warranty and after sales service ', 36), (' Deferred income ', 36), (' contract liabilites - current', 33), (' gst', 33), (' Stock and feright payables ', 33), (' ultimate parent entity', 32), (' abandonment and decommissioning costs', 31), (' restructuring', 30), (' forward exchange contracts', 29), (' Forward currency contract ', 29), (' accrued expenses ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5, 11, 16], 'score': [100, 100, 100, 100], 'value': [6563463.0, 0.0, 7248723.0, 0.0], 'label': ['Current Warranty nan nan', 'Movement in provisions: In AUD Warranty Dealers', 'Current Warranty nan nan', 'Movement in provisions: In AUD Warranty Dealers'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current liability for annual leave , res_fuzz_match = [(' Current- liability for annual leave ', 100), (' current - liability for annual and long service leave', 90), (' gst liabilities', 80), (' current- liability for long service leave ', 77), (' warranty', 62), (' rebates', 60), (' contract liabilites - current', 52), (' Warranty and after sales service ', 52), (' gst payable and accruals', 50), (' gst payables', 50), (' GST Payable', 50), (' provision for annual and long service leave ', 47), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' total current employee benefits ', 45), (' loans from related party', 43), (' provisions - current', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' Trade payables ', 42), (' Forward currency contract ', 42), (' Stock and feright payables ', 42), (' other related parties', 41), (' provision for associate funding', 41), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' other', 40), (' others ', 40), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' Deferred income ', 36), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' restructuring', 30), (' make good provisions', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current liability for long service leave , res_fuzz_match = [(' current- liability for long service leave ', 100), (' gst liabilities', 80), (' Current- liability for annual leave ', 77), (' current - liability for annual and long service leave', 69), (' gst', 67), (' provision for annual and long service leave ', 63), (' warranty', 62), (' arising from service contracts', 60), (' rebates', 60), (' Warranty and after sales service ', 60), (' service contracts ', 53), (' contract liabilites - current', 52), (' gst payables', 50), (' Trade payables ', 50), (' GST Payable', 50), (' secured long-term bank loans', 49), (' loans from related party', 48), (' total current employee benefits ', 48), (' make good provisions', 44), (' provisions - current', 43), (' Employee entitlements ', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' other', 40), (' others ', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' loan payable to relayed party under tax funding agreement', 34), (' accrued expenses ', 33), (' restructuring', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other employee benefits , res_fuzz_match = [(' other', 100), (' others ', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' total current employee benefits ', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' rebates', 60), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), (' current- liability for long service leave ', 55), (' other related parties', 53), (' restructuring', 50), (' warranty', 50), (' Warranty and after sales service ', 49), (' current - liability for annual and long service leave', 48), (' Current- liability for annual leave ', 48), (' secured long-term bank loans', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 43), (' provisions - current', 43), (' Trade payables ', 42), (' Forward currency contract ', 42), (' gst payables', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' Deferred income ', 36), (' loans from related party', 33), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' Stock and feright payables ', 33), (' arising from service contracts', 32), (' provision for annual and long service leave ', 31), (' gst liabilities', 30), (' derivative contracts - at fair value', 29), (' gst payable and accruals', 27), (' abandonment and decommissioning costs', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits ', 69), (' Current- liability for annual leave ', 69), (' current- liability for long service leave ', 69), (' Forward currency contract ', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' Warranty and after sales service ', 46), (' Trade payables ', 43), (' gst payables', 42), (' gst liabilities', 42), (' GST Payable', 42), (' restructuring', 40), (' other', 40), (' others ', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' accrued expenses ', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' provision for annual and long service leave ', 31), (' Employee payables ', 31), (' Deferred income ', 27), (' make good provisions', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current liability for long service leave , res_fuzz_match = [(' current- liability for long service leave ', 96), (' gst liabilities', 70), (' current - liability for annual and long service leave', 69), (' gst', 67), (' Current- liability for annual leave ', 67), (' provision for annual and long service leave ', 66), (' arising from service contracts', 60), (' Warranty and after sales service ', 53), (' service contracts ', 53), (' contract liabilites - current', 52), (' loans from related party', 48), (' secured long-term bank loans', 46), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' Employee entitlements ', 43), (' Trade payables ', 42), (' other related parties', 41), (' provision for associate funding', 41), (' total current employee benefits ', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' employee benefits - current', 35), (' gst payable and accruals', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' accrued expenses ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Forward currency contract ', 54), (' secured long-term bank loans', 46), (' employee benefits - current', 46), (' current - liability for annual and long service leave', 46), (' provisions - current', 46), (' share of joint venture payables', 46), (' total current employee benefits ', 46), (' provision for annual and long service leave ', 46), (' rebates', 40), (' other', 40), (' Current- liability for annual leave ', 40), (' others ', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' current- liability for long service leave ', 38), (' Warranty and after sales service ', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Trade payables ', 35), (' gst', 33), (' gst payables', 32), (' GST Payable', 32), (' ultimate parent entity', 31), (' other related parties', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' Employee payables ', 31), (' Stock and feright payables ', 31), (' gst liabilities', 30), (' restructuring', 30), (' Deferred income ', 27), (' accrued expenses ', 26), (' make good provisions', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current liability for annual leave , res_fuzz_match = [(' Current- liability for annual leave ', 100), (' current - liability for annual and long service leave', 90), (' gst liabilities', 80), (' current- liability for long service leave ', 77), (' warranty', 62), (' rebates', 60), (' contract liabilites - current', 52), (' Warranty and after sales service ', 52), (' gst payable and accruals', 50), (' gst payables', 50), (' GST Payable', 50), (' provision for annual and long service leave ', 47), ('other creditors and accruals', 46), (' secured long-term bank loans', 46), (' total current employee benefits ', 45), (' loans from related party', 43), (' provisions - current', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' Trade payables ', 42), (' Forward currency contract ', 42), (' Stock and feright payables ', 42), (' other related parties', 41), (' provision for associate funding', 41), (' loan payable to relayed party under tax funding agreement', 40), (' share of joint venture payables', 40), (' other', 40), (' others ', 40), (' other creditors', 36), (' other creditors', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' Deferred income ', 36), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' employee benefits - payroll', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' restructuring', 30), (' make good provisions', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current liability for long service leave , res_fuzz_match = [(' current- liability for long service leave ', 100), (' gst liabilities', 80), (' Current- liability for annual leave ', 77), (' current - liability for annual and long service leave', 69), (' gst', 67), (' provision for annual and long service leave ', 63), (' warranty', 62), (' arising from service contracts', 60), (' rebates', 60), (' Warranty and after sales service ', 60), (' service contracts ', 53), (' contract liabilites - current', 52), (' gst payables', 50), (' Trade payables ', 50), (' GST Payable', 50), (' secured long-term bank loans', 49), (' loans from related party', 48), (' total current employee benefits ', 48), (' make good provisions', 44), (' provisions - current', 43), (' Employee entitlements ', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' provision for associate funding', 41), (' share of joint venture payables', 40), (' other', 40), (' others ', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' forward exchange contracts', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' loan payable to relayed party under tax funding agreement', 34), (' accrued expenses ', 33), (' restructuring', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other employee benefits , res_fuzz_match = [(' other', 100), (' others ', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' total current employee benefits ', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' rebates', 60), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), (' current- liability for long service leave ', 55), (' other related parties', 53), (' restructuring', 50), (' warranty', 50), (' Warranty and after sales service ', 49), (' current - liability for annual and long service leave', 48), (' Current- liability for annual leave ', 48), (' secured long-term bank loans', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 43), (' provisions - current', 43), (' Trade payables ', 42), (' Forward currency contract ', 42), (' gst payables', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' Deferred income ', 36), (' loans from related party', 33), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' Stock and feright payables ', 33), (' arising from service contracts', 32), (' provision for annual and long service leave ', 31), (' gst liabilities', 30), (' derivative contracts - at fair value', 29), (' gst payable and accruals', 27), (' abandonment and decommissioning costs', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits ', 69), (' Current- liability for annual leave ', 69), (' current- liability for long service leave ', 69), (' Forward currency contract ', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' Warranty and after sales service ', 46), (' Trade payables ', 43), (' gst payables', 42), (' gst liabilities', 42), (' GST Payable', 42), (' restructuring', 40), (' other', 40), (' others ', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' accrued expenses ', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' provision for annual and long service leave ', 31), (' Employee payables ', 31), (' Deferred income ', 27), (' make good provisions', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current liability for long service leave , res_fuzz_match = [(' current- liability for long service leave ', 96), (' gst liabilities', 70), (' current - liability for annual and long service leave', 69), (' gst', 67), (' Current- liability for annual leave ', 67), (' provision for annual and long service leave ', 66), (' arising from service contracts', 60), (' Warranty and after sales service ', 53), (' service contracts ', 53), (' contract liabilites - current', 52), (' loans from related party', 48), (' secured long-term bank loans', 46), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' Employee entitlements ', 43), (' Trade payables ', 42), (' other related parties', 41), (' provision for associate funding', 41), (' total current employee benefits ', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' rebates', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' ultimate parent entity', 37), (' provisions - current', 36), (' employee benefits - payroll', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' employee benefits - current', 35), (' gst payable and accruals', 32), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' accrued expenses ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Forward currency contract ', 54), (' secured long-term bank loans', 46), (' employee benefits - current', 46), (' current - liability for annual and long service leave', 46), (' provisions - current', 46), (' share of joint venture payables', 46), (' total current employee benefits ', 46), (' provision for annual and long service leave ', 46), (' rebates', 40), (' other', 40), (' Current- liability for annual leave ', 40), (' others ', 40), ('other creditors and accruals', 38), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' current- liability for long service leave ', 38), (' Warranty and after sales service ', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Trade payables ', 35), (' gst', 33), (' gst payables', 32), (' GST Payable', 32), (' ultimate parent entity', 31), (' other related parties', 31), (' employee benefits - payroll', 31), (' provision for associate funding', 31), (' Employee payables ', 31), (' Stock and feright payables ', 31), (' gst liabilities', 30), (' restructuring', 30), (' Deferred income ', 27), (' accrued expenses ', 26), (' make good provisions', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 6, 7, 8, 10], 'score': [100, 100, 100, 96, 100, 100, 100, 96], 'value': [1272474.0, 805340.0, 434533.0, 677679.0, 1386692.0, 576678.0, 250005.0, 1038838.0], 'label': ['Current Liability for annual leave', 'Current Liability for long service leave', 'Current Other employee benefits', 'Non-current Liability for long service leave', 'Current Liability for annual leave', 'Current Liability for long service leave', 'Current Other employee benefits', 'Non-current Liability for long service leave'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_liabilities
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation', 70), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' Lease obligation', 33), (' lease liabilities ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' lease liabilities ', 45), ('interest bearing loans and borrowings ', 40), (' Lease obligation', 40), (' loans and borrowings', 27), (' borrowings ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 15084133.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [15084133.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation', 70), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' Lease obligation', 33), (' lease liabilities ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' lease liabilities ', 45), ('interest bearing loans and borrowings ', 40), (' Lease obligation', 40), (' loans and borrowings', 27), (' borrowings ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 14451696.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [14451696.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('deferred taxes ', 33), (' deferred tax liabilities', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' Deferred income', 27), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue ', 17), (' provisions ', 12), (' Provisions ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' Provisions ', 100), (' provision for associate funding ', 43), (' Deferred income', 24), (' deferred revenue ', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits ', 100), (' deferred revenue ', 37), (' other financial liabilities ', 34), ('other long term liabilities ', 32), (' trade and other payables ', 32), (' Deferred income', 31), (' other non-current liabilities ', 29), (' financial liabilities ', 28), (' provision for associate funding ', 22), (' provisions ', 19), (' Provisions ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 1558838.0, 'line_item_label': ['Provisions', 'Employee benefits'], 'note_numbers': ['17', '18'], 'line_item_value': [520000.0, 1038838.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' Deferred income', 27), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue ', 17), (' provisions ', 12), (' Provisions ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' Provisions ', 100), (' provision for associate funding ', 43), (' Deferred income', 24), (' deferred revenue ', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits ', 100), (' deferred revenue ', 37), (' other financial liabilities ', 34), ('other long term liabilities ', 32), (' trade and other payables ', 32), (' Deferred income', 31), (' other non-current liabilities ', 29), (' financial liabilities ', 28), (' provision for associate funding ', 22), (' provisions ', 19), (' Provisions ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 1197679.0, 'line_item_label': ['Provisions', 'Employee benefits'], 'note_numbers': ['17', '18'], 'line_item_value': [520000.0, 677679.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [('non-current trade and other payables ', 50), (' non-current-liability for long service leave ', 50), (' contract liabilites - non-current ', 46), (' derivative contracts - at fair value ', 43), (' non-current - liability for long-service leave ', 42), (' trade payables - related parties ', 39), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' provisions - non-current ', 36), (' total non-current employee benefits ', 33), (' provision for associate funding ', 32), (' provision for long service leave ', 29), (' employee benefits - payroll ', 27), (' Deferred income', 27), (' abandonment and decommissioning costs ', 25), (' make good provisions ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' non-current-liability for long service leave ', 55), (' Deferred income', 55), ('non-current trade and other payables ', 50), (' electricity derivatives at fair value through oci ', 45), (' non-current - liability for long-service leave ', 45), (' total non-current employee benefits ', 45), (' employee benefits - non current ', 41), (' contract liabilites - non-current ', 41), (' trade payables - related parties ', 41), (' derivative contracts - at fair value ', 36), (' provision for associate funding ', 33), (' employee benefits - payroll ', 32), (' provision for long service leave ', 32), (' provisions - non-current ', 29), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [(' non-current-liability for long service leave ', 57), ('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 48), (' derivative contracts - at fair value ', 43), (' contract liabilites - non-current ', 43), (' trade payables - related parties ', 43), (' total non-current employee benefits ', 39), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' provision for associate funding ', 33), (' provisions - non-current ', 29), (' employee benefits - payroll ', 29), (' provision for long service leave ', 29), (' Deferred income', 27), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [(' make good provisions ', 62), ('non-current trade and other payables ', 56), (' non-current - liability for long-service leave ', 52), (' non-current-liability for long service leave ', 52), (' total non-current employee benefits ', 50), (' employee benefits - non current ', 36), (' contract liabilites - non-current ', 36), (' derivative contracts - at fair value ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 32), (' abandonment and decommissioning costs ', 32), (' provision for associate funding ', 32), (' provisions - non-current ', 29), (' provision for long service leave ', 29), (' employee benefits - payroll ', 27), (' Deferred income', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [('non-current trade and other payables ', 67), (' non-current - liability for long-service leave ', 57), (' non-current-liability for long service leave ', 57), (' total non-current employee benefits ', 52), (' derivative contracts - at fair value ', 43), (' contract liabilites - non-current ', 43), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' trade payables - related parties ', 38), (' provisions - non-current ', 36), (' abandonment and decommissioning costs ', 33), (' provision for associate funding ', 33), (' provision for long service leave ', 33), (' Deferred income', 27), (' employee benefits - payroll ', 24), (' make good provisions ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: in aud warranty dealers , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 56), (' provision for associate funding ', 55), (' employee benefits - non current ', 52), (' provision for long service leave ', 49), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' electricity derivatives at fair value through oci ', 39), (' non-current-liability for long service leave ', 39), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' non-current - liability for long-service leave ', 35), (' total non-current employee benefits ', 35), (' abandonment and decommissioning costs ', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 56), (' provision for associate funding ', 49), (' provision for long service leave ', 48), (' employee benefits - payroll ', 45), (' non-current-liability for long service leave ', 44), (' electricity derivatives at fair value through oci ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), (' contract liabilites - non-current ', 36), (' Deferred income', 36), ('non-current trade and other payables ', 32), (' non-current - liability for long-service leave ', 32), (' total non-current employee benefits ', 32), (' abandonment and decommissioning costs ', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4207840 42237073 , res_fuzz_match = [(' provisions - non-current ', 57), (' make good provisions ', 56), (' provision for associate funding ', 55), (' provision for long service leave ', 52), ('non-current trade and other payables ', 50), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 44), (' employee benefits - payroll ', 41), (' non-current-liability for long service leave ', 39), (' employee benefits - non current ', 37), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' abandonment and decommissioning costs ', 35), (' total non-current employee benefits ', 34), (' derivative contracts - at fair value ', 33), (' non-current - liability for long-service leave ', 32)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provision for associate funding ', 59), (' provisions - non-current ', 57), (' make good provisions ', 56), (' provision for long service leave ', 56), ('non-current trade and other payables ', 43), (' electricity derivatives at fair value through oci ', 41), (' employee benefits - payroll ', 41), (' non-current-liability for long service leave ', 39), (' trade payables - related parties ', 38), (' employee benefits - non current ', 37), (' Deferred income', 36), (' non-current - liability for long-service leave ', 35), (' abandonment and decommissioning costs ', 35), (' total non-current employee benefits ', 34), (' derivative contracts - at fair value ', 33), (' contract liabilites - non-current ', 32)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (3,089,523) (42,969,775) , res_fuzz_match = [(' provisions - non-current ', 57), (' make good provisions ', 56), (' employee benefits - non current ', 48), (' employee benefits - payroll ', 45), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 39), (' total non-current employee benefits ', 39), (' non-current-liability for long service leave ', 39), (' provision for long service leave ', 39), ('non-current trade and other payables ', 36), (' abandonment and decommissioning costs ', 36), (' trade payables - related parties ', 36), (' Deferred income', 36), (' derivative contracts - at fair value ', 31), (' non-current - liability for long-service leave ', 30), (' contract liabilites - non-current ', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 56), (' provision for associate funding ', 49), (' employee benefits - payroll ', 45), (' provision for long service leave ', 44), (' electricity derivatives at fair value through oci ', 43), (' non-current-liability for long service leave ', 43), (' employee benefits - non current ', 41), (' derivative contracts - at fair value ', 38), (' trade payables - related parties ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), ('non-current trade and other payables ', 32), (' non-current - liability for long-service leave ', 32), (' abandonment and decommissioning costs ', 31), (' total non-current employee benefits ', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current warranty nan nan , res_fuzz_match = [('non-current trade and other payables ', 50), (' non-current-liability for long service leave ', 50), (' contract liabilites - non-current ', 46), (' derivative contracts - at fair value ', 43), (' non-current - liability for long-service leave ', 42), (' trade payables - related parties ', 39), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' provisions - non-current ', 36), (' total non-current employee benefits ', 33), (' provision for associate funding ', 32), (' provision for long service leave ', 29), (' employee benefits - payroll ', 27), (' Deferred income', 27), (' abandonment and decommissioning costs ', 25), (' make good provisions ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current dealers nan nan , res_fuzz_match = [(' non-current-liability for long service leave ', 55), (' Deferred income', 55), ('non-current trade and other payables ', 50), (' electricity derivatives at fair value through oci ', 45), (' non-current - liability for long-service leave ', 45), (' total non-current employee benefits ', 45), (' employee benefits - non current ', 41), (' contract liabilites - non-current ', 41), (' trade payables - related parties ', 41), (' derivative contracts - at fair value ', 36), (' provision for associate funding ', 33), (' employee benefits - payroll ', 32), (' provision for long service leave ', 32), (' provisions - non-current ', 29), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan nan , res_fuzz_match = [(' non-current-liability for long service leave ', 57), ('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 48), (' derivative contracts - at fair value ', 43), (' contract liabilites - non-current ', 43), (' trade payables - related parties ', 43), (' total non-current employee benefits ', 39), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' provision for associate funding ', 33), (' provisions - non-current ', 29), (' employee benefits - payroll ', 29), (' provision for long service leave ', 29), (' Deferred income', 27), (' make good provisions ', 25), (' abandonment and decommissioning costs ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current make good nan nan , res_fuzz_match = [(' make good provisions ', 62), ('non-current trade and other payables ', 56), (' non-current - liability for long-service leave ', 52), (' non-current-liability for long service leave ', 52), (' total non-current employee benefits ', 50), (' employee benefits - non current ', 36), (' contract liabilites - non-current ', 36), (' derivative contracts - at fair value ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 32), (' abandonment and decommissioning costs ', 32), (' provision for associate funding ', 32), (' provisions - non-current ', 29), (' provision for long service leave ', 29), (' employee benefits - payroll ', 27), (' Deferred income', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total nan nan , res_fuzz_match = [('non-current trade and other payables ', 67), (' non-current - liability for long-service leave ', 57), (' non-current-liability for long service leave ', 57), (' total non-current employee benefits ', 52), (' derivative contracts - at fair value ', 43), (' contract liabilites - non-current ', 43), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' trade payables - related parties ', 38), (' provisions - non-current ', 36), (' abandonment and decommissioning costs ', 33), (' provision for associate funding ', 33), (' provision for long service leave ', 33), (' Deferred income', 27), (' employee benefits - payroll ', 24), (' make good provisions ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: in aud warranty dealers , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 56), (' provision for associate funding ', 55), (' employee benefits - non current ', 52), (' provision for long service leave ', 49), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' electricity derivatives at fair value through oci ', 39), (' non-current-liability for long service leave ', 39), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' non-current - liability for long-service leave ', 35), (' total non-current employee benefits ', 35), (' abandonment and decommissioning costs ', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 1 april 2022 7248723 21052614 , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 56), (' provision for associate funding ', 49), (' provision for long service leave ', 48), (' employee benefits - payroll ', 45), (' non-current-liability for long service leave ', 44), (' electricity derivatives at fair value through oci ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), (' contract liabilites - non-current ', 36), (' Deferred income', 36), ('non-current trade and other payables ', 32), (' non-current - liability for long-service leave ', 32), (' total non-current employee benefits ', 32), (' abandonment and decommissioning costs ', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions made during the year 4207840 42237073 , res_fuzz_match = [(' provisions - non-current ', 57), (' make good provisions ', 56), (' provision for associate funding ', 55), (' provision for long service leave ', 52), ('non-current trade and other payables ', 50), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 44), (' employee benefits - payroll ', 41), (' non-current-liability for long service leave ', 39), (' employee benefits - non current ', 37), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' abandonment and decommissioning costs ', 35), (' total non-current employee benefits ', 34), (' derivative contracts - at fair value ', 33), (' non-current - liability for long-service leave ', 32)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: provisions used during the year (1,803,577) (231,003) , res_fuzz_match = [(' provision for associate funding ', 59), (' provisions - non-current ', 57), (' make good provisions ', 56), (' provision for long service leave ', 56), ('non-current trade and other payables ', 43), (' electricity derivatives at fair value through oci ', 41), (' employee benefits - payroll ', 41), (' non-current-liability for long service leave ', 39), (' trade payables - related parties ', 38), (' employee benefits - non current ', 37), (' Deferred income', 36), (' non-current - liability for long-service leave ', 35), (' abandonment and decommissioning costs ', 35), (' total non-current employee benefits ', 34), (' derivative contracts - at fair value ', 33), (' contract liabilites - non-current ', 32)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: payments (3,089,523) (42,969,775) , res_fuzz_match = [(' provisions - non-current ', 57), (' make good provisions ', 56), (' employee benefits - non current ', 48), (' employee benefits - payroll ', 45), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 39), (' total non-current employee benefits ', 39), (' non-current-liability for long service leave ', 39), (' provision for long service leave ', 39), ('non-current trade and other payables ', 36), (' abandonment and decommissioning costs ', 36), (' trade payables - related parties ', 36), (' Deferred income', 36), (' derivative contracts - at fair value ', 31), (' non-current - liability for long-service leave ', 30), (' contract liabilites - non-current ', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = movement in provisions: balance at 31 march 2023 6563463 20088909 , res_fuzz_match = [(' provisions - non-current ', 64), (' make good provisions ', 56), (' provision for associate funding ', 49), (' employee benefits - payroll ', 45), (' provision for long service leave ', 44), (' electricity derivatives at fair value through oci ', 43), (' non-current-liability for long service leave ', 43), (' employee benefits - non current ', 41), (' derivative contracts - at fair value ', 38), (' trade payables - related parties ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), ('non-current trade and other payables ', 32), (' non-current - liability for long-service leave ', 32), (' abandonment and decommissioning costs ', 31), (' total non-current employee benefits ', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current liability for annual leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 70), (' non-current-liability for long service leave ', 67), (' contract liabilites - non-current ', 56), (' provision for long service leave ', 48), ('non-current trade and other payables ', 47), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 37), (' total non-current employee benefits ', 37), (' provisions - non-current ', 36), (' Deferred income', 36), (' employee benefits - non current ', 33), (' employee benefits - payroll ', 32), (' abandonment and decommissioning costs ', 31), (' make good provisions ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current liability for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 88), (' non-current-liability for long service leave ', 85), (' provision for long service leave ', 81), (' contract liabilites - non-current ', 52), (' trade payables - related parties ', 46), (' make good provisions ', 44), (' provision for associate funding ', 41), (' total non-current employee benefits ', 41), ('non-current trade and other payables ', 40), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 38), (' employee benefits - payroll ', 36), (' Deferred income', 36), (' abandonment and decommissioning costs ', 35), (' employee benefits - non current ', 33), (' provisions - non-current ', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other employee benefits , res_fuzz_match = [(' employee benefits - payroll ', 81), (' total non-current employee benefits ', 69), ('non-current trade and other payables ', 57), (' employee benefits - non current ', 56), (' non-current-liability for long service leave ', 55), (' non-current - liability for long-service leave ', 45), (' make good provisions ', 38), (' provision for long service leave ', 38), (' provision for associate funding ', 36), (' Deferred income', 36), (' trade payables - related parties ', 33), (' contract liabilites - non-current ', 32), (' electricity derivatives at fair value through oci ', 31), (' derivative contracts - at fair value ', 29), (' provisions - non-current ', 29), (' abandonment and decommissioning costs ', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' non-current-liability for long service leave ', 69), ('non-current trade and other payables ', 54), (' employee benefits - non current ', 54), (' non-current - liability for long-service leave ', 54), (' employee benefits - payroll ', 46), (' total non-current employee benefits ', 46), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' contract liabilites - non-current ', 38), (' trade payables - related parties ', 38), (' provisions - non-current ', 31), (' abandonment and decommissioning costs ', 31), (' provision for associate funding ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' provision for long service leave ', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current liability for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 97), (' non-current-liability for long service leave ', 85), (' provision for long service leave ', 81), (' contract liabilites - non-current ', 52), (' total non-current employee benefits ', 48), ('non-current trade and other payables ', 47), (' trade payables - related parties ', 46), (' make good provisions ', 44), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' Deferred income', 36), (' employee benefits - non current ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current trade and other payables ', 77), (' non-current - liability for long-service leave ', 69), (' total non-current employee benefits ', 69), (' non-current-liability for long service leave ', 69), (' employee benefits - non current ', 67), (' provisions - non-current ', 54), (' contract liabilites - non-current ', 54), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - payroll ', 31), (' provision for associate funding ', 31), (' provision for long service leave ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' trade payables - related parties ', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current liability for annual leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 70), (' non-current-liability for long service leave ', 67), (' contract liabilites - non-current ', 56), (' provision for long service leave ', 48), ('non-current trade and other payables ', 47), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 37), (' total non-current employee benefits ', 37), (' provisions - non-current ', 36), (' Deferred income', 36), (' employee benefits - non current ', 33), (' employee benefits - payroll ', 32), (' abandonment and decommissioning costs ', 31), (' make good provisions ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current liability for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 88), (' non-current-liability for long service leave ', 85), (' provision for long service leave ', 81), (' contract liabilites - non-current ', 52), (' trade payables - related parties ', 46), (' make good provisions ', 44), (' provision for associate funding ', 41), (' total non-current employee benefits ', 41), ('non-current trade and other payables ', 40), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 38), (' employee benefits - payroll ', 36), (' Deferred income', 36), (' abandonment and decommissioning costs ', 35), (' employee benefits - non current ', 33), (' provisions - non-current ', 29)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other employee benefits , res_fuzz_match = [(' employee benefits - payroll ', 81), (' total non-current employee benefits ', 69), ('non-current trade and other payables ', 57), (' employee benefits - non current ', 56), (' non-current-liability for long service leave ', 55), (' non-current - liability for long-service leave ', 45), (' make good provisions ', 38), (' provision for long service leave ', 38), (' provision for associate funding ', 36), (' Deferred income', 36), (' trade payables - related parties ', 33), (' contract liabilites - non-current ', 32), (' electricity derivatives at fair value through oci ', 31), (' derivative contracts - at fair value ', 29), (' provisions - non-current ', 29), (' abandonment and decommissioning costs ', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' non-current-liability for long service leave ', 69), ('non-current trade and other payables ', 54), (' employee benefits - non current ', 54), (' non-current - liability for long-service leave ', 54), (' employee benefits - payroll ', 46), (' total non-current employee benefits ', 46), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' contract liabilites - non-current ', 38), (' trade payables - related parties ', 38), (' provisions - non-current ', 31), (' abandonment and decommissioning costs ', 31), (' provision for associate funding ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' provision for long service leave ', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current liability for long service leave , res_fuzz_match = [(' non-current - liability for long-service leave ', 97), (' non-current-liability for long service leave ', 85), (' provision for long service leave ', 81), (' contract liabilites - non-current ', 52), (' total non-current employee benefits ', 48), ('non-current trade and other payables ', 47), (' trade payables - related parties ', 46), (' make good provisions ', 44), (' provision for associate funding ', 41), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' Deferred income', 36), (' employee benefits - non current ', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('non-current trade and other payables ', 77), (' non-current - liability for long-service leave ', 69), (' total non-current employee benefits ', 69), (' non-current-liability for long service leave ', 69), (' employee benefits - non current ', 67), (' provisions - non-current ', 54), (' contract liabilites - non-current ', 54), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - payroll ', 31), (' provision for associate funding ', 31), (' provision for long service leave ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' trade payables - related parties ', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 4, 7, 8, 10], 'score': [88, 81, 97, 88, 81, 97], 'value': [805340.0, 434533.0, 677679.0, 576678.0, 250005.0, 1038838.0], 'label': ['Current Liability for long service leave', 'Current Other employee benefits', 'Non-current Liability for long service leave', 'Current Liability for long service leave', 'Current Other employee benefits', 'Non-current Liability for long service leave'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_liabilities
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' share capital ', 40), (' share capital ', 40), (' equity share capital ', 37), (' perpetual equity instrument ', 35), (' contributed equity ', 32), (' issued capital ', 32), (' contributed equity', 32), ('common stock ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' share capital ', 100), (' share capital ', 100), (' equity share capital ', 76), (' issued capital ', 67), (' contributed equity ', 37), (' contributed equity', 37), (' perpetual equity instrument ', 33), ('common stock ', 26)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 10000000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['19'], 'line_item_value': [10000000.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' share capital ', 40), (' share capital ', 40), (' equity share capital ', 37), (' perpetual equity instrument ', 35), (' contributed equity ', 32), (' issued capital ', 32), (' contributed equity', 32), ('common stock ', 19)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' share capital ', 100), (' share capital ', 100), (' equity share capital ', 76), (' issued capital ', 67), (' contributed equity ', 37), (' contributed equity', 37), (' perpetual equity instrument ', 33), ('common stock ', 26)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 10000000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['19'], 'line_item_value': [10000000.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = none fully paid ordinary shares at start of year , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 68), (' issued and paid-up share capital ', 59), (' retained profits ', 46), (' Profits captialised on redemption of preference shares', 46), (' total issued capital ', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = none fully paid ordinary shares at end of year , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 71), (' issued and paid-up share capital ', 52), (' Profits captialised on redemption of preference shares', 46), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = none fully paid ordinary shares at start of year , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 68), (' issued and paid-up share capital ', 59), (' retained profits ', 46), (' Profits captialised on redemption of preference shares', 46), (' total issued capital ', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = none fully paid ordinary shares at end of year , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 71), (' issued and paid-up share capital ', 52), (' Profits captialised on redemption of preference shares', 46), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3], 'score': [100, 100, 100, 100], 'value': [10000000.0, 10000000.0, 10000000.0, 10000000.0], 'label': ['None Fully paid ordinary shares at start of year', 'None Fully paid ordinary shares at end of year', 'None Fully paid ordinary shares at start of year', 'None Fully paid ordinary shares at end of year'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('Share premium', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('Share premium', 67)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('Share premium', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('Share premium', 67)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments ', ' movements in retained earnings']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' retained earnings ', 40), ('other equity ', 38), (' retained profits', 36), (' accumulated losses ', 29), (' reserves surplus ', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' retained profits', 50), ('other equity ', 43), (' retained earnings ', 36), (' accumulated losses ', 26), (' reserves surplus ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 41223680.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [41223680.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' retained earnings ', 40), ('other equity ', 38), (' retained profits', 36), (' accumulated losses ', 29), (' reserves surplus ', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' retained profits', 50), ('other equity ', 43), (' retained earnings ', 36), (' accumulated losses ', 26), (' reserves surplus ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 43210939.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [43210939.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' noncontrolling interest ', 36), (' non-controlling interest', 36), ('minority interest ', 35), (' minority interest ', 35), (' non controlling interest ', 34)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest ', 32), (' non controlling interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 27), (' non-controlling interest', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' noncontrolling interest ', 36), (' non-controlling interest', 36), ('minority interest ', 35), (' minority interest ', 35), (' non controlling interest ', 34)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest ', 32), (' non controlling interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 27), (' non-controlling interest', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('shareholders equity(a)', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('shareholders equity(a)', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity ', ' hedge reserve']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' hedge reserve ', 30), ('other reserves ', 29), (' reserves ', 27), (' foreign currency translation reserve ', 25), (' Foreign currency translation reserves', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve ', 16), (' Foreign currency translation reserves', 16), (' hedge reserve ', 12), ('other reserves ', 11)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' hedge reserve ', 27), (' reserves ', 24), (' foreign currency translation reserve ', 24), (' Foreign currency translation reserves', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve ', 43), (' Foreign currency translation reserves', 43), (' hedge reserve ', 36), (' reserves ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' hedge reserve ', 30), ('other reserves ', 29), (' reserves ', 27), (' foreign currency translation reserve ', 25), (' Foreign currency translation reserves', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve ', 16), (' Foreign currency translation reserves', 16), (' hedge reserve ', 12), ('other reserves ', 11)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' hedge reserve ', 27), (' reserves ', 24), (' foreign currency translation reserve ', 24), (' Foreign currency translation reserves', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve ', 43), (' Foreign currency translation reserves', 43), (' hedge reserve ', 36), (' reserves ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' Exploration and evaluation assets', 41), (' plant and equipment ', 37), (' investment property ', 30), (' property ', 30), (' oil and gas properties ', 26), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 91, 'value': 10142258.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [10142258.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' Exploration and evaluation assets', 41), (' plant and equipment ', 37), (' investment property ', 30), (' property ', 30), (' oil and gas properties ', 26), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 91, 'value': 10584276.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [10584276.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [(' Freehold land ', 100), (' Freehold land and buildings ', 70), (' Leasehold buildings ', 60), (' Plant and equipment ', 47), (' land and improvement ', 47), (' Other assets in progress ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Workshop tooling ', 38), (' Marine  Development properties ', 36), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [(' Freehold land ', 100), (' Buildings ', 100), (' Freehold land and buildings ', 83), (' Leasehold buildings ', 67), (' Plant and equipment ', 53), (' land and improvement ', 53), (' Other assets in progress ', 40), (' Facilities ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Capitalised pre stripping costs ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('cost ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 67), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 47), (' Freehold land ', 46), (' Stripping WIP ', 44), (' Assets under construction ', 43), (' Marine  Development properties ', 41), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' under construction ', 33), (' Mining properties ', 31), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [(' Plant and equipment ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Mine infrastructure ', 44), (' Freehold land and buildings ', 43), (' Building & mine infrastructure ', 42), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' investment property ', 33), (' Construction ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 50), (' Subsea ', 50), (' investment property ', 47), (' Workshop tooling ', 46), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Mining properties ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Pipeline Asset ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), ('cost ', 25), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [(' Facilities ', 60), (' land and improvement ', 48), (' Plant and equipment ', 47), (' Mining properties ', 46), (' Freehold land ', 46), (' Freehold land and buildings ', 44), (' Asset Retirement Obligation ', 41), (' Marine  Development properties ', 41), (' investment property ', 40), (' under construction ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' Assets under construction ', 33), (' Stripping WIP ', 33), (' Building & mine infrastructure ', 33), (' Subsea ', 33), (' Fishing vessels & equipment ', 29), (' Mine infrastructure ', 28), ('cost ', 25), (' Workshop tooling ', 23), (' Construction ', 22), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [(' Buildings ', 60), (' Marine  Development properties ', 47), (' Mining properties ', 46), (' Stripping WIP ', 44), (' investment property ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Capitalised pre stripping costs ', 39), (' Pipeline Asset ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 30), (' Mine infrastructure ', 28), (' Freehold land and buildings ', 26), ('cost ', 25), (' Construction ', 22), (' gross ', 20), (' Workshop tooling ', 15), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [(' Buildings ', 60), (' Stripping WIP ', 56), ('cost ', 50), (' Capitalised pre stripping costs ', 50), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' gross ', 40), (' Plant and equipment ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Facilities ', 40), (' Marine  Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Other assets in progress ', 35), (' Fishing vessels & equipment ', 35), (' investment property ', 33), (' Construction ', 33), (' Assets under construction ', 33), (' Subsea ', 33), (' Leasehold buildings ', 33), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Mine infrastructure ', 28), (' Building & mine infrastructure ', 28), (' Freehold land and buildings ', 27), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [(' Mining properties ', 46), (' Freehold land ', 46), (' Asset Retirement Obligation ', 41), (' land and improvement ', 41), (' Plant and equipment ', 40), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' Building & mine infrastructure ', 38), (' Pipeline Asset ', 38), (' Marine  Development properties ', 36), (' Freehold land and buildings ', 35), (' investment property ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Other assets in progress ', 30), ('cost ', 25), (' Fishing vessels & equipment ', 24), (' Workshop tooling ', 23), (' gross ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('cost ', 50), (' land and improvement ', 47), (' Construction ', 44), (' Building & mine infrastructure ', 43), (' Plant and equipment ', 40), (' Mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Assets under construction ', 39), (' Capitalised pre stripping costs ', 38), (' Pipeline Asset ', 38), (' Other assets in progress ', 35), (' investment property ', 33), (' Freehold land and buildings ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Freehold land ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' gross ', 20), (' Buildings ', 20), (' Leasehold buildings ', 20), (' Fishing vessels & equipment ', 18), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [(' gross ', 80), (' Other assets in progress ', 60), (' Capitalised pre stripping costs ', 54), (' Workshop tooling ', 54), ('cost ', 50), (' Subsea ', 50), (' investment property ', 47), (' Mining properties ', 46), (' Marine  Development properties ', 45), (' Stripping WIP ', 44), (' Asset Retirement Obligation ', 41), (' land and improvement ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Pipeline Asset ', 38), (' Fishing vessels & equipment ', 35), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' under construction ', 33), (' Freehold land ', 31), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Buildings ', 20), ('', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 40, 41, 41, 42, 42, 43, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 55, 56, 57, 58, 59], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80], 'value': [3756486.0, 3756486.0, 0.0, 0.0, 0.0, 0.0, 3756486.0, 3756486.0, 0.0, 0.0, 0.0, 0.0, 3756486.0, 3756486.0, 5056574.0, 5056574.0, 91317.0, 91317.0, 0.0, 0.0, 5147891.0, 5147891.0, 2392768.0, 141116.0, 0.0, 2533884.0, 2663806.0, 2614007.0, 4600445.0, 4600445.0, 1067939.0, 1067939.0, -29330.0, -29330.0, 5639054.0, 5639054.0, 2319803.0, 507865.0, -29074.0, 2798594.0, 2280642.0, 2840460.0, 2468809.0, 0.0, 0.0, 2468809.0, 0.0, 0.0, 39049.0, 39049.0, 0.0, 0.0, 168072.0, 168072.0, 0.0, 0.0, 0.0, 0.0, 129023.0, 168072.0, 16011337.0, 16011337.0, 1198305.0, 1198305.0, -29330.0, -29330.0, 17180312.0, 17180312.0, 5869079.0, 756031.0, -29074.0, 6596036.0, 10142258.0, 10584276.0], 'label': ['Cost Balance at 1 April 2022', 'Furniture and fixtures Freehold land Freehold land', 'Cost Additions', 'Furniture and fixtures Freehold land Freehold land', 'Cost Disposals', 'Furniture and fixtures Freehold land Freehold land', 'Cost Balance at 31 March 2023', 'Furniture and fixtures Freehold land Freehold land', 'Furniture and fixtures Freehold land Freehold land', 'Furniture and fixtures Freehold land Freehold land', 'Furniture and fixtures Freehold land Freehold land', 'Furniture and fixtures Freehold land Freehold land', 'Furniture and fixtures Freehold land Freehold land', 'Furniture and fixtures Freehold land Freehold land', 'Cost Balance at 1 April 2022', 'Furniture and fixtures Freehold land Buildings', 'Cost Additions', 'Furniture and fixtures Freehold land Buildings', 'Cost Disposals', 'Furniture and fixtures Freehold land Buildings', 'Cost Balance at 31 March 2023', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Furniture and fixtures Freehold land Buildings', 'Cost Balance at 1 April 2022', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Cost Additions', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Cost Disposals', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Cost Balance at 31 March 2023', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Furniture and fixtures Plant and equipment Plant and equipment', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023', 'Cost Balance at 1 April 2022', 'Capital works in progress Capital works in progress Capital works in progress', 'Cost Additions', 'Capital works in progress Capital works in progress Capital works in progress', 'Cost Disposals', 'Capital works in progress Capital works in progress Capital works in progress', 'Cost Balance at 31 March 2023', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Capital works in progress Capital works in progress Capital works in progress', 'Cost Balance at 1 April 2022', 'Capital works in progress Capital works in progress Total', 'Cost Additions', 'Capital works in progress Capital works in progress Total', 'Cost Disposals', 'Capital works in progress Capital works in progress Total', 'Cost Balance at 31 March 2023', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total', 'Capital works in progress Capital works in progress Total'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land freehold land , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures freehold land buildings , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures plant and equipment plant and equipment , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = furniture and fixtures furniture and fixtures furniture and fixtures , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('net book value', 31), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress capital works in progress , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 25), ('net book value', 15)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation balance at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50), ('net book value', 38)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2022 at31 march 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = carrying amounts 2023 at31 march 2023 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 40), ('net book value', 38), ('depreciatio', 36)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = capital works in progress capital works in progress total , res_fuzz_match = [('depreciatio', 45), ('net value', 40), ('net book value', 40), ('accumulated depreciation', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 6, 7, 14, 15, 16, 17, 24, 25, 26, 27, 34, 35, 36, 37, 44, 45, 46, 47, 54, 55, 56, 57], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 0.0, 2392768.0, 141116.0, 0.0, 2533884.0, 2319803.0, 507865.0, -29074.0, 2798594.0, 1156508.0, 107050.0, 0.0, 1263558.0, 0.0, 0.0, 0.0, 0.0, 5869079.0, 756031.0, -29074.0, 6596036.0], 'label': ['Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023', 'Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023', 'Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023', 'Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023', 'Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023', 'Accumulated depreciation Balance at 1 April 2022', 'Accumulated depreciation Depreciation', 'Accumulated depreciation Disposals', 'Accumulated depreciation Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers ', ' Less allowance for impairment']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' trade and other receivables', 64), (' government subsidies receivable ', 55), ('account receivables ', 36), (' trade receivables ', 36), (' receivable ', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 121289307.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['9'], 'line_item_value': [121289307.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [(' trade and other receivables', 64), (' government subsidies receivable ', 55), ('account receivables ', 36), (' trade receivables ', 36), (' receivable ', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 126398542.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['9'], 'line_item_value': [126398542.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers ', ' Less allowance for impairment'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current trade receivables nan , res_fuzz_match = [('trade receivables ', 100), (' related party receivables ', 67), (' net trade debtors ', 62), (' trade debtors ', 58), (' share of joint venture receivables ', 58), (' other debtors ', 42), ('charges paid in advance ', 41), (' receivables from related parties ', 41), (' trade debtors from contracts with customers ', 38), (' allowance for expected credit loss ', 33), (' Less allowance for impairment', 33), (' provision for impairment losses ', 28)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' receivables from related parties ', 78), (' related party receivables ', 61), (' trade debtors ', 50), (' other debtors ', 50), (' net trade debtors ', 50), (' share of joint venture receivables ', 48), (' trade debtors from contracts with customers ', 46), (' Less allowance for impairment', 43), ('trade receivables ', 42), (' allowance for expected credit loss ', 39), (' provision for impairment losses ', 36), ('charges paid in advance ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [('trade receivables ', 75), (' related party receivables ', 67), (' other debtors ', 58), (' share of joint venture receivables ', 58), (' net trade debtors ', 44), ('charges paid in advance ', 41), (' receivables from related parties ', 41), (' allowance for expected credit loss ', 38), (' trade debtors from contracts with customers ', 38), (' trade debtors ', 33), (' provision for impairment losses ', 33), (' Less allowance for impairment', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' trade debtors ', 42), (' share of joint venture receivables ', 41), (' net trade debtors ', 41), ('charges paid in advance ', 41), (' trade debtors from contracts with customers ', 41), (' related party receivables ', 35), (' receivables from related parties ', 35), (' allowance for expected credit loss ', 35), (' other debtors ', 33), (' provision for impairment losses ', 29), (' Less allowance for impairment', 29), ('trade receivables ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current trade receivables nan , res_fuzz_match = [('trade receivables ', 100), (' related party receivables ', 67), (' net trade debtors ', 62), (' trade debtors ', 58), (' share of joint venture receivables ', 58), (' other debtors ', 42), ('charges paid in advance ', 41), (' receivables from related parties ', 41), (' trade debtors from contracts with customers ', 38), (' allowance for expected credit loss ', 33), (' Less allowance for impairment', 33), (' provision for impairment losses ', 28)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current amounts due from related party 20 , res_fuzz_match = [(' receivables from related parties ', 78), (' related party receivables ', 61), (' trade debtors ', 50), (' other debtors ', 50), (' net trade debtors ', 50), (' share of joint venture receivables ', 48), (' trade debtors from contracts with customers ', 46), (' Less allowance for impairment', 43), ('trade receivables ', 42), (' allowance for expected credit loss ', 39), (' provision for impairment losses ', 36), ('charges paid in advance ', 35)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current other receivables nan , res_fuzz_match = [('trade receivables ', 75), (' related party receivables ', 67), (' other debtors ', 58), (' share of joint venture receivables ', 58), (' net trade debtors ', 44), ('charges paid in advance ', 41), (' receivables from related parties ', 41), (' allowance for expected credit loss ', 38), (' trade debtors from contracts with customers ', 38), (' trade debtors ', 33), (' provision for impairment losses ', 33), (' Less allowance for impairment', 33)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = current total nan , res_fuzz_match = [(' trade debtors ', 42), (' share of joint venture receivables ', 41), (' net trade debtors ', 41), ('charges paid in advance ', 41), (' trade debtors from contracts with customers ', 41), (' related party receivables ', 35), (' receivables from related parties ', 35), (' allowance for expected credit loss ', 35), (' other debtors ', 33), (' provision for impairment losses ', 29), (' Less allowance for impairment', 29), ('trade receivables ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade receivables ', 0), (' related party receivables ', 0), (' trade debtors ', 0), (' other debtors ', 0), (' share of joint venture receivables ', 0), (' net trade debtors ', 0), ('charges paid in advance ', 0), (' provision for impairment losses ', 0), (' receivables from related parties ', 0), (' allowance for expected credit loss ', 0), (' trade debtors from contracts with customers ', 0), (' Less allowance for impairment', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [125686659.0, 120689684.0], 'label': ['Current Trade receivables nan', 'Current Trade receivables nan'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:19+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:19+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:19+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 17:55:19+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities ', 39), (' Revenue from rendering of services', 39), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Rendering of services ', 27), ('revenue from operations ', 24), (' Revenue from rendering of services', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' Revenue from rendering of services', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities ', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue ', 44), (' Sales revenue ', 35), (' Rendering of services ', 32), ('revenue from operations ', 29), (' Revenue from rendering of services', 27), (' sale of products ', 25), (' revenue from contracts with customers ', 23), (' from trading business ', 22), (' revenue from continuing activities ', 22), (' net sales ', 20), (' transmission and distribution business ', 20), (' Sale of coal ', 10)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Revenue from rendering of services', 26), (' transmission and distribution business ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities ', 44), (' Revenue from rendering of services', 39), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' Rendering of services ', 28), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('revenue from operations ', 44), (' Rendering of services ', 42), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' Revenue from rendering of services', 33), (' from trading business ', 31), (' revenue from continuing activities ', 22), (' net sales ', 21), (' transmission and distribution business ', 21), (' Sale of coal ', 20), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities ', 38), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' Revenue from rendering of services', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities ', 33), (' net sales ', 32), (' from trading business ', 31), (' Revenue from rendering of services', 28), (' transmission and distribution business ', 26), (' Rendering of services ', 25), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities ', 35), (' from trading business ', 33), (' Revenue from rendering of services', 30), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Rendering of services ', 21), (' Revenue ', 10)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' from trading business ', 43), ('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' transmission and distribution business ', 36), (' sale of products ', 35), (' Revenue from rendering of services', 34), (' revenue from continuing activities ', 30), (' Rendering of services ', 29), (' net sales ', 27), (' Sale of coal ', 26), (' Sales revenue ', 24), (' Revenue ', 14)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' Rendering of services ', 34), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Revenue from rendering of services', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' Revenue from rendering of services', 41), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Revenue from rendering of services', 43), (' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities ', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' Rendering of services ', 34), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities ', 37), (' Revenue from rendering of services', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' Rendering of services ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 530127762.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [530127762.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities ', 39), (' Revenue from rendering of services', 39), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Rendering of services ', 27), ('revenue from operations ', 24), (' Revenue from rendering of services', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' Revenue from rendering of services', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities ', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue ', 44), (' Sales revenue ', 35), (' Rendering of services ', 32), ('revenue from operations ', 29), (' Revenue from rendering of services', 27), (' sale of products ', 25), (' revenue from contracts with customers ', 23), (' from trading business ', 22), (' revenue from continuing activities ', 22), (' net sales ', 20), (' transmission and distribution business ', 20), (' Sale of coal ', 10)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Revenue from rendering of services', 26), (' transmission and distribution business ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities ', 44), (' Revenue from rendering of services', 39), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' Rendering of services ', 28), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('revenue from operations ', 44), (' Rendering of services ', 42), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' Revenue from rendering of services', 33), (' from trading business ', 31), (' revenue from continuing activities ', 22), (' net sales ', 21), (' transmission and distribution business ', 21), (' Sale of coal ', 20), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities ', 38), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' Revenue from rendering of services', 32), (' transmission and distribution business ', 30), (' from trading business ', 30), ('revenue from operations ', 21), (' net sales ', 20), (' Sale of coal ', 19), (' sale of products ', 17), (' Sales revenue ', 17), (' Revenue ', 11)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities ', 33), (' net sales ', 32), (' from trading business ', 31), (' Revenue from rendering of services', 28), (' transmission and distribution business ', 26), (' Rendering of services ', 25), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities ', 35), (' from trading business ', 33), (' Revenue from rendering of services', 30), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Rendering of services ', 21), (' Revenue ', 10)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' from trading business ', 43), ('revenue from operations ', 42), (' revenue from contracts with customers ', 41), (' transmission and distribution business ', 36), (' sale of products ', 35), (' Revenue from rendering of services', 34), (' revenue from continuing activities ', 30), (' Rendering of services ', 29), (' net sales ', 27), (' Sale of coal ', 26), (' Sales revenue ', 24), (' Revenue ', 14)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' Rendering of services ', 34), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Revenue from rendering of services', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' Revenue from rendering of services', 41), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Revenue from rendering of services', 43), (' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities ', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' Rendering of services ', 34), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities ', 37), (' Revenue from rendering of services', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' Rendering of services ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 526027348.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [526027348.0]}
2023-08-28 17:55:19+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:19+0530 - sLogger - DEBUG - keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = none trucks and buses , res_fuzz_match = [(' revenue form contracts with customers ', 47), (' Condensate ', 43), (' Goods sold to customer from warehouse ', 37), (' Goods sold to customer direct from supplier ', 37), (' revenue from continuing activities ', 37), (' contribution from joint venture', 37), (' hedge loss / gain ', 36), (' Gas transportation income ', 34), (' LNG ', 33), (' Sale of goods - Marine ', 33), (' Total Revenue ', 33), (' Sale of goods - Spareparts ', 32), (' Feed gas income ', 31), (' Sale of goods - Cars ', 31), (' Sale of goods - Motorcycles ', 26), ('Sale of goods ', 22), (' Domgas ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = none spare parts , res_fuzz_match = [(' Sale of goods - Spareparts ', 76), (' Condensate ', 57), (' Sale of goods - Cars ', 46), ('Sale of goods ', 44), (' Sale of goods - Marine ', 41), (' Goods sold to customer from warehouse ', 40), (' Goods sold to customer direct from supplier ', 40), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Motorcycles ', 33), (' Total Revenue ', 33), (' revenue from continuing activities ', 33), (' revenue form contracts with customers ', 33), (' contribution from joint venture', 33), (' Feed gas income ', 31), (' Domgas ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = none other , res_fuzz_match = [(' Sale of goods - Motorcycles ', 50), (' Condensate ', 43), (' Sale of goods - Cars ', 40), (' Sale of goods - Marine ', 40), (' revenue from continuing activities ', 40), (' revenue form contracts with customers ', 40), (' contribution from joint venture', 40), ('Sale of goods ', 33), (' LNG ', 33), (' Gas transportation income ', 30), (' Sale of goods - Spareparts ', 30), (' Total Revenue ', 30), (' Goods sold to customer from warehouse ', 30), (' Goods sold to customer direct from supplier ', 30), (' hedge loss / gain ', 30), (' Domgas ', 20), (' Feed gas income ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Total Revenue ', 50), (' Condensate ', 43), (' Domgas ', 40), (' Sale of goods - Cars ', 40), (' Sale of goods - Motorcycles ', 40), (' Sale of goods - Marine ', 40), (' Goods sold to customer from warehouse ', 40), (' Goods sold to customer direct from supplier ', 40), (' revenue from continuing activities ', 40), (' revenue form contracts with customers ', 40), (' contribution from joint venture', 40), ('Sale of goods ', 33), (' LNG ', 33), (' Gas transportation income ', 30), (' Sale of goods - Spareparts ', 30), (' hedge loss / gain ', 30), (' Feed gas income ', 20)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition inaud , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 65), (' revenue form contracts with customers ', 54), (' Condensate ', 43), (' contribution from joint venture', 42), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' hedge loss / gain ', 36), (' Goods sold to customer from warehouse ', 35), (' LNG ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Sale of goods - Motorcycles ', 26), ('Sale of goods ', 22)]
2023-08-28 17:55:19+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition products transferred at a point in time , res_fuzz_match = [(' Total Revenue ', 67), (' Gas transportation income ', 61), (' revenue from continuing activities ', 60), (' revenue form contracts with customers ', 56), (' contribution from joint venture', 52), (' Feed gas income ', 46), ('Sale of goods ', 44), (' Condensate ', 43), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Goods sold to customer direct from supplier ', 38), (' Sale of goods - Spareparts ', 37), (' Goods sold to customer from warehouse ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 61), (' revenue form contracts with customers ', 54), (' Condensate ', 43), (' Domgas ', 40), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' contribution from joint venture', 38), (' Sale of goods - Motorcycles ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Goods sold to customer from warehouse ', 31), (' Sale of goods - Marine ', 27), ('Sale of goods ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none trucks and buses , res_fuzz_match = [(' revenue form contracts with customers ', 47), (' Condensate ', 43), (' Goods sold to customer from warehouse ', 37), (' Goods sold to customer direct from supplier ', 37), (' revenue from continuing activities ', 37), (' contribution from joint venture', 37), (' hedge loss / gain ', 36), (' Gas transportation income ', 34), (' LNG ', 33), (' Sale of goods - Marine ', 33), (' Total Revenue ', 33), (' Sale of goods - Spareparts ', 32), (' Feed gas income ', 31), (' Sale of goods - Cars ', 31), (' Sale of goods - Motorcycles ', 26), ('Sale of goods ', 22), (' Domgas ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none spare parts , res_fuzz_match = [(' Sale of goods - Spareparts ', 76), (' Condensate ', 57), (' Sale of goods - Cars ', 46), ('Sale of goods ', 44), (' Sale of goods - Marine ', 41), (' Goods sold to customer from warehouse ', 40), (' Goods sold to customer direct from supplier ', 40), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Motorcycles ', 33), (' Total Revenue ', 33), (' revenue from continuing activities ', 33), (' revenue form contracts with customers ', 33), (' contribution from joint venture', 33), (' Feed gas income ', 31), (' Domgas ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none other , res_fuzz_match = [(' Sale of goods - Motorcycles ', 50), (' Condensate ', 43), (' Sale of goods - Cars ', 40), (' Sale of goods - Marine ', 40), (' revenue from continuing activities ', 40), (' revenue form contracts with customers ', 40), (' contribution from joint venture', 40), ('Sale of goods ', 33), (' LNG ', 33), (' Gas transportation income ', 30), (' Sale of goods - Spareparts ', 30), (' Total Revenue ', 30), (' Goods sold to customer from warehouse ', 30), (' Goods sold to customer direct from supplier ', 30), (' hedge loss / gain ', 30), (' Domgas ', 20), (' Feed gas income ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' Total Revenue ', 50), (' Condensate ', 43), (' Domgas ', 40), (' Sale of goods - Cars ', 40), (' Sale of goods - Motorcycles ', 40), (' Sale of goods - Marine ', 40), (' Goods sold to customer from warehouse ', 40), (' Goods sold to customer direct from supplier ', 40), (' revenue from continuing activities ', 40), (' revenue form contracts with customers ', 40), (' contribution from joint venture', 40), ('Sale of goods ', 33), (' LNG ', 33), (' Gas transportation income ', 30), (' Sale of goods - Spareparts ', 30), (' hedge loss / gain ', 30), (' Feed gas income ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition inaud , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 65), (' revenue form contracts with customers ', 54), (' Condensate ', 43), (' contribution from joint venture', 42), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Gas transportation income ', 39), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' hedge loss / gain ', 36), (' Goods sold to customer from warehouse ', 35), (' LNG ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Sale of goods - Motorcycles ', 26), ('Sale of goods ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition products transferred at a point in time , res_fuzz_match = [(' Total Revenue ', 67), (' Gas transportation income ', 61), (' revenue from continuing activities ', 60), (' revenue form contracts with customers ', 56), (' contribution from joint venture', 52), (' Feed gas income ', 46), ('Sale of goods ', 44), (' Condensate ', 43), (' Domgas ', 40), (' Sale of goods - Marine ', 40), (' Sale of goods - Cars ', 38), (' Goods sold to customer direct from supplier ', 38), (' Sale of goods - Spareparts ', 37), (' Goods sold to customer from warehouse ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 61), (' revenue form contracts with customers ', 54), (' Condensate ', 43), (' Domgas ', 40), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' contribution from joint venture', 38), (' Sale of goods - Motorcycles ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Goods sold to customer from warehouse ', 31), (' Sale of goods - Marine ', 27), ('Sale of goods ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:20+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory ', 29), (' Cost of rendering services', 25), (' Cost of inventory sold', 24), (' Premises cost ', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Premises cost ', 60), (' Cost of product sold', 54), (' Cost of rendering services', 52), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory ', 25), ('expense', 13), ('expenditure', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of rendering services', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory ', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of rendering services', 27), (' Cost of inventory sold', 26), (' Premises cost ', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23), (' change in inventory ', 22), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), (' Premises cost ', 33), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory ', 29), (' Cost of product sold', 27), (' Cost of rendering services', 26), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Premises cost ', 45), ('total expenditure', 44), ('total expenses', 43), (' Cost of product sold', 43), (' Cost of rendering services', 41), ('purchase of stock-in-trade', 40), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of goods and services sold', 28), ('expense', 24), (' cost of goods sold ', 24), (' change in inventory ', 23), ('cost of sales', 20), ('Cost of sales', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory ', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), (' Cost of rendering services', 27), ('purchase of stock-in-trade', 26), (' Premises cost ', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Premises cost ', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory ', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' change in inventory ', 47), (' Premises cost ', 46), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), (' Premises cost ', 36), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 30), (' Cost of rendering services', 30), (' cost of goods sold ', 28), ('expenditure', 25), ('expense', 14)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 29), (' Cost of rendering services', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24), (' Premises cost ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Cost of rendering services', 38), (' Personnel costs', 36), ('total expenditure', 34), (' Premises cost ', 33), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory ', 24), ('expense', 16)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory ', 43), ('total expenses', 41), (' Cost of rendering services', 40), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Premises cost ', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory ', 40), (' Cost of product sold', 38), (' Cost of rendering services', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), (' Premises cost ', 26), ('expense', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -482165742.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-482165742.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory ', 29), (' Cost of rendering services', 25), (' Cost of inventory sold', 24), (' Premises cost ', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Premises cost ', 60), (' Cost of product sold', 54), (' Cost of rendering services', 52), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory ', 25), ('expense', 13), ('expenditure', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of rendering services', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory ', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of rendering services', 27), (' Cost of inventory sold', 26), (' Premises cost ', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23), (' change in inventory ', 22), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), (' Premises cost ', 33), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory ', 29), (' Cost of product sold', 27), (' Cost of rendering services', 26), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Premises cost ', 45), ('total expenditure', 44), ('total expenses', 43), (' Cost of product sold', 43), (' Cost of rendering services', 41), ('purchase of stock-in-trade', 40), (' Personnel costs', 40), ('expenditure', 38), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of goods and services sold', 28), ('expense', 24), (' cost of goods sold ', 24), (' change in inventory ', 23), ('cost of sales', 20), ('Cost of sales', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' change in inventory ', 44), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), (' Cost of rendering services', 27), ('purchase of stock-in-trade', 26), (' Premises cost ', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold ', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Premises cost ', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory ', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' change in inventory ', 47), (' Premises cost ', 46), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), (' Premises cost ', 36), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 30), (' Cost of rendering services', 30), (' cost of goods sold ', 28), ('expenditure', 25), ('expense', 14)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 29), (' Cost of rendering services', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24), (' Premises cost ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Cost of rendering services', 38), (' Personnel costs', 36), ('total expenditure', 34), (' Premises cost ', 33), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory ', 24), ('expense', 16)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory ', 43), ('total expenses', 41), (' Cost of rendering services', 40), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Premises cost ', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory ', 40), (' Cost of product sold', 38), (' Cost of rendering services', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), (' Premises cost ', 26), ('expense', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -470657778.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-470657778.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs ', ' Salary & wages expense ', ' Superannuation expense ', ' other administration']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies ', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' Servicing expenses', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' marketing and advertising expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Selling and marketting expenses ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13), (' Salaries and employee benefits ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Servicing expenses', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Selling and marketting expenses ', 32), (' levies ', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Salaries and employee benefits ', 29), (' marketing and advertising expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' marketing and advertising expenses ', 32), (' Servicing expenses', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Selling and marketting expenses ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), ('expenses ', 67), (' other expenses ', 67), (' Other expenses ', 67), (' Other expenses ', 67), (' Servicing expenses', 64), (' Lease expenses ', 61), (' Selling Expenses ', 61), (' Occupancy ', 59), (' property espense ', 59), (' Management expenses ', 58), (' Marketing expenses ', 56), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' depreciation ', 42), (' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 42), (' Selling and marketting expenses ', 41), (' marketing and advertising expenses ', 37), (' employee benefits expense ', 35), (' Depreciation and amortisation expenses ', 32), (' employee benefit espense ', 29), (' Logistics and distribution ', 25), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' Sales and marketing ', 15), (' levies ', 12), (' Royalties ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Selling and marketting expenses ', 74), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' marketing and advertising expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Servicing expenses', 62), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' Salaries and employee benefits ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies ', 12), (' Occupancy ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' marketing and advertising expenses ', 52), (' Salaries and employee benefits ', 48), (' employee benefit espense ', 47), (' Selling and marketting expenses ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' property espense ', 54), (' depreciation ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 42), (' Servicing expenses', 42), (' Occupancy expenses ', 35), (' Royalties ', 33), (' Depreciation expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' marketing and advertising expenses ', 32), (' Advertising expenses ', 31), (' Selling and marketting expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' levies ', 27), (' Salaries and employee benefits ', 27), (' Management expenses ', 26), (' Occupancy ', 25), ('expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Sales and marketing ', 23), (' Distribution expenses ', 22), (' Administrative expenses ', 22), (' Administration expenses ', 22), (' Administration ', 20), (' Selling & distribution expenses ', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' marketing and advertising expenses ', 32), (' Servicing expenses', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' Selling and marketting expenses ', 29), (' Salaries and employee benefits ', 26), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Servicing expenses', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Salaries and employee benefits ', 22), (' marketing and advertising expenses ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Selling and marketting expenses ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies ', 13), ('expenses ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' marketing and advertising expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Selling and marketting expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Salaries and employee benefits ', 29), (' Servicing expenses', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies ', 11), ('expenses ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 42), (' employee benefits expense ', 41), (' property espense ', 38), (' Salaries and employee benefits ', 38), (' employee benefit espense ', 36), (' Depreciation expenses ', 33), (' Logistics and distribution ', 33), (' marketing and advertising expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), (' other expenses ', 29), (' Marketing expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Other expenses ', 29), (' Servicing expenses', 29), (' depreciation ', 28), (' Selling & distribution expenses ', 28), (' Amortisation expenses ', 28), (' Advertising expenses ', 27), (' Selling and marketting expenses ', 27), (' Administration ', 26), (' Occupancy expenses ', 24), (' Lease expenses ', 24), (' Management expenses ', 24), (' Occupancy ', 22), (' Royalties ', 21), (' Selling Expenses ', 18), (' levies ', 15), ('expenses ', 14)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Servicing expenses', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Selling and marketting expenses ', 47), (' Administrative and other expenses ', 43), (' marketing and advertising expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Salaries and employee benefits ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies ', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Salaries and employee benefits ', 44), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' marketing and advertising expenses ', 31), (' Servicing expenses', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling and marketting expenses ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies ', 9)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Servicing expenses', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Selling and marketting expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' marketing and advertising expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' Salaries and employee benefits ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies ', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Salaries and employee benefits ', 36), (' Lease expenses ', 35), (' Selling and marketting expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Servicing expenses', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' marketing and advertising expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5], 'score': 100, 'value': -29921885.0, 'line_item_label': ['Occupancy expenses', 'Marketing expenses', 'Administrative expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-1381012.0, -10129088.0, -18411785.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies ', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' Servicing expenses', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' marketing and advertising expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Selling and marketting expenses ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13), (' Salaries and employee benefits ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Servicing expenses', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Selling and marketting expenses ', 32), (' levies ', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Salaries and employee benefits ', 29), (' marketing and advertising expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' marketing and advertising expenses ', 32), (' Servicing expenses', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Selling and marketting expenses ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), ('expenses ', 67), (' other expenses ', 67), (' Other expenses ', 67), (' Other expenses ', 67), (' Servicing expenses', 64), (' Lease expenses ', 61), (' Selling Expenses ', 61), (' Occupancy ', 59), (' property espense ', 59), (' Management expenses ', 58), (' Marketing expenses ', 56), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' depreciation ', 42), (' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 42), (' Selling and marketting expenses ', 41), (' marketing and advertising expenses ', 37), (' employee benefits expense ', 35), (' Depreciation and amortisation expenses ', 32), (' employee benefit espense ', 29), (' Logistics and distribution ', 25), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' Sales and marketing ', 15), (' levies ', 12), (' Royalties ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Selling and marketting expenses ', 74), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' marketing and advertising expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Servicing expenses', 62), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' Salaries and employee benefits ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies ', 12), (' Occupancy ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' marketing and advertising expenses ', 52), (' Salaries and employee benefits ', 48), (' employee benefit espense ', 47), (' Selling and marketting expenses ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' property espense ', 54), (' depreciation ', 44), (' other expenses ', 43), (' Other expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 42), (' Servicing expenses', 42), (' Occupancy expenses ', 35), (' Royalties ', 33), (' Depreciation expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Logistics and distribution ', 32), (' marketing and advertising expenses ', 32), (' Advertising expenses ', 31), (' Selling and marketting expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' levies ', 27), (' Salaries and employee benefits ', 27), (' Management expenses ', 26), (' Occupancy ', 25), ('expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Sales and marketing ', 23), (' Distribution expenses ', 22), (' Administrative expenses ', 22), (' Administration expenses ', 22), (' Administration ', 20), (' Selling & distribution expenses ', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 32), (' marketing and advertising expenses ', 32), (' Servicing expenses', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Administration ', 29), (' Selling and marketting expenses ', 29), (' Salaries and employee benefits ', 26), (' other expenses ', 25), (' Occupancy expenses ', 25), (' Other expenses ', 25), (' Management expenses ', 25), (' Other expenses ', 25), (' Marketing expenses ', 24), (' Occupancy ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Depreciation expenses ', 23), (' Amortisation expenses ', 23), (' Advertising expenses ', 22), (' property espense ', 22), (' depreciation ', 21), (' Distribution expenses ', 21), (' Royalties ', 21), (' Selling & distribution expenses ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Servicing expenses', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Salaries and employee benefits ', 22), (' marketing and advertising expenses ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Selling and marketting expenses ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies ', 13), ('expenses ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' marketing and advertising expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Selling and marketting expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Salaries and employee benefits ', 29), (' Servicing expenses', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies ', 11), ('expenses ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation and amortisation expenses ', 42), (' employee benefits expense ', 41), (' property espense ', 38), (' Salaries and employee benefits ', 38), (' employee benefit espense ', 36), (' Depreciation expenses ', 33), (' Logistics and distribution ', 33), (' marketing and advertising expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Sales and marketing ', 32), (' other expenses ', 29), (' Marketing expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Other expenses ', 29), (' Servicing expenses', 29), (' depreciation ', 28), (' Selling & distribution expenses ', 28), (' Amortisation expenses ', 28), (' Advertising expenses ', 27), (' Selling and marketting expenses ', 27), (' Administration ', 26), (' Occupancy expenses ', 24), (' Lease expenses ', 24), (' Management expenses ', 24), (' Occupancy ', 22), (' Royalties ', 21), (' Selling Expenses ', 18), (' levies ', 15), ('expenses ', 14)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Servicing expenses', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Selling and marketting expenses ', 47), (' Administrative and other expenses ', 43), (' marketing and advertising expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Salaries and employee benefits ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies ', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Salaries and employee benefits ', 44), (' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' marketing and advertising expenses ', 31), (' Servicing expenses', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling and marketting expenses ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies ', 9)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Servicing expenses', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Selling and marketting expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' marketing and advertising expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' Salaries and employee benefits ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies ', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Salaries and employee benefits ', 36), (' Lease expenses ', 35), (' Selling and marketting expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Servicing expenses', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' marketing and advertising expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5], 'score': 100, 'value': -30024184.0, 'line_item_label': ['Occupancy expenses', 'Marketing expenses', 'Administrative expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-1632745.0, -10216405.0, -18175034.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses ', ' Rental expense relating to operating leases lease expense']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses ', 44), (' Administration expenses ', 36), (' Other expense', 33), (' Rental expenses ', 32), (' Premises cost ', 24), (' Occupancy ', 18)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Premises cost ', 60), (' Rental expenses ', 36), (' Administration expenses ', 32), (' Other expense', 29), (' Occupancy expenses ', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Other expense', 33), (' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses ', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), (' Other expense', 67), (' Occupancy ', 59), (' Rental expenses ', 56), (' Administration expenses ', 43), (' Premises cost ', 26), ('Rent ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Other expense', 64), (' Occupancy expenses ', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Premises cost ', 33), (' Occupancy ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Premises cost ', 45), (' Other expense', 43), (' Rental expenses ', 42), (' Occupancy expenses ', 35), ('Rent ', 27), (' Occupancy ', 25), (' Administration expenses ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Premises cost ', 26), (' Occupancy expenses ', 25), (' Other expense', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Premises cost ', 55), (' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses ', 26), (' Occupancy ', 25), (' Other expense', 17), ('Rent ', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Premises cost ', 46), (' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses ', 22), (' Other expense', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Premises cost ', 36), (' Rental expenses ', 34), (' Administration expenses ', 32), (' Other expense', 29), (' Occupancy expenses ', 24), ('Rent ', 23), (' Occupancy ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Other expense', 64), (' Occupancy expenses ', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Premises cost ', 22), (' Occupancy ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Other expense', 39), (' Premises cost ', 33), (' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses ', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other expense', 59), (' Rental expenses ', 40), (' Premises cost ', 36), (' Occupancy expenses ', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Other expense', 43), (' Rental expenses ', 42), (' Occupancy expenses ', 30), (' Administration expenses ', 27), (' Premises cost ', 26), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': -19792797.0, 'line_item_label': ['Occupancy expenses', 'Administrative expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-1381012.0, -18411785.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses ', 44), (' Administration expenses ', 36), (' Other expense', 33), (' Rental expenses ', 32), (' Premises cost ', 24), (' Occupancy ', 18)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Premises cost ', 60), (' Rental expenses ', 36), (' Administration expenses ', 32), (' Other expense', 29), (' Occupancy expenses ', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Other expense', 33), (' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses ', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), (' Other expense', 67), (' Occupancy ', 59), (' Rental expenses ', 56), (' Administration expenses ', 43), (' Premises cost ', 26), ('Rent ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Other expense', 64), (' Occupancy expenses ', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Premises cost ', 33), (' Occupancy ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Premises cost ', 45), (' Other expense', 43), (' Rental expenses ', 42), (' Occupancy expenses ', 35), ('Rent ', 27), (' Occupancy ', 25), (' Administration expenses ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses ', 29), (' Premises cost ', 26), (' Occupancy expenses ', 25), (' Other expense', 25), (' Rental expenses ', 24), (' Occupancy ', 24), ('Rent ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Premises cost ', 55), (' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses ', 26), (' Occupancy ', 25), (' Other expense', 17), ('Rent ', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Premises cost ', 46), (' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses ', 22), (' Other expense', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Premises cost ', 36), (' Rental expenses ', 34), (' Administration expenses ', 32), (' Other expense', 29), (' Occupancy expenses ', 24), ('Rent ', 23), (' Occupancy ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Other expense', 64), (' Occupancy expenses ', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Premises cost ', 22), (' Occupancy ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Other expense', 39), (' Premises cost ', 33), (' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses ', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other expense', 59), (' Rental expenses ', 40), (' Premises cost ', 36), (' Occupancy expenses ', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Other expense', 43), (' Rental expenses ', 42), (' Occupancy expenses ', 30), (' Administration expenses ', 27), (' Premises cost ', 26), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': -19807779.0, 'line_item_label': ['Occupancy expenses', 'Administrative expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-1632745.0, -18175034.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue ', ' Other income']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['Commission revenue ', ' Rent ', ' rental revenue']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue ', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue ', 67), ('other operating', 25), (' Other income', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue ', 38), ('other operating', 32)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue ', 33), (' Other income', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue ', 32), (' Other income', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue ', 43), (' Other income', 30), ('other operating', 23)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('other operating', 67), ('Other revenue ', 43), (' Other income', 36)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue ', 35), (' Other income', 27), ('other operating', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue ', 30), ('other operating', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue ', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue ', 39)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue ', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue ', 30)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue ', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue ', 67), ('other operating', 25), (' Other income', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue ', 38), ('other operating', 32)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue ', 33), (' Other income', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue ', 32), (' Other income', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue ', 43), (' Other income', 30), ('other operating', 23)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('other operating', 67), ('Other revenue ', 43), (' Other income', 36)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue ', 35), (' Other income', 27), ('other operating', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue ', 30), ('other operating', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue ', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue ', 39)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue ', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue ', 30)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue ', ' Interest income from cash and cash equivalents ', ' Interest income from financial assets measured at amortised cost']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Other revenue', 67), (' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs ', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs ', 58), ('other income', 40), ('Finance income and costs', 40), (' Other revenue', 38), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), (' Other revenue', 25), ('finance income', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Other revenue', 33), ('Finance income and costs', 30), ('other income', 26), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs ', 36), (' Other revenue', 32), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs ', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Other revenue', 43), (' Net finance costs ', 38), ('other income', 36), (' Interest revenue', 31), ('Finance income and costs', 25), (' Finance income and finance costs', 21), ('finance income', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs ', 59), ('other income', 43), (' Interest revenue', 30), (' Other revenue', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs ', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Other revenue', 35), (' Interest revenue', 31), ('other income', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs ', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Other revenue', 30), (' Interest revenue', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), (' Net finance costs ', 38), (' Finance income and finance costs', 36), ('Finance income and costs', 33), (' Interest revenue', 27), (' Other revenue', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs ', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32), (' Other revenue', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Other revenue', 39), (' Net finance costs ', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs ', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Other revenue', 29), (' Interest revenue', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Other revenue', 30), (' Interest revenue', 28)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -2333058.0, 'line_item_label': ['Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6'], 'line_item_value': [48.0, -1166577.0, -1166529.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Other revenue', 67), (' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs ', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs ', 58), ('other income', 40), ('Finance income and costs', 40), (' Other revenue', 38), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), (' Other revenue', 25), ('finance income', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Other revenue', 33), ('Finance income and costs', 30), ('other income', 26), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs ', 36), (' Other revenue', 32), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs ', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Other revenue', 43), (' Net finance costs ', 38), ('other income', 36), (' Interest revenue', 31), ('Finance income and costs', 25), (' Finance income and finance costs', 21), ('finance income', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs ', 59), ('other income', 43), (' Interest revenue', 30), (' Other revenue', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs ', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Other revenue', 35), (' Interest revenue', 31), ('other income', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs ', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Other revenue', 30), (' Interest revenue', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), (' Net finance costs ', 38), (' Finance income and finance costs', 36), ('Finance income and costs', 33), (' Interest revenue', 27), (' Other revenue', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs ', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32), (' Other revenue', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Other revenue', 39), (' Net finance costs ', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), ('Finance income and costs', 25), ('finance income', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs ', 49), ('Finance income and costs', 42), ('finance income', 41), (' Finance income and finance costs', 36), (' Other revenue', 29), (' Interest revenue', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Other revenue', 30), (' Interest revenue', 28)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -7214134.0, 'line_item_label': ['Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6'], 'line_item_value': [0.0, -3607067.0, -3607067.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue ', ' Interest income from cash and cash equivalents ', ' Interest income from financial assets measured at amortised cost'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [('interest ', 100), (' Interest income ', 93), (' Bank interest ', 77), (' interest revenue ', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 70), (' Interest received - Loan ', 65), (' Interest received - Bank ', 60), (' Share of JV interest received/(paid) ', 58), (' Interest income from cash and cash equivalents ', 51), (' Interest income from financial assets measured at amortised cost', 51), (' Sublease interest income ', 50), (' Bank Deposits - cash and cash equivalents ', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL ', 59), (' Interest income ', 57), (' Sublease interest income ', 53), (' Interest income from financial assets measured at amortised cost', 53), (' Interest income from cash and cash equivalents ', 47), (' Bank interest ', 38), (' Interest received - Loan ', 35), (' Share of JV interest received/(paid) ', 35), (' Bank Deposits - cash and cash equivalents ', 35), (' Interest received - Bank ', 29), (' interest revenue ', 27), ('interest ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Bank interest ', 69), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 60), (' Share of JV interest received/(paid) ', 58), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 49), (' Bank Deposits - cash and cash equivalents ', 44), (' Interest income from financial assets measured at amortised cost', 43)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Bank interest ', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 61), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Share of JV interest received/(paid) ', 58), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 44), (' Interest income from financial assets measured at amortised cost', 43), (' Bank Deposits - cash and cash equivalents ', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Bank interest ', 69), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 59), (' Share of JV interest received/(paid) ', 58), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 46), (' Interest income from financial assets measured at amortised cost', 45), (' Bank Deposits - cash and cash equivalents ', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 70), (' Bank interest ', 69), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Share of JV interest received/(paid) ', 58), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 44), (' Interest income from financial assets measured at amortised cost', 44), (' Bank Deposits - cash and cash equivalents ', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Bank interest ', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 63), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Share of JV interest received/(paid) ', 58), (' Interest income from financial assets measured at amortised cost', 53), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 46), (' Bank Deposits - cash and cash equivalents ', 41)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [('interest ', 100), (' Interest income ', 93), (' Bank interest ', 77), (' interest revenue ', 73), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 70), (' Interest received - Loan ', 65), (' Interest received - Bank ', 60), (' Share of JV interest received/(paid) ', 58), (' Interest income from cash and cash equivalents ', 51), (' Interest income from financial assets measured at amortised cost', 51), (' Sublease interest income ', 50), (' Bank Deposits - cash and cash equivalents ', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL ', 59), (' Interest income ', 57), (' Sublease interest income ', 53), (' Interest income from financial assets measured at amortised cost', 53), (' Interest income from cash and cash equivalents ', 47), (' Bank interest ', 38), (' Interest received - Loan ', 35), (' Share of JV interest received/(paid) ', 35), (' Bank Deposits - cash and cash equivalents ', 35), (' Interest received - Bank ', 29), (' interest revenue ', 27), ('interest ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Bank interest ', 69), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 60), (' Share of JV interest received/(paid) ', 58), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 49), (' Bank Deposits - cash and cash equivalents ', 44), (' Interest income from financial assets measured at amortised cost', 43)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Bank interest ', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 61), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Share of JV interest received/(paid) ', 58), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 44), (' Interest income from financial assets measured at amortised cost', 43), (' Bank Deposits - cash and cash equivalents ', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Bank interest ', 69), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 59), (' Share of JV interest received/(paid) ', 58), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 46), (' Interest income from financial assets measured at amortised cost', 45), (' Bank Deposits - cash and cash equivalents ', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 70), (' Bank interest ', 69), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Share of JV interest received/(paid) ', 58), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 44), (' Interest income from financial assets measured at amortised cost', 44), (' Bank Deposits - cash and cash equivalents ', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [('interest ', 100), (' interest revenue ', 80), (' Interest income ', 71), (' Bank interest ', 69), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 63), (' Interest received - Bank ', 60), (' Interest received - Loan ', 60), (' Share of JV interest received/(paid) ', 58), (' Interest income from financial assets measured at amortised cost', 53), (' Sublease interest income ', 50), (' Interest income from cash and cash equivalents ', 46), (' Bank Deposits - cash and cash equivalents ', 41)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest ', 0), (' Bank interest ', 0), (' Interest income ', 0), (' Interest received - Bank ', 0), (' Interest received - Loan ', 0), (' Sublease interest income ', 0), (' Share of JV interest received/(paid) ', 0), (' Bank Deposits - cash and cash equivalents ', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL ', 0), (' interest revenue ', 0), (' Interest income from cash and cash equivalents ', 0), (' Interest income from financial assets measured at amortised cost', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 765138.0, 2841903.0, 26.0, 3607067.0, -3607067.0, 48.0, 697145.0, 469432.0, 0.0, 1166577.0, -1166529.0], 'label': ['None Interestincome using the effective interest rate method', 'Interest expense using the effective interest rate method on: Lease liabilities', 'Interest expense using the effective interest rate method on: Loans and borrowings', 'Interest expense using the effective interest rate method on: Net foreign exchange loss', 'Interest expense using the effective interest rate method on: Finance costs', 'Interest expense using the effective interest rate method on: Net finance costs recognised in profit or loss', 'None Interestincome using the effective interest rate method', 'Interest expense using the effective interest rate method on: Lease liabilities', 'Interest expense using the effective interest rate method on: Loans and borrowings', 'Interest expense using the effective interest rate method on: Net foreign exchange loss', 'Interest expense using the effective interest rate method on: Finance costs', 'Interest expense using the effective interest rate method on: Net finance costs recognised in profit or loss'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [('Interest expense', 27), ('interest expense', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [('Interest expense', 60), ('interest expense', 60)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [('Interest expense', 27), ('interest expense', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [('Interest expense', 100), ('interest expense', 100)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Interest expense', 0), ('interest expense', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 3, 4, 5, 6, 9, 10, 11, 12, 13], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [765138.0, 2841903.0, 26.0, 3607067.0, -3607067.0, 697145.0, 469432.0, 0.0, 1166577.0, -1166529.0], 'label': ['Interest expense using the effective interest rate method on: Lease liabilities', 'Interest expense using the effective interest rate method on: Loans and borrowings', 'Interest expense using the effective interest rate method on: Net foreign exchange loss', 'Interest expense using the effective interest rate method on: Finance costs', 'Interest expense using the effective interest rate method on: Net finance costs recognised in profit or loss', 'Interest expense using the effective interest rate method on: Lease liabilities', 'Interest expense using the effective interest rate method on: Loans and borrowings', 'Interest expense using the effective interest rate method on: Net foreign exchange loss', 'Interest expense using the effective interest rate method on: Finance costs', 'Interest expense using the effective interest rate method on: Net finance costs recognised in profit or loss'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:20+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income ', ' Interest on lease liabilities ', ' Interest expense from financial liabilities measured at amortised cost ', ' Unwind of discount on decommissioning provision ', ' Unwind of discount on Lease Liability']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense ', 29), (' Interest on external debt ', 23), (' Interest in finance leases', 23), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' Interest in finance leases', 41), (' finance expenses ', 27), (' interest expense ', 25), (' Interest on external debt ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense ', 30), (' Interest on external debt ', 25), (' Interest in finance leases', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses ', 64), (' interest expense ', 52), (' Interest on external debt ', 31), ('finance cost ', 26), (' Interest in finance leases', 25), (' net finance costs ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense ', 71), (' finance expenses ', 62), (' Interest on external debt ', 48), (' net finance costs ', 36), (' Interest in finance leases', 30), ('finance cost ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest on external debt ', 44), (' Interest in finance leases', 44), (' finance expenses ', 41), (' interest expense ', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses ', 42), (' net finance costs ', 38), (' interest expense ', 38), ('finance cost ', 36), (' Interest on external debt ', 32), (' Interest in finance leases', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), (' Interest in finance leases', 56), ('finance cost ', 52), (' finance expenses ', 48), (' interest expense ', 30), (' Interest on external debt ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' Interest in finance leases', 39), (' interest expense ', 31), (' Interest on external debt ', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' Interest in finance leases', 57), (' interest expense ', 40), (' Interest on external debt ', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Interest in finance leases', 43), (' net finance costs ', 38), (' Interest on external debt ', 38), ('finance cost ', 36), (' finance expenses ', 34), (' interest expense ', 32)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense ', 65), (' net finance costs ', 45), (' Interest on external debt ', 44), ('finance cost ', 37), (' Interest in finance leases', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Interest in finance leases', 41), (' Interest on external debt ', 36), (' net finance costs ', 35), ('finance cost ', 33), (' interest expense ', 29), (' finance expenses ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense ', 54), (' net finance costs ', 49), (' finance expenses ', 46), (' Interest on external debt ', 43), ('finance cost ', 42), (' Interest in finance leases', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense ', 40), (' Interest in finance leases', 40), (' finance expenses ', 38), ('finance cost ', 35), (' Interest on external debt ', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -2333106.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '6'], 'line_item_value': [-1166577.0, -1166529.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense ', 29), (' Interest on external debt ', 23), (' Interest in finance leases', 23), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' Interest in finance leases', 41), (' finance expenses ', 27), (' interest expense ', 25), (' Interest on external debt ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense ', 30), (' Interest on external debt ', 25), (' Interest in finance leases', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses ', 64), (' interest expense ', 52), (' Interest on external debt ', 31), ('finance cost ', 26), (' Interest in finance leases', 25), (' net finance costs ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense ', 71), (' finance expenses ', 62), (' Interest on external debt ', 48), (' net finance costs ', 36), (' Interest in finance leases', 30), ('finance cost ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest on external debt ', 44), (' Interest in finance leases', 44), (' finance expenses ', 41), (' interest expense ', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' finance expenses ', 42), (' net finance costs ', 38), (' interest expense ', 38), ('finance cost ', 36), (' Interest on external debt ', 32), (' Interest in finance leases', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), (' Interest in finance leases', 56), ('finance cost ', 52), (' finance expenses ', 48), (' interest expense ', 30), (' Interest on external debt ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' Interest in finance leases', 39), (' interest expense ', 31), (' Interest on external debt ', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' Interest in finance leases', 57), (' interest expense ', 40), (' Interest on external debt ', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Interest in finance leases', 43), (' net finance costs ', 38), (' Interest on external debt ', 38), ('finance cost ', 36), (' finance expenses ', 34), (' interest expense ', 32)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense ', 65), (' net finance costs ', 45), (' Interest on external debt ', 44), ('finance cost ', 37), (' Interest in finance leases', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Interest in finance leases', 41), (' Interest on external debt ', 36), (' net finance costs ', 35), ('finance cost ', 33), (' interest expense ', 29), (' finance expenses ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense ', 54), (' net finance costs ', 49), (' finance expenses ', 46), (' Interest on external debt ', 43), ('finance cost ', 42), (' Interest in finance leases', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense ', 40), (' Interest in finance leases', 40), (' finance expenses ', 38), ('finance cost ', 35), (' Interest on external debt ', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -7214134.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '6'], 'line_item_value': [-3607067.0, -3607067.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income ', ' Interest on lease liabilities ', ' Interest expense from financial liabilities measured at amortised cost ', ' Unwind of discount on decommissioning provision ', ' Unwind of discount on Lease Liability'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [(' interest ', 100), (' interest income ', 93), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 83), (' Interest expense on financial liabilities using the effective interest rate method - other ', 78), (' Interest on leases ', 77), (' Other interest expense ', 62), (' Interest expenses ', 60), (' Lease interest expense ', 60), (' Interest accrued on loans ', 58), (' Interest on lease liabilities ', 55), (' Lease liabilities interest expense ', 52), ('loan ', 50), (' debenture ', 50), (' bonds ', 50), (' Interest accrued on lease liabilities ', 50), (' Interest expense from financial liabilities measured at amortised cost ', 44), (' Interest on bank overdrafts and loans (other than those from related parties) ', 43), (' Discount unwind on the provision for asset retirement obligation ', 42), (' Unwind of discount on decommissioning provision ', 41), (' bank facilities ', 40), (' Unwind of discount on Lease Liability', 37), (' cash credit ', 36), (' debt ', 25), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other ', 59), (' Interest expense from financial liabilities measured at amortised cost ', 59), (' interest income ', 57), ('loan ', 50), (' bank facilities ', 50), (' bonds ', 50), (' Unwind of discount on decommissioning provision ', 47), (' Interest on bank overdrafts and loans (other than those from related parties) ', 41), (' Interest accrued on loans ', 41), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 41), (' Lease liabilities interest expense ', 41), (' Unwind of discount on Lease Liability', 41), (' Discount unwind on the provision for asset retirement obligation ', 35), (' Other interest expense ', 35), (' Interest accrued on lease liabilities ', 35), (' Interest on lease liabilities ', 35), (' Interest on leases ', 31), (' Lease interest expense ', 29), (' cash credit ', 27), (' Interest expenses ', 27), (' debt ', 25), (' debenture ', 25), (' interest ', 25), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [(' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 90), (' Interest on leases ', 77), (' Interest expense on financial liabilities using the effective interest rate method - other ', 76), (' Interest on lease liabilities ', 75), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest accrued on lease liabilities ', 62), (' Interest accrued on loans ', 58), (' Lease liabilities interest expense ', 52), (' Unwind of discount on Lease Liability', 52), (' Interest expense from financial liabilities measured at amortised cost ', 51), ('loan ', 50), (' debt ', 50), (' bank facilities ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 48), (' Discount unwind on the provision for asset retirement obligation ', 42), (' debenture ', 38), (' cash credit ', 36), (' Unwind of discount on decommissioning provision ', 34), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [('loan ', 100), (' borrowings ', 100), (' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 84), (' Interest expense on financial liabilities using the effective interest rate method - other ', 78), (' Interest on leases ', 77), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest on lease liabilities ', 60), (' Interest accrued on loans ', 58), (' Interest accrued on lease liabilities ', 54), (' Interest expense from financial liabilities measured at amortised cost ', 53), (' Lease liabilities interest expense ', 52), (' debt ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 47), (' Discount unwind on the provision for asset retirement obligation ', 42), (' bank facilities ', 40), (' debenture ', 38), (' cash credit ', 36), (' Unwind of discount on decommissioning provision ', 34), (' Unwind of discount on Lease Liability', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [(' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 79), (' Interest on leases ', 77), (' Interest expense on financial liabilities using the effective interest rate method - other ', 75), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest on lease liabilities ', 60), (' Interest accrued on loans ', 58), (' Interest expense from financial liabilities measured at amortised cost ', 53), (' Lease liabilities interest expense ', 52), ('loan ', 50), (' debt ', 50), (' bonds ', 50), (' Interest accrued on lease liabilities ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 48), (' Discount unwind on the provision for asset retirement obligation ', 46), (' bank facilities ', 40), (' debenture ', 38), (' cash credit ', 36), (' Unwind of discount on decommissioning provision ', 34), (' Unwind of discount on Lease Liability', 33), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [(' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 87), (' Interest on leases ', 77), (' Interest expense on financial liabilities using the effective interest rate method - other ', 76), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest on lease liabilities ', 60), (' Interest accrued on loans ', 58), (' Interest accrued on lease liabilities ', 54), (' Lease liabilities interest expense ', 52), (' Interest expense from financial liabilities measured at amortised cost ', 51), ('loan ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 46), (' Discount unwind on the provision for asset retirement obligation ', 42), (' bank facilities ', 40), (' debenture ', 38), (' cash credit ', 36), (' Unwind of discount on decommissioning provision ', 34), (' Unwind of discount on Lease Liability', 33), (' debt ', 25), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [(' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 79), (' Interest on leases ', 77), (' Interest expense on financial liabilities using the effective interest rate method - other ', 76), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest on lease liabilities ', 60), (' Interest accrued on loans ', 58), (' Unwind of discount on decommissioning provision ', 56), (' Interest expense from financial liabilities measured at amortised cost ', 53), (' Lease liabilities interest expense ', 52), ('loan ', 50), (' debt ', 50), (' bonds ', 50), (' Interest accrued on lease liabilities ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 46), (' Discount unwind on the provision for asset retirement obligation ', 44), (' Unwind of discount on Lease Liability', 44), (' bank facilities ', 40), (' debenture ', 38), (' cash credit ', 36), (' borrowings ', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [(' interest ', 100), (' interest income ', 93), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 83), (' Interest expense on financial liabilities using the effective interest rate method - other ', 78), (' Interest on leases ', 77), (' Other interest expense ', 62), (' Interest expenses ', 60), (' Lease interest expense ', 60), (' Interest accrued on loans ', 58), (' Interest on lease liabilities ', 55), (' Lease liabilities interest expense ', 52), ('loan ', 50), (' debenture ', 50), (' bonds ', 50), (' Interest accrued on lease liabilities ', 50), (' Interest expense from financial liabilities measured at amortised cost ', 44), (' Interest on bank overdrafts and loans (other than those from related parties) ', 43), (' Discount unwind on the provision for asset retirement obligation ', 42), (' Unwind of discount on decommissioning provision ', 41), (' bank facilities ', 40), (' Unwind of discount on Lease Liability', 37), (' cash credit ', 36), (' debt ', 25), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [(' Interest expense on financial liabilities using the effective interest rate method - other ', 59), (' Interest expense from financial liabilities measured at amortised cost ', 59), (' interest income ', 57), ('loan ', 50), (' bank facilities ', 50), (' bonds ', 50), (' Unwind of discount on decommissioning provision ', 47), (' Interest on bank overdrafts and loans (other than those from related parties) ', 41), (' Interest accrued on loans ', 41), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 41), (' Lease liabilities interest expense ', 41), (' Unwind of discount on Lease Liability', 41), (' Discount unwind on the provision for asset retirement obligation ', 35), (' Other interest expense ', 35), (' Interest accrued on lease liabilities ', 35), (' Interest on lease liabilities ', 35), (' Interest on leases ', 31), (' Lease interest expense ', 29), (' cash credit ', 27), (' Interest expenses ', 27), (' debt ', 25), (' debenture ', 25), (' interest ', 25), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [(' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 90), (' Interest on leases ', 77), (' Interest expense on financial liabilities using the effective interest rate method - other ', 76), (' Interest on lease liabilities ', 75), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest accrued on lease liabilities ', 62), (' Interest accrued on loans ', 58), (' Lease liabilities interest expense ', 52), (' Unwind of discount on Lease Liability', 52), (' Interest expense from financial liabilities measured at amortised cost ', 51), ('loan ', 50), (' debt ', 50), (' bank facilities ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 48), (' Discount unwind on the provision for asset retirement obligation ', 42), (' debenture ', 38), (' cash credit ', 36), (' Unwind of discount on decommissioning provision ', 34), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [('loan ', 100), (' borrowings ', 100), (' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 84), (' Interest expense on financial liabilities using the effective interest rate method - other ', 78), (' Interest on leases ', 77), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest on lease liabilities ', 60), (' Interest accrued on loans ', 58), (' Interest accrued on lease liabilities ', 54), (' Interest expense from financial liabilities measured at amortised cost ', 53), (' Lease liabilities interest expense ', 52), (' debt ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 47), (' Discount unwind on the provision for asset retirement obligation ', 42), (' bank facilities ', 40), (' debenture ', 38), (' cash credit ', 36), (' Unwind of discount on decommissioning provision ', 34), (' Unwind of discount on Lease Liability', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [(' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 79), (' Interest on leases ', 77), (' Interest expense on financial liabilities using the effective interest rate method - other ', 75), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest on lease liabilities ', 60), (' Interest accrued on loans ', 58), (' Interest expense from financial liabilities measured at amortised cost ', 53), (' Lease liabilities interest expense ', 52), ('loan ', 50), (' debt ', 50), (' bonds ', 50), (' Interest accrued on lease liabilities ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 48), (' Discount unwind on the provision for asset retirement obligation ', 46), (' bank facilities ', 40), (' debenture ', 38), (' cash credit ', 36), (' Unwind of discount on decommissioning provision ', 34), (' Unwind of discount on Lease Liability', 33), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [(' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 87), (' Interest on leases ', 77), (' Interest expense on financial liabilities using the effective interest rate method - other ', 76), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest on lease liabilities ', 60), (' Interest accrued on loans ', 58), (' Interest accrued on lease liabilities ', 54), (' Lease liabilities interest expense ', 52), (' Interest expense from financial liabilities measured at amortised cost ', 51), ('loan ', 50), (' bonds ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 46), (' Discount unwind on the provision for asset retirement obligation ', 42), (' bank facilities ', 40), (' debenture ', 38), (' cash credit ', 36), (' Unwind of discount on decommissioning provision ', 34), (' Unwind of discount on Lease Liability', 33), (' debt ', 25), (' borrowings ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [(' interest ', 100), (' Interest expenses ', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 79), (' Interest on leases ', 77), (' Interest expense on financial liabilities using the effective interest rate method - other ', 76), (' interest income ', 71), (' Lease interest expense ', 65), (' Other interest expense ', 62), (' Interest on lease liabilities ', 60), (' Interest accrued on loans ', 58), (' Unwind of discount on decommissioning provision ', 56), (' Interest expense from financial liabilities measured at amortised cost ', 53), (' Lease liabilities interest expense ', 52), ('loan ', 50), (' debt ', 50), (' bonds ', 50), (' Interest accrued on lease liabilities ', 50), (' Interest on bank overdrafts and loans (other than those from related parties) ', 46), (' Discount unwind on the provision for asset retirement obligation ', 44), (' Unwind of discount on Lease Liability', 44), (' bank facilities ', 40), (' debenture ', 38), (' cash credit ', 36), (' borrowings ', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan ', 0), (' debt ', 0), (' debenture ', 0), (' cash credit ', 0), (' borrowings ', 0), (' bank facilities ', 0), (' bonds ', 0), (' interest ', 0), (' Interest expenses ', 0), (' Discount unwind on the provision for asset retirement obligation ', 0), (' Other interest expense ', 0), (' Interest on leases ', 0), (' Interest on bank overdrafts and loans (other than those from related parties) ', 0), (' Interest accrued on loans ', 0), (' Interest accrued on lease liabilities ', 0), (' Lease interest expense ', 0), (' Interest expense on financial liabilities using the effective interest rate method - other ', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', 0), (' Lease liabilities interest expense ', 0), (' interest income ', 0), (' Interest on lease liabilities ', 0), (' Interest expense from financial liabilities measured at amortised cost ', 0), (' Unwind of discount on decommissioning provision ', 0), (' Unwind of discount on Lease Liability', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 765138.0, 2841903.0, 26.0, 3607067.0, -3607067.0, 48.0, 697145.0, 469432.0, 0.0, 1166577.0, -1166529.0], 'label': ['None Interestincome using the effective interest rate method', 'Interest expense using the effective interest rate method on: Lease liabilities', 'Interest expense using the effective interest rate method on: Loans and borrowings', 'Interest expense using the effective interest rate method on: Net foreign exchange loss', 'Interest expense using the effective interest rate method on: Finance costs', 'Interest expense using the effective interest rate method on: Net finance costs recognised in profit or loss', 'None Interestincome using the effective interest rate method', 'Interest expense using the effective interest rate method on: Lease liabilities', 'Interest expense using the effective interest rate method on: Loans and borrowings', 'Interest expense using the effective interest rate method on: Net foreign exchange loss', 'Interest expense using the effective interest rate method on: Finance costs', 'Interest expense using the effective interest rate method on: Net finance costs recognised in profit or loss'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['interest income'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [('interest income', 93)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [('interest income', 57)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [('interest income', 93)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [('interest income', 57)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [('interest income', 71)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest income', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 7], 'score': [93, 93], 'value': [0.0, 48.0], 'label': ['None Interestincome using the effective interest rate method', 'None Interestincome using the effective interest rate method'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:20+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax ']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment  ', ' Investment in joint venture ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Interest on unwinding of discount in provisions ', ' Profit from discontinued operation ', ' net of tax ', ' Net loss on disposal of property ', ' plant and equipment ', ' Net foreign exchange gains/(losses) ', ' Accretion expense ', ' Loss on loan refinancing ', ' Net foreign exchange (loss)/gain ', ' Net PPE disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Net (loss)/profit on disposal of non-current assets ', ' Net other foreign exchange (losses)/gains ', ' Miscellanous income ', ' Commision rebate ', ' Net foreign losses ', ' Derivaties at FVTPL- net change in fair value ', ' Other income - Bank guarantee ', ' Other expense - Net loss on sale or property, plant and equipment ', ' Other expense - Loss on inventory obsolescence ', ' Bank charges']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax '] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories ', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' Share of profit of equity-accounted investees, net of income tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories ', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories ', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' expenses ', 67), (' finance expenses', 64), (' Impairement (expenses)/reversal ', 50), (' interest revenue ', 37), (' other gains/losses ', 30), (' finance income and costs ', 30), (' Finance income and costs ', 30), (' Loss on revaluation of inventories ', 30), (' interest gains and losses ', 29), (' other opertaing income ', 27), ('finance cost ', 26), (' other income ', 26), (' Other income ', 26), (' Impairment loss ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net finance costs ', 22), (' share of profit of equity accounted investees ', 21), (' net of tax ', 21), (' Profit from discontinued operation ', 21), (' net of tax ', 21), (' Share of gain/(loss) of joint venture ', 20), (' Share of profit of equity-accounted investees, net of income tax ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories ', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), (' Share of profit of equity-accounted investees, net of income tax ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Profit from discontinued operation ', 58), (' other opertaing income ', 48), (' finance expenses', 42), (' share of profit of equity accounted investees ', 39), (' net finance costs ', 38), ('finance cost ', 36), (' other income ', 36), (' Other income ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), (' other income and revenue ', 30), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Loss on revaluation of inventories ', 25), (' expenses ', 24), (' interest gains and losses ', 24), (' finance income and finance cost ', 21), (' Share of gain/(loss) of joint venture ', 21), (' Finance income and finance costs ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' finance income and costs ', 73), (' Finance income and costs ', 73), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' net finance costs ', 59), ('finance cost ', 52), (' finance expenses', 48), (' other income and revenue ', 47), (' other income ', 43), (' Other income ', 43), (' interest gains and losses ', 41), (' Impairment loss ', 35), (' other opertaing income ', 33), (' Profit from discontinued operation ', 31), (' other gains/losses ', 30), (' interest revenue ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Loss on revaluation of inventories ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' share of profit of equity accounted investees ', 26), (' Impairement (expenses)/reversal ', 25), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of profit of equity-accounted investees, net of income tax ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories ', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Share of profit of equity-accounted investees, net of income tax ', 35), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories ', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' other opertaing income ', 55), (' Share of profit of equity-accounted investees, net of income tax ', 54), (' Profit from discontinued operation ', 49), (' other income ', 48), (' Other income ', 48), (' share of profit of equity accounted investees ', 46), (' other income and revenue ', 45), (' net of tax ', 41), (' net of tax ', 41), (' net finance costs ', 38), (' Loss on revaluation of inventories ', 37), ('finance cost ', 36), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' finance expenses', 34), (' finance income and costs ', 33), (' Impairement (expenses)/reversal ', 33), (' Finance income and costs ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Impairment loss ', 30), (' interest revenue ', 27), (' expenses ', 14)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 38), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' other opertaing income ', 54), (' other income ', 47), (' Other income ', 47), (' share of profit of equity accounted investees ', 44), (' Share of gain/(loss) of joint venture ', 43), (' Profit from discontinued operation ', 43), (' other gains/losses ', 41), (' other income and revenue ', 39), (' Share of profit of equity-accounted investees, net of income tax ', 39), (' Impairement (expenses)/reversal ', 36), (' net finance costs ', 35), (' Loss on revaluation of inventories ', 35), ('finance cost ', 33), (' net of tax ', 31), (' net of tax ', 31), (' interest revenue ', 29), (' interest gains and losses ', 29), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Impairment loss ', 20), (' expenses ', 16)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' Share of profit of equity-accounted investees, net of income tax ', 40), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories ', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories ', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -2333106.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '6'], 'line_item_value': [-1166577.0, -1166529.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax '] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories ', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' Share of profit of equity-accounted investees, net of income tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories ', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories ', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' expenses ', 67), (' finance expenses', 64), (' Impairement (expenses)/reversal ', 50), (' interest revenue ', 37), (' other gains/losses ', 30), (' finance income and costs ', 30), (' Finance income and costs ', 30), (' Loss on revaluation of inventories ', 30), (' interest gains and losses ', 29), (' other opertaing income ', 27), ('finance cost ', 26), (' other income ', 26), (' Other income ', 26), (' Impairment loss ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net finance costs ', 22), (' share of profit of equity accounted investees ', 21), (' net of tax ', 21), (' Profit from discontinued operation ', 21), (' net of tax ', 21), (' Share of gain/(loss) of joint venture ', 20), (' Share of profit of equity-accounted investees, net of income tax ', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories ', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), (' Share of profit of equity-accounted investees, net of income tax ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' Profit from discontinued operation ', 58), (' other opertaing income ', 48), (' finance expenses', 42), (' share of profit of equity accounted investees ', 39), (' net finance costs ', 38), ('finance cost ', 36), (' other income ', 36), (' Other income ', 36), (' Impairment loss ', 36), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), (' other income and revenue ', 30), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Loss on revaluation of inventories ', 25), (' expenses ', 24), (' interest gains and losses ', 24), (' finance income and finance cost ', 21), (' Share of gain/(loss) of joint venture ', 21), (' Finance income and finance costs ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' finance income and costs ', 73), (' Finance income and costs ', 73), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' net finance costs ', 59), ('finance cost ', 52), (' finance expenses', 48), (' other income and revenue ', 47), (' other income ', 43), (' Other income ', 43), (' interest gains and losses ', 41), (' Impairment loss ', 35), (' other opertaing income ', 33), (' Profit from discontinued operation ', 31), (' other gains/losses ', 30), (' interest revenue ', 30), (' Share of gain/(loss) of joint venture ', 30), (' Loss on revaluation of inventories ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' share of profit of equity accounted investees ', 26), (' Impairement (expenses)/reversal ', 25), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of profit of equity-accounted investees, net of income tax ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories ', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Share of profit of equity-accounted investees, net of income tax ', 35), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories ', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' other opertaing income ', 55), (' Share of profit of equity-accounted investees, net of income tax ', 54), (' Profit from discontinued operation ', 49), (' other income ', 48), (' Other income ', 48), (' share of profit of equity accounted investees ', 46), (' other income and revenue ', 45), (' net of tax ', 41), (' net of tax ', 41), (' net finance costs ', 38), (' Loss on revaluation of inventories ', 37), ('finance cost ', 36), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' finance expenses', 34), (' finance income and costs ', 33), (' Impairement (expenses)/reversal ', 33), (' Finance income and costs ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Impairment loss ', 30), (' interest revenue ', 27), (' expenses ', 14)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 38), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' other opertaing income ', 54), (' other income ', 47), (' Other income ', 47), (' share of profit of equity accounted investees ', 44), (' Share of gain/(loss) of joint venture ', 43), (' Profit from discontinued operation ', 43), (' other gains/losses ', 41), (' other income and revenue ', 39), (' Share of profit of equity-accounted investees, net of income tax ', 39), (' Impairement (expenses)/reversal ', 36), (' net finance costs ', 35), (' Loss on revaluation of inventories ', 35), ('finance cost ', 33), (' net of tax ', 31), (' net of tax ', 31), (' interest revenue ', 29), (' interest gains and losses ', 29), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' finance income and costs ', 25), (' Finance income and costs ', 25), (' Impairment loss ', 20), (' expenses ', 16)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' Other income ', 67), (' other income and revenue ', 59), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses ', 49), (' Impairement (expenses)/reversal ', 48), (' finance expenses', 46), (' Profit from discontinued operation ', 45), ('finance cost ', 42), (' finance income and costs ', 42), (' Finance income and costs ', 42), (' Share of profit of equity-accounted investees, net of income tax ', 40), (' share of profit of equity accounted investees ', 39), (' finance income and finance cost ', 36), (' interest gains and losses ', 36), (' Share of gain/(loss) of joint venture ', 36), (' Finance income and finance costs ', 36), (' Impairment loss ', 30), (' expenses ', 29), (' Loss on revaluation of inventories ', 28), (' interest revenue ', 27), (' net of tax ', 21), (' net of tax ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories ', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 9], 'score': 100, 'value': -7214134.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': [nan, '6'], 'line_item_value': [-3607067.0, -3607067.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment  ', ' Investment in joint venture ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Interest on unwinding of discount in provisions ', ' Profit from discontinued operation ', ' net of tax ', ' Net loss on disposal of property ', ' plant and equipment ', ' Net foreign exchange gains/(losses) ', ' Accretion expense ', ' Loss on loan refinancing ', ' Net foreign exchange (loss)/gain ', ' Net PPE disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Net (loss)/profit on disposal of non-current assets ', ' Net other foreign exchange (losses)/gains ', ' Miscellanous income ', ' Commision rebate ', ' Net foreign losses ', ' Derivaties at FVTPL- net change in fair value ', ' Other income - Bank guarantee ', ' Other expense - Net loss on sale or property, plant and equipment ', ' Other expense - Loss on inventory obsolescence ', ' Bank charges'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [(' other ', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' share of jv income ', 55), (' Investment in joint venture ', 53), (' Interest on unwinding of discount in provisions ', 52), (' Other income - Bank guarantee ', 52), ('other revenue ', 50), (' commission revenue ', 50), (' government grants ', 50), (' sundry income ', 50), (' Commision rebate ', 50), (' Net foreign losses ', 50), (' Profit on sale of assets ', 47), (' Miscellanous income ', 47), (' net other foreign exchange (losses)/gains ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Accretion expense ', 46), (' Net other foreign exchange (losses)/gains ', 46), (' other income ', 45), (' Loss on loan refinancing ', 44), (' Arising from inventory of cranes ', 44), (' secondment income (tw recovery) ', 43), (' Power purchase agreement realised gain ', 43), (' net foreign exchange gain ', 42), (' Asset impairment ', 42), (' Other expense - Loss on inventory obsolescence ', 42), (' profit from discontinued operation ', 41), (' net foreign exchange (loss)/gain ', 41), (' Loss on sale of disposal of assets ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Profit from discontinued operation ', 41), (' Net foreign exchange (loss)/gain ', 41), (' Other expense - Net loss on sale or property, plant and equipment ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' net gain / loss on disposal of property plant and equipment  ', 40), (' Arising from inventory of spare parts ', 40), (' Share of gain/(loss) of joint venture ', 39), (' effective portion of changes in fair value of cash flow ', 38), (' net foreign exchange gains/(losses) ', 38), (' paid by customers - at amortised cost ', 38), (' net ppe disposal (loss)/gain ', 38), (' other miscellaneous - net (loss)/gain ', 38), (' quota lease income ', 38), (' Net loss on disposal of property ', 38), (' Net foreign exchange gains/(losses) ', 38), (' Net PPE disposal (loss)/gain ', 38), (' other miscellaneous - net (loss)/gain ', 38), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' net (loss)/profit on disposal of non-current assets ', 36), (' Net (loss)/profit on disposal of non-current assets ', 36), (' Derivaties at FVTPL- net change in fair value ', 35), (' margin charge income ', 33), (' plant and equipment ', 33), (' Bank charges', 30), (' Impairment loss ', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [(' share of jv income ', 64), (' Miscellanous income ', 60), (' Sub-lease rental income ', 59), (' sundry income ', 58), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' quota lease income ', 56), (' other income ', 55), (' secondment income (tw recovery) ', 53), (' margin charge income ', 53), (' Loss on loan refinancing ', 53), (' Net foreign losses ', 50), (' foreign exchange gain ', 47), (' net foreign exchange gain ', 47), (' net foreign exchange gains/(losses) ', 47), (' net foreign exchange (loss)/gain ', 47), (' other miscellaneous - net (loss)/gain ', 47), (' net other foreign exchange (losses)/gains ', 47), (' Interest on unwinding of discount in provisions ', 47), (' Net foreign exchange gains/(losses) ', 47), (' Net foreign exchange (loss)/gain ', 47), (' other miscellaneous - net (loss)/gain ', 47), (' Net other foreign exchange (losses)/gains ', 47), (' Other income - Bank guarantee ', 47), (' government grants ', 42), (' Asset impairment ', 42), (' effective portion of changes in fair value of cash flow ', 41), (' profit from discontinued operation ', 41), (' net (loss)/profit on disposal of non-current assets ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Power purchase agreement unrelaised gain ', 41), (' net gain / loss on disposal of property plant and equipment  ', 41), (' Investment in joint venture ', 41), (' Profit from discontinued operation ', 41), (' Arising from inventory of cranes ', 41), (' Net (loss)/profit on disposal of non-current assets ', 41), (' Derivaties at FVTPL- net change in fair value ', 41), (' Other expense - Net loss on sale or property, plant and equipment ', 41), (' Other expense - Loss on inventory obsolescence ', 41), (' other ', 40), (' japan recoveries ', 40), (' plant and equipment ', 40), (' Bank charges', 40), (' insurance proceeds ', 36), (' Impairment loss ', 36), (' paid by customers - at amortised cost ', 35), (' net ppe disposal (loss)/gain ', 35), (' Loss on sale of disposal of assets ', 35), (' Power purchase agreement realised gain ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Net loss on disposal of property ', 35), (' Net PPE disposal (loss)/gain ', 35), (' Arising from inventory of spare parts ', 35), ('other revenue ', 33), (' Accretion expense ', 31), (' commission revenue ', 29), (' dividend from other parties ', 29), (' Profit on sale of assets ', 29), (' Commision rebate ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [(' Accretion expense ', 77), (' other ', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' Other expense - Loss on inventory obsolescence ', 53), (' net other foreign exchange (losses)/gains ', 51), (' Net other foreign exchange (losses)/gains ', 51), ('other revenue ', 50), (' government grants ', 50), (' quota lease income ', 50), (' Asset impairment ', 50), (' Power purchase agreement realised gain ', 49), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' net foreign exchange (loss)/gain ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Interest on unwinding of discount in provisions ', 48), (' Net foreign exchange (loss)/gain ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Other income - Bank guarantee ', 48), (' Profit on sale of assets ', 47), (' Investment in joint venture ', 47), (' net ppe disposal (loss)/gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Net PPE disposal (loss)/gain ', 46), (' insurance proceeds ', 45), (' other income ', 45), (' effective portion of changes in fair value of cash flow ', 45), (' net foreign exchange gains/(losses) ', 45), (' Net foreign exchange gains/(losses) ', 45), (' Arising from inventory of cranes ', 44), (' Net foreign losses ', 44), (' secondment income (tw recovery) ', 43), (' net foreign exchange gain ', 42), (' Commision rebate ', 42), (' Loss on sale of disposal of assets ', 41), (' Derivaties at FVTPL- net change in fair value ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' Arising from inventory of spare parts ', 40), (' net (loss)/profit on disposal of non-current assets ', 39), (' Remuneration from services linked to newly acquired entities ', 39), (' Share of gain/(loss) of joint venture ', 39), (' Loss on loan refinancing ', 39), (' Net (loss)/profit on disposal of non-current assets ', 39), (' paid by customers - at amortised cost ', 38), (' net gain / loss on disposal of property plant and equipment  ', 38), (' Net loss on disposal of property ', 38), (' profit from discontinued operation ', 37), (' Profit from discontinued operation ', 37), (' commission revenue ', 36), (' share of jv income ', 36), (' japan recoveries ', 36), (' Impairment loss ', 36), (' plant and equipment ', 33), (' Bank charges', 30), (' margin charge income ', 28), (' Miscellanous income ', 27), (' sundry income ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [(' Accretion expense ', 77), (' other ', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' plant and equipment ', 53), (' Other expense - Loss on inventory obsolescence ', 53), (' net foreign exchange (loss)/gain ', 52), (' Net foreign exchange (loss)/gain ', 52), (' net other foreign exchange (losses)/gains ', 51), (' Net other foreign exchange (losses)/gains ', 51), ('other revenue ', 50), (' net foreign exchange gain ', 50), (' Loss on loan refinancing ', 50), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' net foreign exchange gains/(losses) ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Interest on unwinding of discount in provisions ', 48), (' Net foreign exchange gains/(losses) ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Other income - Bank guarantee ', 48), (' Profit on sale of assets ', 47), (' Investment in joint venture ', 47), (' net ppe disposal (loss)/gain ', 46), (' Power purchase agreement realised gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Net PPE disposal (loss)/gain ', 46), (' insurance proceeds ', 45), (' other income ', 45), (' Arising from inventory of cranes ', 44), (' Net foreign losses ', 44), (' secondment income (tw recovery) ', 43), (' japan recoveries ', 43), (' Arising from inventory of spare parts ', 43), (' effective portion of changes in fair value of cash flow ', 42), (' Asset impairment ', 42), (' net gain / loss on disposal of property plant and equipment  ', 42), (' Net loss on disposal of property ', 42), (' Commision rebate ', 42), (' profit from discontinued operation ', 41), (' Loss on sale of disposal of assets ', 41), (' Profit from discontinued operation ', 41), (' Derivaties at FVTPL- net change in fair value ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' Miscellanous income ', 40), (' Bank charges', 40), (' net (loss)/profit on disposal of non-current assets ', 39), (' Remuneration from services linked to newly acquired entities ', 39), (' Share of gain/(loss) of joint venture ', 39), (' Net (loss)/profit on disposal of non-current assets ', 39), (' paid by customers - at amortised cost ', 38), (' quota lease income ', 38), (' commission revenue ', 36), (' share of jv income ', 36), (' Impairment loss ', 36), (' government grants ', 33), (' margin charge income ', 33), (' sundry income ', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [(' net foreign exchange gains/(losses) ', 91), (' net foreign exchange (loss)/gain ', 91), (' Net foreign exchange gains/(losses) ', 91), (' Net foreign exchange (loss)/gain ', 91), (' net foreign exchange gain ', 83), (' foreign exchange gain ', 80), (' net other foreign exchange (losses)/gains ', 77), (' Accretion expense ', 77), (' Net other foreign exchange (losses)/gains ', 77), (' Net foreign losses ', 75), (' other ', 60), (' Bank charges', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' margin charge income ', 56), (' Impairment loss ', 55), (' Investment in joint venture ', 53), (' Other expense - Loss on inventory obsolescence ', 53), (' Interest on unwinding of discount in provisions ', 52), ('other revenue ', 50), (' government grants ', 50), (' Derivaties at FVTPL- net change in fair value ', 50), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' Arising from inventory of cranes ', 48), (' Other income - Bank guarantee ', 48), (' Profit on sale of assets ', 47), (' net ppe disposal (loss)/gain ', 46), (' Power purchase agreement realised gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Net PPE disposal (loss)/gain ', 46), (' insurance proceeds ', 45), (' other income ', 45), (' effective portion of changes in fair value of cash flow ', 45), (' share of jv income ', 45), (' other miscellaneous - net (loss)/gain ', 45), (' other miscellaneous - net (loss)/gain ', 45), (' Loss on loan refinancing ', 44), (' secondment income (tw recovery) ', 43), (' Arising from inventory of spare parts ', 43), (' Asset impairment ', 42), (' Commision rebate ', 42), (' profit from discontinued operation ', 41), (' Loss on sale of disposal of assets ', 41), (' Profit from discontinued operation ', 41), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' plant and equipment ', 40), (' Miscellanous income ', 40), (' net (loss)/profit on disposal of non-current assets ', 39), (' Remuneration from services linked to newly acquired entities ', 39), (' Share of gain/(loss) of joint venture ', 39), (' Net (loss)/profit on disposal of non-current assets ', 39), (' paid by customers - at amortised cost ', 38), (' quota lease income ', 38), (' net gain / loss on disposal of property plant and equipment  ', 38), (' Net loss on disposal of property ', 38), (' commission revenue ', 36), (' japan recoveries ', 36), (' sundry income ', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [(' Accretion expense ', 77), (' other ', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' Net foreign losses ', 56), (' other income ', 55), (' Other expense - Loss on inventory obsolescence ', 53), (' Interest on unwinding of discount in provisions ', 52), ('other revenue ', 50), (' government grants ', 50), (' net foreign exchange gain ', 50), (' sundry income ', 50), (' Loss on loan refinancing ', 50), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' secondment income (tw recovery) ', 48), (' net foreign exchange gains/(losses) ', 48), (' Net foreign exchange gains/(losses) ', 48), (' Other income - Bank guarantee ', 48), (' Profit on sale of assets ', 47), (' Investment in joint venture ', 47), (' paid by customers - at amortised cost ', 46), (' net other foreign exchange (losses)/gains ', 46), (' Power purchase agreement realised gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Net other foreign exchange (losses)/gains ', 46), (' insurance proceeds ', 45), (' effective portion of changes in fair value of cash flow ', 45), (' share of jv income ', 45), (' net foreign exchange (loss)/gain ', 45), (' Sub-lease rental income ', 45), (' Impairment loss ', 45), (' Net foreign exchange (loss)/gain ', 45), (' quota lease income ', 44), (' net (loss)/profit on disposal of non-current assets ', 44), (' Arising from inventory of cranes ', 44), (' Net (loss)/profit on disposal of non-current assets ', 44), (' net ppe disposal (loss)/gain ', 42), (' Asset impairment ', 42), (' Net PPE disposal (loss)/gain ', 42), (' Commision rebate ', 42), (' profit from discontinued operation ', 41), (' other miscellaneous - net (loss)/gain ', 41), (' Loss on sale of disposal of assets ', 41), (' Profit from discontinued operation ', 41), (' other miscellaneous - net (loss)/gain ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' plant and equipment ', 40), (' Arising from inventory of spare parts ', 40), (' Miscellanous income ', 40), (' Bank charges', 40), (' margin charge income ', 39), (' Remuneration from services linked to newly acquired entities ', 39), (' Share of gain/(loss) of joint venture ', 39), (' net gain / loss on disposal of property plant and equipment  ', 38), (' Net loss on disposal of property ', 38), (' Derivaties at FVTPL- net change in fair value ', 38), (' commission revenue ', 36), (' japan recoveries ', 36)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [(' Accretion expense ', 77), (' Impairment loss ', 64), (' other ', 60), (' Profit on sale of assets ', 59), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' Loss on loan refinancing ', 56), (' Net foreign losses ', 56), (' insurance proceeds ', 55), (' Other expense - Loss on inventory obsolescence ', 53), (' secondment income (tw recovery) ', 52), (' net foreign exchange (loss)/gain ', 52), (' Interest on unwinding of discount in provisions ', 52), (' Net foreign exchange (loss)/gain ', 52), ('other revenue ', 50), (' commission revenue ', 50), (' government grants ', 50), (' net foreign exchange gain ', 50), (' paid by customers - at amortised cost ', 50), (' net ppe disposal (loss)/gain ', 50), (' net (loss)/profit on disposal of non-current assets ', 50), (' Net loss on disposal of property ', 50), (' Net PPE disposal (loss)/gain ', 50), (' Net (loss)/profit on disposal of non-current assets ', 50), (' Commision rebate ', 50), (' net other foreign exchange (losses)/gains ', 49), (' Net other foreign exchange (losses)/gains ', 49), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' net foreign exchange gains/(losses) ', 48), (' Net foreign exchange gains/(losses) ', 48), (' Other income - Bank guarantee ', 48), (' Investment in joint venture ', 47), (' Power purchase agreement realised gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' other income ', 45), (' effective portion of changes in fair value of cash flow ', 45), (' share of jv income ', 45), (' other miscellaneous - net (loss)/gain ', 45), (' Sub-lease rental income ', 45), (' other miscellaneous - net (loss)/gain ', 45), (' profit from discontinued operation ', 44), (' quota lease income ', 44), (' Profit from discontinued operation ', 44), (' Arising from inventory of cranes ', 44), (' Derivaties at FVTPL- net change in fair value ', 44), (' japan recoveries ', 43), (' Share of gain/(loss) of joint venture ', 43), (' Arising from inventory of spare parts ', 43), (' sundry income ', 42), (' Asset impairment ', 42), (' net gain / loss on disposal of property plant and equipment  ', 42), (' Loss on sale of disposal of assets ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' plant and equipment ', 40), (' Miscellanous income ', 40), (' Bank charges', 40), (' margin charge income ', 39)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none interestincome using the effective interest rate method , res_fuzz_match = [(' other ', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' share of jv income ', 55), (' Investment in joint venture ', 53), (' Interest on unwinding of discount in provisions ', 52), (' Other income - Bank guarantee ', 52), ('other revenue ', 50), (' commission revenue ', 50), (' government grants ', 50), (' sundry income ', 50), (' Commision rebate ', 50), (' Net foreign losses ', 50), (' Profit on sale of assets ', 47), (' Miscellanous income ', 47), (' net other foreign exchange (losses)/gains ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Accretion expense ', 46), (' Net other foreign exchange (losses)/gains ', 46), (' other income ', 45), (' Loss on loan refinancing ', 44), (' Arising from inventory of cranes ', 44), (' secondment income (tw recovery) ', 43), (' Power purchase agreement realised gain ', 43), (' net foreign exchange gain ', 42), (' Asset impairment ', 42), (' Other expense - Loss on inventory obsolescence ', 42), (' profit from discontinued operation ', 41), (' net foreign exchange (loss)/gain ', 41), (' Loss on sale of disposal of assets ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Profit from discontinued operation ', 41), (' Net foreign exchange (loss)/gain ', 41), (' Other expense - Net loss on sale or property, plant and equipment ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' net gain / loss on disposal of property plant and equipment  ', 40), (' Arising from inventory of spare parts ', 40), (' Share of gain/(loss) of joint venture ', 39), (' effective portion of changes in fair value of cash flow ', 38), (' net foreign exchange gains/(losses) ', 38), (' paid by customers - at amortised cost ', 38), (' net ppe disposal (loss)/gain ', 38), (' other miscellaneous - net (loss)/gain ', 38), (' quota lease income ', 38), (' Net loss on disposal of property ', 38), (' Net foreign exchange gains/(losses) ', 38), (' Net PPE disposal (loss)/gain ', 38), (' other miscellaneous - net (loss)/gain ', 38), (' insurance proceeds ', 36), (' japan recoveries ', 36), (' net (loss)/profit on disposal of non-current assets ', 36), (' Net (loss)/profit on disposal of non-current assets ', 36), (' Derivaties at FVTPL- net change in fair value ', 35), (' margin charge income ', 33), (' plant and equipment ', 33), (' Bank charges', 30), (' Impairment loss ', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none finance income , res_fuzz_match = [(' share of jv income ', 64), (' Miscellanous income ', 60), (' Sub-lease rental income ', 59), (' sundry income ', 58), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' quota lease income ', 56), (' other income ', 55), (' secondment income (tw recovery) ', 53), (' margin charge income ', 53), (' Loss on loan refinancing ', 53), (' Net foreign losses ', 50), (' foreign exchange gain ', 47), (' net foreign exchange gain ', 47), (' net foreign exchange gains/(losses) ', 47), (' net foreign exchange (loss)/gain ', 47), (' other miscellaneous - net (loss)/gain ', 47), (' net other foreign exchange (losses)/gains ', 47), (' Interest on unwinding of discount in provisions ', 47), (' Net foreign exchange gains/(losses) ', 47), (' Net foreign exchange (loss)/gain ', 47), (' other miscellaneous - net (loss)/gain ', 47), (' Net other foreign exchange (losses)/gains ', 47), (' Other income - Bank guarantee ', 47), (' government grants ', 42), (' Asset impairment ', 42), (' effective portion of changes in fair value of cash flow ', 41), (' profit from discontinued operation ', 41), (' net (loss)/profit on disposal of non-current assets ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' Power purchase agreement unrelaised gain ', 41), (' net gain / loss on disposal of property plant and equipment  ', 41), (' Investment in joint venture ', 41), (' Profit from discontinued operation ', 41), (' Arising from inventory of cranes ', 41), (' Net (loss)/profit on disposal of non-current assets ', 41), (' Derivaties at FVTPL- net change in fair value ', 41), (' Other expense - Net loss on sale or property, plant and equipment ', 41), (' Other expense - Loss on inventory obsolescence ', 41), (' other ', 40), (' japan recoveries ', 40), (' plant and equipment ', 40), (' Bank charges', 40), (' insurance proceeds ', 36), (' Impairment loss ', 36), (' paid by customers - at amortised cost ', 35), (' net ppe disposal (loss)/gain ', 35), (' Loss on sale of disposal of assets ', 35), (' Power purchase agreement realised gain ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Net loss on disposal of property ', 35), (' Net PPE disposal (loss)/gain ', 35), (' Arising from inventory of spare parts ', 35), ('other revenue ', 33), (' Accretion expense ', 31), (' commission revenue ', 29), (' dividend from other parties ', 29), (' Profit on sale of assets ', 29), (' Commision rebate ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: lease liabilities , res_fuzz_match = [(' Accretion expense ', 77), (' other ', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' Other expense - Loss on inventory obsolescence ', 53), (' net other foreign exchange (losses)/gains ', 51), (' Net other foreign exchange (losses)/gains ', 51), ('other revenue ', 50), (' government grants ', 50), (' quota lease income ', 50), (' Asset impairment ', 50), (' Power purchase agreement realised gain ', 49), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' net foreign exchange (loss)/gain ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Interest on unwinding of discount in provisions ', 48), (' Net foreign exchange (loss)/gain ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Other income - Bank guarantee ', 48), (' Profit on sale of assets ', 47), (' Investment in joint venture ', 47), (' net ppe disposal (loss)/gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Net PPE disposal (loss)/gain ', 46), (' insurance proceeds ', 45), (' other income ', 45), (' effective portion of changes in fair value of cash flow ', 45), (' net foreign exchange gains/(losses) ', 45), (' Net foreign exchange gains/(losses) ', 45), (' Arising from inventory of cranes ', 44), (' Net foreign losses ', 44), (' secondment income (tw recovery) ', 43), (' net foreign exchange gain ', 42), (' Commision rebate ', 42), (' Loss on sale of disposal of assets ', 41), (' Derivaties at FVTPL- net change in fair value ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' Arising from inventory of spare parts ', 40), (' net (loss)/profit on disposal of non-current assets ', 39), (' Remuneration from services linked to newly acquired entities ', 39), (' Share of gain/(loss) of joint venture ', 39), (' Loss on loan refinancing ', 39), (' Net (loss)/profit on disposal of non-current assets ', 39), (' paid by customers - at amortised cost ', 38), (' net gain / loss on disposal of property plant and equipment  ', 38), (' Net loss on disposal of property ', 38), (' profit from discontinued operation ', 37), (' Profit from discontinued operation ', 37), (' commission revenue ', 36), (' share of jv income ', 36), (' japan recoveries ', 36), (' Impairment loss ', 36), (' plant and equipment ', 33), (' Bank charges', 30), (' margin charge income ', 28), (' Miscellanous income ', 27), (' sundry income ', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: loans and borrowings , res_fuzz_match = [(' Accretion expense ', 77), (' other ', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' plant and equipment ', 53), (' Other expense - Loss on inventory obsolescence ', 53), (' net foreign exchange (loss)/gain ', 52), (' Net foreign exchange (loss)/gain ', 52), (' net other foreign exchange (losses)/gains ', 51), (' Net other foreign exchange (losses)/gains ', 51), ('other revenue ', 50), (' net foreign exchange gain ', 50), (' Loss on loan refinancing ', 50), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' net foreign exchange gains/(losses) ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Interest on unwinding of discount in provisions ', 48), (' Net foreign exchange gains/(losses) ', 48), (' other miscellaneous - net (loss)/gain ', 48), (' Other income - Bank guarantee ', 48), (' Profit on sale of assets ', 47), (' Investment in joint venture ', 47), (' net ppe disposal (loss)/gain ', 46), (' Power purchase agreement realised gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Net PPE disposal (loss)/gain ', 46), (' insurance proceeds ', 45), (' other income ', 45), (' Arising from inventory of cranes ', 44), (' Net foreign losses ', 44), (' secondment income (tw recovery) ', 43), (' japan recoveries ', 43), (' Arising from inventory of spare parts ', 43), (' effective portion of changes in fair value of cash flow ', 42), (' Asset impairment ', 42), (' net gain / loss on disposal of property plant and equipment  ', 42), (' Net loss on disposal of property ', 42), (' Commision rebate ', 42), (' profit from discontinued operation ', 41), (' Loss on sale of disposal of assets ', 41), (' Profit from discontinued operation ', 41), (' Derivaties at FVTPL- net change in fair value ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' Miscellanous income ', 40), (' Bank charges', 40), (' net (loss)/profit on disposal of non-current assets ', 39), (' Remuneration from services linked to newly acquired entities ', 39), (' Share of gain/(loss) of joint venture ', 39), (' Net (loss)/profit on disposal of non-current assets ', 39), (' paid by customers - at amortised cost ', 38), (' quota lease income ', 38), (' commission revenue ', 36), (' share of jv income ', 36), (' Impairment loss ', 36), (' government grants ', 33), (' margin charge income ', 33), (' sundry income ', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net foreign exchange loss , res_fuzz_match = [(' net foreign exchange gains/(losses) ', 91), (' net foreign exchange (loss)/gain ', 91), (' Net foreign exchange gains/(losses) ', 91), (' Net foreign exchange (loss)/gain ', 91), (' net foreign exchange gain ', 83), (' foreign exchange gain ', 80), (' net other foreign exchange (losses)/gains ', 77), (' Accretion expense ', 77), (' Net other foreign exchange (losses)/gains ', 77), (' Net foreign losses ', 75), (' other ', 60), (' Bank charges', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' margin charge income ', 56), (' Impairment loss ', 55), (' Investment in joint venture ', 53), (' Other expense - Loss on inventory obsolescence ', 53), (' Interest on unwinding of discount in provisions ', 52), ('other revenue ', 50), (' government grants ', 50), (' Derivaties at FVTPL- net change in fair value ', 50), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' Arising from inventory of cranes ', 48), (' Other income - Bank guarantee ', 48), (' Profit on sale of assets ', 47), (' net ppe disposal (loss)/gain ', 46), (' Power purchase agreement realised gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Net PPE disposal (loss)/gain ', 46), (' insurance proceeds ', 45), (' other income ', 45), (' effective portion of changes in fair value of cash flow ', 45), (' share of jv income ', 45), (' other miscellaneous - net (loss)/gain ', 45), (' other miscellaneous - net (loss)/gain ', 45), (' Loss on loan refinancing ', 44), (' secondment income (tw recovery) ', 43), (' Arising from inventory of spare parts ', 43), (' Asset impairment ', 42), (' Commision rebate ', 42), (' profit from discontinued operation ', 41), (' Loss on sale of disposal of assets ', 41), (' Profit from discontinued operation ', 41), (' dividend from other parties ', 40), (' Sub-lease rental income ', 40), (' plant and equipment ', 40), (' Miscellanous income ', 40), (' net (loss)/profit on disposal of non-current assets ', 39), (' Remuneration from services linked to newly acquired entities ', 39), (' Share of gain/(loss) of joint venture ', 39), (' Net (loss)/profit on disposal of non-current assets ', 39), (' paid by customers - at amortised cost ', 38), (' quota lease income ', 38), (' net gain / loss on disposal of property plant and equipment  ', 38), (' Net loss on disposal of property ', 38), (' commission revenue ', 36), (' japan recoveries ', 36), (' sundry income ', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: finance costs , res_fuzz_match = [(' Accretion expense ', 77), (' other ', 60), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' Net foreign losses ', 56), (' other income ', 55), (' Other expense - Loss on inventory obsolescence ', 53), (' Interest on unwinding of discount in provisions ', 52), ('other revenue ', 50), (' government grants ', 50), (' net foreign exchange gain ', 50), (' sundry income ', 50), (' Loss on loan refinancing ', 50), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' secondment income (tw recovery) ', 48), (' net foreign exchange gains/(losses) ', 48), (' Net foreign exchange gains/(losses) ', 48), (' Other income - Bank guarantee ', 48), (' Profit on sale of assets ', 47), (' Investment in joint venture ', 47), (' paid by customers - at amortised cost ', 46), (' net other foreign exchange (losses)/gains ', 46), (' Power purchase agreement realised gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' Net other foreign exchange (losses)/gains ', 46), (' insurance proceeds ', 45), (' effective portion of changes in fair value of cash flow ', 45), (' share of jv income ', 45), (' net foreign exchange (loss)/gain ', 45), (' Sub-lease rental income ', 45), (' Impairment loss ', 45), (' Net foreign exchange (loss)/gain ', 45), (' quota lease income ', 44), (' net (loss)/profit on disposal of non-current assets ', 44), (' Arising from inventory of cranes ', 44), (' Net (loss)/profit on disposal of non-current assets ', 44), (' net ppe disposal (loss)/gain ', 42), (' Asset impairment ', 42), (' Net PPE disposal (loss)/gain ', 42), (' Commision rebate ', 42), (' profit from discontinued operation ', 41), (' other miscellaneous - net (loss)/gain ', 41), (' Loss on sale of disposal of assets ', 41), (' Profit from discontinued operation ', 41), (' other miscellaneous - net (loss)/gain ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' plant and equipment ', 40), (' Arising from inventory of spare parts ', 40), (' Miscellanous income ', 40), (' Bank charges', 40), (' margin charge income ', 39), (' Remuneration from services linked to newly acquired entities ', 39), (' Share of gain/(loss) of joint venture ', 39), (' net gain / loss on disposal of property plant and equipment  ', 38), (' Net loss on disposal of property ', 38), (' Derivaties at FVTPL- net change in fair value ', 38), (' commission revenue ', 36), (' japan recoveries ', 36)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = interest expense using the effective interest rate method on: net finance costs recognised in profit or loss , res_fuzz_match = [(' Accretion expense ', 77), (' Impairment loss ', 64), (' other ', 60), (' Profit on sale of assets ', 59), (' net of tax ', 57), (' net of tax ', 57), (' net of tax ', 57), (' Loss on loan refinancing ', 56), (' Net foreign losses ', 56), (' insurance proceeds ', 55), (' Other expense - Loss on inventory obsolescence ', 53), (' secondment income (tw recovery) ', 52), (' net foreign exchange (loss)/gain ', 52), (' Interest on unwinding of discount in provisions ', 52), (' Net foreign exchange (loss)/gain ', 52), ('other revenue ', 50), (' commission revenue ', 50), (' government grants ', 50), (' net foreign exchange gain ', 50), (' paid by customers - at amortised cost ', 50), (' net ppe disposal (loss)/gain ', 50), (' net (loss)/profit on disposal of non-current assets ', 50), (' Net loss on disposal of property ', 50), (' Net PPE disposal (loss)/gain ', 50), (' Net (loss)/profit on disposal of non-current assets ', 50), (' Commision rebate ', 50), (' net other foreign exchange (losses)/gains ', 49), (' Net other foreign exchange (losses)/gains ', 49), (' Other expense - Net loss on sale or property, plant and equipment ', 49), (' net foreign exchange gains/(losses) ', 48), (' Net foreign exchange gains/(losses) ', 48), (' Other income - Bank guarantee ', 48), (' Investment in joint venture ', 47), (' Power purchase agreement realised gain ', 46), (' Power purchase agreement unrelaised gain ', 46), (' other income ', 45), (' effective portion of changes in fair value of cash flow ', 45), (' share of jv income ', 45), (' other miscellaneous - net (loss)/gain ', 45), (' Sub-lease rental income ', 45), (' other miscellaneous - net (loss)/gain ', 45), (' profit from discontinued operation ', 44), (' quota lease income ', 44), (' Profit from discontinued operation ', 44), (' Arising from inventory of cranes ', 44), (' Derivaties at FVTPL- net change in fair value ', 44), (' japan recoveries ', 43), (' Share of gain/(loss) of joint venture ', 43), (' Arising from inventory of spare parts ', 43), (' sundry income ', 42), (' Asset impairment ', 42), (' net gain / loss on disposal of property plant and equipment  ', 42), (' Loss on sale of disposal of assets ', 41), (' Remuneration from services linked to newly acquired entities ', 41), (' foreign exchange gain ', 40), (' dividend from other parties ', 40), (' plant and equipment ', 40), (' Miscellanous income ', 40), (' Bank charges', 40), (' margin charge income ', 39)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue ', 0), (' commission revenue ', 0), (' government grants ', 0), (' insurance proceeds ', 0), (' foreign exchange gain ', 0), (' other ', 0), (' dividend from other parties ', 0), (' other income ', 0), (' net foreign exchange gain ', 0), (' effective portion of changes in fair value of cash flow ', 0), (' profit from discontinued operation ', 0), (' net of tax ', 0), (' share of jv income ', 0), (' secondment income (tw recovery) ', 0), (' japan recoveries ', 0), (' margin charge income ', 0), (' net foreign exchange gains/(losses) ', 0), (' paid by customers - at amortised cost ', 0), (' net foreign exchange (loss)/gain ', 0), (' net ppe disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' quota lease income ', 0), (' sundry income ', 0), (' net (loss)/profit on disposal of non-current assets ', 0), (' net other foreign exchange (losses)/gains ', 0), (' Sub-lease rental income ', 0), (' Profit on sale of assets ', 0), (' Asset impairment ', 0), (' Loss on sale of disposal of assets ', 0), (' Remuneration from services linked to newly acquired entities ', 0), (' Power purchase agreement realised gain ', 0), (' Power purchase agreement unrelaised gain ', 0), (' net gain / loss on disposal of property plant and equipment  ', 0), (' Investment in joint venture ', 0), (' Share of gain/(loss) of joint venture ', 0), (' net of tax ', 0), (' Impairment loss ', 0), (' Interest on unwinding of discount in provisions ', 0), (' Profit from discontinued operation ', 0), (' net of tax ', 0), (' Net loss on disposal of property ', 0), (' plant and equipment ', 0), (' Net foreign exchange gains/(losses) ', 0), (' Accretion expense ', 0), (' Loss on loan refinancing ', 0), (' Net foreign exchange (loss)/gain ', 0), (' Net PPE disposal (loss)/gain ', 0), (' other miscellaneous - net (loss)/gain ', 0), (' Arising from inventory of cranes ', 0), (' Arising from inventory of spare parts ', 0), (' Net (loss)/profit on disposal of non-current assets ', 0), (' Net other foreign exchange (losses)/gains ', 0), (' Miscellanous income ', 0), (' Commision rebate ', 0), (' Net foreign losses ', 0), (' Derivaties at FVTPL- net change in fair value ', 0), (' Other income - Bank guarantee ', 0), (' Other expense - Net loss on sale or property, plant and equipment ', 0), (' Other expense - Loss on inventory obsolescence ', 0), (' Bank charges', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 11], 'score': [91, 91], 'value': [26.0, 0.0], 'label': ['Interest expense using the effective interest rate method on: Net foreign exchange loss', 'Interest expense using the effective interest rate method on: Net foreign exchange loss'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:20+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('provision for taxation previous year', 45), ('deferred tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('earlier year', 35), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('current tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': -5563601.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7'], 'line_item_value': [-5563601.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('provision for taxation previous year', 45), ('deferred tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('earlier year', 35), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('current tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': -8441055.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7'], 'line_item_value': [-8441055.0]}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 49), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' total income tax expense / (benefit)', 33), ('income tax expense', 31), (' income tax expense on continuing operations', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 45), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' income tax expense on continuing operations', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss balance at 1 april 2022 balance at 1 april 2022 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 49), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' total income tax expense / (benefit)', 33), ('income tax expense', 31), (' income tax expense on continuing operations', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 45), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' income tax expense on continuing operations', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss recognised in profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 49), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' total income tax expense / (benefit)', 33), ('income tax expense', 31), (' income tax expense on continuing operations', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 45), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' income tax expense on continuing operations', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss recognised in profit or loss net , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 49), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' total income tax expense / (benefit)', 33), ('income tax expense', 31), (' income tax expense on continuing operations', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 45), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' income tax expense on continuing operations', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none prepayments , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 49), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' total income tax expense / (benefit)', 33), ('income tax expense', 31), (' income tax expense on continuing operations', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 45), (' total tax (expense)/benefit in income statement', 45), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' income tax expense on continuing operations', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = recognised in profit or loss deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none profit before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), ('income tax expense', 56), (' total tax (expense)/benefit in income statement', 56), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 44), (' income tax expense on continuing operations', 37)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax using company's domestic tax rate 30% (2022: 30%) , res_fuzz_match = [(' income tax expense on continuing operations', 55), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 50), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 43)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses , res_fuzz_match = [('income tax expense', 62), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' income tax expense on continuing operations', 52), (' total tax (expense)/benefit in income statement', 48), (' deferred income tax', 40), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none origination and reversal of temporary differences , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none changes in estimates related to prior years , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' current income tax', 47), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense / (benefit)', 37)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none income tax expense , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 86), (' total income tax expense / (benefit)', 86), (' income tax expense on continuing operations', 76), (' deferred income tax', 73), (' total tax (expense)/benefit in income statement', 67), (' current income tax', 65)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none profit before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), ('income tax expense', 56), (' total tax (expense)/benefit in income statement', 56), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 44), (' income tax expense on continuing operations', 37)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax using company's domestic tax rate 30% (2022: 30%) , res_fuzz_match = [(' income tax expense on continuing operations', 55), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 50), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 43)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses , res_fuzz_match = [('income tax expense', 62), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' income tax expense on continuing operations', 52), (' total tax (expense)/benefit in income statement', 48), (' deferred income tax', 40), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none origination and reversal of temporary differences , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none changes in estimates related to prior years , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' current income tax', 47), (' income tax expense on continuing operations', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense / (benefit)', 37)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none income tax expense , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 86), (' total income tax expense / (benefit)', 86), (' income tax expense on continuing operations', 76), (' deferred income tax', 73), (' total tax (expense)/benefit in income statement', 67), (' current income tax', 65)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5, 6, 11], 'score': [87, 100, 87, 100], 'value': [21738319.0, 8441055.0, 16873606.0, 5563601.0], 'label': ['None Profit before income tax', 'None Income tax expense', 'None Profit before income tax', 'None Income tax expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none provisions 5963695 244625 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 47), ('income tax expense', 44), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment (809,097) 116103 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 47), ('income tax expense', 44), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none prepayments (250,215) nan , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), ('income tax expense', 40), (' income tax expense on continuing operations', 40), (' total income tax expense / (benefit)', 40), (' current income tax', 33), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 47), ('income tax expense', 44), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward 33377 nan , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total tax (expense)/benefit in income statement', 39), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 47), ('income tax expense', 44), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off 4937760 360728 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 47), ('income tax expense', 44), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax nan nan , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), ('income tax expense', 44), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 47), ('income tax expense', 44), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 53), (' total tax (expense)/benefit in income statement', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' income tax expense on continuing operations', 47), ('income tax expense', 44), (' current income tax', 35)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none provisions 5963695 244625 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment (809,097) 116103 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none prepayments (250,215) nan , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), ('income tax expense', 40), (' income tax expense on continuing operations', 40), (' total income tax expense / (benefit)', 40), (' current income tax', 33), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward 33377 nan , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total tax (expense)/benefit in income statement', 39), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off 4937760 360728 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax nan nan , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), ('income tax expense', 44), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax assets deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none provisions 5963695 244625 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment (809,097) 116103 , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none prepayments (250,215) nan , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), ('income tax expense', 40), (' income tax expense on continuing operations', 40), (' total income tax expense / (benefit)', 40), (' current income tax', 33), (' deferred income tax', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = none tax losses carried forward 33377 nan , res_fuzz_match = [('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' current income tax', 41), (' total tax (expense)/benefit in income statement', 39), (' total income tax expense / (benefit)', 37), (' deferred income tax', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off 4937760 360728 , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 41), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 34), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before set-off of tax nan nan , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 47), ('income tax expense', 44), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = tax assets (liabilities) before net tax assets nan nan , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax liabilities deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = current tax expense current year , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 66), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 61), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense / (benefit)', 53), (' deferred income tax', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = current tax expense adjustment for prior years , res_fuzz_match = [('income tax expense', 75), (' current income tax', 65), (' income tax expense on continuing operations', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 49), (' deferred income tax', 47)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = current tax expense total , res_fuzz_match = [('income tax expense', 75), (' current income tax', 65), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 58), (' total tax (expense)/benefit in income statement', 58), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' deferred income tax', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) origination and reversal of temporary differences , res_fuzz_match = [('income tax expense', 69), (' total tax (expense)/benefit in income statement', 68), (' total income tax expense / (benefit)', 63), (' deferred income tax', 60), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' current income tax', 47)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) total , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 77), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 70), ('income tax expense', 69), (' total income tax expense / (benefit)', 63), (' deferred income tax', 60), (' income tax expense on continuing operations', 55), (' current income tax', 41)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) total income tax expense , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 85), (' total tax (expense)/benefit in income statement', 75), (' deferred income tax', 67), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), (' income tax expense on continuing operations', 55)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = current tax expense current year , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 66), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 61), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense / (benefit)', 53), (' deferred income tax', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = current tax expense adjustment for prior years , res_fuzz_match = [('income tax expense', 75), (' current income tax', 65), (' income tax expense on continuing operations', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 49), (' deferred income tax', 47)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = current tax expense total , res_fuzz_match = [('income tax expense', 75), (' current income tax', 65), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 58), (' total tax (expense)/benefit in income statement', 58), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' deferred income tax', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) origination and reversal of temporary differences , res_fuzz_match = [('income tax expense', 69), (' total tax (expense)/benefit in income statement', 68), (' total income tax expense / (benefit)', 63), (' deferred income tax', 60), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' current income tax', 47)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) total , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 77), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 70), ('income tax expense', 69), (' total income tax expense / (benefit)', 63), (' deferred income tax', 60), (' income tax expense on continuing operations', 55), (' current income tax', 41)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows = deferred tax expense/(benefit) total income tax expense , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 85), (' total tax (expense)/benefit in income statement', 75), (' deferred income tax', 67), (' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57), (' income tax expense on continuing operations', 55)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 11], 'score': [100, 100], 'value': [8441055.0, 5563601.0], 'label': ['Deferred tax expense/(benefit) Total income tax expense', 'Deferred tax expense/(benefit) Total income tax expense'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 17:55:20+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' prior period ', 61), ('exceptional ', 35), (' Actuarial gains / (losses) on retirement benefit obligation', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' prior period ', 47), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 16)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [(' prior period ', 61), ('exceptional ', 35), (' Actuarial gains / (losses) on retirement benefit obligation', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' prior period ', 47), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 29)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 16)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 17:55:20+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 17:55:20+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 17:55:20+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 17:55:20+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = operating profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 17:55:20+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

2023-05-02 13:47:52+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-05-02 13:47:52+0530 - sLogger - DEBUG - {'fileid': '05c7dfbb-43da-4a34-96de-12fd5d085187', 'filename': '20 MAA -  Financial Report  (Signed).pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/20 MAA -  Financial Report  (Signed).pdf'}
2023-05-02 13:47:52+0530 - sLogger - DEBUG - save file completed
2023-05-02 13:47:52+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-05-02 13:47:52+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-05-02 13:47:52+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-05-02 13:47:52+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-05-02 13:47:52+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-05-02 13:47:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:47:52+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:47:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:47:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:47:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:47:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:47:54+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:47:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:47:54+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:47:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:47:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:47:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:47:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:47:56+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:47:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:47:56+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:02+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:02+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:09+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:09+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:11+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:12+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:15+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:19+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:19+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:27+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:27+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:30+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:30+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:37+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:37+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:44+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:48:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:48:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:48:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:48:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:48:52+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:48:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:48:52+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:49:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:49:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:49:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:49:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:49:01+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:49:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:49:01+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:49:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:49:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:49:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:49:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:49:09+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:49:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:49:09+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:49:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:49:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:49:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:49:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:49:17+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:49:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:49:17+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:49:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:49:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:49:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:49:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:49:26+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:49:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:49:26+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:49:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:49:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:49:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:49:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:49:35+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:49:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:49:35+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:49:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:49:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:49:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:49:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:49:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:49:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:49:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:49:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:49:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:49:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:49:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:49:53+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:49:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:49:53+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:02+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:02+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:09+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:09+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:09+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:09+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:18+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:18+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:22+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:22+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:22+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:22+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:22+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:31+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:31+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:38+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:38+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:41+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:41+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:45+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:45+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:50+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:50+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:53+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:53+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:50:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:50:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:50:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:50:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:50:57+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:50:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:50:57+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:02+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:02+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:06+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:06+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:11+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:11+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:15+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:19+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:19+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:24+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:24+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:30+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:30+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:33+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:33+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:40+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:40+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:49+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-02 13:51:49+0530 - sLogger - DEBUG - filetype: pdf
2023-05-02 13:51:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-02 13:51:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-02 13:51:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-02 13:51:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-02 13:51:52+0530 - sLogger - DEBUG - function: predict completed.
2023-05-02 13:51:52+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-05-02 13:51:52+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [7], 'predicted_cpl_pages': [6], 'predicted_ccf_pages': [9], 'filtered_cbs_pages': [7], 'filtered_cpl_pages': [6], 'filtered_ccf_pages': [9], 'month': 'december'}
2023-05-02 13:51:52+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-05-02 13:51:52+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-05-02 13:51:52+0530 - sLogger - DEBUG - process file completed
2023-05-02 13:51:52+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-05-02 13:51:52+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-05-02 13:51:52+0530 - sLogger - DEBUG - TE process file started
2023-05-02 13:56:49+0530 - sLogger - DEBUG - TE Proces file completed
2023-05-02 13:56:49+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-02 13:56:49+0530 - sLogger - DEBUG - process_main_pages started
2023-05-02 13:56:49+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-02 13:56:49+0530 - sLogger - DEBUG - start_refactoring started
2023-05-02 13:56:49+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-02 13:56:49+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-02 13:56:49+0530 - sLogger - DEBUG - start_refactoring started
2023-05-02 13:56:49+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-02 13:56:49+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-02 13:56:49+0530 - sLogger - DEBUG - start_refactoring started
2023-05-02 13:56:49+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-02 13:56:49+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-02 13:56:49+0530 - sLogger - DEBUG - set_section_details started
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equity liabilities', 35), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Financial assets | [('noncurrent assets', 69), ('assets', 56), ('current assets', 54), ('equity and liabilities', 47), ('equity liabilities', 46), ('current liabilities', 44), ('noncurrent liabilities', 37), ('liabilities', 32), ('equity', 32)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current assets | score 57
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent assets | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent liabilities | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current assets | score 59
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current liabilities | score 41
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity and liabilities | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Income tax receivable from related parties | [('current assets', 30), ('current liabilities', 30), ('equity and liabilities', 28), ('noncurrent liabilities', 26), ('equity liabilities', 26), ('noncurrent assets', 22), ('liabilities', 21), ('assets', 16), ('equity', 15)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD current assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD current liabilities | score 48
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD noncurrent assets | score 37
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD noncurrent liabilities | score 41
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD non current assets | score 45
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD non current liabilities | score 43
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD equity and liabilities | score 40
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Other current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 48), ('assets', 42), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current assets | score 95
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current liabilities | score 56
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent assets | score 81
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current assets | score 84
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current liabilities | score 60
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity and liabilities | score 33
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Investment in joint ventures | [('noncurrent assets', 44), ('current assets', 38), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('assets', 25), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('liabilities', 16)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD current assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD noncurrent assets | score 45
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD noncurrent liabilities | score 40
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD non current assets | score 45
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD non current liabilities | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD equity and liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Financial assets | [('noncurrent assets', 69), ('assets', 56), ('current assets', 54), ('equity and liabilities', 47), ('equity liabilities', 46), ('current liabilities', 44), ('noncurrent liabilities', 37), ('liabilities', 32), ('equity', 32)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current assets | score 57
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent assets | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent liabilities | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current assets | score 59
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current liabilities | score 41
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity and liabilities | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Other noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 30), ('equity', 24), ('equity and liabilities', 22), ('equity liabilities', 19), ('liabilities', 8)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current assets | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current assets | score 83
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Financial liabilities | [('equity liabilities', 67), ('equity and liabilities', 65), ('liabilities', 60), ('current liabilities', 57), ('noncurrent liabilities', 43), ('noncurrent assets', 22), ('equity', 20), ('current assets', 15), ('assets', 11)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD current assets | score 29
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD current liabilities | score 69
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD noncurrent assets | score 37
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD noncurrent liabilities | score 70
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD non current assets | score 36
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD non current liabilities | score 68
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD equity and liabilities | score 70
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('current assets', 21), ('assets', 19), ('noncurrent assets', 14)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Contributed equity | [('equity', 55), ('equity and liabilities', 48), ('equity liabilities', 41), ('current liabilities', 40), ('current assets', 28), ('liabilities', 27), ('noncurrent liabilities', 27), ('noncurrent assets', 21), ('assets', 19)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current assets | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent assets | score 40
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent liabilities | score 35
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current assets | score 39
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current liabilities | score 37
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity and liabilities | score 57
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Accumulated losses | [('assets', 35), ('current liabilities', 31), ('noncurrent liabilities', 31), ('equity and liabilities', 28), ('current assets', 24), ('noncurrent assets', 24), ('equity liabilities', 24), ('liabilities', 22), ('equity', 11)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD current assets | score 50
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD noncurrent assets | score 46
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD noncurrent liabilities | score 35
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD non current assets | score 44
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD non current liabilities | score 37
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD equity and liabilities | score 35
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD equity | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Reserves | [('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-05-02 13:56:49+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-05-02 13:56:49+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-05-02 13:56:49+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-02 13:56:49+0530 - sLogger - DEBUG - set_section_details started
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating activities | working capital adjustments
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from government grants | operating profit before working capital changes
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts of income tax (from related party) | operating profit before working capital changes
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | operating cash flow before working capital changes
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing activities | movements in working capital
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | adjustments for increase decrease in operating liabilities
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing activities | changes in working capital
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayments of principal portion lease liabilities | operating profit before changes in assets and liabilities
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from bank borrowings | operating profit before working capital changes
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayments of bank borrowings | operating profit before working capital changes
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease )increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at beginning of the year | changes in operating assets and liabilities
2023-05-02 13:56:49+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 December | changes in operating assets and liabilities
2023-05-02 13:56:52+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('cash and bank balances', 36), ('cash and cash equivalents', 35), (' cash and cash equivalents', 35), ('bank balances other than cash and cash equivalents', 28), ('other bank balances', 27), ('bank balances other than above', 25), ('cash and short term deposits', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('bank balances other than above', 40), ('bank balances other than cash and cash equivalents', 39), ('cash and short term deposits', 37), ('cash and cash equivalents', 33), (' cash and cash equivalents', 33), ('cash and bank balances', 30), ('other bank balances', 28)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 28259.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [28259.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('cash and bank balances', 36), ('cash and cash equivalents', 35), (' cash and cash equivalents', 35), ('bank balances other than cash and cash equivalents', 28), ('other bank balances', 27), ('bank balances other than above', 25), ('cash and short term deposits', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('bank balances other than above', 40), ('bank balances other than cash and cash equivalents', 39), ('cash and short term deposits', 37), ('cash and cash equivalents', 33), (' cash and cash equivalents', 33), ('cash and bank balances', 30), ('other bank balances', 28)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 19589.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [19589.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cash at bank and on hand , res_fuzz_match = [(' cash at bank', 100), (' cash at bank and on hand', 100), ('cash on hand', 78), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 78), (' cash on hand and at bank', 78), (' cash and cash equivalents', 56), (' short term deposits', 28)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cash at bank and on hand , res_fuzz_match = [(' cash at bank', 100), (' cash at bank and on hand', 100), ('cash on hand', 78), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 78), (' cash on hand and at bank', 78), (' cash and cash equivalents', 56), (' short term deposits', 28)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [19589.0, 28259.0], 'label': [' Cash at bank and on hand', ' Cash at bank and on hand'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('inventories', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('inventories', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 26953.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [26953.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('inventories', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('inventories', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 27198.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [27198.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = raw materials , res_fuzz_match = [('raw materials', 100), (' raw materials', 100), (' stores and other consumables at cost', 50), (' cranes - in transit', 50), (' goods in transit', 40), (' provision for inventory obsolescence', 40), (' cranes', 40), (' spare parts', 40), (' inventories', 33), (' work in progress', 30), (' finished goods at cost', 20), (' finished goods', 10), (' finished goods', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' stores and other consumables at cost', 36), (' provision for inventory obsolescence', 36), (' inventories', 33), (' goods in transit', 27), (' spare parts', 20), (' work in progress', 18), (' cranes - in transit', 18), ('raw materials', 10), (' raw materials', 10), (' cranes', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = raw materials , res_fuzz_match = [('raw materials', 100), (' raw materials', 100), (' stores and other consumables at cost', 50), (' cranes - in transit', 50), (' goods in transit', 40), (' provision for inventory obsolescence', 40), (' cranes', 40), (' spare parts', 40), (' inventories', 33), (' work in progress', 30), (' finished goods at cost', 20), (' finished goods', 10), (' finished goods', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' stores and other consumables at cost', 36), (' provision for inventory obsolescence', 36), (' inventories', 33), (' goods in transit', 27), (' spare parts', 20), (' work in progress', 18), (' cranes - in transit', 18), ('raw materials', 10), (' raw materials', 10), (' cranes', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [18547.0, 8651.0, 19816.0, 7137.0], 'label': [' Raw materials', ' Finished goods', ' Raw materials', ' Finished goods'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('other financial assets', 81), ('other current financial assets', 65), ('other assets', 50), ('other current assets', 44), ('prepayments', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('other current assets', 35), ('other financial assets', 31), ('other current financial assets', 30), ('other assets', 23), ('prepayments', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 7], 'score': 100, 'value': 30081.0, 'line_item_label': ['Current assets', 'Financial assets', 'Other current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 29753.0, 328.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('other financial assets', 81), ('other current financial assets', 65), ('other assets', 50), ('other current assets', 44), ('prepayments', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('other current assets', 35), ('other financial assets', 31), ('other current financial assets', 30), ('other assets', 23), ('prepayments', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 7], 'score': 100, 'value': 489.0, 'line_item_label': ['Current assets', 'Financial assets', 'Other current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 0.0, 489.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('prepaid expense', 50), ('prepaid expenditure', 50), ('other prepayments', 42), ('prepayments', 33), ('prepaid', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepaid expenditure', 39), ('prepaid expense', 36), ('prepayments', 33), ('prepaid', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('prepaid expenditure', 43), ('other prepayments', 43), ('prepayments', 33), ('prepaid expense', 29), ('prepaid', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('current', 71), ('other prepayments', 42), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('prepaid', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('prepaid expense', 50), ('prepaid expenditure', 50), ('other prepayments', 42), ('prepayments', 33), ('prepaid', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepaid expenditure', 39), ('prepaid expense', 36), ('prepayments', 33), ('prepaid', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('prepaid expenditure', 43), ('other prepayments', 43), ('prepayments', 33), ('prepaid expense', 29), ('prepaid', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('current', 71), ('other prepayments', 42), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('prepaid', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6], 'score': [100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 51.0, 29702.0, 29753.0], 'label': ['Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' other financial assets', 81), (' biological assets', 56), ('other assets', 50), ('other current assets', 44), (' other current assets', 44), (' trade and other receivables', 29), (' income tax receivable from related parties', 26), (' deferred operating expenditure', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [(' income tax receivable from related parties', 100), (' trade and other receivables', 47), ('other current assets', 35), (' other current assets', 35), (' other financial assets', 31), (' deferred operating expenditure', 30), (' financial assets', 26), ('other assets', 23), (' biological assets', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' deferred operating expenditure', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 35)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6, 7], 'score': 100, 'value': 49610.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Financial assets', 'Income tax receivable from related parties', 'Other current assets'], 'note_numbers': [nan, '7', '9', '20', '10'], 'line_item_value': [0.0, 11999.0, 29753.0, 7530.0, 328.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' other financial assets', 81), (' biological assets', 56), ('other assets', 50), ('other current assets', 44), (' other current assets', 44), (' trade and other receivables', 29), (' income tax receivable from related parties', 26), (' deferred operating expenditure', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [(' income tax receivable from related parties', 100), (' trade and other receivables', 47), ('other current assets', 35), (' other current assets', 35), (' other financial assets', 31), (' deferred operating expenditure', 30), (' financial assets', 26), ('other assets', 23), (' biological assets', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' deferred operating expenditure', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 35)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6, 7], 'score': 100, 'value': 20431.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Financial assets', 'Income tax receivable from related parties', 'Other current assets'], 'note_numbers': [nan, '7', '9', '20', '10'], 'line_item_value': [0.0, 13624.0, 0.0, 6318.0, 489.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other deposits receivable - related party', 90), (' interest receivable', 90), (' income tax receivable from related parties', 80), (' amount receivable from controlling entity', 80), (' related party receivable', 80), (' long service leave receivable', 70), (' other receivables - related party', 70), ('foreign exchange derivatives at fair value', 50), (' electricity derivatives at fair value', 50), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' share of jv prepayments', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' accrued rebates', 32), (' other debtors and prepayments', 32), ('other assets', 30), (' accrued interest', 30), (' bank guarantee', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 20), (' lng', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivable', 100), (' related party disclosures', 67), (' interest receivable', 67), (' other', 60), (' other deposits receivable - related party', 57), (' amount receivable from controlling entity', 52), (' long service leave receivable', 50), (' income tax receivable from related parties', 48), (' other receivables - related party', 48), (' bank guarantee', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 39), (' forward exchange contracts', 39), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' derivative contracts - fair value', 35), (' other debtors and prepayments', 35), (' lng', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other deposits receivable - related party', 90), (' interest receivable', 90), (' income tax receivable from related parties', 80), (' amount receivable from controlling entity', 80), (' related party receivable', 80), (' long service leave receivable', 70), (' other receivables - related party', 70), ('foreign exchange derivatives at fair value', 50), (' electricity derivatives at fair value', 50), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' share of jv prepayments', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' accrued rebates', 32), (' other debtors and prepayments', 32), ('other assets', 30), (' accrued interest', 30), (' bank guarantee', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 20), (' lng', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivable', 100), (' related party disclosures', 67), (' interest receivable', 67), (' other', 60), (' other deposits receivable - related party', 57), (' amount receivable from controlling entity', 52), (' long service leave receivable', 50), (' income tax receivable from related parties', 48), (' other receivables - related party', 48), (' bank guarantee', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 39), (' forward exchange contracts', 39), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' derivative contracts - fair value', 35), (' other debtors and prepayments', 35), (' lng', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [90, 100, 90, 100], 'value': [1697.0, 11927.0, 1390.0, 10609.0], 'label': [' GST receivable', ' Related party receivables (Note 20)', ' GST receivable', ' Related party receivables (Note 20)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('foreign exchange derivatives at fair value', 100), (' electricity derivatives at fair value', 77), (' foreign exchange forward contracts', 67), (' current investments', 64), (' derivative contracts - fair value', 62), (' forward exchange contracts', 58), (' rental bond', 55), (' related party receivable', 50), (' interest receivable', 47), (' other receivables - related party', 46), (' accrued rebates', 45), (' other deposits receivable - related party', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' condensate', 43), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' other', 40), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' bank guarantee', 38), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), (' electricity derivatives at fair value', 100), ('foreign exchange derivatives at fair value', 73), (' current investments', 71), (' derivative contracts - fair value', 62), (' interest receivable', 60), (' accrued interest', 50), (' related party receivable', 50), (' other debtors and prepayments', 48), (' amount receivable from controlling entity', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 38), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('current', 71), ('foreign exchange derivatives at fair value', 70), (' derivative contracts - fair value', 62), (' current investments', 57), (' related party receivable', 50), (' related party disclosures', 48), (' interest receivable', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' accrued interest', 43), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' amount receivable from controlling entity', 43), (' other debtors and prepayments', 43), (' other', 40), (' forward exchange contracts', 38), (' foreign exchange forward contracts', 37), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), (' condensate', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('foreign exchange derivatives at fair value', 100), (' electricity derivatives at fair value', 77), (' foreign exchange forward contracts', 67), (' current investments', 64), (' derivative contracts - fair value', 62), (' forward exchange contracts', 58), (' rental bond', 55), (' related party receivable', 50), (' interest receivable', 47), (' other receivables - related party', 46), (' accrued rebates', 45), (' other deposits receivable - related party', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' condensate', 43), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' other', 40), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' bank guarantee', 38), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), (' electricity derivatives at fair value', 100), ('foreign exchange derivatives at fair value', 73), (' current investments', 71), (' derivative contracts - fair value', 62), (' interest receivable', 60), (' accrued interest', 50), (' related party receivable', 50), (' other debtors and prepayments', 48), (' amount receivable from controlling entity', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 38), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('current', 71), ('foreign exchange derivatives at fair value', 70), (' derivative contracts - fair value', 62), (' current investments', 57), (' related party receivable', 50), (' related party disclosures', 48), (' interest receivable', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' accrued interest', 43), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' amount receivable from controlling entity', 43), (' other debtors and prepayments', 43), (' other', 40), (' forward exchange contracts', 38), (' foreign exchange forward contracts', 37), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), (' condensate', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 0.0, 51.0, 29702.0, 29753.0, 12453.0], 'label': ['Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Non-current Electricity derivatives at fair value', 'Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Non-current Electricity derivatives at fair value'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('current assets', 54)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('current assets', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': 81, 'value': 328.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 328.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('current assets', 54)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('current assets', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': 81, 'value': 489.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 489.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 3731.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [3731.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 17531.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [17531.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [90235.0, 57.0, 351.0, -154.0, 90489.0, 312388.0, 827.0, 4618.0, -1182.0, 316651.0, 1628.0, 0.0, 20598.0, 0.0, 22226.0, 795.0, 0.0, 0.0, 0.0, 795.0, 405046.0, 884.0, 25567.0, -1336.0, 430161.0], 'label': ['Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 12, 13, 14, 15, 16, 24, 25, 26, 27, 28, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100], 'value': [90430.0, 376.0, -149.0, 74.0, 90731.0, 314181.0, 5232.0, -1122.0, -74.0, 318217.0, 1628.0, 34643.0, 0.0, 0.0, 36271.0, 2538.0, 2538.0, 0.0, 0.0, -65.0, -65.0, 0.0, 0.0, 2473.0, 2473.0, 795.0, 0.0, 0.0, 0.0, 795.0, 1678.0, 0.0, 408777.0, 40251.0, -1336.0, 0.0, 447692.0], 'label': ['Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Construction in progress $000', 'Cost Additions', 'Construction in progress $000', 'Cost Disposals', 'Construction in progress $000', 'Cost Transfer', 'Construction in progress $000', 'Cost At 31 December 2020', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 3731.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [3731.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 17531.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [17531.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('righttouse', 33), ('capital work in progress', 32), ('tangible', 29), ('work in progress', 23), ('rightofuse', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('tangible', 43), ('capital work-in-progress', 31), ('capital workinprogress', 31), ('capital work in progress', 23), ('work in progress', 23), ('rightofuse', 22), ('righttouse', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1476.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['13'], 'line_item_value': [1476.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('righttouse', 33), ('capital work in progress', 32), ('tangible', 29), ('work in progress', 23), ('rightofuse', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('tangible', 43), ('capital work-in-progress', 31), ('capital workinprogress', 31), ('capital work in progress', 23), ('work in progress', 23), ('rightofuse', 22), ('righttouse', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1007.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['13'], 'line_item_value': [1007.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('tangible assets', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('tangible assets', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('tangible assets', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('tangible assets', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 47), ('intangible under development', 42)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('intangible assets under development', 77), ('intangible', 67), ('intangible under development', 46)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 47), ('intangible under development', 42)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('intangible assets under development', 77), ('intangible', 67), ('intangible under development', 46)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('donations', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('donations', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('donations', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('donations', 22)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 69), (' investments accounted for using the equity method', 63), ('joint ventures and associates', 53), ('derivative financial instruments', 50)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('derivative financial instruments', 77), (' investment in associate', 48), ('joint ventures and associates', 46), (' investment in joint venture', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 54535.0, 'line_item_label': ['Investment in joint ventures'], 'note_numbers': ['11'], 'line_item_value': [54535.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 69), (' investments accounted for using the equity method', 63), ('joint ventures and associates', 53), ('derivative financial instruments', 50)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('derivative financial instruments', 77), (' investment in associate', 48), ('joint ventures and associates', 46), (' investment in joint venture', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 47672.0, 'line_item_label': ['Investment in joint ventures'], 'note_numbers': ['11'], 'line_item_value': [47672.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = investment in joint venture (southern cross aluminium pty ltd) , res_fuzz_match = [('investment in joint venture', 100), (' investment in associate', 69), (' carrying amount at the end of the financial year', 43)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = investment in joint venture (southern cross aluminium pty ltd) , res_fuzz_match = [('investment in joint venture', 100), (' investment in associate', 69), (' carrying amount at the end of the financial year', 43)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [47672.0, 54535.0], 'label': [' Investment in joint venture (Southern Cross Aluminium Pty Ltd)', ' Investment in joint venture (Southern Cross Aluminium Pty Ltd)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = ownership interest % , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = ownership interest % , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = ownership interest $000 , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = ownership interest $000 , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at 1. january , res_fuzz_match = [('investment in joint venture', 43), (' carrying amount at the end of the financial year', 43), (' investment in associate', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('investment in joint venture', 79), (' investment in associate', 54), (' carrying amount at the end of the financial year', 42)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = share of other comprehensive income, net of tax , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), (' investment in associate', 46), ('investment in joint venture', 42)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = carrying value of investment at end of year , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), ('investment in joint venture', 58), (' investment in associate', 54)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at 1. january , res_fuzz_match = [('investment in joint venture', 43), (' carrying amount at the end of the financial year', 43), (' investment in associate', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('investment in joint venture', 79), (' investment in associate', 54), (' carrying amount at the end of the financial year', 42)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = share of other comprehensive income, net of tax , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), (' investment in associate', 46), ('investment in joint venture', 42)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = carrying value of investment at end of year , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), ('investment in joint venture', 58), (' investment in associate', 54)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('deferred tax assets', 29), ('deferred tax', 21), ('deferred charges', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('deferred tax assets', 57), ('deferred tax', 27), ('deferred charges', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 12309.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [12309.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('deferred tax assets', 29), ('deferred tax', 21), ('deferred charges', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('deferred tax assets', 57), ('deferred tax', 27), ('deferred charges', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 24223.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [24223.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13, 15, 28, 29, 31, 44, 45, 47, 60, 61, 63], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [5757.0, 24223.0, 5757.0, -11017.0, 12309.0, -11017.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'label': [' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 56)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 56)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [('deferred tax assets', 50), (' deferred tax balances', 50)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [('deferred tax assets', 50), (' deferred tax balances', 50)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('other assets', 47), (' other assets', 47), (' other non-current assets', 42), (' other non-current assets', 42), ('non-current', 38), (' financial assets', 38), (' exploration and evaluation expenditure', 35), (' leased assets', 28), (' loan receivables', 27), (' leases', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' leased assets', 61), (' other non-current assets', 56), (' other non-current assets', 56), ('other assets', 50), (' other assets', 50), (' loan receivables', 33), ('non-current', 30), (' exploration and evaluation expenditure', 25), (' leases', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13, 15], 'score': 100, 'value': 13131.0, 'line_item_label': ['Non-current assets', 'Financial assets', 'Other non-current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 12453.0, 678.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('other assets', 47), (' other assets', 47), (' other non-current assets', 42), (' other non-current assets', 42), ('non-current', 38), (' financial assets', 38), (' exploration and evaluation expenditure', 35), (' leased assets', 28), (' loan receivables', 27), (' leases', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' leased assets', 61), (' other non-current assets', 56), (' other non-current assets', 56), ('other assets', 50), (' other assets', 50), (' loan receivables', 33), ('non-current', 30), (' exploration and evaluation expenditure', 25), (' leases', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13, 15], 'score': 100, 'value': 0.0, 'line_item_label': ['Non-current assets', 'Financial assets', 'Other non-current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 0.0, 0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 77), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' allowance for expected credit losses', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' total. properties', 36), (' right-of-use-assets', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' total. properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 33), (' warehouse and office equipment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('non-current', 57), (' allowance for expected credit losses', 57), ('finance receivables', 43), (' electricity derivatives at fair value', 43), (' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total. properties', 43), (' right-of-use-assets', 29), (' warehouse and office equipment', 29), (' motor vehicles', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('non-current', 100), (' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' total. properties', 36), (' right-of-use-assets', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 77), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' allowance for expected credit losses', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' total. properties', 36), (' right-of-use-assets', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' total. properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 33), (' warehouse and office equipment', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('non-current', 57), (' allowance for expected credit losses', 57), ('finance receivables', 43), (' electricity derivatives at fair value', 43), (' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total. properties', 43), (' right-of-use-assets', 29), (' warehouse and office equipment', 29), (' motor vehicles', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('non-current', 100), (' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' total. properties', 36), (' right-of-use-assets', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 7], 'score': [100, 100, 100, 100], 'value': [0.0, 0.0, 29702.0, 12453.0], 'label': ['Current Electricity derivatives at fair value', 'Non-current Electricity derivatives at fair value', 'Current Electricity derivatives at fair value', 'Non-current Electricity derivatives at fair value'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('non-current assets total', 37)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('non-current assets total', 56)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 15], 'score': 84, 'value': 678.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 678.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('non-current assets total', 37)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('non-current assets total', 56)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 15], 'score': 84, 'value': 0.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' bank overdraft', 29), (' leases', 22), ('borrowings', 10), ('short term debt', 7), ('short-term debt', 7), ('shortterm debt', 7), ('shortterm borrowings', 7)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 24], 'score': 100, 'value': 4471.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['16', '13'], 'line_item_value': [4000.0, 471.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' bank overdraft', 29), (' leases', 22), ('borrowings', 10), ('short term debt', 7), ('short-term debt', 7), ('shortterm debt', 7), ('shortterm borrowings', 7)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 24], 'score': 100, 'value': 412.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['16', '13'], 'line_item_value': [0.0, 412.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank borrowings , res_fuzz_match = [('bank borrowings', 100), (' utilised – bank borrowings', 100), (' bank overdraft', 73), (' secured long-term bank loans', 60), (' loans from related party', 45), (' not later than 1 year', 36), (' lease liabilities - current', 36), (' balance at the end of period', 36), ('current', 29), (' current', 29), (' lease liabilities', 27), (' leases', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank borrowings , res_fuzz_match = [('bank borrowings', 100), (' utilised – bank borrowings', 100), (' bank overdraft', 73), (' secured long-term bank loans', 60), (' loans from related party', 45), (' not later than 1 year', 36), (' lease liabilities - current', 36), (' balance at the end of period', 36), ('current', 29), (' current', 29), (' lease liabilities', 27), (' leases', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [0.0, 4000.0], 'label': [' Bank borrowings', ' Bank borrowings'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 9, 13], 'score': [100, 100, 100, 100], 'value': [0.0, 0.0, 4000.0, 0.0], 'label': [' Utilised ', ' Utilised ', ' Utilised ', ' Utilised '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current maturities of long-term debt', 24), ('current maturities of longterm debt', 24), ('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('other financial liabilities', 82), ('other current liabilities', 47), ('current maturities', 22), ('current maturities of long-term debt', 20), ('current maturities of longterm debt', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 23], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities', 'Financial liabilities'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current maturities of long-term debt', 24), ('current maturities of longterm debt', 24), ('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('other financial liabilities', 82), ('other current liabilities', 47), ('current maturities', 22), ('current maturities of long-term debt', 20), ('current maturities of longterm debt', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 23], 'score': 82, 'value': 2935.0, 'line_item_label': ['Current liabilities', 'Financial liabilities'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 2935.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current maturities'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('current maturities', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = electricity derivatives at fair value through oci , res_fuzz_match = [('current maturities', 38)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [('current maturities', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current maturities', 100)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current maturities', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': [100], 'value': [25662.0], 'label': [' Current'], 'year': [], 'colname_found': ['rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('note payable(debt)', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('note payable(debt)', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('outstanding dues of creditors other than', 21), ('small enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('accounts payable', 43), ('small enterprises', 34), ('trade and other payables', 33), ('trade payable', 31), ('micro enterprises and small enterprises', 29), ('micro enterprises', 28), ('other than micro and small enterprises', 28), ('other trade payables', 25), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 22), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 26101.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': [nan], 'line_item_value': [26101.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('outstanding dues of creditors other than', 21), ('small enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('accounts payable', 43), ('small enterprises', 34), ('trade and other payables', 33), ('trade payable', 31), ('micro enterprises and small enterprises', 29), ('micro enterprises', 28), ('other than micro and small enterprises', 28), ('other trade payables', 25), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 22), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 22315.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': [nan], 'line_item_value': [22315.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('other financial liabilities', 82), ('other current financial liabilities', 67), ('other current liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 20, 23], 'score': 82, 'value': 26101.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Financial liabilities'], 'note_numbers': [nan, nan, '15'], 'line_item_value': [0.0, 26101.0, 0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('other financial liabilities', 82), ('other current financial liabilities', 67), ('other current liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 20, 23], 'score': 82, 'value': 25250.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Financial liabilities'], 'note_numbers': [nan, nan, '15'], 'line_item_value': [0.0, 22315.0, 2935.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = electricity derivatives at fair value through oci , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 18)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('accrued expenses', 29), ('interest accrued', 29)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 17), ('tax', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('current tax liabilities', 64), (' income tax payable', 37), ('tax', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 0.0, 'line_item_label': ['Liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 17), ('tax', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('current tax liabilities', 64), (' income tax payable', 37), ('tax', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 0.0, 'line_item_label': ['Liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [(' financial liabilities', 100), (' other financial liabilities', 82), (' foreign exchange contract liability', 49), ('other current liabilities', 47), (' other current liabilities', 47), (' trade and other payables', 33), (' employee benefits', 28), (' customer deposits', 21), (' deferred revenue', 15), ('provisions', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 20, 22, 23], 'score': 100, 'value': 35329.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Financial liabilities'], 'note_numbers': [nan, nan, '17', '15'], 'line_item_value': [0.0, 26101.0, 9228.0, 0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [(' financial liabilities', 100), (' other financial liabilities', 82), (' foreign exchange contract liability', 49), ('other current liabilities', 47), (' other current liabilities', 47), (' trade and other payables', 33), (' employee benefits', 28), (' customer deposits', 21), (' deferred revenue', 15), ('provisions', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 20, 22, 23], 'score': 100, 'value': 34709.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Financial liabilities'], 'note_numbers': [nan, nan, '17', '15'], 'line_item_value': [0.0, 22315.0, 9459.0, 2935.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 4, 5, 10, 16, 22, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33, 34, 34, 35], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [4343.0, 541.0, 0.0, 4884.0, 4846.0, 4846.0, 38.0, 3884.0, 0.0, 0.0, 6983.0, 1286.0, 0.0, 8269.0, 729.0, 729.0, 7540.0, 19857.0, 38883.0, -854.0, 57886.0, 9459.0, 9459.0, 48427.0], 'label': ['Employee benefits', 'Employee benefits', 'Employee benefits', 'Employee benefits', ' Current', 'Employee benefits', 'Employee benefits', ' Current', ' Current', ' Current', 'Provision for carbon dust and other', 'Provision for carbon dust and other', 'Provision for carbon dust and other', 'Provision for carbon dust and other', ' Current', 'Provision for carbon dust and other', 'Provision for carbon dust and other', 'Totals', 'Totals', 'Totals', 'Totals', ' Current', 'Totals', 'Totals'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'rows', 'rows', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 64), ('other creditors and accruals', 51), (' current - liability for annual and long service leave', 50), (' forward exchange contracts', 50), (' other related parties', 47), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' loan payable to relayed party under tax funding agreement', 45), (' gst payable and accruals', 45), (' gst liabilities', 42), (' derivative contracts - at fair value', 41), (' secured long-term bank loans', 41), (' employee benefits - payroll', 41), (' abandonment and decommissioning costs', 41), (' total current employee benefits', 41), (' rebates', 40), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' contract liabilites - current', 36), (' gst', 33), (' ultimate parent entity', 32), (' arising from service contracts', 32), ('current', 29), (' provisions - current', 29), (' provision for associate funding', 27), (' employee benefits - current', 24), (' restructuring', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = electricity derivatives at fair value through oci , res_fuzz_match = [(' derivative contracts - at fair value', 62), (' employee benefits - payroll', 45), (' arising from service contracts', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 36), (' provisions - current', 36), (' share of joint venture payables', 36), (' loans from related party', 33), (' gst', 33), (' total current employee benefits', 31), (' abandonment and decommissioning costs', 27)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' gst liabilities', 80), (' current - liability for annual and long service leave', 73), (' contract liabilites - current', 73), (' loan payable to relayed party under tax funding agreement', 55), (' gst payables', 50), (' other related parties', 45), (' loans from related party', 45), (' employee benefits - current', 45), (' employee benefits - payroll', 45), (' rebates', 40), ('other creditors and accruals', 36), (' ultimate parent entity', 36), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' gst payable and accruals', 36), (' share of joint venture payables', 36), (' total current employee benefits', 36), (' gst', 33), (' other creditors', 27), (' other creditors', 27), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' other creditors', 27), (' warranty', 25), (' restructuring', 20), (' provisions - current', 18), (' make good provisions', 18), ('current', 0), (' other', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4], 'score': [100, 80, 100], 'value': [25569.0, 1053.0, 25662.0], 'label': [' Trade and other payables', ' Lease liabilities', ' Current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows']}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('current liabilities', 57)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('current liabilities', 57)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 39)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 39)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), ('interest bearing loans and borrowings', 45), (' lease liabilities', 45), (' lease liability', 45), (' borrowings', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 1042.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [1042.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:52+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), ('interest bearing loans and borrowings', 45), (' lease liabilities', 45), (' lease liability', 45), (' borrowings', 33)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-02 13:56:52+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 641.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [641.0]}
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:52+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:52+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-02 13:56:52+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('(bond)', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('(bond)', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('lease liabilities', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 1042.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [1042.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('lease liabilities', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 641.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [641.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 45)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 1042.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [1042.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 45)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 641.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [641.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other long term liabilities', 50), (' other financial liabilities', 43), (' other non-current liabilities', 38), (' financial liabilities', 33), (' employee benefits', 32), (' provision for associate funding', 32), (' provisions', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [26, 27, 28], 'score': 100, 'value': 13665.0, 'line_item_label': ['Non-current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, nan, '17'], 'line_item_value': [0.0, 3036.0, 10629.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other long term liabilities', 50), (' other financial liabilities', 43), (' other non-current liabilities', 38), (' financial liabilities', 33), (' employee benefits', 32), (' provision for associate funding', 32), (' provisions', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [26, 27, 28], 'score': 100, 'value': 51681.0, 'line_item_label': ['Non-current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, nan, '17'], 'line_item_value': [0.0, 3254.0, 48427.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 4, 5, 5, 10, 11, 16, 17, 22, 23, 28, 29, 30, 31, 32, 33, 34, 34, 35, 35], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [4343.0, 541.0, 0.0, 4884.0, 4846.0, 4846.0, 38.0, 38.0, 3884.0, 0.0, 0.0, 347.0, 0.0, 40502.0, 729.0, 7540.0, 19857.0, 38883.0, -854.0, 57886.0, 9459.0, 9459.0, 48427.0, 48427.0], 'label': ['Employee benefits', 'Employee benefits', 'Employee benefits', 'Employee benefits', ' Current', 'Employee benefits', ' Non-current', 'Employee benefits', ' Current', ' Non-current', ' Current', ' Non-current', ' Current', ' Non-current', ' Current', ' Non-current', 'Totals', 'Totals', 'Totals', 'Totals', ' Current', 'Totals', ' Non-current', 'Totals'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('equity share capital', 59), ('perpetual equity instrument', 39), ('share capital', 37), ('common stock', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('common stock', 33), ('equity share capital', 27), ('share capital', 26), ('perpetual equity instrument', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('equity share capital', 59), ('perpetual equity instrument', 39), ('share capital', 37), ('common stock', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('common stock', 33), ('equity share capital', 27), ('share capital', 26), ('perpetual equity instrument', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('additional paid in capital', 38), ('additional paid up capital', 38), ('other reserves', 36), ('reserves and surplus', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('reserves and surplus', 28), ('other equity', 25), ('additional paid in capital', 21), ('additional paid up capital', 21), ('other reserves', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('additional paid in capital', 38), ('additional paid up capital', 38), ('other reserves', 36), ('reserves and surplus', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('reserves and surplus', 28), ('other equity', 25), ('additional paid in capital', 21), ('additional paid up capital', 21), ('other reserves', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('other reserves', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('other reserves', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('retained earnings', 37), ('reserves surplus', 21), (' accumulated losses', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [(' accumulated losses', 100), ('other equity', 25), ('retained earnings', 17), ('reserves surplus', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [36], 'score': 100, 'value': -74616.0, 'line_item_label': ['Accumulated losses'], 'note_numbers': [nan], 'line_item_value': [-74616.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('retained earnings', 37), ('reserves surplus', 21), (' accumulated losses', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [(' accumulated losses', 100), ('other equity', 25), ('retained earnings', 17), ('reserves surplus', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [36], 'score': 100, 'value': -94999.0, 'line_item_label': ['Accumulated losses'], 'note_numbers': [nan], 'line_item_value': [-94999.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves', 36), ('reserves', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('other reserves', 17), ('reserves', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [37], 'score': 100, 'value': 35790.0, 'line_item_label': ['Reserves'], 'note_numbers': ['19'], 'line_item_value': [35790.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves', 36), ('reserves', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('other reserves', 17), ('reserves', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [37], 'score': 100, 'value': -4256.0, 'line_item_label': ['Reserves'], 'note_numbers': ['19'], 'line_item_value': [-4256.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('shareholders equity(a)', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('shareholders equity(a)', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 3731.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [3731.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 17531.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [17531.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 12, 13, 14, 15, 16, 24, 25, 26, 27, 28, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100], 'value': [90430.0, 376.0, -149.0, 74.0, 90731.0, 314181.0, 5232.0, -1122.0, -74.0, 318217.0, 1628.0, 34643.0, 0.0, 0.0, 36271.0, 2538.0, 2538.0, 0.0, 0.0, -65.0, -65.0, 0.0, 0.0, 2473.0, 2473.0, 795.0, 0.0, 0.0, 0.0, 795.0, 1678.0, 0.0, 408777.0, 40251.0, -1336.0, 0.0, 447692.0], 'label': ['Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Construction in progress $000', 'Cost Additions', 'Construction in progress $000', 'Cost Disposals', 'Construction in progress $000', 'Cost Transfer', 'Construction in progress $000', 'Cost At 31 December 2020', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [90235.0, 57.0, 351.0, -154.0, 90489.0, 312388.0, 827.0, 4618.0, -1182.0, 316651.0, 1628.0, 0.0, 20598.0, 0.0, 22226.0, 795.0, 0.0, 0.0, 0.0, 795.0, 405046.0, 884.0, 25567.0, -1336.0, 430161.0], 'label': ['Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('unbilled', 40), ('receivable', 33), ('account receivables', 31), ('government subsidies receivable', 31), ('trade and other receivables', 31), ('trade receivables', 26), ('billed', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 71), ('trade and other receivables', 45), ('government subsidies receivable', 43), ('billed', 25), ('unbilled', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('trade and other receivables', 47), ('account receivables', 44), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('billed', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6], 'score': 100, 'value': 19529.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivable from related parties'], 'note_numbers': ['7', '20'], 'line_item_value': [11999.0, 7530.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('unbilled', 40), ('receivable', 33), ('account receivables', 31), ('government subsidies receivable', 31), ('trade and other receivables', 31), ('trade receivables', 26), ('billed', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 71), ('trade and other receivables', 45), ('government subsidies receivable', 43), ('billed', 25), ('unbilled', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('trade and other receivables', 47), ('account receivables', 44), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('billed', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6], 'score': 100, 'value': 19942.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivable from related parties'], 'note_numbers': ['7', '20'], 'line_item_value': [13624.0, 6318.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' related party receivables', 80), (' share of joint venture receivables', 80), ('trade receivables', 70), (' net trade debtors', 40), ('current', 29), (' other debtors', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivables', 100), ('trade receivables', 67), (' share of joint venture receivables', 53), (' net trade debtors', 44), ('current', 43), (' other debtors', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' related party receivables', 80), (' share of joint venture receivables', 80), ('trade receivables', 70), (' net trade debtors', 40), ('current', 29), (' other debtors', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivables', 100), ('trade receivables', 67), (' share of joint venture receivables', 53), (' net trade debtors', 44), ('current', 43), (' other debtors', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [80, 100, 80, 100], 'value': [1697.0, 11927.0, 1390.0, 10609.0], 'label': [' GST receivable', ' Related party receivables (Note 20)', ' GST receivable', ' Related party receivables (Note 20)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('sale of products', 36), (' Sale of coal', 32), ('revenue from operations', 31), (' Sales revenue', 29), ('transmission and distribution business', 26), ('from trading business', 24), ('net sales', 22), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19), (' Revenue', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('revenue from operations', 42), ('revenue from contracts with customers', 38), ('transmission and distribution business', 38), ('Revenue from contract with customers', 38), ('net sales', 32), ('from trading business', 31), (' Revenue', 29), (' Sale of coal', 27), (' Sales revenue', 26), ('sale of products', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('sale of products', 35), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sale of coal', 30), (' Sales revenue', 27), ('from trading business', 23), ('net sales', 21), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sale of coal', 34), (' Sales revenue', 32), ('sale of products', 31), ('net sales', 29), ('transmission and distribution business', 29), (' Revenue', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('from trading business', 50), ('net sales', 40), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 31), (' Sale of coal', 31), (' Revenue', 26), ('revenue from operations', 24), ('sale of products', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('revenue from operations', 42), ('from trading business', 38), ('sale of products', 34), (' Sale of coal', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('transmission and distribution business', 27), (' Revenue', 26), ('net sales', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 460350.0, 'line_item_label': ['Revenue from contracts with customers', 'Revenue'], 'note_numbers': ['4.1', nan], 'line_item_value': [229785.0, 230565.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('sale of products', 36), (' Sale of coal', 32), ('revenue from operations', 31), (' Sales revenue', 29), ('transmission and distribution business', 26), ('from trading business', 24), ('net sales', 22), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19), (' Revenue', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('revenue from operations', 42), ('revenue from contracts with customers', 38), ('transmission and distribution business', 38), ('Revenue from contract with customers', 38), ('net sales', 32), ('from trading business', 31), (' Revenue', 29), (' Sale of coal', 27), (' Sales revenue', 26), ('sale of products', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('sale of products', 35), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sale of coal', 30), (' Sales revenue', 27), ('from trading business', 23), ('net sales', 21), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sale of coal', 34), (' Sales revenue', 32), ('sale of products', 31), ('net sales', 29), ('transmission and distribution business', 29), (' Revenue', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('from trading business', 50), ('net sales', 40), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 31), (' Sale of coal', 31), (' Revenue', 26), ('revenue from operations', 24), ('sale of products', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('revenue from operations', 42), ('from trading business', 38), ('sale of products', 34), (' Sale of coal', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('transmission and distribution business', 27), (' Revenue', 26), ('net sales', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 430597.0, 'line_item_label': ['Revenue from contracts with customers', 'Revenue'], 'note_numbers': ['4.1', nan], 'line_item_value': [214911.0, 215686.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = type of goods sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 69), (' Sale of goods - Marine', 60), (' Sale of goods - Spareparts', 53), (' Goods sold to customer direct from supplier', 53), (' Sale of goods - Motorcycles', 47), (' Goods sold to customer from warehouse', 47), (' Condensate', 43), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33), (' Total Revenue', 33), (' Gas transportation income', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = type of goods total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 53), (' Goods sold to customer from warehouse', 53), (' Gas transportation income', 50), (' Goods sold to customer direct from supplier', 46), (' Domgas', 40), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Condensate', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = geographical markets japan , res_fuzz_match = [(' Domgas', 60), (' Gas transportation income', 44), (' Sale of goods - Spareparts', 42), (' Total Revenue', 42), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Marine', 33), (' Goods sold to customer direct from supplier', 33), (' Sale of goods - Cars', 31), (' Goods sold to customer from warehouse', 29), (' Sale of goods - Motorcycles', 26), (' Condensate', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = geographical markets australia , res_fuzz_match = [(' Domgas', 60), (' Total Revenue', 42), (' Sale of goods - Marine', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 36), (' Goods sold to customer direct from supplier', 36), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Motorcycles', 32), (' Condensate', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = geographical markets total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Domgas', 60), (' Gas transportation income', 50), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Goods sold to customer direct from supplier', 41), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), ('Sale of goods', 33), (' LNG', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = timing of recognition goods transferred at a point in time , res_fuzz_match = [(' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Total Revenue', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 37), (' Goods sold to customer direct from supplier', 36), (' LNG', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = timing of recognition total from contracts with customers , res_fuzz_match = [(' Total Revenue', 58), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Cars', 46), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Sale of goods - Spareparts', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), ('Sale of goods', 33), (' LNG', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = type of goods sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 69), (' Sale of goods - Marine', 60), (' Sale of goods - Spareparts', 53), (' Goods sold to customer direct from supplier', 53), (' Sale of goods - Motorcycles', 47), (' Goods sold to customer from warehouse', 47), (' Condensate', 43), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33), (' Total Revenue', 33), (' Gas transportation income', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = type of goods total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 53), (' Goods sold to customer from warehouse', 53), (' Gas transportation income', 50), (' Goods sold to customer direct from supplier', 46), (' Domgas', 40), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Condensate', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = geographical markets japan , res_fuzz_match = [(' Domgas', 60), (' Gas transportation income', 44), (' Sale of goods - Spareparts', 42), (' Total Revenue', 42), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Marine', 33), (' Goods sold to customer direct from supplier', 33), (' Sale of goods - Cars', 31), (' Goods sold to customer from warehouse', 29), (' Sale of goods - Motorcycles', 26), (' Condensate', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = geographical markets australia , res_fuzz_match = [(' Domgas', 60), (' Total Revenue', 42), (' Sale of goods - Marine', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 36), (' Goods sold to customer direct from supplier', 36), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Motorcycles', 32), (' Condensate', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = geographical markets total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Domgas', 60), (' Gas transportation income', 50), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Goods sold to customer direct from supplier', 41), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), ('Sale of goods', 33), (' LNG', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = timing of recognition goods transferred at a point in time , res_fuzz_match = [(' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Total Revenue', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 37), (' Goods sold to customer direct from supplier', 36), (' LNG', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = timing of recognition total from contracts with customers , res_fuzz_match = [(' Total Revenue', 58), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Cars', 46), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Sale of goods - Spareparts', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), ('Sale of goods', 33), (' LNG', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 7, 8, 11], 'score': [100, 100, 100, 100, 100, 100], 'value': [214911.0, 214911.0, 214911.0, 229785.0, 229785.0, 229785.0], 'label': ['Type of goods Sale of goods', 'Type of goods Total revenue from contracts with customers', 'Geographical markets Total revenue from contracts with customers', 'Type of goods Sale of goods', 'Type of goods Total revenue from contracts with customers', 'Geographical markets Total revenue from contracts with customers'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), ('purchase of stock-in-trade', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('cost of sales', 42), ('Cost of sales', 42), (' cost of coal sold', 42), (' Cost of product sold', 37), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('purchase of stock-in-trade', 28), ('total expenses', 27), ('total expenditure', 23), ('expense', 12), ('expenditure', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Cost of goods and services sold', 36), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('total expenditure', 27), (' Cost of product sold', 26), ('total expenses', 25), (' Personnel costs', 24), ('expense', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' cost of coal sold', 40), ('total expenditure', 37), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), ('total expenses', 26), ('expense', 24), (' Personnel costs', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('total expenses', 38), (' Cost of inventory sold', 36), (' cost of coal sold', 35), ('cost of sales', 34), ('Cost of sales', 34), ('total expenditure', 33), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Cost of product sold', 27), (' Personnel costs', 24), ('expense', 23), ('expenditure', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('total expenditure', 48), ('total expenses', 41), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 28), ('expense', 26), (' cost of coal sold', 26), (' Cost of product sold', 24), (' Personnel costs', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [(' cost of coal sold', 39), (' Personnel costs', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 28), ('total expenses', 28), ('expenditure', 22), ('expense', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': -249283.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-249283.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), ('purchase of stock-in-trade', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('cost of sales', 42), ('Cost of sales', 42), (' cost of coal sold', 42), (' Cost of product sold', 37), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('purchase of stock-in-trade', 28), ('total expenses', 27), ('total expenditure', 23), ('expense', 12), ('expenditure', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Cost of goods and services sold', 36), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('total expenditure', 27), (' Cost of product sold', 26), ('total expenses', 25), (' Personnel costs', 24), ('expense', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' cost of coal sold', 40), ('total expenditure', 37), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), ('total expenses', 26), ('expense', 24), (' Personnel costs', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('total expenses', 38), (' Cost of inventory sold', 36), (' cost of coal sold', 35), ('cost of sales', 34), ('Cost of sales', 34), ('total expenditure', 33), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Cost of product sold', 27), (' Personnel costs', 24), ('expense', 23), ('expenditure', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('total expenditure', 48), ('total expenses', 41), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 28), ('expense', 26), (' cost of coal sold', 26), (' Cost of product sold', 24), (' Personnel costs', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [(' cost of coal sold', 39), (' Personnel costs', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 28), ('total expenses', 28), ('expenditure', 22), ('expense', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': -227382.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-227382.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [(' Lease expenses', 38), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Selling Expenses', 29), ('other expenses', 27), (' Occupancy expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Selling & distribution expenses', 26), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Sales and marketing', 24), ('Distribution expenses', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Administrative and other expenses', 22), (' Management expenses', 18), (' Marketing expenses', 17), (' Occupancy ', 13), (' depreciation', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Administrative and other expenses', 45), (' Administrative expenses', 42), (' Administration expenses', 42), (' Amortisation expenses', 36), (' Logistics and distribution', 36), (' Sales and marketing', 35), ('Distribution expenses', 31), (' Advertising expenses', 31), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Occupancy expenses', 21), (' Lease expenses', 21), (' Selling Expenses', 21), (' Management expenses', 21), (' depreciation', 14), (' Occupancy ', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Logistics and distribution', 45), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Administration expenses', 37), (' Lease expenses', 36), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Selling & distribution expenses', 31), (' Advertising expenses', 31), ('Distribution expenses', 30), (' Administrative and other expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Occupancy expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Marketing expenses', 25), (' depreciation', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Advertising expenses', 34), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' Administrative and other expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' depreciation', 22), ('Distribution expenses', 22), (' Occupancy ', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Lease expenses', 36), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Marketing expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Sales and marketing', 31), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Selling & distribution expenses', 26), (' Amortisation expenses', 26), (' depreciation', 25), (' Occupancy ', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other expenses', 41), (' Other expenses', 41), (' Other expenses', 41), (' Amortisation expenses', 39), (' Administrative and other expenses', 37), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Selling & distribution expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 25), ('Distribution expenses', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Selling Expenses', 21), (' Management expenses', 21), (' depreciation', 17), (' Occupancy expenses', 14), (' Occupancy ', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -4069.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-4069.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [(' Lease expenses', 38), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Selling Expenses', 29), ('other expenses', 27), (' Occupancy expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Selling & distribution expenses', 26), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Sales and marketing', 24), ('Distribution expenses', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Administrative and other expenses', 22), (' Management expenses', 18), (' Marketing expenses', 17), (' Occupancy ', 13), (' depreciation', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Administrative and other expenses', 45), (' Administrative expenses', 42), (' Administration expenses', 42), (' Amortisation expenses', 36), (' Logistics and distribution', 36), (' Sales and marketing', 35), ('Distribution expenses', 31), (' Advertising expenses', 31), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Occupancy expenses', 21), (' Lease expenses', 21), (' Selling Expenses', 21), (' Management expenses', 21), (' depreciation', 14), (' Occupancy ', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Logistics and distribution', 45), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Administration expenses', 37), (' Lease expenses', 36), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Selling & distribution expenses', 31), (' Advertising expenses', 31), ('Distribution expenses', 30), (' Administrative and other expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Occupancy expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Marketing expenses', 25), (' depreciation', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Advertising expenses', 34), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' Administrative and other expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' depreciation', 22), ('Distribution expenses', 22), (' Occupancy ', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Lease expenses', 36), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Marketing expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Sales and marketing', 31), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Selling & distribution expenses', 26), (' Amortisation expenses', 26), (' depreciation', 25), (' Occupancy ', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other expenses', 41), (' Other expenses', 41), (' Other expenses', 41), (' Amortisation expenses', 39), (' Administrative and other expenses', 37), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Selling & distribution expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 25), ('Distribution expenses', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Selling Expenses', 21), (' Management expenses', 21), (' depreciation', 17), (' Occupancy expenses', 14), (' Occupancy ', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -5557.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-5557.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [(' Occupancy expenses', 27), (' Rental expenses', 26), (' Administration expenses', 23), ('Rent', 14), (' Occupancy', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Administration expenses', 42), (' Rental expenses', 29), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Administration expenses', 37), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 13), (' Occupancy', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 28), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Rental expenses', 40), (' Administration expenses', 30), ('Rent', 29), (' Occupancy expenses', 28), (' Occupancy', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 24), ('Rent', 19), (' Occupancy expenses', 14), (' Occupancy', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -4069.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-4069.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [(' Occupancy expenses', 27), (' Rental expenses', 26), (' Administration expenses', 23), ('Rent', 14), (' Occupancy', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Administration expenses', 42), (' Rental expenses', 29), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Administration expenses', 37), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 13), (' Occupancy', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 28), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Rental expenses', 40), (' Administration expenses', 30), ('Rent', 29), (' Occupancy expenses', 28), (' Occupancy', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 24), ('Rent', 19), (' Occupancy expenses', 14), (' Occupancy', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -5557.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-5557.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('other operating', 30), (' Other income', 29), ('Other revenue', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('Other revenue', 42), (' Other income', 38), ('other operating', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other operating', 38), (' Other income', 36), ('Other revenue', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Other income', 52), ('other operating', 33), ('Other revenue', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Other income', 50), ('other operating', 30), ('Other revenue', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other operating', 59), (' Other income', 50), ('Other revenue', 41)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 10924.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['4.2', '4.3'], 'line_item_value': [780.0, 10144.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('other operating', 30), (' Other income', 29), ('Other revenue', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('Other revenue', 42), (' Other income', 38), ('other operating', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other operating', 38), (' Other income', 36), ('Other revenue', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Other income', 52), ('other operating', 33), ('Other revenue', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Other income', 50), ('other operating', 30), ('Other revenue', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other operating', 59), (' Other income', 50), ('Other revenue', 41)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 14406.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['4.2', '4.3'], 'line_item_value': [775.0, 13631.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['Other income', ' Commission revenue', ' Rent'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = commission revenue , res_fuzz_match = [(' Commission revenue', 100), (' Rent', 50), ('Other income', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = commission revenue , res_fuzz_match = [(' Commission revenue', 100), (' Rent', 50), ('Other income', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [775.0, 780.0], 'label': [' Commission revenue', ' Commission revenue'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('other income', 29), (' Finance income and costs', 26), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 18), ('Finance income', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Interest revenue', 47), ('other income', 38), (' Finance income and finance costs', 38), (' Finance income and costs', 35), (' Net finance costs', 31), ('finance income', 25), ('Finance income', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other income', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 26), (' Finance income and costs', 25), (' Interest revenue', 23), (' Net finance costs', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('other income', 52), ('finance income', 44), ('Finance income', 44), (' Net finance costs', 40), (' Finance income and costs', 34), (' Finance income and finance costs', 29), (' Interest revenue', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('finance income', 55), ('Finance income', 55), ('other income', 50), (' Finance income and costs', 47), (' Net finance costs', 44), (' Finance income and finance costs', 40), (' Interest revenue', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other income', 50), (' Finance income and costs', 32), (' Interest revenue', 31), (' Net finance costs', 31), (' Finance income and finance costs', 27), ('finance income', 21), ('Finance income', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 8, 9], 'score': 85, 'value': 9696.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs'], 'note_numbers': ['4.3', '4.4', '4.5'], 'line_item_value': [10144.0, 170.0, -618.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('other income', 29), (' Finance income and costs', 26), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 18), ('Finance income', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Interest revenue', 47), ('other income', 38), (' Finance income and finance costs', 38), (' Finance income and costs', 35), (' Net finance costs', 31), ('finance income', 25), ('Finance income', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other income', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 26), (' Finance income and costs', 25), (' Interest revenue', 23), (' Net finance costs', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('other income', 52), ('finance income', 44), ('Finance income', 44), (' Net finance costs', 40), (' Finance income and costs', 34), (' Finance income and finance costs', 29), (' Interest revenue', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('finance income', 55), ('Finance income', 55), ('other income', 50), (' Finance income and costs', 47), (' Net finance costs', 44), (' Finance income and finance costs', 40), (' Interest revenue', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other income', 50), (' Finance income and costs', 32), (' Interest revenue', 31), (' Net finance costs', 31), (' Finance income and finance costs', 27), ('finance income', 21), ('Finance income', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 8, 9], 'score': 85, 'value': 13152.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs'], 'note_numbers': ['4.3', '4.4', '4.5'], 'line_item_value': [13631.0, 60.0, -539.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = government grants , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), ('interest', 38), (' Interest received - Loan', 35), ('Bank interest', 33), (' Interest income', 33), (' Interest received - Bank', 33), (' Sublease interest income', 33), (' Share of JV interest received/(paid)', 33), (' Interest income', 33), (' Bank Deposits - cash and cash equivalents', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = insurance proceeds , res_fuzz_match = [(' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Share of JV interest received/(paid)', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), ('interest', 38), ('Bank interest', 36), (' Interest income', 36), (' Sublease interest income', 36), (' Bank Deposits - cash and cash equivalents', 36), (' Interest income', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = foreign exchange gain , res_fuzz_match = [(' Bank Deposits - cash and cash equivalents', 45), (' Interest received - Bank', 40), (' Interest received - Loan', 40), (' Share of JV interest received/(paid)', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 38), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [('interest', 60), ('Bank interest', 60), (' Interest income', 60), (' Interest received - Bank', 60), (' Interest received - Loan', 60), (' Sublease interest income', 60), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest income', 60), (' Bank Deposits - cash and cash equivalents', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = government grants , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), ('interest', 38), (' Interest received - Loan', 35), ('Bank interest', 33), (' Interest income', 33), (' Interest received - Bank', 33), (' Sublease interest income', 33), (' Share of JV interest received/(paid)', 33), (' Interest income', 33), (' Bank Deposits - cash and cash equivalents', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = insurance proceeds , res_fuzz_match = [(' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Share of JV interest received/(paid)', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), ('interest', 38), ('Bank interest', 36), (' Interest income', 36), (' Sublease interest income', 36), (' Bank Deposits - cash and cash equivalents', 36), (' Interest income', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = foreign exchange gain , res_fuzz_match = [(' Bank Deposits - cash and cash equivalents', 45), (' Interest received - Bank', 40), (' Interest received - Loan', 40), (' Share of JV interest received/(paid)', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 38), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [('interest', 60), ('Bank interest', 60), (' Interest income', 60), (' Interest received - Bank', 60), (' Interest received - Loan', 60), (' Sublease interest income', 60), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest income', 60), (' Bank Deposits - cash and cash equivalents', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = bank interest , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Sublease interest income', 77), (' Share of JV interest received/(paid)', 77), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 69), (' Interest income', 62), (' Interest received - Bank', 62), (' Interest received - Loan', 62), (' Bank Deposits - cash and cash equivalents', 62), (' Interest income', 62)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = bank interest , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Sublease interest income', 77), (' Share of JV interest received/(paid)', 77), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 69), (' Interest income', 62), (' Interest received - Bank', 62), (' Interest received - Loan', 62), (' Bank Deposits - cash and cash equivalents', 62), (' Interest income', 62)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [60.0, 170.0], 'label': [' Bank interest', ' Bank interest'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 24), (' finance expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 40), ('finance cost', 36), ('finance costs', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('finance cost', 36), ('finance costs', 36), (' net finance costs ', 31), (' finance expenses', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -618.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['4.5'], 'line_item_value': [-618.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 24), (' finance expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 40), ('finance cost', 36), ('finance costs', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('finance cost', 36), ('finance costs', 36), (' net finance costs ', 31), (' finance expenses', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -539.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['4.5'], 'line_item_value': [-539.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = interest expenses , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 100), (' Interest expense on financial liabilities using the effective interest rate method - other', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 100), (' Lease liabilities interest expense', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest on bank overdrafts and loans (other than those from related parties)', 67), (' Interest accrued on loans', 60), (' Interest accrued on lease liabilities', 60), ('debt', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 33), ('cash credit', 27), ('loan', 25), ('bonds', 25), ('borrowings', 17), ('bank facilities', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = discount unwind on the provision for asset retirement obligation , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 100), ('cash credit', 55), ('loan', 50), ('bonds', 50), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), (' Interest accrued on lease liabilities', 46), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 42), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease interest expense', 40), ('debenture', 38), ('interest', 38), ('borrowings', 33), ('Interest expenses', 33), (' Lease liabilities interest expense', 33), ('bank facilities', 30), ('debt', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = interest expenses , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 100), (' Interest expense on financial liabilities using the effective interest rate method - other', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 100), (' Lease liabilities interest expense', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest on bank overdrafts and loans (other than those from related parties)', 67), (' Interest accrued on loans', 60), (' Interest accrued on lease liabilities', 60), ('debt', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 33), ('cash credit', 27), ('loan', 25), ('bonds', 25), ('borrowings', 17), ('bank facilities', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = discount unwind on the provision for asset retirement obligation , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 100), ('cash credit', 55), ('loan', 50), ('bonds', 50), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), (' Interest accrued on lease liabilities', 46), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 42), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease interest expense', 40), ('debenture', 38), ('interest', 38), ('borrowings', 33), ('Interest expenses', 33), (' Lease liabilities interest expense', 33), ('bank facilities', 30), ('debt', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [-203.0, -336.0, -303.0, -315.0], 'label': [' Interest expenses', ' Discount unwind on the provision for asset retirement obligation', ' Interest expenses', ' Discount unwind on the provision for asset retirement obligation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 24), (' finance expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 40), ('finance cost', 36), ('finance costs', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('finance cost', 36), ('finance costs', 36), (' net finance costs ', 31), (' finance expenses', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -618.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['4.5'], 'line_item_value': [-618.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 24), (' finance expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 30)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 40), ('finance cost', 36), ('finance costs', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('finance cost', 36), ('finance costs', 36), (' net finance costs ', 31), (' finance expenses', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -539.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['4.5'], 'line_item_value': [-539.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = interest expenses , res_fuzz_match = [(' other', 60), ('other revenue', 58), (' net of tax', 57), (' net foreign exchange gain', 47), (' net foreign exchange gains/(losses)', 47), (' net foreign exchange (loss)/gain', 47), (' net ppe disposal (loss)/gain', 47), (' net other foreign exchange (losses)/gains', 47), (' insurance proceeds', 45), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 40), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' margin charge income', 34), (' quota lease income', 34), ('  government grants', 33), (' secondment income (tw recovery)', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 27), (' paid by customers - at amortised cost', 27), (' sundry income', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = discount unwind on the provision for asset retirement obligation , res_fuzz_match = [(' other', 60), (' net of tax', 57), (' dividend from other parties', 52), ('other revenue', 50), (' sundry income', 50), (' net (loss)/profit on disposal of non-current assets', 50), (' profit from discontinued operation', 48), (' secondment income (tw recovery)', 48), (' paid by customers - at amortised cost', 46), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other income', 45), (' net foreign exchange gains/(losses)', 45), (' commission revenue', 43), (' japan recoveries', 43), ('  government grants', 42), (' net foreign exchange (loss)/gain', 41), (' other miscellaneous - net (loss)/gain', 41), (' net foreign exchange gain', 38), (' quota lease income', 38), (' share of jv income', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 35), (' margin charge income', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = interest expenses , res_fuzz_match = [(' other', 60), ('other revenue', 58), (' net of tax', 57), (' net foreign exchange gain', 47), (' net foreign exchange gains/(losses)', 47), (' net foreign exchange (loss)/gain', 47), (' net ppe disposal (loss)/gain', 47), (' net other foreign exchange (losses)/gains', 47), (' insurance proceeds', 45), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 40), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' margin charge income', 34), (' quota lease income', 34), ('  government grants', 33), (' secondment income (tw recovery)', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 27), (' paid by customers - at amortised cost', 27), (' sundry income', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = discount unwind on the provision for asset retirement obligation , res_fuzz_match = [(' other', 60), (' net of tax', 57), (' dividend from other parties', 52), ('other revenue', 50), (' sundry income', 50), (' net (loss)/profit on disposal of non-current assets', 50), (' profit from discontinued operation', 48), (' secondment income (tw recovery)', 48), (' paid by customers - at amortised cost', 46), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other income', 45), (' net foreign exchange gains/(losses)', 45), (' commission revenue', 43), (' japan recoveries', 43), ('  government grants', 42), (' net foreign exchange (loss)/gain', 41), (' other miscellaneous - net (loss)/gain', 41), (' net foreign exchange gain', 38), (' quota lease income', 38), (' share of jv income', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 35), (' margin charge income', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('NULL', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('NULL', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('NULL', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('NULL', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('prior year ', 30), ('provision for taxation previous year', 26), (' income tax expense', 23), ('deferred tax', 21), (' income tax', 21), ('current tax', 19), ('earlier year', 18), (' income tax benefit/(expense)', 18), ('amount transferred to retained earnings', 16), (' income tax benefit', 15), ('minimum alternate tax credit entitlement', 14), (' tax (expense)/benefit', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('amount transferred to retained earnings', 44), ('minimum alternate tax credit entitlement', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax expense', 35), (' income tax benefit', 34), (' income tax', 31), ('earlier year', 29), ('deferred tax', 27), ('current tax', 26), ('prior year ', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior year ', 38), ('earlier year', 35), (' income tax', 30), ('amount transferred to retained earnings', 26), ('provision for taxation previous year', 25), (' income tax benefit/(expense)', 23), (' income tax expense', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 21), ('deferred tax', 20), ('minimum alternate tax credit entitlement', 19), ('current tax', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' income tax benefit', 70), (' income tax', 62), (' income tax expense', 61), (' income tax benefit/(expense)', 59), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('deferred tax', 48), ('current tax', 39), ('minimum alternate tax credit entitlement', 38), ('amount transferred to retained earnings', 34), ('prior year ', 33), ('earlier year', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' income tax benefit', 100), (' income tax benefit/(expense)', 83), (' tax (expense)/benefit', 74), (' income tax expense', 73), (' income tax', 69), ('minimum alternate tax credit entitlement', 53), ('current tax', 50), ('deferred tax', 46), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 35), ('prior year ', 30), ('earlier year', 28)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('provision for taxation previous year', 57), ('earlier year', 55), ('prior year ', 52), ('deferred tax', 38), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('amount transferred to retained earnings', 32), (' income tax', 31), (' income tax expense', 30), ('current tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 3944.0, 'line_item_label': ['Income tax benefit'], 'note_numbers': ['5'], 'line_item_value': [3944.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('prior year ', 30), ('provision for taxation previous year', 26), (' income tax expense', 23), ('deferred tax', 21), (' income tax', 21), ('current tax', 19), ('earlier year', 18), (' income tax benefit/(expense)', 18), ('amount transferred to retained earnings', 16), (' income tax benefit', 15), ('minimum alternate tax credit entitlement', 14), (' tax (expense)/benefit', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('amount transferred to retained earnings', 44), ('minimum alternate tax credit entitlement', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax expense', 35), (' income tax benefit', 34), (' income tax', 31), ('earlier year', 29), ('deferred tax', 27), ('current tax', 26), ('prior year ', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior year ', 38), ('earlier year', 35), (' income tax', 30), ('amount transferred to retained earnings', 26), ('provision for taxation previous year', 25), (' income tax benefit/(expense)', 23), (' income tax expense', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 21), ('deferred tax', 20), ('minimum alternate tax credit entitlement', 19), ('current tax', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' income tax benefit', 70), (' income tax', 62), (' income tax expense', 61), (' income tax benefit/(expense)', 59), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('deferred tax', 48), ('current tax', 39), ('minimum alternate tax credit entitlement', 38), ('amount transferred to retained earnings', 34), ('prior year ', 33), ('earlier year', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' income tax benefit', 100), (' income tax benefit/(expense)', 83), (' tax (expense)/benefit', 74), (' income tax expense', 73), (' income tax', 69), ('minimum alternate tax credit entitlement', 53), ('current tax', 50), ('deferred tax', 46), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 35), ('prior year ', 30), ('earlier year', 28)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('provision for taxation previous year', 57), ('earlier year', 55), ('prior year ', 52), ('deferred tax', 38), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('amount transferred to retained earnings', 32), (' income tax', 31), (' income tax expense', 30), ('current tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 8217.0, 'line_item_label': ['Income tax benefit'], 'note_numbers': ['5'], 'line_item_value': [8217.0]}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 54), ('income tax expense', 46), (' deferred income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 46), (' current income tax', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), ('income tax expense', 39), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 36), (' deferred income tax', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' current income tax', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), ('income tax expense', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 36), (' current income tax', 27), (' deferred income tax', 27), ('income tax expense', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred income tax', 44), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('income tax expense', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 59), (' total tax (expense)/benefit in income statement', 59), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total income tax expense / (benefit)', 38), (' income tax expense on continuing operations', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39), (' income tax expense on continuing operations', 36), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 30), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 54), ('income tax expense', 46), (' deferred income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 46), (' current income tax', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), ('income tax expense', 39), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 36), (' deferred income tax', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' current income tax', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), ('income tax expense', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 36), (' current income tax', 27), (' deferred income tax', 27), ('income tax expense', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred income tax', 44), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('income tax expense', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 59), (' total tax (expense)/benefit in income statement', 59), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total income tax expense / (benefit)', 38), (' income tax expense on continuing operations', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39), (' income tax expense on continuing operations', 36), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 30), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 54), ('income tax expense', 46), (' deferred income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 46), (' current income tax', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), ('income tax expense', 39), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 36), (' deferred income tax', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' current income tax', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), ('income tax expense', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 36), (' current income tax', 27), (' deferred income tax', 27), ('income tax expense', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred income tax', 44), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('income tax expense', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 59), (' total tax (expense)/benefit in income statement', 59), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total income tax expense / (benefit)', 38), (' income tax expense on continuing operations', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39), (' income tax expense on continuing operations', 36), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 30), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 54), ('income tax expense', 46), (' deferred income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 46), (' current income tax', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), ('income tax expense', 39), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 36), (' deferred income tax', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' current income tax', 27)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), ('income tax expense', 31)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 36), (' current income tax', 27), (' deferred income tax', 27), ('income tax expense', 18)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred income tax', 44), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('income tax expense', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 59), (' total tax (expense)/benefit in income statement', 59), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total income tax expense / (benefit)', 38), (' income tax expense on continuing operations', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39), (' income tax expense on continuing operations', 36), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 30), (' current income tax', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 57), ('income tax expense', 56), (' total income tax expense / (benefit)', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 41)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' current income tax', 47), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 47), (' current income tax', 41), (' deferred income tax', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 57), ('income tax expense', 56), (' total income tax expense / (benefit)', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 41)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' current income tax', 47), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 47), (' current income tax', 41), (' deferred income tax', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 6, 9], 'score': [87, 100, 87, 100], 'value': [-28082.0, 71.0, -20678.0, 0.0], 'label': [' Accounting loss before income tax', ' Adjustments in respect of current income tax of previous year', ' Accounting loss before income tax', ' Adjustments in respect of current income tax of previous year'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' total income tax expense / (benefit)', 67), (' income tax expense on continuing operations', 59), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' total tax (expense)/benefit in income statement', 52)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 62), (' current income tax', 59), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' deferred income tax', 53), (' total income tax expense / (benefit)', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' total income tax expense / (benefit)', 67), (' income tax expense on continuing operations', 59), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' total tax (expense)/benefit in income statement', 52)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 62), (' current income tax', 59), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' deferred income tax', 53), (' total income tax expense / (benefit)', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6], 'score': [100, 100, 100, 100, 100, 100], 'value': [5119.0, 71.0, 3027.0, 5473.0, 0.0, -1529.0], 'label': ['Current income tax: Current income tax benefit', 'Current income tax: Adjustments in respect of current income tax of previous year', 'Deferred income tax: Origination and reversal of temporary differences', 'Current income tax: Current income tax benefit', 'Current income tax: Adjustments in respect of current income tax of previous year', 'Deferred income tax: Origination and reversal of temporary differences'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' current income tax', 29), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 29), ('income tax expense', 14), (' deferred income tax', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 41), (' deferred income tax', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' current income tax', 59), (' income tax expense on continuing operations', 55), (' deferred income tax', 53), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' current income tax', 29), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 29), ('income tax expense', 14), (' deferred income tax', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 41), (' deferred income tax', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' current income tax', 59), (' income tax expense on continuing operations', 55), (' deferred income tax', 53), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('prior period', 36), ('exceptional', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('prior period', 21), ('exceptional', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior period', 35), ('exceptional', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('prior period', 38), ('exceptional', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('prior period', 28), ('exceptional', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('prior period', 36), ('exceptional', 0)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('prior period', 21), ('exceptional', 19)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior period', 35), ('exceptional', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('prior period', 38), ('exceptional', 23)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('prior period', 28), ('exceptional', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-02 13:56:53+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-02 13:56:53+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('NULL', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('NULL', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-02 13:56:53+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-02 13:56:53+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('NULL', 14)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('NULL', 17)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('NULL', 10)]
2023-05-02 13:56:53+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:27+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-04 11:40:27+0530 - sLogger - DEBUG - process_main_pages started
2023-05-04 11:40:27+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-04 11:40:27+0530 - sLogger - DEBUG - start_refactoring started
2023-05-04 11:40:27+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-04 11:40:27+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-04 11:40:27+0530 - sLogger - DEBUG - start_refactoring started
2023-05-04 11:40:27+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-04 11:40:27+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-04 11:40:27+0530 - sLogger - DEBUG - start_refactoring started
2023-05-04 11:40:27+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-04 11:40:27+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-04 11:40:27+0530 - sLogger - DEBUG - set_section_details started
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equity liabilities', 35), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Financial assets | [('noncurrent assets', 69), ('assets', 56), ('current assets', 54), ('equity and liabilities', 47), ('equity liabilities', 46), ('current liabilities', 44), ('noncurrent liabilities', 37), ('liabilities', 32), ('equity', 32)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current assets | score 57
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent assets | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent liabilities | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current assets | score 59
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current liabilities | score 41
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity and liabilities | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Income tax receivable from related parties | [('current assets', 30), ('current liabilities', 30), ('equity and liabilities', 28), ('noncurrent liabilities', 26), ('equity liabilities', 26), ('noncurrent assets', 22), ('liabilities', 21), ('assets', 16), ('equity', 15)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD current assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD current liabilities | score 48
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD noncurrent assets | score 37
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD noncurrent liabilities | score 41
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD non current assets | score 45
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD non current liabilities | score 43
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD equity and liabilities | score 40
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Other current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 48), ('assets', 42), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current assets | score 95
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current liabilities | score 56
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent assets | score 81
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current assets | score 84
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current liabilities | score 60
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity and liabilities | score 33
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Investment in joint ventures | [('noncurrent assets', 44), ('current assets', 38), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('assets', 25), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('liabilities', 16)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD current assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD noncurrent assets | score 45
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD noncurrent liabilities | score 40
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD non current assets | score 45
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD non current liabilities | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD equity and liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Financial assets | [('noncurrent assets', 69), ('assets', 56), ('current assets', 54), ('equity and liabilities', 47), ('equity liabilities', 46), ('current liabilities', 44), ('noncurrent liabilities', 37), ('liabilities', 32), ('equity', 32)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current assets | score 57
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent assets | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent liabilities | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current assets | score 59
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current liabilities | score 41
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity and liabilities | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Other noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 30), ('equity', 24), ('equity and liabilities', 22), ('equity liabilities', 19), ('liabilities', 8)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current assets | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current assets | score 83
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Financial liabilities | [('equity liabilities', 67), ('equity and liabilities', 65), ('liabilities', 60), ('current liabilities', 57), ('noncurrent liabilities', 43), ('noncurrent assets', 22), ('equity', 20), ('current assets', 15), ('assets', 11)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD current assets | score 29
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD current liabilities | score 69
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD noncurrent assets | score 37
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD noncurrent liabilities | score 70
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD non current assets | score 36
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD non current liabilities | score 68
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD equity and liabilities | score 70
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('current assets', 21), ('assets', 19), ('noncurrent assets', 14)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Contributed equity | [('equity', 55), ('equity and liabilities', 48), ('equity liabilities', 41), ('current liabilities', 40), ('current assets', 28), ('liabilities', 27), ('noncurrent liabilities', 27), ('noncurrent assets', 21), ('assets', 19)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current assets | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent assets | score 40
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent liabilities | score 35
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current assets | score 39
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current liabilities | score 37
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity and liabilities | score 57
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Accumulated losses | [('assets', 35), ('current liabilities', 31), ('noncurrent liabilities', 31), ('equity and liabilities', 28), ('current assets', 24), ('noncurrent assets', 24), ('equity liabilities', 24), ('liabilities', 22), ('equity', 11)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD current assets | score 50
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD noncurrent assets | score 46
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD noncurrent liabilities | score 35
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD non current assets | score 44
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD non current liabilities | score 37
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD equity and liabilities | score 35
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD equity | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Reserves | [('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-05-04 11:40:27+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-05-04 11:40:27+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-05-04 11:40:27+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-04 11:40:27+0530 - sLogger - DEBUG - set_section_details started
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating activities | working capital adjustments
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from government grants | operating profit before working capital changes
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts of income tax (from related party) | operating profit before working capital changes
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | operating cash flow before working capital changes
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing activities | movements in working capital
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | adjustments for increase decrease in operating liabilities
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing activities | changes in working capital
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayments of principal portion lease liabilities | operating profit before changes in assets and liabilities
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from bank borrowings | operating profit before working capital changes
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayments of bank borrowings | operating profit before working capital changes
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease )increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at beginning of the year | changes in operating assets and liabilities
2023-05-04 11:40:27+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 December | changes in operating assets and liabilities
2023-05-04 11:40:29+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('cash and bank balances', 36), ('cash and cash equivalents', 35), (' cash and cash equivalents', 35), ('bank balances other than cash and cash equivalents', 28), ('other bank balances', 27), ('bank balances other than above', 25), ('cash and short term deposits', 25)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('bank balances other than above', 40), ('bank balances other than cash and cash equivalents', 39), ('cash and short term deposits', 37), ('cash and cash equivalents', 33), (' cash and cash equivalents', 33), ('cash and bank balances', 30), ('other bank balances', 28)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 28259.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [28259.0]}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('cash and bank balances', 36), ('cash and cash equivalents', 35), (' cash and cash equivalents', 35), ('bank balances other than cash and cash equivalents', 28), ('other bank balances', 27), ('bank balances other than above', 25), ('cash and short term deposits', 25)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('bank balances other than above', 40), ('bank balances other than cash and cash equivalents', 39), ('cash and short term deposits', 37), ('cash and cash equivalents', 33), (' cash and cash equivalents', 33), ('cash and bank balances', 30), ('other bank balances', 28)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 19589.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [19589.0]}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = cash at bank and on hand , res_fuzz_match = [(' cash at bank', 100), (' cash at bank and on hand', 100), ('cash on hand', 78), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 78), (' cash on hand and at bank', 78), (' cash and cash equivalents', 56), (' short term deposits', 28)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = cash at bank and on hand , res_fuzz_match = [(' cash at bank', 100), (' cash at bank and on hand', 100), ('cash on hand', 78), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 78), (' cash on hand and at bank', 78), (' cash and cash equivalents', 56), (' short term deposits', 28)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [19589.0, 28259.0], 'label': [' Cash at bank and on hand', ' Cash at bank and on hand'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('inventories', 44)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 26953.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [26953.0]}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('inventories', 44)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 27198.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [27198.0]}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = raw materials , res_fuzz_match = [('raw materials', 100), (' raw materials', 100), (' stores and other consumables at cost', 50), (' cranes - in transit', 50), (' goods in transit', 40), (' provision for inventory obsolescence', 40), (' cranes', 40), (' spare parts', 40), (' inventories', 33), (' work in progress', 30), (' finished goods at cost', 20), (' finished goods', 10), (' finished goods', 10)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' stores and other consumables at cost', 36), (' provision for inventory obsolescence', 36), (' inventories', 33), (' goods in transit', 27), (' spare parts', 20), (' work in progress', 18), (' cranes - in transit', 18), ('raw materials', 10), (' raw materials', 10), (' cranes', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = raw materials , res_fuzz_match = [('raw materials', 100), (' raw materials', 100), (' stores and other consumables at cost', 50), (' cranes - in transit', 50), (' goods in transit', 40), (' provision for inventory obsolescence', 40), (' cranes', 40), (' spare parts', 40), (' inventories', 33), (' work in progress', 30), (' finished goods at cost', 20), (' finished goods', 10), (' finished goods', 10)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' stores and other consumables at cost', 36), (' provision for inventory obsolescence', 36), (' inventories', 33), (' goods in transit', 27), (' spare parts', 20), (' work in progress', 18), (' cranes - in transit', 18), ('raw materials', 10), (' raw materials', 10), (' cranes', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [18547.0, 8651.0, 19816.0, 7137.0], 'label': [' Raw materials', ' Finished goods', ' Raw materials', ' Finished goods'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('other financial assets', 81), ('other current financial assets', 65), ('other assets', 50), ('other current assets', 44), ('prepayments', 21)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('other current assets', 35), ('other financial assets', 31), ('other current financial assets', 30), ('other assets', 23), ('prepayments', 21)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 7], 'score': 100, 'value': 30081.0, 'line_item_label': ['Current assets', 'Financial assets', 'Other current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 29753.0, 328.0]}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('other financial assets', 81), ('other current financial assets', 65), ('other assets', 50), ('other current assets', 44), ('prepayments', 21)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('other current assets', 35), ('other financial assets', 31), ('other current financial assets', 30), ('other assets', 23), ('prepayments', 21)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 7], 'score': 100, 'value': 489.0, 'line_item_label': ['Current assets', 'Financial assets', 'Other current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 0.0, 489.0]}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('prepaid expense', 50), ('prepaid expenditure', 50), ('other prepayments', 42), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepaid expenditure', 39), ('prepaid expense', 36), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('prepaid expenditure', 43), ('other prepayments', 43), ('prepayments', 33), ('prepaid expense', 29), ('prepaid', 29)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('current', 71), ('other prepayments', 42), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('prepaid expense', 50), ('prepaid expenditure', 50), ('other prepayments', 42), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepaid expenditure', 39), ('prepaid expense', 36), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('prepaid expenditure', 43), ('other prepayments', 43), ('prepayments', 33), ('prepaid expense', 29), ('prepaid', 29)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('current', 71), ('other prepayments', 42), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:40:29+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6], 'score': [100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 51.0, 29702.0, 29753.0], 'label': ['Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:29+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-04 11:40:29+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:29+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:29+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' other financial assets', 81), (' biological assets', 56), ('other assets', 50), ('other current assets', 44), (' other current assets', 44), (' trade and other receivables', 29), (' income tax receivable from related parties', 26), (' deferred operating expenditure', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [(' income tax receivable from related parties', 100), (' trade and other receivables', 47), ('other current assets', 35), (' other current assets', 35), (' other financial assets', 31), (' deferred operating expenditure', 30), (' financial assets', 26), ('other assets', 23), (' biological assets', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' deferred operating expenditure', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 35)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6, 7], 'score': 100, 'value': 49610.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Financial assets', 'Income tax receivable from related parties', 'Other current assets'], 'note_numbers': [nan, '7', '9', '20', '10'], 'line_item_value': [0.0, 11999.0, 29753.0, 7530.0, 328.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' other financial assets', 81), (' biological assets', 56), ('other assets', 50), ('other current assets', 44), (' other current assets', 44), (' trade and other receivables', 29), (' income tax receivable from related parties', 26), (' deferred operating expenditure', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [(' income tax receivable from related parties', 100), (' trade and other receivables', 47), ('other current assets', 35), (' other current assets', 35), (' other financial assets', 31), (' deferred operating expenditure', 30), (' financial assets', 26), ('other assets', 23), (' biological assets', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' deferred operating expenditure', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 35)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6, 7], 'score': 100, 'value': 20431.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Financial assets', 'Income tax receivable from related parties', 'Other current assets'], 'note_numbers': [nan, '7', '9', '20', '10'], 'line_item_value': [0.0, 13624.0, 0.0, 6318.0, 489.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other deposits receivable - related party', 90), (' interest receivable', 90), (' income tax receivable from related parties', 80), (' amount receivable from controlling entity', 80), (' related party receivable', 80), (' long service leave receivable', 70), (' other receivables - related party', 70), ('foreign exchange derivatives at fair value', 50), (' electricity derivatives at fair value', 50), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' share of jv prepayments', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' accrued rebates', 32), (' other debtors and prepayments', 32), ('other assets', 30), (' accrued interest', 30), (' bank guarantee', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 20), (' lng', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivable', 100), (' related party disclosures', 67), (' interest receivable', 67), (' other', 60), (' other deposits receivable - related party', 57), (' amount receivable from controlling entity', 52), (' long service leave receivable', 50), (' income tax receivable from related parties', 48), (' other receivables - related party', 48), (' bank guarantee', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 39), (' forward exchange contracts', 39), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' derivative contracts - fair value', 35), (' other debtors and prepayments', 35), (' lng', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other deposits receivable - related party', 90), (' interest receivable', 90), (' income tax receivable from related parties', 80), (' amount receivable from controlling entity', 80), (' related party receivable', 80), (' long service leave receivable', 70), (' other receivables - related party', 70), ('foreign exchange derivatives at fair value', 50), (' electricity derivatives at fair value', 50), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' share of jv prepayments', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' accrued rebates', 32), (' other debtors and prepayments', 32), ('other assets', 30), (' accrued interest', 30), (' bank guarantee', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 20), (' lng', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivable', 100), (' related party disclosures', 67), (' interest receivable', 67), (' other', 60), (' other deposits receivable - related party', 57), (' amount receivable from controlling entity', 52), (' long service leave receivable', 50), (' income tax receivable from related parties', 48), (' other receivables - related party', 48), (' bank guarantee', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 39), (' forward exchange contracts', 39), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' derivative contracts - fair value', 35), (' other debtors and prepayments', 35), (' lng', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [90, 100, 90, 100], 'value': [1697.0, 11927.0, 1390.0, 10609.0], 'label': [' GST receivable', ' Related party receivables (Note 20)', ' GST receivable', ' Related party receivables (Note 20)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('foreign exchange derivatives at fair value', 100), (' electricity derivatives at fair value', 77), (' foreign exchange forward contracts', 67), (' current investments', 64), (' derivative contracts - fair value', 62), (' forward exchange contracts', 58), (' rental bond', 55), (' related party receivable', 50), (' interest receivable', 47), (' other receivables - related party', 46), (' accrued rebates', 45), (' other deposits receivable - related party', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' condensate', 43), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' other', 40), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' bank guarantee', 38), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), (' electricity derivatives at fair value', 100), ('foreign exchange derivatives at fair value', 73), (' current investments', 71), (' derivative contracts - fair value', 62), (' interest receivable', 60), (' accrued interest', 50), (' related party receivable', 50), (' other debtors and prepayments', 48), (' amount receivable from controlling entity', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 38), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('current', 71), ('foreign exchange derivatives at fair value', 70), (' derivative contracts - fair value', 62), (' current investments', 57), (' related party receivable', 50), (' related party disclosures', 48), (' interest receivable', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' accrued interest', 43), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' amount receivable from controlling entity', 43), (' other debtors and prepayments', 43), (' other', 40), (' forward exchange contracts', 38), (' foreign exchange forward contracts', 37), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), (' condensate', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('foreign exchange derivatives at fair value', 100), (' electricity derivatives at fair value', 77), (' foreign exchange forward contracts', 67), (' current investments', 64), (' derivative contracts - fair value', 62), (' forward exchange contracts', 58), (' rental bond', 55), (' related party receivable', 50), (' interest receivable', 47), (' other receivables - related party', 46), (' accrued rebates', 45), (' other deposits receivable - related party', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' condensate', 43), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' other', 40), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' bank guarantee', 38), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), (' electricity derivatives at fair value', 100), ('foreign exchange derivatives at fair value', 73), (' current investments', 71), (' derivative contracts - fair value', 62), (' interest receivable', 60), (' accrued interest', 50), (' related party receivable', 50), (' other debtors and prepayments', 48), (' amount receivable from controlling entity', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 38), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('current', 71), ('foreign exchange derivatives at fair value', 70), (' derivative contracts - fair value', 62), (' current investments', 57), (' related party receivable', 50), (' related party disclosures', 48), (' interest receivable', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' accrued interest', 43), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' amount receivable from controlling entity', 43), (' other debtors and prepayments', 43), (' other', 40), (' forward exchange contracts', 38), (' foreign exchange forward contracts', 37), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), (' condensate', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 0.0, 51.0, 29702.0, 29753.0, 12453.0], 'label': ['Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Non-current Electricity derivatives at fair value', 'Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Non-current Electricity derivatives at fair value'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('current assets', 54)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('current assets', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': 81, 'value': 328.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 328.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('current assets', 54)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('current assets', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': 81, 'value': 489.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 489.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 3731.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [3731.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 17531.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [17531.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [90235.0, 57.0, 351.0, -154.0, 90489.0, 312388.0, 827.0, 4618.0, -1182.0, 316651.0, 1628.0, 0.0, 20598.0, 0.0, 22226.0, 795.0, 0.0, 0.0, 0.0, 795.0, 405046.0, 884.0, 25567.0, -1336.0, 430161.0], 'label': ['Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 12, 13, 14, 15, 16, 24, 25, 26, 27, 28, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100], 'value': [90430.0, 376.0, -149.0, 74.0, 90731.0, 314181.0, 5232.0, -1122.0, -74.0, 318217.0, 1628.0, 34643.0, 0.0, 0.0, 36271.0, 2538.0, 2538.0, 0.0, 0.0, -65.0, -65.0, 0.0, 0.0, 2473.0, 2473.0, 795.0, 0.0, 0.0, 0.0, 795.0, 1678.0, 0.0, 408777.0, 40251.0, -1336.0, 0.0, 447692.0], 'label': ['Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Construction in progress $000', 'Cost Additions', 'Construction in progress $000', 'Cost Disposals', 'Construction in progress $000', 'Cost Transfer', 'Construction in progress $000', 'Cost At 31 December 2020', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 3731.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [3731.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 17531.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [17531.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('righttouse', 33), ('capital work in progress', 32), ('tangible', 29), ('work in progress', 23), ('rightofuse', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('tangible', 43), ('capital work-in-progress', 31), ('capital workinprogress', 31), ('capital work in progress', 23), ('work in progress', 23), ('rightofuse', 22), ('righttouse', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1476.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['13'], 'line_item_value': [1476.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('righttouse', 33), ('capital work in progress', 32), ('tangible', 29), ('work in progress', 23), ('rightofuse', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('tangible', 43), ('capital work-in-progress', 31), ('capital workinprogress', 31), ('capital work in progress', 23), ('work in progress', 23), ('rightofuse', 22), ('righttouse', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1007.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['13'], 'line_item_value': [1007.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('tangible assets', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('tangible assets', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('tangible assets', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('tangible assets', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 47), ('intangible under development', 42)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('intangible assets under development', 77), ('intangible', 67), ('intangible under development', 46)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 47), ('intangible under development', 42)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('intangible assets under development', 77), ('intangible', 67), ('intangible under development', 46)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('donations', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('donations', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('donations', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('donations', 22)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 69), (' investments accounted for using the equity method', 63), ('joint ventures and associates', 53), ('derivative financial instruments', 50)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('derivative financial instruments', 77), (' investment in associate', 48), ('joint ventures and associates', 46), (' investment in joint venture', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 54535.0, 'line_item_label': ['Investment in joint ventures'], 'note_numbers': ['11'], 'line_item_value': [54535.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 69), (' investments accounted for using the equity method', 63), ('joint ventures and associates', 53), ('derivative financial instruments', 50)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('derivative financial instruments', 77), (' investment in associate', 48), ('joint ventures and associates', 46), (' investment in joint venture', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 47672.0, 'line_item_label': ['Investment in joint ventures'], 'note_numbers': ['11'], 'line_item_value': [47672.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = investment in joint venture (southern cross aluminium pty ltd) , res_fuzz_match = [('investment in joint venture', 100), (' investment in associate', 69), (' carrying amount at the end of the financial year', 43)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = investment in joint venture (southern cross aluminium pty ltd) , res_fuzz_match = [('investment in joint venture', 100), (' investment in associate', 69), (' carrying amount at the end of the financial year', 43)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [47672.0, 54535.0], 'label': [' Investment in joint venture (Southern Cross Aluminium Pty Ltd)', ' Investment in joint venture (Southern Cross Aluminium Pty Ltd)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = ownership interest % , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = ownership interest % , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = ownership interest $000 , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = ownership interest $000 , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = at 1. january , res_fuzz_match = [('investment in joint venture', 43), (' carrying amount at the end of the financial year', 43), (' investment in associate', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('investment in joint venture', 79), (' investment in associate', 54), (' carrying amount at the end of the financial year', 42)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = share of other comprehensive income, net of tax , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), (' investment in associate', 46), ('investment in joint venture', 42)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = carrying value of investment at end of year , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), ('investment in joint venture', 58), (' investment in associate', 54)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = at 1. january , res_fuzz_match = [('investment in joint venture', 43), (' carrying amount at the end of the financial year', 43), (' investment in associate', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('investment in joint venture', 79), (' investment in associate', 54), (' carrying amount at the end of the financial year', 42)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = share of other comprehensive income, net of tax , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), (' investment in associate', 46), ('investment in joint venture', 42)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = carrying value of investment at end of year , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), ('investment in joint venture', 58), (' investment in associate', 54)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('deferred tax assets', 29), ('deferred tax', 21), ('deferred charges', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('deferred tax assets', 57), ('deferred tax', 27), ('deferred charges', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 12309.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [12309.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('deferred tax assets', 29), ('deferred tax', 21), ('deferred charges', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('deferred tax assets', 57), ('deferred tax', 27), ('deferred charges', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 24223.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [24223.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [('deferred tax assets', 50), (' deferred tax balances', 50)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [('deferred tax assets', 50), (' deferred tax balances', 50)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 56)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 56)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13, 15, 28, 29, 31, 44, 45, 47, 60, 61, 63], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [5757.0, 24223.0, 5757.0, -11017.0, 12309.0, -11017.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'label': [' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('other assets', 47), (' other assets', 47), (' other non-current assets', 42), (' other non-current assets', 42), ('non-current', 38), (' financial assets', 38), (' exploration and evaluation expenditure', 35), (' leased assets', 28), (' loan receivables', 27), (' leases', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' leased assets', 61), (' other non-current assets', 56), (' other non-current assets', 56), ('other assets', 50), (' other assets', 50), (' loan receivables', 33), ('non-current', 30), (' exploration and evaluation expenditure', 25), (' leases', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13, 15], 'score': 100, 'value': 13131.0, 'line_item_label': ['Non-current assets', 'Financial assets', 'Other non-current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 12453.0, 678.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('other assets', 47), (' other assets', 47), (' other non-current assets', 42), (' other non-current assets', 42), ('non-current', 38), (' financial assets', 38), (' exploration and evaluation expenditure', 35), (' leased assets', 28), (' loan receivables', 27), (' leases', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' leased assets', 61), (' other non-current assets', 56), (' other non-current assets', 56), ('other assets', 50), (' other assets', 50), (' loan receivables', 33), ('non-current', 30), (' exploration and evaluation expenditure', 25), (' leases', 24)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13, 15], 'score': 100, 'value': 0.0, 'line_item_label': ['Non-current assets', 'Financial assets', 'Other non-current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 0.0, 0.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 77), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' allowance for expected credit losses', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' total. properties', 36), (' right-of-use-assets', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' total. properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 33), (' warehouse and office equipment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('non-current', 57), (' allowance for expected credit losses', 57), ('finance receivables', 43), (' electricity derivatives at fair value', 43), (' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total. properties', 43), (' right-of-use-assets', 29), (' warehouse and office equipment', 29), (' motor vehicles', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('non-current', 100), (' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' total. properties', 36), (' right-of-use-assets', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 77), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' allowance for expected credit losses', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' total. properties', 36), (' right-of-use-assets', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' total. properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 33), (' warehouse and office equipment', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('non-current', 57), (' allowance for expected credit losses', 57), ('finance receivables', 43), (' electricity derivatives at fair value', 43), (' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total. properties', 43), (' right-of-use-assets', 29), (' warehouse and office equipment', 29), (' motor vehicles', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('non-current', 100), (' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' total. properties', 36), (' right-of-use-assets', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 7], 'score': [100, 100, 100, 100], 'value': [0.0, 0.0, 29702.0, 12453.0], 'label': ['Current Electricity derivatives at fair value', 'Non-current Electricity derivatives at fair value', 'Current Electricity derivatives at fair value', 'Non-current Electricity derivatives at fair value'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('non-current assets total', 37)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('non-current assets total', 56)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 15], 'score': 84, 'value': 678.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 678.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('non-current assets total', 37)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('non-current assets total', 56)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 15], 'score': 84, 'value': 0.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 0.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:40:30+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-04 11:40:30+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' bank overdraft', 29), (' leases', 22), ('borrowings', 10), ('short term debt', 7), ('short-term debt', 7), ('shortterm debt', 7), ('shortterm borrowings', 7)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 24], 'score': 100, 'value': 4471.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['16', '13'], 'line_item_value': [4000.0, 471.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' bank overdraft', 29), (' leases', 22), ('borrowings', 10), ('short term debt', 7), ('short-term debt', 7), ('shortterm debt', 7), ('shortterm borrowings', 7)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 24], 'score': 100, 'value': 412.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['16', '13'], 'line_item_value': [0.0, 412.0]}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 9, 13], 'score': [100, 100, 100, 100], 'value': [0.0, 0.0, 4000.0, 0.0], 'label': [' Utilised ', ' Utilised ', ' Utilised ', ' Utilised '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:40:30+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:40:30+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank borrowings , res_fuzz_match = [('bank borrowings', 100), (' utilised – bank borrowings', 100), (' bank overdraft', 73), (' secured long-term bank loans', 60), (' loans from related party', 45), (' not later than 1 year', 36), (' lease liabilities - current', 36), (' balance at the end of period', 36), ('current', 29), (' current', 29), (' lease liabilities', 27), (' leases', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = bank borrowings , res_fuzz_match = [('bank borrowings', 100), (' utilised – bank borrowings', 100), (' bank overdraft', 73), (' secured long-term bank loans', 60), (' loans from related party', 45), (' not later than 1 year', 36), (' lease liabilities - current', 36), (' balance at the end of period', 36), ('current', 29), (' current', 29), (' lease liabilities', 27), (' leases', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-04 11:40:30+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [0.0, 4000.0], 'label': [' Bank borrowings', ' Bank borrowings'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-04 11:42:56+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-04 11:42:56+0530 - sLogger - DEBUG - process_main_pages started
2023-05-04 11:42:56+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-04 11:42:56+0530 - sLogger - DEBUG - start_refactoring started
2023-05-04 11:42:56+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-04 11:42:56+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-04 11:42:56+0530 - sLogger - DEBUG - start_refactoring started
2023-05-04 11:42:56+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-04 11:42:56+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-04 11:42:56+0530 - sLogger - DEBUG - start_refactoring started
2023-05-04 11:42:56+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-04 11:42:56+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-04 11:42:56+0530 - sLogger - DEBUG - set_section_details started
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equity liabilities', 35), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Financial assets | [('noncurrent assets', 69), ('assets', 56), ('current assets', 54), ('equity and liabilities', 47), ('equity liabilities', 46), ('current liabilities', 44), ('noncurrent liabilities', 37), ('liabilities', 32), ('equity', 32)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current assets | score 57
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent assets | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent liabilities | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current assets | score 59
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current liabilities | score 41
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity and liabilities | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Income tax receivable from related parties | [('current assets', 30), ('current liabilities', 30), ('equity and liabilities', 28), ('noncurrent liabilities', 26), ('equity liabilities', 26), ('noncurrent assets', 22), ('liabilities', 21), ('assets', 16), ('equity', 15)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD current assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD current liabilities | score 48
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD noncurrent assets | score 37
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD noncurrent liabilities | score 41
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD non current assets | score 45
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD non current liabilities | score 43
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD equity and liabilities | score 40
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Income tax receivable from related parties | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Other current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 48), ('assets', 42), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('liabilities', 8)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current assets | score 95
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current liabilities | score 56
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent assets | score 81
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current assets | score 84
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current liabilities | score 60
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity and liabilities | score 33
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Investment in joint ventures | [('noncurrent assets', 44), ('current assets', 38), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('assets', 25), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('liabilities', 16)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD current assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD noncurrent assets | score 45
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD noncurrent liabilities | score 40
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD non current assets | score 45
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD non current liabilities | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD equity and liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Investment in joint ventures | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Financial assets | [('noncurrent assets', 69), ('assets', 56), ('current assets', 54), ('equity and liabilities', 47), ('equity liabilities', 46), ('current liabilities', 44), ('noncurrent liabilities', 37), ('liabilities', 32), ('equity', 32)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current assets | score 57
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent assets | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD noncurrent liabilities | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current assets | score 59
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD non current liabilities | score 41
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity and liabilities | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Other noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 30), ('equity', 24), ('equity and liabilities', 22), ('equity liabilities', 19), ('liabilities', 8)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current assets | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current assets | score 83
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Financial liabilities | [('equity liabilities', 67), ('equity and liabilities', 65), ('liabilities', 60), ('current liabilities', 57), ('noncurrent liabilities', 43), ('noncurrent assets', 22), ('equity', 20), ('current assets', 15), ('assets', 11)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD current assets | score 29
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD current liabilities | score 69
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD noncurrent assets | score 37
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD noncurrent liabilities | score 70
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD non current assets | score 36
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD non current liabilities | score 68
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD equity and liabilities | score 70
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Financial liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('current assets', 21), ('assets', 19), ('noncurrent assets', 14)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Contributed equity | [('equity', 55), ('equity and liabilities', 48), ('equity liabilities', 41), ('current liabilities', 40), ('current assets', 28), ('liabilities', 27), ('noncurrent liabilities', 27), ('noncurrent assets', 21), ('assets', 19)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current assets | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent assets | score 40
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent liabilities | score 35
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current assets | score 39
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current liabilities | score 37
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity and liabilities | score 57
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Accumulated losses | [('assets', 35), ('current liabilities', 31), ('noncurrent liabilities', 31), ('equity and liabilities', 28), ('current assets', 24), ('noncurrent assets', 24), ('equity liabilities', 24), ('liabilities', 22), ('equity', 11)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD current assets | score 50
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD noncurrent assets | score 46
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD noncurrent liabilities | score 35
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD non current assets | score 44
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD non current liabilities | score 37
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD equity and liabilities | score 35
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Accumulated losses | MATCH WORD equity | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Reserves | [('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-05-04 11:42:56+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-05-04 11:42:56+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-05-04 11:42:56+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-04 11:42:56+0530 - sLogger - DEBUG - set_section_details started
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating activities | working capital adjustments
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from government grants | operating profit before working capital changes
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts of income tax (from related party) | operating profit before working capital changes
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | operating cash flow before working capital changes
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing activities | movements in working capital
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | adjustments for increase decrease in operating liabilities
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing activities | changes in working capital
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayments of principal portion lease liabilities | operating profit before changes in assets and liabilities
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from bank borrowings | operating profit before working capital changes
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayments of bank borrowings | operating profit before working capital changes
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease )increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at beginning of the year | changes in operating assets and liabilities
2023-05-04 11:42:57+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 December | changes in operating assets and liabilities
2023-05-04 11:42:59+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('cash and bank balances', 36), ('cash and cash equivalents', 35), (' cash and cash equivalents', 35), ('bank balances other than cash and cash equivalents', 28), ('other bank balances', 27), ('bank balances other than above', 25), ('cash and short term deposits', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('bank balances other than above', 40), ('bank balances other than cash and cash equivalents', 39), ('cash and short term deposits', 37), ('cash and cash equivalents', 33), (' cash and cash equivalents', 33), ('cash and bank balances', 30), ('other bank balances', 28)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 28259.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [28259.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('cash and bank balances', 36), ('cash and cash equivalents', 35), (' cash and cash equivalents', 35), ('bank balances other than cash and cash equivalents', 28), ('other bank balances', 27), ('bank balances other than above', 25), ('cash and short term deposits', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('bank balances other than above', 40), ('bank balances other than cash and cash equivalents', 39), ('cash and short term deposits', 37), ('cash and cash equivalents', 33), (' cash and cash equivalents', 33), ('cash and bank balances', 30), ('other bank balances', 28)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 19589.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['6'], 'line_item_value': [19589.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cash at bank and on hand , res_fuzz_match = [(' cash at bank', 100), (' cash at bank and on hand', 100), ('cash on hand', 78), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 78), (' cash on hand and at bank', 78), (' cash and cash equivalents', 56), (' short term deposits', 28)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cash at bank and on hand , res_fuzz_match = [(' cash at bank', 100), (' cash at bank and on hand', 100), ('cash on hand', 78), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 78), (' cash on hand and at bank', 78), (' cash and cash equivalents', 56), (' short term deposits', 28)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [19589.0, 28259.0], 'label': [' Cash at bank and on hand', ' Cash at bank and on hand'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('inventories', 44)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 26953.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [26953.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('inventories', 44)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('inventories', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 27198.0, 'line_item_label': ['Inventories'], 'note_numbers': ['8'], 'line_item_value': [27198.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = raw materials , res_fuzz_match = [('raw materials', 100), (' raw materials', 100), (' stores and other consumables at cost', 50), (' cranes - in transit', 50), (' goods in transit', 40), (' provision for inventory obsolescence', 40), (' cranes', 40), (' spare parts', 40), (' inventories', 33), (' work in progress', 30), (' finished goods at cost', 20), (' finished goods', 10), (' finished goods', 10)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' stores and other consumables at cost', 36), (' provision for inventory obsolescence', 36), (' inventories', 33), (' goods in transit', 27), (' spare parts', 20), (' work in progress', 18), (' cranes - in transit', 18), ('raw materials', 10), (' raw materials', 10), (' cranes', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = raw materials , res_fuzz_match = [('raw materials', 100), (' raw materials', 100), (' stores and other consumables at cost', 50), (' cranes - in transit', 50), (' goods in transit', 40), (' provision for inventory obsolescence', 40), (' cranes', 40), (' spare parts', 40), (' inventories', 33), (' work in progress', 30), (' finished goods at cost', 20), (' finished goods', 10), (' finished goods', 10)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = finished goods , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' stores and other consumables at cost', 36), (' provision for inventory obsolescence', 36), (' inventories', 33), (' goods in transit', 27), (' spare parts', 20), (' work in progress', 18), (' cranes - in transit', 18), ('raw materials', 10), (' raw materials', 10), (' cranes', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [18547.0, 8651.0, 19816.0, 7137.0], 'label': [' Raw materials', ' Finished goods', ' Raw materials', ' Finished goods'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('other financial assets', 81), ('other current financial assets', 65), ('other assets', 50), ('other current assets', 44), ('prepayments', 21)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('other current assets', 35), ('other financial assets', 31), ('other current financial assets', 30), ('other assets', 23), ('prepayments', 21)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 7], 'score': 100, 'value': 30081.0, 'line_item_label': ['Current assets', 'Financial assets', 'Other current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 29753.0, 328.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('other financial assets', 81), ('other current financial assets', 65), ('other assets', 50), ('other current assets', 44), ('prepayments', 21)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('other current assets', 35), ('other financial assets', 31), ('other current financial assets', 30), ('other assets', 23), ('prepayments', 21)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other financial assets', 68), ('prepayments', 16)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 7], 'score': 100, 'value': 489.0, 'line_item_label': ['Current assets', 'Financial assets', 'Other current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 0.0, 489.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('prepaid expense', 50), ('prepaid expenditure', 50), ('other prepayments', 42), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepaid expenditure', 39), ('prepaid expense', 36), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('prepaid expenditure', 43), ('other prepayments', 43), ('prepayments', 33), ('prepaid expense', 29), ('prepaid', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('current', 71), ('other prepayments', 42), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('prepaid expense', 50), ('prepaid expenditure', 50), ('other prepayments', 42), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), ('other prepayments', 42), ('prepaid expenditure', 39), ('prepaid expense', 36), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('prepaid expenditure', 43), ('other prepayments', 43), ('prepayments', 33), ('prepaid expense', 29), ('prepaid', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('current', 71), ('other prepayments', 42), ('prepaid expense', 36), ('prepaid expenditure', 33), ('prepayments', 33), ('prepaid', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6], 'score': [100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 51.0, 29702.0, 29753.0], 'label': ['Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' other financial assets', 81), (' biological assets', 56), ('other assets', 50), ('other current assets', 44), (' other current assets', 44), (' trade and other receivables', 29), (' income tax receivable from related parties', 26), (' deferred operating expenditure', 24)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [(' income tax receivable from related parties', 100), (' trade and other receivables', 47), ('other current assets', 35), (' other current assets', 35), (' other financial assets', 31), (' deferred operating expenditure', 30), (' financial assets', 26), ('other assets', 23), (' biological assets', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' deferred operating expenditure', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 35)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6, 7], 'score': 100, 'value': 49610.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Financial assets', 'Income tax receivable from related parties', 'Other current assets'], 'note_numbers': [nan, '7', '9', '20', '10'], 'line_item_value': [0.0, 11999.0, 29753.0, 7530.0, 328.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' other financial assets', 81), (' biological assets', 56), ('other assets', 50), ('other current assets', 44), (' other current assets', 44), (' trade and other receivables', 29), (' income tax receivable from related parties', 26), (' deferred operating expenditure', 24)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [(' income tax receivable from related parties', 100), (' trade and other receivables', 47), ('other current assets', 35), (' other current assets', 35), (' other financial assets', 31), (' deferred operating expenditure', 30), (' financial assets', 26), ('other assets', 23), (' biological assets', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets', 100), (' other current assets', 100), ('other assets', 73), (' other financial assets', 68), (' biological assets', 45), (' deferred operating expenditure', 45), (' financial assets', 44), (' trade and other receivables', 39), (' income tax receivable from related parties', 35)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 6, 7], 'score': 100, 'value': 20431.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Financial assets', 'Income tax receivable from related parties', 'Other current assets'], 'note_numbers': [nan, '7', '9', '20', '10'], 'line_item_value': [0.0, 13624.0, 0.0, 6318.0, 489.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other deposits receivable - related party', 90), (' interest receivable', 90), (' income tax receivable from related parties', 80), (' amount receivable from controlling entity', 80), (' related party receivable', 80), (' long service leave receivable', 70), (' other receivables - related party', 70), ('foreign exchange derivatives at fair value', 50), (' electricity derivatives at fair value', 50), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' share of jv prepayments', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' accrued rebates', 32), (' other debtors and prepayments', 32), ('other assets', 30), (' accrued interest', 30), (' bank guarantee', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 20), (' lng', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivable', 100), (' related party disclosures', 67), (' interest receivable', 67), (' other', 60), (' other deposits receivable - related party', 57), (' amount receivable from controlling entity', 52), (' long service leave receivable', 50), (' income tax receivable from related parties', 48), (' other receivables - related party', 48), (' bank guarantee', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 39), (' forward exchange contracts', 39), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' derivative contracts - fair value', 35), (' other debtors and prepayments', 35), (' lng', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' other deposits receivable - related party', 90), (' interest receivable', 90), (' income tax receivable from related parties', 80), (' amount receivable from controlling entity', 80), (' related party receivable', 80), (' long service leave receivable', 70), (' other receivables - related party', 70), ('foreign exchange derivatives at fair value', 50), (' electricity derivatives at fair value', 50), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' share of jv prepayments', 40), (' current investments', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 40), (' accrued rebates', 32), (' other debtors and prepayments', 32), ('other assets', 30), (' accrued interest', 30), (' bank guarantee', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 20), (' lng', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivable', 100), (' related party disclosures', 67), (' interest receivable', 67), (' other', 60), (' other deposits receivable - related party', 57), (' amount receivable from controlling entity', 52), (' long service leave receivable', 50), (' income tax receivable from related parties', 48), (' other receivables - related party', 48), (' bank guarantee', 46), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' share of jv prepayments', 42), (' electricity derivatives at fair value', 41), (' foreign exchange forward contracts', 39), (' forward exchange contracts', 39), ('other assets', 36), (' accrued interest', 36), (' rental bond', 36), (' derivative contracts - fair value', 35), (' other debtors and prepayments', 35), (' lng', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [90, 100, 90, 100], 'value': [1697.0, 11927.0, 1390.0, 10609.0], 'label': [' GST receivable', ' Related party receivables (Note 20)', ' GST receivable', ' Related party receivables (Note 20)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('foreign exchange derivatives at fair value', 100), (' electricity derivatives at fair value', 77), (' foreign exchange forward contracts', 67), (' current investments', 64), (' derivative contracts - fair value', 62), (' forward exchange contracts', 58), (' rental bond', 55), (' related party receivable', 50), (' interest receivable', 47), (' other receivables - related party', 46), (' accrued rebates', 45), (' other deposits receivable - related party', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' condensate', 43), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' other', 40), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' bank guarantee', 38), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), (' electricity derivatives at fair value', 100), ('foreign exchange derivatives at fair value', 73), (' current investments', 71), (' derivative contracts - fair value', 62), (' interest receivable', 60), (' accrued interest', 50), (' related party receivable', 50), (' other debtors and prepayments', 48), (' amount receivable from controlling entity', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 38), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('current', 71), ('foreign exchange derivatives at fair value', 70), (' derivative contracts - fair value', 62), (' current investments', 57), (' related party receivable', 50), (' related party disclosures', 48), (' interest receivable', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' accrued interest', 43), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' amount receivable from controlling entity', 43), (' other debtors and prepayments', 43), (' other', 40), (' forward exchange contracts', 38), (' foreign exchange forward contracts', 37), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), (' condensate', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [('current', 100), ('foreign exchange derivatives at fair value', 100), (' electricity derivatives at fair value', 77), (' foreign exchange forward contracts', 67), (' current investments', 64), (' derivative contracts - fair value', 62), (' forward exchange contracts', 58), (' rental bond', 55), (' related party receivable', 50), (' interest receivable', 47), (' other receivables - related party', 46), (' accrued rebates', 45), (' other deposits receivable - related party', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' condensate', 43), (' amount receivable from controlling entity', 42), (' share of jv prepayments', 42), (' other', 40), (' income tax receivable from related parties', 39), (' other debtors and prepayments', 39), (' related party disclosures', 38), (' bank guarantee', 38), ('other assets', 36), (' lng', 33), (' deposits', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [('current', 100), (' electricity derivatives at fair value', 100), ('foreign exchange derivatives at fair value', 73), (' current investments', 71), (' derivative contracts - fair value', 62), (' interest receivable', 60), (' accrued interest', 50), (' related party receivable', 50), (' other debtors and prepayments', 48), (' amount receivable from controlling entity', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' condensate', 43), (' other', 40), (' foreign exchange forward contracts', 40), (' forward exchange contracts', 38), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current investments', 100), (' amount receivable from controlling entity', 57), (' bank guarantee', 57), (' accrued rebates', 57), ('other assets', 43), (' electricity derivatives at fair value', 43), (' accrued interest', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' interest receivable', 43), (' condensate', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' lng', 33), ('foreign exchange derivatives at fair value', 29), (' long service leave receivable', 29), (' deposits', 29), (' related party receivable', 29), (' share of jv prepayments', 29), (' other debtors and prepayments', 29), (' other', 20), (' rental bond', 14)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('current', 71), ('foreign exchange derivatives at fair value', 70), (' derivative contracts - fair value', 62), (' current investments', 57), (' related party receivable', 50), (' related party disclosures', 48), (' interest receivable', 47), (' other receivables - related party', 46), (' rental bond', 45), (' accrued rebates', 45), (' accrued interest', 43), (' income tax receivable from related parties', 43), (' long service leave receivable', 43), (' other deposits receivable - related party', 43), (' deposits', 43), (' amount receivable from controlling entity', 43), (' other debtors and prepayments', 43), (' other', 40), (' forward exchange contracts', 38), (' foreign exchange forward contracts', 37), ('other assets', 36), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31), (' condensate', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [0.0, 0.0, 0.0, 0.0, 51.0, 29702.0, 29753.0, 12453.0], 'label': ['Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Non-current Electricity derivatives at fair value', 'Current Foreign exchange derivatives at fair value', 'Current Electricity derivatives at fair value', 'Current ', 'Non-current Electricity derivatives at fair value'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('current assets', 54)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('current assets', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': 81, 'value': 328.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 328.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('current assets', 54)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('current assets', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('current assets', 81)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 7], 'score': 81, 'value': 489.0, 'line_item_label': ['Current assets', 'Other current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 489.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 3731.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [3731.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 17531.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [17531.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [90235.0, 57.0, 351.0, -154.0, 90489.0, 312388.0, 827.0, 4618.0, -1182.0, 316651.0, 1628.0, 0.0, 20598.0, 0.0, 22226.0, 795.0, 0.0, 0.0, 0.0, 795.0, 405046.0, 884.0, 25567.0, -1336.0, 430161.0], 'label': ['Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('net value', 38), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('cost', 25), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 12, 13, 14, 15, 16, 24, 25, 26, 27, 28, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100], 'value': [90430.0, 376.0, -149.0, 74.0, 90731.0, 314181.0, 5232.0, -1122.0, -74.0, 318217.0, 1628.0, 34643.0, 0.0, 0.0, 36271.0, 2538.0, 2538.0, 0.0, 0.0, -65.0, -65.0, 0.0, 0.0, 2473.0, 2473.0, 795.0, 0.0, 0.0, 0.0, 795.0, 1678.0, 0.0, 408777.0, 40251.0, -1336.0, 0.0, 447692.0], 'label': ['Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Construction in progress $000', 'Cost Additions', 'Construction in progress $000', 'Cost Disposals', 'Construction in progress $000', 'Cost Transfer', 'Construction in progress $000', 'Cost At 31 December 2020', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 3731.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [3731.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 17531.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [17531.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('righttouse', 33), ('capital work in progress', 32), ('tangible', 29), ('work in progress', 23), ('rightofuse', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('tangible', 43), ('capital work-in-progress', 31), ('capital workinprogress', 31), ('capital work in progress', 23), ('work in progress', 23), ('rightofuse', 22), ('righttouse', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1476.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['13'], 'line_item_value': [1476.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('capital work-in-progress', 37), ('capital workinprogress', 37), ('righttouse', 33), ('capital work in progress', 32), ('tangible', 29), ('work in progress', 23), ('rightofuse', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('tangible', 43), ('capital work-in-progress', 31), ('capital workinprogress', 31), ('capital work in progress', 23), ('work in progress', 23), ('rightofuse', 22), ('righttouse', 22)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1007.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['13'], 'line_item_value': [1007.0]}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('tangible assets', 31)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('tangible assets', 69)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:42:59+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('tangible assets', 31)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('tangible assets', 69)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-04 11:42:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:42:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:42:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-04 11:42:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 47), ('intangible under development', 42)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('intangible assets under development', 77), ('intangible', 67), ('intangible under development', 46)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('intangible', 50), ('intangible assets under development', 47), ('intangible under development', 42)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('intangible assets under development', 77), ('intangible', 67), ('intangible under development', 46)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('donations', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('donations', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('donations', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('donations', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 69), (' investments accounted for using the equity method', 63), ('joint ventures and associates', 53), ('derivative financial instruments', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('derivative financial instruments', 77), (' investment in associate', 48), ('joint ventures and associates', 46), (' investment in joint venture', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 54535.0, 'line_item_label': ['Investment in joint ventures'], 'note_numbers': ['11'], 'line_item_value': [54535.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 69), (' investments accounted for using the equity method', 63), ('joint ventures and associates', 53), ('derivative financial instruments', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('derivative financial instruments', 77), (' investment in associate', 48), ('joint ventures and associates', 46), (' investment in joint venture', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 47672.0, 'line_item_label': ['Investment in joint ventures'], 'note_numbers': ['11'], 'line_item_value': [47672.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = investment in joint venture (southern cross aluminium pty ltd) , res_fuzz_match = [('investment in joint venture', 100), (' investment in associate', 69), (' carrying amount at the end of the financial year', 43)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = investment in joint venture (southern cross aluminium pty ltd) , res_fuzz_match = [('investment in joint venture', 100), (' investment in associate', 69), (' carrying amount at the end of the financial year', 43)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [47672.0, 54535.0], 'label': [' Investment in joint venture (Southern Cross Aluminium Pty Ltd)', ' Investment in joint venture (Southern Cross Aluminium Pty Ltd)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = ownership interest % , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = ownership interest % , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = ownership interest $000 , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = southern cross aluminium pty ltd investment , res_fuzz_match = [(' investment in associate', 46), ('investment in joint venture', 42), (' carrying amount at the end of the financial year', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = ownership interest $000 , res_fuzz_match = [('investment in joint venture', 50), (' carrying amount at the end of the financial year', 39), (' investment in associate', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1. january , res_fuzz_match = [('investment in joint venture', 43), (' carrying amount at the end of the financial year', 43), (' investment in associate', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('investment in joint venture', 79), (' investment in associate', 54), (' carrying amount at the end of the financial year', 42)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = share of other comprehensive income, net of tax , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), (' investment in associate', 46), ('investment in joint venture', 42)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = carrying value of investment at end of year , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), ('investment in joint venture', 58), (' investment in associate', 54)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1. january , res_fuzz_match = [('investment in joint venture', 43), (' carrying amount at the end of the financial year', 43), (' investment in associate', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('investment in joint venture', 79), (' investment in associate', 54), (' carrying amount at the end of the financial year', 42)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = share of other comprehensive income, net of tax , res_fuzz_match = [(' carrying amount at the end of the financial year', 50), (' investment in associate', 46), ('investment in joint venture', 42)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = carrying value of investment at end of year , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), ('investment in joint venture', 58), (' investment in associate', 54)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('investment in joint venture', 0), (' investment in associate', 0), (' carrying amount at the end of the financial year', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('deferred tax assets', 29), ('deferred tax', 21), ('deferred charges', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('deferred tax assets', 57), ('deferred tax', 27), ('deferred charges', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 12309.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [12309.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('deferred tax assets', 29), ('deferred tax', 21), ('deferred charges', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('deferred tax assets', 57), ('deferred tax', 27), ('deferred charges', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 24223.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [24223.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [('deferred tax assets', 50), (' deferred tax balances', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [('deferred tax assets', 50), (' deferred tax balances', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 56)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 56)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [('deferred tax assets', 62), (' deferred tax balances', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('deferred tax assets', 64), (' deferred tax balances', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [('deferred tax assets', 17), (' deferred tax balances', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' deferred tax balances', 45), ('deferred tax assets', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred tax balances', 36), ('deferred tax assets', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('deferred tax assets', 78), (' deferred tax balances', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' deferred tax balances', 40), ('deferred tax assets', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 71)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred tax balances', 75), ('deferred tax assets', 73)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13, 15, 28, 29, 31, 44, 45, 47, 60, 61, 63], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [5757.0, 24223.0, 5757.0, -11017.0, 12309.0, -11017.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'label': [' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net', ' Net deferred tax assets/(liabilities)', 'as follows: Deferred tax assets', 'as follows: Deferred tax assets/(liabilities), net'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('other assets', 47), (' other assets', 47), (' other non-current assets', 42), (' other non-current assets', 42), ('non-current', 38), (' financial assets', 38), (' exploration and evaluation expenditure', 35), (' leased assets', 28), (' loan receivables', 27), (' leases', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' leased assets', 61), (' other non-current assets', 56), (' other non-current assets', 56), ('other assets', 50), (' other assets', 50), (' loan receivables', 33), ('non-current', 30), (' exploration and evaluation expenditure', 25), (' leases', 24)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13, 15], 'score': 100, 'value': 13131.0, 'line_item_label': ['Non-current assets', 'Financial assets', 'Other non-current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 12453.0, 678.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('other assets', 47), (' other assets', 47), (' other non-current assets', 42), (' other non-current assets', 42), ('non-current', 38), (' financial assets', 38), (' exploration and evaluation expenditure', 35), (' leased assets', 28), (' loan receivables', 27), (' leases', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [(' financial assets', 100), (' leased assets', 61), (' other non-current assets', 56), (' other non-current assets', 56), ('other assets', 50), (' other assets', 50), (' loan receivables', 33), ('non-current', 30), (' exploration and evaluation expenditure', 25), (' leases', 24)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13, 15], 'score': 100, 'value': 0.0, 'line_item_label': ['Non-current assets', 'Financial assets', 'Other non-current assets'], 'note_numbers': [nan, '9', '10'], 'line_item_value': [0.0, 0.0, 0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 77), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' allowance for expected credit losses', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' total. properties', 36), (' right-of-use-assets', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' total. properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 33), (' warehouse and office equipment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('non-current', 57), (' allowance for expected credit losses', 57), ('finance receivables', 43), (' electricity derivatives at fair value', 43), (' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total. properties', 43), (' right-of-use-assets', 29), (' warehouse and office equipment', 29), (' motor vehicles', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('non-current', 100), (' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' total. properties', 36), (' right-of-use-assets', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current foreign exchange derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 77), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' allowance for expected credit losses', 43), (' warehouse and office equipment', 42), (' motor vehicles', 42), (' exploration and evaluation expenditure', 41), (' total. properties', 36), (' right-of-use-assets', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current electricity derivatives at fair value , res_fuzz_match = [(' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), ('non-current', 43), (' total. properties', 43), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 37), (' right-of-use-assets', 33), (' warehouse and office equipment', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('non-current', 57), (' allowance for expected credit losses', 57), ('finance receivables', 43), (' electricity derivatives at fair value', 43), (' defined benefit plans', 43), (' exploration and evaluation expenditure', 43), (' total. properties', 43), (' right-of-use-assets', 29), (' warehouse and office equipment', 29), (' motor vehicles', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current electricity derivatives at fair value , res_fuzz_match = [('non-current', 100), (' electricity derivatives at fair value', 100), ('finance receivables', 46), (' defined benefit plans', 44), (' motor vehicles', 42), (' allowance for expected credit losses', 39), (' exploration and evaluation expenditure', 38), (' warehouse and office equipment', 38), (' total. properties', 36), (' right-of-use-assets', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('non-current', 0), ('finance receivables', 0), (' allowance for expected credit losses', 0), (' electricity derivatives at fair value', 0), (' defined benefit plans', 0), (' right-of-use-assets', 0), (' exploration and evaluation expenditure', 0), (' total. properties', 0), (' warehouse and office equipment', 0), (' motor vehicles', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 5, 7], 'score': [100, 100, 100, 100], 'value': [0.0, 0.0, 29702.0, 12453.0], 'label': ['Current Electricity derivatives at fair value', 'Non-current Electricity derivatives at fair value', 'Current Electricity derivatives at fair value', 'Non-current Electricity derivatives at fair value'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('non-current assets total', 37)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('non-current assets total', 56)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 15], 'score': 84, 'value': 678.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 678.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('non-current assets total', 37)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('non-current assets total', 56)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 15], 'score': 84, 'value': 0.0, 'line_item_label': ['Non-current assets', 'Other non-current assets'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' bank overdraft', 29), (' leases', 22), ('borrowings', 10), ('short term debt', 7), ('short-term debt', 7), ('shortterm debt', 7), ('shortterm borrowings', 7)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 24], 'score': 100, 'value': 4471.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['16', '13'], 'line_item_value': [4000.0, 471.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' bank overdraft', 29), (' leases', 22), ('borrowings', 10), ('short term debt', 7), ('short-term debt', 7), ('shortterm debt', 7), ('shortterm borrowings', 7)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [21, 24], 'score': 100, 'value': 412.0, 'line_item_label': ['Borrowings', 'Lease liabilities'], 'note_numbers': ['16', '13'], 'line_item_value': [0.0, 412.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = multi-option facilities $000 , res_fuzz_match = [(' secured long-term bank loans', 43), (' loans from related party', 43), (' utilised – bank borrowings', 36), (' lease liabilities - current', 36), (' lease liabilities', 36), ('current', 29), (' not later than 1 year', 29), (' current', 29), (' leases', 25), (' balance at the end of period', 21), (' bank overdraft', 14), ('bank borrowings', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total facilities total facilities , res_fuzz_match = [(' leases', 50), (' lease liabilities', 45), (' loans from related party', 43), (' not later than 1 year', 42), (' balance at the end of period', 39), (' lease liabilities - current', 37), (' bank overdraft', 36), (' utilised – bank borrowings', 30), (' secured long-term bank loans', 30), ('current', 29), (' current', 29), ('bank borrowings', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = utilised , res_fuzz_match = [(' utilised – bank borrowings', 100), (' leases', 50), ('current', 33), (' not later than 1 year', 33), (' current', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' lease liabilities - current', 33), (' lease liabilities', 33), (' bank overdraft', 17), (' balance at the end of period', 17), ('bank borrowings', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = utilised bank guarantees , res_fuzz_match = [(' utilised – bank borrowings', 65), (' bank overdraft', 59), ('current', 57), (' current', 57), ('bank borrowings', 55), (' leases', 50), (' secured long-term bank loans', 50), (' lease liabilities - current', 47), (' not later than 1 year', 42), (' lease liabilities', 36), (' loans from related party', 35), (' balance at the end of period', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = balance at 31 december balance at 31 december , res_fuzz_match = [(' balance at the end of period', 52), (' leases', 50), (' loans from related party', 43), (' not later than 1 year', 42), (' secured long-term bank loans', 42), (' lease liabilities - current', 37), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' utilised – bank borrowings', 30), ('current', 29), (' current', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank guarantee facilities $000 , res_fuzz_match = [('current', 57), (' current', 57), (' bank overdraft', 57), ('bank borrowings', 55), (' loans from related party', 47), (' lease liabilities', 45), (' not later than 1 year', 42), (' balance at the end of period', 42), (' secured long-term bank loans', 39), (' utilised – bank borrowings', 32), (' lease liabilities - current', 32), (' leases', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5, 9, 13], 'score': [100, 100, 100, 100], 'value': [0.0, 0.0, 4000.0, 0.0], 'label': [' Utilised ', ' Utilised ', ' Utilised ', ' Utilised '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank borrowings , res_fuzz_match = [('bank borrowings', 100), (' utilised – bank borrowings', 100), (' bank overdraft', 73), (' secured long-term bank loans', 60), (' loans from related party', 45), (' not later than 1 year', 36), (' lease liabilities - current', 36), (' balance at the end of period', 36), ('current', 29), (' current', 29), (' lease liabilities', 27), (' leases', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = bank borrowings , res_fuzz_match = [('bank borrowings', 100), (' utilised – bank borrowings', 100), (' bank overdraft', 73), (' secured long-term bank loans', 60), (' loans from related party', 45), (' not later than 1 year', 36), (' lease liabilities - current', 36), (' balance at the end of period', 36), ('current', 29), (' current', 29), (' lease liabilities', 27), (' leases', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [0.0, 4000.0], 'label': [' Bank borrowings', ' Bank borrowings'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current maturities of long-term debt', 24), ('current maturities of longterm debt', 24), ('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('other financial liabilities', 82), ('other current liabilities', 47), ('current maturities', 22), ('current maturities of long-term debt', 20), ('current maturities of longterm debt', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 23], 'score': 82, 'value': 0.0, 'line_item_label': ['Current liabilities', 'Financial liabilities'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current maturities of long-term debt', 24), ('current maturities of longterm debt', 24), ('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('other financial liabilities', 82), ('other current liabilities', 47), ('current maturities', 22), ('current maturities of long-term debt', 20), ('current maturities of longterm debt', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 23], 'score': 82, 'value': 2935.0, 'line_item_label': ['Current liabilities', 'Financial liabilities'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 2935.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current maturities'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('current maturities', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = electricity derivatives at fair value through oci , res_fuzz_match = [('current maturities', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [('current maturities', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current maturities', 100)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current maturities', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current maturities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': [100], 'value': [25662.0], 'label': [' Current'], 'year': [], 'colname_found': ['rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('note payable(debt)', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('note payable(debt)', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('outstanding dues of creditors other than', 21), ('small enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('accounts payable', 43), ('small enterprises', 34), ('trade and other payables', 33), ('trade payable', 31), ('micro enterprises and small enterprises', 29), ('micro enterprises', 28), ('other than micro and small enterprises', 28), ('other trade payables', 25), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 22), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 26101.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': [nan], 'line_item_value': [26101.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('outstanding dues of creditors other than', 21), ('small enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('accounts payable', 43), ('small enterprises', 34), ('trade and other payables', 33), ('trade payable', 31), ('micro enterprises and small enterprises', 29), ('micro enterprises', 28), ('other than micro and small enterprises', 28), ('other trade payables', 25), ('outstanding dues of micro enterprises and small enterprises', 23), ('outstanding dues of creditors other than', 22), ('total outstanding due of other creditors other than micro and small', 22), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [20], 'score': 100, 'value': 22315.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': [nan], 'line_item_value': [22315.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('other financial liabilities', 82), ('other current financial liabilities', 67), ('other current liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 20, 23], 'score': 82, 'value': 26101.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Financial liabilities'], 'note_numbers': [nan, nan, '15'], 'line_item_value': [0.0, 26101.0, 0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('other financial liabilities', 82), ('other current financial liabilities', 67), ('other current liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 20, 23], 'score': 82, 'value': 25250.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Financial liabilities'], 'note_numbers': [nan, nan, '15'], 'line_item_value': [0.0, 22315.0, 2935.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = electricity derivatives at fair value through oci , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('accrued expenses', 29), ('interest accrued', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 17), ('tax', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('current tax liabilities', 64), (' income tax payable', 37), ('tax', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 0.0, 'line_item_label': ['Liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 17), ('tax', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('current tax liabilities', 64), (' income tax payable', 37), ('tax', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 0.0, 'line_item_label': ['Liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [(' financial liabilities', 100), (' other financial liabilities', 82), (' foreign exchange contract liability', 49), ('other current liabilities', 47), (' other current liabilities', 47), (' trade and other payables', 33), (' employee benefits', 28), (' customer deposits', 21), (' deferred revenue', 15), ('provisions', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 20, 22, 23], 'score': 100, 'value': 35329.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Financial liabilities'], 'note_numbers': [nan, nan, '17', '15'], 'line_item_value': [0.0, 26101.0, 9228.0, 0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [(' financial liabilities', 100), (' other financial liabilities', 82), (' foreign exchange contract liability', 49), ('other current liabilities', 47), (' other current liabilities', 47), (' trade and other payables', 33), (' employee benefits', 28), (' customer deposits', 21), (' deferred revenue', 15), ('provisions', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [19, 20, 22, 23], 'score': 100, 'value': 34709.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Financial liabilities'], 'note_numbers': [nan, nan, '17', '15'], 'line_item_value': [0.0, 22315.0, 9459.0, 2935.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' other', 60), (' arising from service contracts', 50), (' other creditors', 44), (' other creditors', 44), (' other creditors', 44), ('current', 43), ('other creditors and accruals', 43), (' share of joint venture payables', 43), (' make good provisions', 43), (' forward exchange contracts', 43), (' total current employee benefits', 43), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' other related parties', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' gst', 33), (' derivative contracts - at fair value', 29), (' current - liability for annual and long service leave', 29), (' contract liabilites - current', 29), (' gst payables', 20), (' gst payable and accruals', 14), (' gst liabilities', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - current', 69), (' employee benefits - payroll', 69), (' total current employee benefits', 69), (' ultimate parent entity', 54), (' share of joint venture payables', 54), (' derivative contracts - at fair value', 46), ('current', 43), (' rebates', 40), (' other creditors', 38), (' loan payable to relayed party under tax funding agreement', 38), (' other creditors', 38), (' current - liability for annual and long service leave', 38), (' provisions - current', 38), (' contract liabilites - current', 38), (' abandonment and decommissioning costs', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), ('other creditors and accruals', 31), (' other related parties', 31), (' secured long-term bank loans', 31), (' loans from related party', 31), (' gst liabilities', 30), (' warranty', 25), (' provision for associate funding', 23), (' make good provisions', 23), (' gst payables', 20), (' restructuring', 20), (' other', 20), (' gst payable and accruals', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' gst', 67), (' provisions - current', 57), (' other related parties', 53), (' loans from related party', 52), (' arising from service contracts', 52), (' ultimate parent entity', 47), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 46), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' current - liability for annual and long service leave', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' total current employee benefits', 36), ('other creditors and accruals', 35), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' other', 100), (' provision for associate funding', 68), (' gst', 67), (' provisions - current', 64), (' current - liability for annual and long service leave', 53), ('other creditors and accruals', 52), (' arising from service contracts', 52), (' forward exchange contracts', 50), (' secured long-term bank loans', 46), ('current', 43), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' warranty', 38), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' total current employee benefits', 32), (' make good provisions', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [(' current - liability for annual and long service leave', 57), ('other creditors and accruals', 43), (' other related parties', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' share of joint venture payables', 43), (' warranty', 43), (' total current employee benefits', 43), ('current', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' derivative contracts - at fair value', 29), (' secured long-term bank loans', 29), (' other creditors', 29), (' employee benefits - current', 29), (' provisions - current', 29), (' contract liabilites - current', 29), (' gst payables', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' arising from service contracts', 29), (' make good provisions', 29), (' gst liabilities', 29), (' forward exchange contracts', 29), (' other creditors', 29), (' restructuring', 29), (' rebates', 20), (' other', 20), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [(' rebates', 60), (' other', 60), ('current', 57), (' provisions - current', 57), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' arising from service contracts', 50), (' other related parties', 47), (' derivative contracts - at fair value', 44), (' share of joint venture payables', 44), (' total current employee benefits', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' gst payables', 40), (' restructuring', 40), ('other creditors and accruals', 39), (' ultimate parent entity', 39), (' secured long-term bank loans', 39), (' current - liability for annual and long service leave', 39), (' contract liabilites - current', 39), (' provision for associate funding', 39), (' warranty', 38), (' gst payable and accruals', 33), (' employee benefits - current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' forward exchange contracts', 33), (' gst liabilities', 30), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [('current', 57), (' employee benefits - current', 47), (' abandonment and decommissioning costs', 47), (' provisions - current', 43), ('other creditors and accruals', 40), (' derivative contracts - at fair value', 40), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' forward exchange contracts', 40), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' secured long-term bank loans', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' share of joint venture payables', 33), (' provision for associate funding', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' loans from related party', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total current employee benefits', 27), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' other related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), ('other creditors and accruals', 44), (' ultimate parent entity', 44), (' other creditors', 44), (' loan payable to relayed party under tax funding agreement', 44), (' secured long-term bank loans', 44), (' other creditors', 44), (' employee benefits - current', 44), (' contract liabilites - current', 44), (' forward exchange contracts', 44), (' other creditors', 44), (' total current employee benefits', 44), (' rebates', 40), (' other', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' share of joint venture payables', 33), (' gst payables', 33), (' employee benefits - payroll', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst liabilities', 33), ('current', 29), (' provision for associate funding', 22), (' restructuring', 22), (' warranty', 12), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 4, 5, 10, 16, 22, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33, 34, 34, 35], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [4343.0, 541.0, 0.0, 4884.0, 4846.0, 4846.0, 38.0, 3884.0, 0.0, 0.0, 6983.0, 1286.0, 0.0, 8269.0, 729.0, 729.0, 7540.0, 19857.0, 38883.0, -854.0, 57886.0, 9459.0, 9459.0, 48427.0], 'label': ['Employee benefits', 'Employee benefits', 'Employee benefits', 'Employee benefits', ' Current', 'Employee benefits', 'Employee benefits', ' Current', ' Current', ' Current', 'Provision for carbon dust and other', 'Provision for carbon dust and other', 'Provision for carbon dust and other', 'Provision for carbon dust and other', ' Current', 'Provision for carbon dust and other', 'Provision for carbon dust and other', 'Totals', 'Totals', 'Totals', 'Totals', ' Current', 'Totals', 'Totals'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'rows', 'rows', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' share of joint venture payables', 64), ('other creditors and accruals', 51), (' current - liability for annual and long service leave', 50), (' forward exchange contracts', 50), (' other related parties', 47), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' loan payable to relayed party under tax funding agreement', 45), (' gst payable and accruals', 45), (' gst liabilities', 42), (' derivative contracts - at fair value', 41), (' secured long-term bank loans', 41), (' employee benefits - payroll', 41), (' abandonment and decommissioning costs', 41), (' total current employee benefits', 41), (' rebates', 40), (' loans from related party', 38), (' make good provisions', 38), (' warranty', 38), (' contract liabilites - current', 36), (' gst', 33), (' ultimate parent entity', 32), (' arising from service contracts', 32), ('current', 29), (' provisions - current', 29), (' provision for associate funding', 27), (' employee benefits - current', 24), (' restructuring', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = electricity derivatives at fair value through oci , res_fuzz_match = [(' derivative contracts - at fair value', 62), (' employee benefits - payroll', 45), (' arising from service contracts', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' other related parties', 41), (' current - liability for annual and long service leave', 41), (' provision for associate funding', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' restructuring', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' forward exchange contracts', 38), (' warranty', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 36), (' provisions - current', 36), (' share of joint venture payables', 36), (' loans from related party', 33), (' gst', 33), (' total current employee benefits', 31), (' abandonment and decommissioning costs', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' gst liabilities', 80), (' current - liability for annual and long service leave', 73), (' contract liabilites - current', 73), (' loan payable to relayed party under tax funding agreement', 55), (' gst payables', 50), (' other related parties', 45), (' loans from related party', 45), (' employee benefits - current', 45), (' employee benefits - payroll', 45), (' rebates', 40), ('other creditors and accruals', 36), (' ultimate parent entity', 36), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' gst payable and accruals', 36), (' share of joint venture payables', 36), (' total current employee benefits', 36), (' gst', 33), (' other creditors', 27), (' other creditors', 27), (' abandonment and decommissioning costs', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' other creditors', 27), (' warranty', 25), (' restructuring', 20), (' provisions - current', 18), (' make good provisions', 18), ('current', 0), (' other', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4], 'score': [100, 80, 100], 'value': [25569.0, 1053.0, 25662.0], 'label': [' Trade and other payables', ' Lease liabilities', ' Current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('current liabilities', 57)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial liabilities , res_fuzz_match = [('current liabilities', 57)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [19], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 39)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 39)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), ('interest bearing loans and borrowings', 45), (' lease liabilities', 45), (' lease liability', 45), (' borrowings', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 1042.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [1042.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), ('interest bearing loans and borrowings', 45), (' lease liabilities', 45), (' lease liability', 45), (' borrowings', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 641.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [641.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('(bond)', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('(bond)', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('lease liabilities', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 1042.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [1042.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('lease liabilities', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 641.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [641.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 45)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 1042.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [1042.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 45)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [29], 'score': 100, 'value': 641.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['13'], 'line_item_value': [641.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other long term liabilities', 50), (' other financial liabilities', 43), (' other non-current liabilities', 38), (' financial liabilities', 33), (' employee benefits', 32), (' provision for associate funding', 32), (' provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [26, 27, 28], 'score': 100, 'value': 13665.0, 'line_item_label': ['Non-current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, nan, '17'], 'line_item_value': [0.0, 3036.0, 10629.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other long term liabilities', 50), (' other financial liabilities', 43), (' other non-current liabilities', 38), (' financial liabilities', 33), (' employee benefits', 32), (' provision for associate funding', 32), (' provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [26, 27, 28], 'score': 100, 'value': 51681.0, 'line_item_label': ['Non-current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, nan, '17'], 'line_item_value': [0.0, 3254.0, 48427.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = workers compensation , res_fuzz_match = [(' non-current - liability for long-service leave', 43), (' make good provisions', 43), (' total non-current employee benefits', 43), ('non-current trade and other payables', 36), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' provision for associate funding', 36), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' provisions - non-current', 29), (' trade payables - related parties', 29), (' contract liabilites - non-current', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = defined benefit , res_fuzz_match = [(' employee benefits - non current', 69), (' employee benefits - payroll', 69), (' total non-current employee benefits', 69), (' electricity derivatives at fair value through oci', 46), (' derivative contracts - at fair value', 46), ('non-current trade and other payables', 38), (' non-current - liability for long-service leave', 38), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' provisions - non-current', 23), (' contract liabilites - non-current', 23), (' provision for associate funding', 23), (' make good provisions', 23)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for asset retirement obligation , res_fuzz_match = [(' provision for associate funding', 68), (' provisions - non-current', 64), (' electricity derivatives at fair value through oci', 48), (' derivative contracts - at fair value', 46), (' non-current - liability for long-service leave', 46), ('non-current trade and other payables', 39), (' make good provisions', 38), (' trade payables - related parties', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 36), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = provision for carbon dust and other , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 68), ('non-current trade and other payables', 55), (' derivative contracts - at fair value', 42), (' abandonment and decommissioning costs', 42), (' contract liabilites - non-current', 40), (' non-current - liability for long-service leave', 39), (' electricity derivatives at fair value through oci', 38), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' employee benefits - payroll', 36), (' make good provisions', 31), (' total non-current employee benefits', 31)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at 1 january 2020 , res_fuzz_match = [('non-current trade and other payables', 43), (' employee benefits - non current', 43), (' non-current - liability for long-service leave', 43), (' provisions - non-current', 43), (' contract liabilites - non-current', 43), (' trade payables - related parties', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 29), (' derivative contracts - at fair value', 29), (' employee benefits - payroll', 29), (' abandonment and decommissioning costs', 29), (' provision for associate funding', 29), (' make good provisions', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = arising during the year , res_fuzz_match = [('non-current trade and other payables', 56), (' electricity derivatives at fair value through oci', 44), (' derivative contracts - at fair value', 44), (' trade payables - related parties', 44), (' total non-current employee benefits', 44), (' provisions - non-current', 43), (' non-current - liability for long-service leave', 39), (' provision for associate funding', 39), (' employee benefits - non current', 33), (' contract liabilites - non-current', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = unwinding of discount , res_fuzz_match = [(' employee benefits - non current', 47), (' abandonment and decommissioning costs', 47), (' derivative contracts - at fair value', 40), ('non-current trade and other payables', 33), (' provision for associate funding', 33), (' provisions - non-current', 29), (' electricity derivatives at fair value through oci', 27), (' non-current - liability for long-service leave', 27), (' contract liabilites - non-current', 27), (' employee benefits - payroll', 27), (' make good provisions', 27), (' total non-current employee benefits', 20), (' trade payables - related parties', 13)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = at31 december 2020 , res_fuzz_match = [(' abandonment and decommissioning costs', 56), (' electricity derivatives at fair value through oci', 44), (' contract liabilites - non-current', 44), (' trade payables - related parties', 44), ('non-current trade and other payables', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' non-current - liability for long-service leave', 33), (' employee benefits - payroll', 33), (' make good provisions', 33), (' total non-current employee benefits', 33), (' provisions - non-current', 22), (' provision for associate funding', 22)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = totals , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 4, 5, 5, 10, 11, 16, 17, 22, 23, 28, 29, 30, 31, 32, 33, 34, 34, 35, 35], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [4343.0, 541.0, 0.0, 4884.0, 4846.0, 4846.0, 38.0, 38.0, 3884.0, 0.0, 0.0, 347.0, 0.0, 40502.0, 729.0, 7540.0, 19857.0, 38883.0, -854.0, 57886.0, 9459.0, 9459.0, 48427.0, 48427.0], 'label': ['Employee benefits', 'Employee benefits', 'Employee benefits', 'Employee benefits', ' Current', 'Employee benefits', ' Non-current', 'Employee benefits', ' Current', ' Non-current', ' Current', ' Non-current', ' Current', ' Non-current', ' Current', ' Non-current', 'Totals', 'Totals', 'Totals', 'Totals', ' Current', 'Totals', ' Non-current', 'Totals'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('minority interest', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term liabilities', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('equity share capital', 59), ('perpetual equity instrument', 39), ('share capital', 37), ('common stock', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('common stock', 33), ('equity share capital', 27), ('share capital', 26), ('perpetual equity instrument', 16)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('equity share capital', 59), ('perpetual equity instrument', 39), ('share capital', 37), ('common stock', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('common stock', 33), ('equity share capital', 27), ('share capital', 26), ('perpetual equity instrument', 16)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('additional paid in capital', 38), ('additional paid up capital', 38), ('other reserves', 36), ('reserves and surplus', 24)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('reserves and surplus', 28), ('other equity', 25), ('additional paid in capital', 21), ('additional paid up capital', 21), ('other reserves', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('additional paid in capital', 38), ('additional paid up capital', 38), ('other reserves', 36), ('reserves and surplus', 24)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('reserves and surplus', 28), ('other equity', 25), ('additional paid in capital', 21), ('additional paid up capital', 21), ('other reserves', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('other reserves', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('other reserves', 17)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('retained earnings', 37), ('reserves surplus', 21), (' accumulated losses', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [(' accumulated losses', 100), ('other equity', 25), ('retained earnings', 17), ('reserves surplus', 16)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [36], 'score': 100, 'value': -74616.0, 'line_item_label': ['Accumulated losses'], 'note_numbers': [nan], 'line_item_value': [-74616.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('retained earnings', 37), ('reserves surplus', 21), (' accumulated losses', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [(' accumulated losses', 100), ('other equity', 25), ('retained earnings', 17), ('reserves surplus', 16)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [36], 'score': 100, 'value': -94999.0, 'line_item_label': ['Accumulated losses'], 'note_numbers': [nan], 'line_item_value': [-94999.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves', 36), ('reserves', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('other reserves', 17), ('reserves', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [37], 'score': 100, 'value': 35790.0, 'line_item_label': ['Reserves'], 'note_numbers': ['19'], 'line_item_value': [35790.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves', 36), ('reserves', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('other reserves', 17), ('reserves', 11)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [37], 'score': 100, 'value': -4256.0, 'line_item_label': ['Reserves'], 'note_numbers': ['19'], 'line_item_value': [-4256.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('shareholders equity(a)', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = accumulated losses , res_fuzz_match = [('shareholders equity(a)', 21)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 3731.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [3731.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = investment in joint ventures , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 91, 'value': 17531.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['12'], 'line_item_value': [17531.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('gross', 80), ('cost', 75)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 12, 13, 14, 15, 16, 24, 25, 26, 27, 28, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100], 'value': [90430.0, 376.0, -149.0, 74.0, 90731.0, 314181.0, 5232.0, -1122.0, -74.0, 318217.0, 1628.0, 34643.0, 0.0, 0.0, 36271.0, 2538.0, 2538.0, 0.0, 0.0, -65.0, -65.0, 0.0, 0.0, 2473.0, 2473.0, 795.0, 0.0, 0.0, 0.0, 795.0, 1678.0, 0.0, 408777.0, 40251.0, -1336.0, 0.0, 447692.0], 'label': ['Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020', 'Cost At 1 January 2020', 'Construction in progress $000', 'Cost Additions', 'Construction in progress $000', 'Cost Disposals', 'Construction in progress $000', 'Cost Transfer', 'Construction in progress $000', 'Cost At 31 December 2020', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Construction in progress $000', 'Cost At 1 January 2020', 'Cost Additions', 'Cost Disposals', 'Cost Transfer', 'Cost At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = freehold land and buildings $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 27), ('accumulated depreciation', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = plant and equipment $000 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = asset retirement obligation** $000 , res_fuzz_match = [('depreciatio', 55), ('net value', 38), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = construction in progress $000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 1 january 2020 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 25), ('depreciatio', 19)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost transfer , res_fuzz_match = [('net value', 38), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = cost at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 36), ('depreciatio', 27), ('net value', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at1 january 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 50)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment depreciation charge for the year , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment impairment* , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment disposals , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation and impairment at 31 december 2020 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 38)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2020 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = net book value at 31 december 2019 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('depreciatio', 27)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 41, 42, 43, 44, 45, 53, 54, 55, 56, 57], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [90235.0, 57.0, 351.0, -154.0, 90489.0, 312388.0, 827.0, 4618.0, -1182.0, 316651.0, 1628.0, 0.0, 20598.0, 0.0, 22226.0, 795.0, 0.0, 0.0, 0.0, 795.0, 405046.0, 884.0, 25567.0, -1336.0, 430161.0], 'label': ['Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020', 'Accumulated depreciation and impairment At1 January 2020', 'Accumulated depreciation and impairment Depreciation charge for the year', 'Accumulated depreciation and impairment Impairment*', 'Accumulated depreciation and impairment Disposals', 'Accumulated depreciation and impairment At 31 December 2020'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:00+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-04 11:43:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('unbilled', 40), ('receivable', 33), ('account receivables', 31), ('government subsidies receivable', 31), ('trade and other receivables', 31), ('trade receivables', 26), ('billed', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 71), ('trade and other receivables', 45), ('government subsidies receivable', 43), ('billed', 25), ('unbilled', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('trade and other receivables', 47), ('account receivables', 44), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('billed', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6], 'score': 100, 'value': 19529.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivable from related parties'], 'note_numbers': ['7', '20'], 'line_item_value': [11999.0, 7530.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = financial assets , res_fuzz_match = [('unbilled', 40), ('receivable', 33), ('account receivables', 31), ('government subsidies receivable', 31), ('trade and other receivables', 31), ('trade receivables', 26), ('billed', 25)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = income tax receivable from related parties , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 71), ('trade and other receivables', 45), ('government subsidies receivable', 43), ('billed', 25), ('unbilled', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('trade and other receivables', 47), ('account receivables', 44), ('trade receivables', 42), ('government subsidies receivable', 42), ('unbilled', 40), ('receivable', 33), ('billed', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6], 'score': 100, 'value': 19942.0, 'line_item_label': ['Trade and other receivables', 'Income tax receivable from related parties'], 'note_numbers': ['7', '20'], 'line_item_value': [13624.0, 6318.0]}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:00+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' related party receivables', 80), (' share of joint venture receivables', 80), ('trade receivables', 70), (' net trade debtors', 40), ('current', 29), (' other debtors', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivables', 100), ('trade receivables', 67), (' share of joint venture receivables', 53), (' net trade debtors', 44), ('current', 43), (' other debtors', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = gst receivable , res_fuzz_match = [(' related party receivables', 80), (' share of joint venture receivables', 80), ('trade receivables', 70), (' net trade debtors', 40), ('current', 29), (' other debtors', 20)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = related party receivables (note 20) , res_fuzz_match = [(' related party receivables', 100), ('trade receivables', 67), (' share of joint venture receivables', 53), (' net trade debtors', 44), ('current', 43), (' other debtors', 33)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-04 11:43:00+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [80, 100, 80, 100], 'value': [1697.0, 11927.0, 1390.0, 10609.0], 'label': [' GST receivable', ' Related party receivables (Note 20)', ' GST receivable', ' Related party receivables (Note 20)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:00+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('sale of products', 36), (' Sale of coal', 32), ('revenue from operations', 31), (' Sales revenue', 29), ('transmission and distribution business', 26), ('from trading business', 24), ('net sales', 22), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19), (' Revenue', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('revenue from operations', 42), ('revenue from contracts with customers', 38), ('transmission and distribution business', 38), ('Revenue from contract with customers', 38), ('net sales', 32), ('from trading business', 31), (' Revenue', 29), (' Sale of coal', 27), (' Sales revenue', 26), ('sale of products', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('sale of products', 35), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sale of coal', 30), (' Sales revenue', 27), ('from trading business', 23), ('net sales', 21), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sale of coal', 34), (' Sales revenue', 32), ('sale of products', 31), ('net sales', 29), ('transmission and distribution business', 29), (' Revenue', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('from trading business', 50), ('net sales', 40), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 31), (' Sale of coal', 31), (' Revenue', 26), ('revenue from operations', 24), ('sale of products', 21)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('revenue from operations', 42), ('from trading business', 38), ('sale of products', 34), (' Sale of coal', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('transmission and distribution business', 27), (' Revenue', 26), ('net sales', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 460350.0, 'line_item_label': ['Revenue from contracts with customers', 'Revenue'], 'note_numbers': ['4.1', nan], 'line_item_value': [229785.0, 230565.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('sale of products', 36), (' Sale of coal', 32), ('revenue from operations', 31), (' Sales revenue', 29), ('transmission and distribution business', 26), ('from trading business', 24), ('net sales', 22), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19), (' Revenue', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('revenue from operations', 42), ('revenue from contracts with customers', 38), ('transmission and distribution business', 38), ('Revenue from contract with customers', 38), ('net sales', 32), ('from trading business', 31), (' Revenue', 29), (' Sale of coal', 27), (' Sales revenue', 26), ('sale of products', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('sale of products', 35), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Sale of coal', 30), (' Sales revenue', 27), ('from trading business', 23), ('net sales', 21), ('revenue from contracts with customers', 14), ('Revenue from contract with customers', 14), (' Revenue', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 39), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' Sale of coal', 34), (' Sales revenue', 32), ('sale of products', 31), ('net sales', 29), ('transmission and distribution business', 29), (' Revenue', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('from trading business', 50), ('net sales', 40), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 31), (' Sale of coal', 31), (' Revenue', 26), ('revenue from operations', 24), ('sale of products', 21)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('revenue from operations', 42), ('from trading business', 38), ('sale of products', 34), (' Sale of coal', 31), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sales revenue', 29), ('transmission and distribution business', 27), (' Revenue', 26), ('net sales', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 430597.0, 'line_item_label': ['Revenue from contracts with customers', 'Revenue'], 'note_numbers': ['4.1', nan], 'line_item_value': [214911.0, 215686.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = type of goods sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 69), (' Sale of goods - Marine', 60), (' Sale of goods - Spareparts', 53), (' Goods sold to customer direct from supplier', 53), (' Sale of goods - Motorcycles', 47), (' Goods sold to customer from warehouse', 47), (' Condensate', 43), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33), (' Total Revenue', 33), (' Gas transportation income', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = type of goods total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 53), (' Goods sold to customer from warehouse', 53), (' Gas transportation income', 50), (' Goods sold to customer direct from supplier', 46), (' Domgas', 40), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Condensate', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = geographical markets japan , res_fuzz_match = [(' Domgas', 60), (' Gas transportation income', 44), (' Sale of goods - Spareparts', 42), (' Total Revenue', 42), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Marine', 33), (' Goods sold to customer direct from supplier', 33), (' Sale of goods - Cars', 31), (' Goods sold to customer from warehouse', 29), (' Sale of goods - Motorcycles', 26), (' Condensate', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = geographical markets australia , res_fuzz_match = [(' Domgas', 60), (' Total Revenue', 42), (' Sale of goods - Marine', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 36), (' Goods sold to customer direct from supplier', 36), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Motorcycles', 32), (' Condensate', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = geographical markets total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Domgas', 60), (' Gas transportation income', 50), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Goods sold to customer direct from supplier', 41), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), ('Sale of goods', 33), (' LNG', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = timing of recognition goods transferred at a point in time , res_fuzz_match = [(' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Total Revenue', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 37), (' Goods sold to customer direct from supplier', 36), (' LNG', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = timing of recognition total from contracts with customers , res_fuzz_match = [(' Total Revenue', 58), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Cars', 46), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Sale of goods - Spareparts', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), ('Sale of goods', 33), (' LNG', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = type of goods sale of goods , res_fuzz_match = [('Sale of goods', 100), (' Sale of goods - Cars', 69), (' Sale of goods - Marine', 60), (' Sale of goods - Spareparts', 53), (' Goods sold to customer direct from supplier', 53), (' Sale of goods - Motorcycles', 47), (' Goods sold to customer from warehouse', 47), (' Condensate', 43), (' Domgas', 40), (' Feed gas income', 38), (' LNG', 33), (' Total Revenue', 33), (' Gas transportation income', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = type of goods total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Sale of goods - Cars', 54), (' Sale of goods - Motorcycles', 53), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 53), (' Goods sold to customer from warehouse', 53), (' Gas transportation income', 50), (' Goods sold to customer direct from supplier', 46), (' Domgas', 40), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Condensate', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = geographical markets japan , res_fuzz_match = [(' Domgas', 60), (' Gas transportation income', 44), (' Sale of goods - Spareparts', 42), (' Total Revenue', 42), (' Feed gas income', 38), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Marine', 33), (' Goods sold to customer direct from supplier', 33), (' Sale of goods - Cars', 31), (' Goods sold to customer from warehouse', 29), (' Sale of goods - Motorcycles', 26), (' Condensate', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = geographical markets australia , res_fuzz_match = [(' Domgas', 60), (' Total Revenue', 42), (' Sale of goods - Marine', 40), (' Gas transportation income', 39), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), (' Goods sold to customer from warehouse', 36), (' Goods sold to customer direct from supplier', 36), ('Sale of goods', 33), (' LNG', 33), (' Sale of goods - Motorcycles', 32), (' Condensate', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = geographical markets total revenue from contracts with customers , res_fuzz_match = [(' Total Revenue', 100), (' Domgas', 60), (' Gas transportation income', 50), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Goods sold to customer direct from supplier', 41), (' Sale of goods - Marine', 40), (' Goods sold to customer from warehouse', 40), (' Feed gas income', 38), (' Sale of goods - Cars', 38), (' Sale of goods - Spareparts', 37), ('Sale of goods', 33), (' LNG', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = timing of recognition goods transferred at a point in time , res_fuzz_match = [(' Gas transportation income', 61), ('Sale of goods', 56), (' Sale of goods - Cars', 54), (' Sale of goods - Marine', 53), (' Sale of goods - Spareparts', 47), (' Feed gas income', 46), (' Condensate', 43), (' Sale of goods - Motorcycles', 42), (' Total Revenue', 42), (' Domgas', 40), (' Goods sold to customer from warehouse', 37), (' Goods sold to customer direct from supplier', 36), (' LNG', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = timing of recognition total from contracts with customers , res_fuzz_match = [(' Total Revenue', 58), (' Gas transportation income', 50), (' Sale of goods - Motorcycles', 47), (' Sale of goods - Cars', 46), (' Condensate', 43), (' Goods sold to customer from warehouse', 43), (' Sale of goods - Spareparts', 42), (' Domgas', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), ('Sale of goods', 33), (' LNG', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 7, 8, 11], 'score': [100, 100, 100, 100, 100, 100], 'value': [214911.0, 214911.0, 214911.0, 229785.0, 229785.0, 229785.0], 'label': ['Type of goods Sale of goods', 'Type of goods Total revenue from contracts with customers', 'Geographical markets Total revenue from contracts with customers', 'Type of goods Sale of goods', 'Type of goods Total revenue from contracts with customers', 'Geographical markets Total revenue from contracts with customers'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), ('purchase of stock-in-trade', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('cost of sales', 42), ('Cost of sales', 42), (' cost of coal sold', 42), (' Cost of product sold', 37), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('purchase of stock-in-trade', 28), ('total expenses', 27), ('total expenditure', 23), ('expense', 12), ('expenditure', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Cost of goods and services sold', 36), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('total expenditure', 27), (' Cost of product sold', 26), ('total expenses', 25), (' Personnel costs', 24), ('expense', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' cost of coal sold', 40), ('total expenditure', 37), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), ('total expenses', 26), ('expense', 24), (' Personnel costs', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('total expenses', 38), (' Cost of inventory sold', 36), (' cost of coal sold', 35), ('cost of sales', 34), ('Cost of sales', 34), ('total expenditure', 33), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Cost of product sold', 27), (' Personnel costs', 24), ('expense', 23), ('expenditure', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('total expenditure', 48), ('total expenses', 41), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 28), ('expense', 26), (' cost of coal sold', 26), (' Cost of product sold', 24), (' Personnel costs', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [(' cost of coal sold', 39), (' Personnel costs', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 28), ('total expenses', 28), ('expenditure', 22), ('expense', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': -249283.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-249283.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), ('purchase of stock-in-trade', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('cost of sales', 42), ('Cost of sales', 42), (' cost of coal sold', 42), (' Cost of product sold', 37), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('purchase of stock-in-trade', 28), ('total expenses', 27), ('total expenditure', 23), ('expense', 12), ('expenditure', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Cost of goods and services sold', 36), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), ('total expenditure', 27), (' Cost of product sold', 26), ('total expenses', 25), (' Personnel costs', 24), ('expense', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' cost of coal sold', 40), ('total expenditure', 37), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 28), ('purchase of stock-in-trade', 27), (' Cost of inventory sold', 27), ('total expenses', 26), ('expense', 24), (' Personnel costs', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('total expenses', 38), (' Cost of inventory sold', 36), (' cost of coal sold', 35), ('cost of sales', 34), ('Cost of sales', 34), ('total expenditure', 33), ('purchase of stock-in-trade', 31), (' Cost of goods and services sold', 31), (' Cost of product sold', 27), (' Personnel costs', 24), ('expense', 23), ('expenditure', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('total expenditure', 48), ('total expenses', 41), (' Cost of inventory sold', 33), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 30), (' Cost of goods and services sold', 29), ('purchase of stock-in-trade', 28), ('expense', 26), (' cost of coal sold', 26), (' Cost of product sold', 24), (' Personnel costs', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [(' cost of coal sold', 39), (' Personnel costs', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), (' Cost of product sold', 29), ('purchase of stock-in-trade', 28), ('total expenses', 28), ('expenditure', 22), ('expense', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': -227382.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-227382.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [(' Lease expenses', 38), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Selling Expenses', 29), ('other expenses', 27), (' Occupancy expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Selling & distribution expenses', 26), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Sales and marketing', 24), ('Distribution expenses', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Administrative and other expenses', 22), (' Management expenses', 18), (' Marketing expenses', 17), (' Occupancy ', 13), (' depreciation', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Administrative and other expenses', 45), (' Administrative expenses', 42), (' Administration expenses', 42), (' Amortisation expenses', 36), (' Logistics and distribution', 36), (' Sales and marketing', 35), ('Distribution expenses', 31), (' Advertising expenses', 31), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Occupancy expenses', 21), (' Lease expenses', 21), (' Selling Expenses', 21), (' Management expenses', 21), (' depreciation', 14), (' Occupancy ', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Logistics and distribution', 45), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Administration expenses', 37), (' Lease expenses', 36), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Selling & distribution expenses', 31), (' Advertising expenses', 31), ('Distribution expenses', 30), (' Administrative and other expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Occupancy expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Marketing expenses', 25), (' depreciation', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Advertising expenses', 34), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' Administrative and other expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' depreciation', 22), ('Distribution expenses', 22), (' Occupancy ', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Lease expenses', 36), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Marketing expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Sales and marketing', 31), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Selling & distribution expenses', 26), (' Amortisation expenses', 26), (' depreciation', 25), (' Occupancy ', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other expenses', 41), (' Other expenses', 41), (' Other expenses', 41), (' Amortisation expenses', 39), (' Administrative and other expenses', 37), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Selling & distribution expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 25), ('Distribution expenses', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Selling Expenses', 21), (' Management expenses', 21), (' depreciation', 17), (' Occupancy expenses', 14), (' Occupancy ', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -4069.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-4069.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [(' Lease expenses', 38), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Selling Expenses', 29), ('other expenses', 27), (' Occupancy expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Selling & distribution expenses', 26), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Sales and marketing', 24), ('Distribution expenses', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Administrative and other expenses', 22), (' Management expenses', 18), (' Marketing expenses', 17), (' Occupancy ', 13), (' depreciation', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Administrative and other expenses', 45), (' Administrative expenses', 42), (' Administration expenses', 42), (' Amortisation expenses', 36), (' Logistics and distribution', 36), (' Sales and marketing', 35), ('Distribution expenses', 31), (' Advertising expenses', 31), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Occupancy expenses', 21), (' Lease expenses', 21), (' Selling Expenses', 21), (' Management expenses', 21), (' depreciation', 14), (' Occupancy ', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Logistics and distribution', 45), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Administration expenses', 37), (' Lease expenses', 36), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Selling & distribution expenses', 31), (' Advertising expenses', 31), ('Distribution expenses', 30), (' Administrative and other expenses', 27), (' Selling Expenses', 27), ('other expenses', 26), (' Occupancy expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' Marketing expenses', 25), (' depreciation', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Advertising expenses', 34), (' Lease expenses', 32), ('other expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Marketing expenses', 30), (' Administrative and other expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' depreciation', 22), ('Distribution expenses', 22), (' Occupancy ', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Lease expenses', 36), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Marketing expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Sales and marketing', 31), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), (' Occupancy expenses', 28), (' Selling & distribution expenses', 26), (' Amortisation expenses', 26), (' depreciation', 25), (' Occupancy ', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other expenses', 41), (' Other expenses', 41), (' Other expenses', 41), (' Amortisation expenses', 39), (' Administrative and other expenses', 37), (' Logistics and distribution', 32), (' Advertising expenses', 31), (' Lease expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Selling & distribution expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 25), ('Distribution expenses', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Selling Expenses', 21), (' Management expenses', 21), (' depreciation', 17), (' Occupancy expenses', 14), (' Occupancy ', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -5557.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-5557.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [(' Occupancy expenses', 27), (' Rental expenses', 26), (' Administration expenses', 23), ('Rent', 14), (' Occupancy', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Administration expenses', 42), (' Rental expenses', 29), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Administration expenses', 37), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 13), (' Occupancy', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 28), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Rental expenses', 40), (' Administration expenses', 30), ('Rent', 29), (' Occupancy expenses', 28), (' Occupancy', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 24), ('Rent', 19), (' Occupancy expenses', 14), (' Occupancy', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -4069.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-4069.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [(' Occupancy expenses', 27), (' Rental expenses', 26), (' Administration expenses', 23), ('Rent', 14), (' Occupancy', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Administration expenses', 42), (' Rental expenses', 29), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' Administration expenses', 37), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 13), (' Occupancy', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 28), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Rental expenses', 40), (' Administration expenses', 30), ('Rent', 29), (' Occupancy expenses', 28), (' Occupancy', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 24), ('Rent', 19), (' Occupancy expenses', 14), (' Occupancy', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -5557.0, 'line_item_label': ['Administrative expenses'], 'note_numbers': [nan], 'line_item_value': [-5557.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('other operating', 30), (' Other income', 29), ('Other revenue', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('Other revenue', 42), (' Other income', 38), ('other operating', 30)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other operating', 38), (' Other income', 36), ('Other revenue', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Other income', 52), ('other operating', 33), ('Other revenue', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Other income', 50), ('other operating', 30), ('Other revenue', 21)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other operating', 59), (' Other income', 50), ('Other revenue', 41)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 10924.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['4.2', '4.3'], 'line_item_value': [780.0, 10144.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('other operating', 30), (' Other income', 29), ('Other revenue', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('Other revenue', 42), (' Other income', 38), ('other operating', 30)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other operating', 38), (' Other income', 36), ('Other revenue', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' Other income', 52), ('other operating', 33), ('Other revenue', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' Other income', 50), ('other operating', 30), ('Other revenue', 21)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other operating', 59), (' Other income', 50), ('Other revenue', 41)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 5], 'score': 100, 'value': 14406.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['4.2', '4.3'], 'line_item_value': [775.0, 13631.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['Other income', ' Commission revenue', ' Rent'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = commission revenue , res_fuzz_match = [(' Commission revenue', 100), (' Rent', 50), ('Other income', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = commission revenue , res_fuzz_match = [(' Commission revenue', 100), (' Rent', 50), ('Other income', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('Other income', 0), (' Commission revenue', 0), (' Rent', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [775.0, 780.0], 'label': [' Commission revenue', ' Commission revenue'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('other income', 29), (' Finance income and costs', 26), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 18), ('Finance income', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Interest revenue', 47), ('other income', 38), (' Finance income and finance costs', 38), (' Finance income and costs', 35), (' Net finance costs', 31), ('finance income', 25), ('Finance income', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other income', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 26), (' Finance income and costs', 25), (' Interest revenue', 23), (' Net finance costs', 23)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('other income', 52), ('finance income', 44), ('Finance income', 44), (' Net finance costs', 40), (' Finance income and costs', 34), (' Finance income and finance costs', 29), (' Interest revenue', 23)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('finance income', 55), ('Finance income', 55), ('other income', 50), (' Finance income and costs', 47), (' Net finance costs', 44), (' Finance income and finance costs', 40), (' Interest revenue', 31)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other income', 50), (' Finance income and costs', 32), (' Interest revenue', 31), (' Net finance costs', 31), (' Finance income and finance costs', 27), ('finance income', 21), ('Finance income', 21)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 8, 9], 'score': 85, 'value': 9696.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs'], 'note_numbers': ['4.3', '4.4', '4.5'], 'line_item_value': [10144.0, 170.0, -618.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('other income', 29), (' Finance income and costs', 26), (' Interest revenue', 24), (' Net finance costs', 24), (' Finance income and finance costs', 21), ('finance income', 18), ('Finance income', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' Interest revenue', 47), ('other income', 38), (' Finance income and finance costs', 38), (' Finance income and costs', 35), (' Net finance costs', 31), ('finance income', 25), ('Finance income', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('other income', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 26), (' Finance income and costs', 25), (' Interest revenue', 23), (' Net finance costs', 23)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('other income', 52), ('finance income', 44), ('Finance income', 44), (' Net finance costs', 40), (' Finance income and costs', 34), (' Finance income and finance costs', 29), (' Interest revenue', 23)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('finance income', 55), ('Finance income', 55), ('other income', 50), (' Finance income and costs', 47), (' Net finance costs', 44), (' Finance income and finance costs', 40), (' Interest revenue', 31)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('other income', 50), (' Finance income and costs', 32), (' Interest revenue', 31), (' Net finance costs', 31), (' Finance income and finance costs', 27), ('finance income', 21), ('Finance income', 21)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 8, 9], 'score': 85, 'value': 13152.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs'], 'note_numbers': ['4.3', '4.4', '4.5'], 'line_item_value': [13631.0, 60.0, -539.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = government grants , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), ('interest', 38), (' Interest received - Loan', 35), ('Bank interest', 33), (' Interest income', 33), (' Interest received - Bank', 33), (' Sublease interest income', 33), (' Share of JV interest received/(paid)', 33), (' Interest income', 33), (' Bank Deposits - cash and cash equivalents', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = insurance proceeds , res_fuzz_match = [(' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Share of JV interest received/(paid)', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), ('interest', 38), ('Bank interest', 36), (' Interest income', 36), (' Sublease interest income', 36), (' Bank Deposits - cash and cash equivalents', 36), (' Interest income', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = foreign exchange gain , res_fuzz_match = [(' Bank Deposits - cash and cash equivalents', 45), (' Interest received - Bank', 40), (' Interest received - Loan', 40), (' Share of JV interest received/(paid)', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 38), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [('interest', 60), ('Bank interest', 60), (' Interest income', 60), (' Interest received - Bank', 60), (' Interest received - Loan', 60), (' Sublease interest income', 60), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest income', 60), (' Bank Deposits - cash and cash equivalents', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = government grants , res_fuzz_match = [(' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), ('interest', 38), (' Interest received - Loan', 35), ('Bank interest', 33), (' Interest income', 33), (' Interest received - Bank', 33), (' Sublease interest income', 33), (' Share of JV interest received/(paid)', 33), (' Interest income', 33), (' Bank Deposits - cash and cash equivalents', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = insurance proceeds , res_fuzz_match = [(' Interest received - Bank', 55), (' Interest received - Loan', 55), (' Share of JV interest received/(paid)', 55), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 45), ('interest', 38), ('Bank interest', 36), (' Interest income', 36), (' Sublease interest income', 36), (' Bank Deposits - cash and cash equivalents', 36), (' Interest income', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = foreign exchange gain , res_fuzz_match = [(' Bank Deposits - cash and cash equivalents', 45), (' Interest received - Bank', 40), (' Interest received - Loan', 40), (' Share of JV interest received/(paid)', 40), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 40), ('interest', 38), ('Bank interest', 38), (' Interest income', 36), (' Sublease interest income', 36), (' Interest income', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = other , res_fuzz_match = [('interest', 60), ('Bank interest', 60), (' Interest income', 60), (' Interest received - Bank', 60), (' Interest received - Loan', 60), (' Sublease interest income', 60), (' Share of JV interest received/(paid)', 60), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 60), (' Interest income', 60), (' Bank Deposits - cash and cash equivalents', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = bank interest , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Sublease interest income', 77), (' Share of JV interest received/(paid)', 77), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 69), (' Interest income', 62), (' Interest received - Bank', 62), (' Interest received - Loan', 62), (' Bank Deposits - cash and cash equivalents', 62), (' Interest income', 62)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = bank interest , res_fuzz_match = [('interest', 100), ('Bank interest', 100), (' Sublease interest income', 77), (' Share of JV interest received/(paid)', 77), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 69), (' Interest income', 62), (' Interest received - Bank', 62), (' Interest received - Loan', 62), (' Bank Deposits - cash and cash equivalents', 62), (' Interest income', 62)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [60.0, 170.0], 'label': [' Bank interest', ' Bank interest'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 24), (' finance expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 30)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 40), ('finance cost', 36), ('finance costs', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('finance cost', 36), ('finance costs', 36), (' net finance costs ', 31), (' finance expenses', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -618.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['4.5'], 'line_item_value': [-618.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 24), (' finance expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 30)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 40), ('finance cost', 36), ('finance costs', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('finance cost', 36), ('finance costs', 36), (' net finance costs ', 31), (' finance expenses', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -539.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['4.5'], 'line_item_value': [-539.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = interest expenses , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 100), (' Interest expense on financial liabilities using the effective interest rate method - other', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 100), (' Lease liabilities interest expense', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest on bank overdrafts and loans (other than those from related parties)', 67), (' Interest accrued on loans', 60), (' Interest accrued on lease liabilities', 60), ('debt', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 33), ('cash credit', 27), ('loan', 25), ('bonds', 25), ('borrowings', 17), ('bank facilities', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = discount unwind on the provision for asset retirement obligation , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 100), ('cash credit', 55), ('loan', 50), ('bonds', 50), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), (' Interest accrued on lease liabilities', 46), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 42), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease interest expense', 40), ('debenture', 38), ('interest', 38), ('borrowings', 33), ('Interest expenses', 33), (' Lease liabilities interest expense', 33), ('bank facilities', 30), ('debt', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = interest expenses , res_fuzz_match = [('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 100), (' Interest expense on financial liabilities using the effective interest rate method - other', 100), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 100), (' Lease liabilities interest expense', 100), (' Interest on leases', 77), (' Interest income', 71), (' Interest on bank overdrafts and loans (other than those from related parties)', 67), (' Interest accrued on loans', 60), (' Interest accrued on lease liabilities', 60), ('debt', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 33), ('cash credit', 27), ('loan', 25), ('bonds', 25), ('borrowings', 17), ('bank facilities', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = discount unwind on the provision for asset retirement obligation , res_fuzz_match = [(' Discount unwind on the provision for asset retirement obligation', 100), ('cash credit', 55), ('loan', 50), ('bonds', 50), (' Interest on leases', 46), (' Interest on bank overdrafts and loans (other than those from related parties)', 46), (' Interest accrued on lease liabilities', 46), ('  Other interest expense', 43), (' Interest income', 43), (' Interest accrued on loans', 42), (' Interest expense on financial liabilities using the effective interest rate method - other', 42), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 42), (' Lease interest expense', 40), ('debenture', 38), ('interest', 38), ('borrowings', 33), ('Interest expenses', 33), (' Lease liabilities interest expense', 33), ('bank facilities', 30), ('debt', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [-203.0, -336.0, -303.0, -315.0], 'label': [' Interest expenses', ' Discount unwind on the provision for asset retirement obligation', ' Interest expenses', ' Discount unwind on the provision for asset retirement obligation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 24), (' finance expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 30)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 40), ('finance cost', 36), ('finance costs', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('finance cost', 36), ('finance costs', 36), (' net finance costs ', 31), (' finance expenses', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -618.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['4.5'], 'line_item_value': [-618.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 24), (' finance expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [(' net finance costs ', 31), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [(' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18), (' finance expenses', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' net finance costs ', 40), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 30)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 40), ('finance cost', 36), ('finance costs', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('finance cost', 36), ('finance costs', 36), (' net finance costs ', 31), (' finance expenses', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -539.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['4.5'], 'line_item_value': [-539.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = interest expenses , res_fuzz_match = [(' other', 60), ('other revenue', 58), (' net of tax', 57), (' net foreign exchange gain', 47), (' net foreign exchange gains/(losses)', 47), (' net foreign exchange (loss)/gain', 47), (' net ppe disposal (loss)/gain', 47), (' net other foreign exchange (losses)/gains', 47), (' insurance proceeds', 45), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 40), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' margin charge income', 34), (' quota lease income', 34), ('  government grants', 33), (' secondment income (tw recovery)', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 27), (' paid by customers - at amortised cost', 27), (' sundry income', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = discount unwind on the provision for asset retirement obligation , res_fuzz_match = [(' other', 60), (' net of tax', 57), (' dividend from other parties', 52), ('other revenue', 50), (' sundry income', 50), (' net (loss)/profit on disposal of non-current assets', 50), (' profit from discontinued operation', 48), (' secondment income (tw recovery)', 48), (' paid by customers - at amortised cost', 46), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other income', 45), (' net foreign exchange gains/(losses)', 45), (' commission revenue', 43), (' japan recoveries', 43), ('  government grants', 42), (' net foreign exchange (loss)/gain', 41), (' other miscellaneous - net (loss)/gain', 41), (' net foreign exchange gain', 38), (' quota lease income', 38), (' share of jv income', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 35), (' margin charge income', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = interest expenses , res_fuzz_match = [(' other', 60), ('other revenue', 58), (' net of tax', 57), (' net foreign exchange gain', 47), (' net foreign exchange gains/(losses)', 47), (' net foreign exchange (loss)/gain', 47), (' net ppe disposal (loss)/gain', 47), (' net other foreign exchange (losses)/gains', 47), (' insurance proceeds', 45), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' other miscellaneous - net (loss)/gain', 40), (' commission revenue', 36), (' other income', 36), (' share of jv income', 36), (' margin charge income', 34), (' quota lease income', 34), ('  government grants', 33), (' secondment income (tw recovery)', 33), (' net (loss)/profit on disposal of non-current assets', 33), (' japan recoveries', 29), (' effective portion of changes in fair value of cash flow', 27), (' paid by customers - at amortised cost', 27), (' sundry income', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = discount unwind on the provision for asset retirement obligation , res_fuzz_match = [(' other', 60), (' net of tax', 57), (' dividend from other parties', 52), ('other revenue', 50), (' sundry income', 50), (' net (loss)/profit on disposal of non-current assets', 50), (' profit from discontinued operation', 48), (' secondment income (tw recovery)', 48), (' paid by customers - at amortised cost', 46), (' net ppe disposal (loss)/gain', 46), (' net other foreign exchange (losses)/gains', 46), (' insurance proceeds', 45), (' other income', 45), (' net foreign exchange gains/(losses)', 45), (' commission revenue', 43), (' japan recoveries', 43), ('  government grants', 42), (' net foreign exchange (loss)/gain', 41), (' other miscellaneous - net (loss)/gain', 41), (' net foreign exchange gain', 38), (' quota lease income', 38), (' share of jv income', 36), (' foreign exchange gain', 35), (' effective portion of changes in fair value of cash flow', 35), (' margin charge income', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('NULL', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('NULL', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('NULL', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('NULL', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('prior year ', 30), ('provision for taxation previous year', 26), (' income tax expense', 23), ('deferred tax', 21), (' income tax', 21), ('current tax', 19), ('earlier year', 18), (' income tax benefit/(expense)', 18), ('amount transferred to retained earnings', 16), (' income tax benefit', 15), ('minimum alternate tax credit entitlement', 14), (' tax (expense)/benefit', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('amount transferred to retained earnings', 44), ('minimum alternate tax credit entitlement', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax expense', 35), (' income tax benefit', 34), (' income tax', 31), ('earlier year', 29), ('deferred tax', 27), ('current tax', 26), ('prior year ', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior year ', 38), ('earlier year', 35), (' income tax', 30), ('amount transferred to retained earnings', 26), ('provision for taxation previous year', 25), (' income tax benefit/(expense)', 23), (' income tax expense', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 21), ('deferred tax', 20), ('minimum alternate tax credit entitlement', 19), ('current tax', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' income tax benefit', 70), (' income tax', 62), (' income tax expense', 61), (' income tax benefit/(expense)', 59), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('deferred tax', 48), ('current tax', 39), ('minimum alternate tax credit entitlement', 38), ('amount transferred to retained earnings', 34), ('prior year ', 33), ('earlier year', 31)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' income tax benefit', 100), (' income tax benefit/(expense)', 83), (' tax (expense)/benefit', 74), (' income tax expense', 73), (' income tax', 69), ('minimum alternate tax credit entitlement', 53), ('current tax', 50), ('deferred tax', 46), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 35), ('prior year ', 30), ('earlier year', 28)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('provision for taxation previous year', 57), ('earlier year', 55), ('prior year ', 52), ('deferred tax', 38), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('amount transferred to retained earnings', 32), (' income tax', 31), (' income tax expense', 30), ('current tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 3944.0, 'line_item_label': ['Income tax benefit'], 'note_numbers': ['5'], 'line_item_value': [3944.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('prior year ', 30), ('provision for taxation previous year', 26), (' income tax expense', 23), ('deferred tax', 21), (' income tax', 21), ('current tax', 19), ('earlier year', 18), (' income tax benefit/(expense)', 18), ('amount transferred to retained earnings', 16), (' income tax benefit', 15), ('minimum alternate tax credit entitlement', 14), (' tax (expense)/benefit', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('amount transferred to retained earnings', 44), ('minimum alternate tax credit entitlement', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax expense', 35), (' income tax benefit', 34), (' income tax', 31), ('earlier year', 29), ('deferred tax', 27), ('current tax', 26), ('prior year ', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior year ', 38), ('earlier year', 35), (' income tax', 30), ('amount transferred to retained earnings', 26), ('provision for taxation previous year', 25), (' income tax benefit/(expense)', 23), (' income tax expense', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 21), ('deferred tax', 20), ('minimum alternate tax credit entitlement', 19), ('current tax', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [(' income tax benefit', 70), (' income tax', 62), (' income tax expense', 61), (' income tax benefit/(expense)', 59), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('deferred tax', 48), ('current tax', 39), ('minimum alternate tax credit entitlement', 38), ('amount transferred to retained earnings', 34), ('prior year ', 33), ('earlier year', 31)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [(' income tax benefit', 100), (' income tax benefit/(expense)', 83), (' tax (expense)/benefit', 74), (' income tax expense', 73), (' income tax', 69), ('minimum alternate tax credit entitlement', 53), ('current tax', 50), ('deferred tax', 46), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 35), ('prior year ', 30), ('earlier year', 28)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('provision for taxation previous year', 57), ('earlier year', 55), ('prior year ', 52), ('deferred tax', 38), (' income tax benefit', 35), (' tax (expense)/benefit', 34), ('amount transferred to retained earnings', 32), (' income tax', 31), (' income tax expense', 30), ('current tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 8217.0, 'line_item_label': ['Income tax benefit'], 'note_numbers': ['5'], 'line_item_value': [8217.0]}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' current income tax', 29), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 29), ('income tax expense', 14), (' deferred income tax', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 41), (' deferred income tax', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' current income tax', 59), (' income tax expense on continuing operations', 55), (' deferred income tax', 53), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as of 1 january , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' current income tax', 29), (' total income tax expense / (benefit)', 29), (' total tax (expense)/benefit in income statement', 29), ('income tax expense', 14), (' deferred income tax', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 41), (' deferred income tax', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = income tax benefit during the year recognised in other comprehensive income , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 62), (' current income tax', 59), (' income tax expense on continuing operations', 55), (' deferred income tax', 53), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as at 31 december , res_fuzz_match = [(' deferred income tax', 50), ('income tax expense', 33), (' current income tax', 33), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' total income tax expense / (benefit)', 67), (' income tax expense on continuing operations', 59), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' total tax (expense)/benefit in income statement', 52)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 62), (' current income tax', 59), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' deferred income tax', 53), (' total income tax expense / (benefit)', 50)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = current income tax: current income tax benefit , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' total income tax expense / (benefit)', 67), (' income tax expense on continuing operations', 59), (' total tax (expense)/benefit in income statement', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = current income tax: adjustments in respect of current income tax of previous year , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 52), (' total tax (expense)/benefit in income statement', 52)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = deferred income tax: origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' current income tax', 65), (' income tax expense on continuing operations', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in the statement of profit or loss and other comprehensive income , res_fuzz_match = [('income tax expense', 75), (' total tax (expense)/benefit in income statement', 62), (' current income tax', 59), (' income tax expense on continuing operations', 59), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' deferred income tax', 53), (' total income tax expense / (benefit)', 50)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6], 'score': [100, 100, 100, 100, 100, 100], 'value': [5119.0, 71.0, 3027.0, 5473.0, 0.0, -1529.0], 'label': ['Current income tax: Current income tax benefit', 'Current income tax: Adjustments in respect of current income tax of previous year', 'Deferred income tax: Origination and reversal of temporary differences', 'Current income tax: Current income tax benefit', 'Current income tax: Adjustments in respect of current income tax of previous year', 'Deferred income tax: Origination and reversal of temporary differences'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 57), ('income tax expense', 56), (' total income tax expense / (benefit)', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 41)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' current income tax', 47), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 50)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 47), (' current income tax', 41), (' deferred income tax', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = accounting loss before income tax , res_fuzz_match = [(' deferred income tax', 87), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 57), ('income tax expense', 56), (' total income tax expense / (benefit)', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = at australia's statutory income tax rate of 30% (2019: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total tax (expense)/benefit in income statement', 47), (' income tax expense on continuing operations', 41)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = amounts not deductible for tax purposes , res_fuzz_match = [(' deferred income tax', 53), ('income tax expense', 50), (' current income tax', 47), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = adjustments in respect of current income tax of previous year , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 55), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 50)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = income tax benefit reported in profit or loss , res_fuzz_match = [('income tax expense', 75), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 57), (' total tax (expense)/benefit in income statement', 47), (' current income tax', 41), (' deferred income tax', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = $000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 6, 9], 'score': [87, 100, 87, 100], 'value': [-28082.0, 71.0, -20678.0, 0.0], 'label': [' Accounting loss before income tax', ' Adjustments in respect of current income tax of previous year', ' Accounting loss before income tax', ' Adjustments in respect of current income tax of previous year'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 54), ('income tax expense', 46), (' deferred income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 46), (' current income tax', 38)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), ('income tax expense', 39), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 36), (' deferred income tax', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' current income tax', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), ('income tax expense', 31)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 36), (' current income tax', 27), (' deferred income tax', 27), ('income tax expense', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred income tax', 44), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('income tax expense', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 59), (' total tax (expense)/benefit in income statement', 59), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total income tax expense / (benefit)', 38), (' income tax expense on continuing operations', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39), (' income tax expense on continuing operations', 36), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 30), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 54), ('income tax expense', 46), (' deferred income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 46), (' current income tax', 38)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), ('income tax expense', 39), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 36), (' deferred income tax', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' current income tax', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), ('income tax expense', 31)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 36), (' current income tax', 27), (' deferred income tax', 27), ('income tax expense', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred income tax', 44), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('income tax expense', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 59), (' total tax (expense)/benefit in income statement', 59), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total income tax expense / (benefit)', 38), (' income tax expense on continuing operations', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39), (' income tax expense on continuing operations', 36), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 30), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 54), ('income tax expense', 46), (' deferred income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 46), (' current income tax', 38)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), ('income tax expense', 39), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 36), (' deferred income tax', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' current income tax', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), ('income tax expense', 31)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 36), (' current income tax', 27), (' deferred income tax', 27), ('income tax expense', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred income tax', 44), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('income tax expense', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 59), (' total tax (expense)/benefit in income statement', 59), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total income tax expense / (benefit)', 38), (' income tax expense on continuing operations', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39), (' income tax expense on continuing operations', 36), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 30), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = trade and other receivables , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), ('income tax expense', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = financial assets , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 54), ('income tax expense', 46), (' deferred income tax', 46), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 46), (' total income tax expense / (benefit)', 46), (' current income tax', 38)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = property, plant and equipment , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' deferred income tax', 40), ('income tax expense', 39), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = right-of-use assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 33), (' current income tax', 33), (' deferred income tax', 33), (' total income tax expense / (benefit)', 33), (' income tax expense on continuing operations', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total tax (expense)/benefit in income statement', 45), ('income tax expense', 36), (' deferred income tax', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36), (' current income tax', 27)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = trade and other payables , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 36), (' current income tax', 35), ('income tax expense', 31)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), ('income tax expense', 33), (' deferred income tax', 33), (' income tax expense on continuing operations', 33), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' total income tax expense / (benefit)', 45), (' total tax (expense)/benefit in income statement', 45), (' income tax expense on continuing operations', 36), (' current income tax', 27), (' deferred income tax', 27), ('income tax expense', 18)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = financial liabilities , res_fuzz_match = [(' deferred income tax', 44), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 36), (' income tax expense on continuing operations', 36), (' total income tax expense / (benefit)', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = aro assets , res_fuzz_match = [('income tax expense', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 33)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = others , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 60), (' income tax expense on continuing operations', 60), ('income tax expense', 40), (' current income tax', 40), (' deferred income tax', 40), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = deferred tax benefit , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 59), (' total income tax expense / (benefit)', 59), (' total tax (expense)/benefit in income statement', 59), ('income tax expense', 44), (' income tax expense on continuing operations', 41), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = net deferred tax assets/(liabilities) , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total income tax expense / (benefit)', 38), (' income tax expense on continuing operations', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 39), (' income tax expense on continuing operations', 36), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax liabilities , res_fuzz_match = [(' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 35), (' total income tax expense / (benefit)', 35), (' income tax expense on continuing operations', 30), (' current income tax', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = as follows: deferred tax assets/(liabilities), net , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 43), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 42), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_rows = statement of profit or loss statement of financial and other comprehensive position income $000 , res_fuzz_match = [(' total tax (expense)/benefit in income statement', 55), (' current income tax', 53), (' deferred income tax', 47), (' income tax expense on continuing operations', 45), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('prior period', 36), ('exceptional', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('prior period', 21), ('exceptional', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior period', 35), ('exceptional', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('prior period', 38), ('exceptional', 23)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('prior period', 28), ('exceptional', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('prior period', 36), ('exceptional', 0)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('prior period', 21), ('exceptional', 19)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('prior period', 35), ('exceptional', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('prior period', 38), ('exceptional', 23)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('prior period', 34), ('exceptional', 26)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('prior period', 28), ('exceptional', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-04 11:43:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-04 11:43:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('NULL', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('NULL', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-04 11:43:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-04 11:43:01+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = gross loss , res_fuzz_match = [('NULL', 14)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = share of gain/(loss) of joint venture, net of tax , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = impairment loss , res_fuzz_match = [('NULL', 13)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss before income tax , res_fuzz_match = [('NULL', 17)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = income tax benefit , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - txt_particular = loss for the year , res_fuzz_match = [('NULL', 10)]
2023-05-04 11:43:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

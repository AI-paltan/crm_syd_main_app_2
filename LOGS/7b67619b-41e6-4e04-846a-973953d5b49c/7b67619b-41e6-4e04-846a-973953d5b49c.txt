2023-08-28 11:41:49+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-28 11:41:49+0530 - sLogger - DEBUG - {'fileid': '7b67619b-41e6-4e04-846a-973953d5b49c', 'filename': 'JEOL FS 2023 Signed-FINAL.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/JEOL FS 2023 Signed-FINAL.pdf', 'status': 'Processing'}
2023-08-28 11:41:49+0530 - sLogger - DEBUG - save file completed
2023-08-28 11:41:49+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-28 11:41:49+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-28 11:41:49+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-28 11:41:49+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-28 11:41:49+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-28 11:41:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:41:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:41:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:41:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:41:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:41:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:41:51+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:41:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:41:51+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:41:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:41:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:41:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:41:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:41:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:41:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:41:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:41:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:41:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:41:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:41:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:41:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:41:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:41:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:09+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:09+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:12+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:12+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:20+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:20+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:50+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:50+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:42:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:42:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:42:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:42:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:42:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:42:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:42:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:06+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:15+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:15+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:24+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:24+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:44+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:48+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:48+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:43:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:43:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:43:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:43:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:43:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:43:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:43:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:44:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:44:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:44:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:44:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:44:03+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:44:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:44:03+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:44:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:44:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:44:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:44:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:44:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:44:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:44:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:44:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:44:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:44:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:44:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:44:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:44:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:44:10+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:44:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:44:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:44:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:44:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:44:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:44:16+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-28 11:44:16+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [5], 'predicted_cpl_pages': [4, 17], 'predicted_ccf_pages': [7], 'filtered_cbs_pages': [5], 'filtered_cpl_pages': [4], 'filtered_ccf_pages': [7], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-28 11:44:16+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-28 11:44:16+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-28 11:44:16+0530 - sLogger - DEBUG - process file completed
2023-08-28 11:44:16+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-28 11:44:16+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-28 11:44:16+0530 - sLogger - DEBUG - TE process file started
2023-08-28 11:47:29+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-28 11:47:29+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-28 11:47:29+0530 - sLogger - DEBUG - process_main_pages started
2023-08-28 11:47:29+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 11:47:29+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 11:47:29+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 11:47:29+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 11:47:29+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 11:47:29+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 11:47:29+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 11:47:29+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 11:47:29+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 11:47:29+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-28 11:47:29+0530 - sLogger - DEBUG - set_section_details started
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentassets | score 96
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentliabilities | score 62
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equityandliabilities | score 29
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Other financial assets | [('noncurrent assets', 62), ('current assets', 50), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('current liabilities', 36), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('currentassets', 32), ('noncurrentassets', 29), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('equityliabilities', 22), ('currentliabilities', 21)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD current assets | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD currentassets | score 49
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD current liabilities | score 42
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD currentliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrent assets | score 53
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrentassets | score 47
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrent liabilities | score 41
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD non current assets | score 50
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD non current liabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrentliabilities | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrentassets | score 47
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrentliabilities | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD equity and liabilities | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD equityandliabilities | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Other current assets | [('current assets', 81), ('noncurrent assets', 62), ('currentassets', 52), ('currentliabilities', 50), ('current liabilities', 48), ('noncurrentassets', 47), ('noncurrentliabilities', 45), ('assets', 42), ('noncurrent liabilities', 36), ('equity and liabilities', 28), ('equity liabilities', 25), ('equity', 24), ('equityliabilities', 22), ('equityandliabilities', 20), ('liabilities', 8)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current assets | score 95
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD currentassets | score 83
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD current liabilities | score 56
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD currentliabilities | score 53
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent assets | score 81
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current assets | score 84
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD non current liabilities | score 60
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity and liabilities | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other current assets | MATCH WORD equityandliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentassets | score 87
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentliabilities | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equityandliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentassets | score 62
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentliabilities | score 97
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equityandliabilities | score 67
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Other liabilities | [('noncurrent liabilities', 69), ('liabilities', 67), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('noncurrent assets', 32), ('equityandliabilities', 26), ('assets', 24), ('current assets', 24), ('noncurrentassets', 22), ('equity', 22), ('equityliabilities', 20), ('currentliabilities', 19), ('currentassets', 17), ('noncurrentliabilities', 17)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current assets | score 32
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD currentassets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current assets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equityandliabilities | score 65
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Lease Liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current assets | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentassets | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current assets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentassets | score 56
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentliabilities | score 88
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 55
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equityandliabilities | score 65
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentassets | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentliabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equityandliabilities | score 62
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Lease Liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current assets | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentassets | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD current liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current assets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentassets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Lease Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-28 11:47:29+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-28 11:47:29+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-28 11:47:29+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-28 11:47:29+0530 - sLogger - DEBUG - set_section_details started
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Government subsidies received | adjustments for increase decrease in operating liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes paid | changes in working capital
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated by /(used in) operating activities | adjustments for increase decrease in operating assets
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated by /(used in) operating activities | adjustments for increase decrease in operating assets
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from disposal of property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from disposal of property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | operating profit before changes in assets and liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of lease liabilities | changes in operating assets and liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment/proceeds of/from related party loans | operating profit before working capital changes
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/generated by financing activities | adjustments for increase decrease in operating assets
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-28 11:47:29+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the year | changes in operating assets and liabilities
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset ', ' Term deposit']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), (' Cash', 44), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits ', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits ', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24), (' Cash', 24)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits ', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33), (' Cash', 32)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits ', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), (' Cash', 15)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other bank balances', 56), ('cash asset', 55), ('bank balances other than above', 48), ('bank balances other than cash and cash equivalents', 41), ('cash and short term deposits', 39), ('Cash and short term deposits ', 39), ('cash and bank balances', 36), ('cash and cash equivalents', 30), (' Cash', 26)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits ', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14), (' Cash', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('cash asset', 55), ('other bank balances', 50), ('cash and short term deposits', 48), ('Cash and short term deposits ', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' Cash', 26)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 4737239.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19'], 'line_item_value': [4737239.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), (' Cash', 44), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits ', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits ', 35), ('cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24), (' Cash', 24)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits ', 54), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33), (' Cash', 32)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits ', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), (' Cash', 15)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other bank balances', 56), ('cash asset', 55), ('bank balances other than above', 48), ('bank balances other than cash and cash equivalents', 41), ('cash and short term deposits', 39), ('Cash and short term deposits ', 39), ('cash and bank balances', 36), ('cash and cash equivalents', 30), (' Cash', 26)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits ', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14), (' Cash', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('cash asset', 55), ('other bank balances', 50), ('cash and short term deposits', 48), ('Cash and short term deposits ', 48), ('bank balances other than above', 43), ('bank balances other than cash and cash equivalents', 35), ('cash and bank balances', 31), ('cash and cash equivalents', 30), (' Cash', 26)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 6472104.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19'], 'line_item_value': [6472104.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['inventories ', ' Contract assets']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' spare parts at cost ', ' parts and accessories (at cost) ', ' stock in transit ', ' Stock in transit at cost ', ' allowance for obsolescence ', ' Finished goods in transit']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['inventories ', ' Contract assets'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' Contract assets', 100), ('inventories ', 40)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' Contract assets', 62), ('inventories ', 33)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 22)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 33)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' Contract assets', 64), ('inventories ', 44)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories ', 100), (' Contract assets', 33)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' Contract assets', 64), ('inventories ', 33)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5], 'score': 100, 'value': 15855793.0, 'line_item_label': ['Assets', 'Inventories'], 'note_numbers': [nan, '9'], 'line_item_value': [0.0, 15855793.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['inventories ', ' Contract assets'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' Contract assets', 100), ('inventories ', 40)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' Contract assets', 62), ('inventories ', 33)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 22)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' Contract assets', 36), ('inventories ', 33)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' Contract assets', 64), ('inventories ', 44)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories ', 100), (' Contract assets', 33)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' Contract assets', 64), ('inventories ', 33)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 5], 'score': 100, 'value': 2909154.0, 'line_item_label': ['Assets', 'Inventories'], 'note_numbers': [nan, '9'], 'line_item_value': [0.0, 2909154.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' spare parts at cost ', ' parts and accessories (at cost) ', ' stock in transit ', ' Stock in transit at cost ', ' allowance for obsolescence ', ' Finished goods in transit'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = current finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' Finished goods in transit', 80), (' cranes ', 60), (' goods in transit ', 58), (' stores and other consumables at cost ', 50), (' Stock in transit at cost ', 50), (' parts and accessories (at cost) ', 48), (' spare parts at cost ', 47), (' cranes - in transit ', 46), (' inventories ', 44), (' provision for inventory obsolescence ', 38), (' stock in transit ', 38), (' allowance for obsolescence ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = current finished goods at cost , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' Finished goods in transit', 80), (' cranes ', 60), (' goods in transit ', 58), (' stores and other consumables at cost ', 50), (' Stock in transit at cost ', 50), (' parts and accessories (at cost) ', 48), (' spare parts at cost ', 47), (' cranes - in transit ', 46), (' inventories ', 44), (' provision for inventory obsolescence ', 38), (' stock in transit ', 38), (' allowance for obsolescence ', 33), (' work in progress ', 31), ('raw materials ', 30), (' raw materials ', 30), (' spare parts ', 30)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' spare parts at cost ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit ', 0), (' Stock in transit at cost ', 0), (' allowance for obsolescence ', 0), (' Finished goods in transit', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [2909154.0, 15855793.0], 'label': ['Current Finished goods at cost', 'Current Finished goods at cost'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables ']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables '] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables ', 22), (' prepayments ', 18)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables ', 34), (' prepayments ', 21)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' other financial assets ', 100), (' other current financial assets ', 83), ('other assets ', 73), (' other current assets ', 68), (' trade and other receivables ', 39), (' prepayments ', 16)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables ', 26), (' prepayments ', 13)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' other current assets ', 100), (' other current financial assets ', 83), ('other assets ', 73), (' other financial assets ', 68), (' trade and other receivables ', 39), (' prepayments ', 16)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 6], 'score': 100, 'value': 910947.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other financial assets', 'Other current assets'], 'note_numbers': [nan, '7', '8', '10'], 'line_item_value': [0.0, 862567.0, 20000.0, 28380.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables '] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables ', 22), (' prepayments ', 18)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [(' other current assets ', 81), (' other current financial assets ', 65), ('other assets ', 58), (' other financial assets ', 50), (' trade and other receivables ', 34), (' prepayments ', 21)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), ('other assets ', 31), (' other current assets ', 30), (' other financial assets ', 30), (' other current financial assets ', 29), (' prepayments ', 15)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' other financial assets ', 100), (' other current financial assets ', 83), ('other assets ', 73), (' other current assets ', 68), (' trade and other receivables ', 39), (' prepayments ', 16)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables ', 26), (' prepayments ', 13)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' other current assets ', 100), (' other current financial assets ', 83), ('other assets ', 73), (' other financial assets ', 68), (' trade and other receivables ', 39), (' prepayments ', 16)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 6], 'score': 100, 'value': 1659887.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other financial assets', 'Other current assets'], 'note_numbers': [nan, '7', '8', '10'], 'line_item_value': [0.0, 1586457.0, 20000.0, 53430.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = current term deposits , res_fuzz_match = [('current ', 100), (' other prepayments ', 50), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 40), (' other receivables and prepayments ', 40), (' prepaid expense ', 36), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = current term deposits , res_fuzz_match = [('current ', 100), (' other prepayments ', 50), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 40), (' other receivables and prepayments ', 40), (' prepaid expense ', 36), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current ', 0), (' prepaid expense ', 0), (' prepaid expenditure ', 0), (' prepayments ', 0), (' prepaid ', 0), (' other prepayments ', 0), (' other receivables and prepayments ', 0), (' prepaid ', 0), (' in advance ', 0), (' charges paid in advance', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [20000.0, 20000.0], 'label': ['Current Term deposits', 'Current Term deposits'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' Restricted deposits ', 29), (' Capitalised contract cost ', 29), (' trade and other receivables ', 22), (' Income tax receivable', 19), (' income tax receivable from related parties ', 16), (' Income tax refund due ', 16), (' deferred operating expenditure ', 15), (' Other investment including derivatives ', 13)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' Income tax refund due ', 42), (' Restricted deposits ', 41), (' trade and other receivables ', 34), (' Capitalised contract cost ', 33), (' Other investment including derivatives ', 32), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29), (' Income tax receivable', 28)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), (' Income tax receivable', 43), (' biological assets ', 36), (' financial assets ', 35), (' Income tax refund due ', 34), (' income tax receivable from related parties ', 33), (' Capitalised contract cost ', 32), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' Other investment including derivatives ', 30), (' Restricted deposits ', 27), (' deferred operating expenditure ', 19)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), (' Income tax receivable', 63), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' Income tax refund due ', 43), (' Other investment including derivatives ', 43), (' other assets ', 42), (' Restricted deposits ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' Capitalised contract cost ', 36), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' other financial assets ', 100), (' financial assets ', 81), (' other assets ', 73), ('other current assets ', 68), (' Other investment including derivatives ', 55), (' biological assets ', 52), (' Capitalised contract cost ', 43), (' deferred operating expenditure ', 40), (' trade and other receivables ', 39), (' Income tax refund due ', 36), (' Restricted deposits ', 34), (' Income tax receivable', 34), (' income tax receivable from related parties ', 31)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' Other investment including derivatives ', 41), (' other assets ', 40), (' Restricted deposits ', 40), (' Income tax receivable', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' Income tax refund due ', 34), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables ', 26), (' Capitalised contract cost ', 25), (' income tax receivable from related parties ', 24)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets ', 100), (' other assets ', 73), (' other financial assets ', 68), (' Other investment including derivatives ', 55), (' biological assets ', 45), (' deferred operating expenditure ', 45), (' financial assets ', 44), (' Capitalised contract cost ', 43), (' Income tax refund due ', 41), (' Restricted deposits ', 40), (' trade and other receivables ', 39), (' income tax receivable from related parties ', 35), (' Income tax receivable', 29)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 6], 'score': 100, 'value': 910947.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other financial assets', 'Other current assets'], 'note_numbers': [nan, '7', '8', '10'], 'line_item_value': [0.0, 862567.0, 20000.0, 28380.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' Restricted deposits ', 29), (' Capitalised contract cost ', 29), (' trade and other receivables ', 22), (' Income tax receivable', 19), (' income tax receivable from related parties ', 16), (' Income tax refund due ', 16), (' deferred operating expenditure ', 15), (' Other investment including derivatives ', 13)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets ', 81), (' other assets ', 58), (' financial assets ', 54), (' other financial assets ', 50), (' biological assets ', 48), (' Income tax refund due ', 42), (' Restricted deposits ', 41), (' trade and other receivables ', 34), (' Capitalised contract cost ', 33), (' Other investment including derivatives ', 32), (' income tax receivable from related parties ', 30), (' deferred operating expenditure ', 29), (' Income tax receivable', 28)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables ', 51), (' Income tax receivable', 43), (' biological assets ', 36), (' financial assets ', 35), (' Income tax refund due ', 34), (' income tax receivable from related parties ', 33), (' Capitalised contract cost ', 32), (' other assets ', 31), ('other current assets ', 30), (' other financial assets ', 30), (' Other investment including derivatives ', 30), (' Restricted deposits ', 27), (' deferred operating expenditure ', 19)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables ', 100), (' Income tax receivable', 63), (' income tax receivable from related parties ', 47), (' deferred operating expenditure ', 47), (' Income tax refund due ', 43), (' Other investment including derivatives ', 43), (' other assets ', 42), (' Restricted deposits ', 42), ('other current assets ', 39), (' other financial assets ', 39), (' Capitalised contract cost ', 36), (' financial assets ', 29), (' biological assets ', 24)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' other financial assets ', 100), (' financial assets ', 81), (' other assets ', 73), ('other current assets ', 68), (' Other investment including derivatives ', 55), (' biological assets ', 52), (' Capitalised contract cost ', 43), (' deferred operating expenditure ', 40), (' trade and other receivables ', 39), (' Income tax refund due ', 36), (' Restricted deposits ', 34), (' Income tax receivable', 34), (' income tax receivable from related parties ', 31)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' Other investment including derivatives ', 41), (' other assets ', 40), (' Restricted deposits ', 40), (' Income tax receivable', 40), ('other current assets ', 36), (' financial assets ', 36), (' other financial assets ', 36), (' Income tax refund due ', 34), (' deferred operating expenditure ', 33), (' biological assets ', 29), (' trade and other receivables ', 26), (' Capitalised contract cost ', 25), (' income tax receivable from related parties ', 24)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [('other current assets ', 100), (' other assets ', 73), (' other financial assets ', 68), (' Other investment including derivatives ', 55), (' biological assets ', 45), (' deferred operating expenditure ', 45), (' financial assets ', 44), (' Capitalised contract cost ', 43), (' Income tax refund due ', 41), (' Restricted deposits ', 40), (' trade and other receivables ', 39), (' income tax receivable from related parties ', 35), (' Income tax receivable', 29)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 4, 6], 'score': 100, 'value': 1659887.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other financial assets', 'Other current assets'], 'note_numbers': [nan, '7', '8', '10'], 'line_item_value': [0.0, 1586457.0, 20000.0, 53430.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = current term deposits , res_fuzz_match = [('current', 100), (' deposits', 100), (' Deposits ', 100), (' current investments', 64), (' other', 60), (' rental bond', 55), (' accrued interest', 50), (' other deposits receivable - related party', 50), (' other receivables ', 50), (' interest receivable', 47), (' accrued interest receivable ', 46), ('other assets', 45), ('foreign exchange derivatives at fair value', 45), (' related party disclosures', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), (' related party receivable', 44), (' condensate', 43), (' share of jv prepayments', 42), (' Intercompany receivable ', 42), (' Capitalised contract cost ', 41), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other debtors and prepayments ', 40), (' Fuel tax credits ', 40), (' GST receivable ', 40), (' Forward exchange contracts used for hedging keyword', 40), (' Debtors retention ', 38), (' electricity derivatives at fair value', 35), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' Prepaid subscription ', 35), (' Income tax refund due ', 35), (' lng', 33), (' long service leave receivable', 31), (' bank guarantee', 31), (' derivative contracts - fair value', 30), (' Accrued income ', 27)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = current term deposits , res_fuzz_match = [('current', 100), (' deposits', 100), (' Deposits ', 100), (' current investments', 64), (' other', 60), (' rental bond', 55), (' accrued interest', 50), (' other deposits receivable - related party', 50), (' other receivables ', 50), (' interest receivable', 47), (' accrued interest receivable ', 46), ('other assets', 45), ('foreign exchange derivatives at fair value', 45), (' related party disclosures', 45), (' amount receivable from controlling entity', 45), (' accrued rebates', 45), (' related party receivable', 44), (' condensate', 43), (' share of jv prepayments', 42), (' Intercompany receivable ', 42), (' Capitalised contract cost ', 41), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other debtors and prepayments ', 40), (' Fuel tax credits ', 40), (' GST receivable ', 40), (' Forward exchange contracts used for hedging keyword', 40), (' Debtors retention ', 38), (' electricity derivatives at fair value', 35), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' Prepaid subscription ', 35), (' Income tax refund due ', 35), (' lng', 33), (' long service leave receivable', 31), (' bank guarantee', 31), (' derivative contracts - fair value', 30), (' Accrued income ', 27)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments ', 0), (' Capitalised contract cost ', 0), (' Debtors retention ', 0), (' Prepaid subscription ', 0), (' Income tax refund due ', 0), (' Fuel tax credits ', 0), (' GST receivable ', 0), (' Deposits ', 0), (' Intercompany receivable ', 0), (' Accrued income ', 0), (' accrued interest receivable ', 0), (' other receivables ', 0), (' Forward exchange contracts used for hedging keyword', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [20000.0, 20000.0], 'label': ['Current Term deposits', 'Current Term deposits'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = current term deposits , res_fuzz_match = [(' ', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = current term deposits , res_fuzz_match = [(' ', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [20000.0, 20000.0], 'label': ['$', '$'], 'year': [], 'colname_found': ['columns', 'columns']}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:31+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 11:47:31+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 219255.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [219255.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment ', 29), (' plant and equipment ', 29), (' Property ', 19)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment ', 77), (' plant and equipment ', 77), (' Property ', 50)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment ', 27), (' plant and equipment ', 27), (' Property ', 26)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment ', 33), (' plant and equipment ', 33), (' Property ', 26)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 235420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [235420.0]}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Plant and equipment ', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 50), (' Freehold land and buildings ', 48), (' Assets under construction ', 48), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Leasehold buildings', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Plant and equipment ', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 50), (' Freehold land and buildings ', 48), (' Assets under construction ', 48), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Leasehold buildings', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [(' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Assets under construction ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Mining properties ', 31), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 30), (' Plant and equipment ', 27), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26), (' Subsea ', 17)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Mining properties ', 46), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [(' Plant and equipment ', 53), (' under construction ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Assets under construction ', 43), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Development properties ', 25)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Mining properties ', 46), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Mining properties ', 69), (' Development properties ', 62), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('accumulated depreciation ', 47), (' Asset Retirement Obligation ', 47), (' Capitalised pre stripping costs ', 46), (' Workshop tooling ', 46), (' Other assets ', 45), (' Construction in progress ', 44), (' Stripping WIP ', 44), ('depreciation', 43), (' Leasehold buildings', 41), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 25), (' Subsea ', 17)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Plant and equipment ', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 50), (' Freehold land and buildings ', 48), (' Assets under construction ', 48), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Leasehold buildings', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Plant and equipment ', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 50), (' Freehold land and buildings ', 48), (' Assets under construction ', 48), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets ', 45), (' Leasehold buildings', 40), (' Construction in progress ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 35), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [(' Capitalised pre stripping costs ', 46), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' land and improvement ', 40), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Assets under construction ', 38), (' Development properties ', 38), (' Workshop tooling ', 38), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Mine infrastructure ', 33), (' Mining properties ', 31), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 30), (' Plant and equipment ', 27), (' Leasehold buildings', 27), (' Freehold land and buildings ', 26), (' Subsea ', 17)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Mining properties ', 46), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [(' Plant and equipment ', 53), (' under construction ', 53), (' land and improvement ', 47), (' Mine infrastructure ', 44), (' Assets under construction ', 43), (' Capitalised pre stripping costs ', 42), (' Marine ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Development properties ', 25)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('depreciation', 100), ('accumulated depreciation ', 100), (' Mining properties ', 46), (' Marine ', 40), (' Facilities ', 40), (' Development properties ', 38), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Plant and equipment ', 33), (' Construction in progress ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' Workshop tooling ', 46), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Construction in progress ', 38), (' Capitalised pre stripping costs ', 38), (' Assets under construction ', 38), (' under construction ', 38), (' Other assets ', 36), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Development properties ', 31), ('accumulated depreciation ', 23), (' Plant and equipment ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings', 23), (' Stripping WIP ', 22), (' Marine ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('depreciation', 14)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Mining properties ', 69), (' Development properties ', 62), (' Freehold land and buildings ', 57), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('accumulated depreciation ', 47), (' Asset Retirement Obligation ', 47), (' Capitalised pre stripping costs ', 46), (' Workshop tooling ', 46), (' Other assets ', 45), (' Construction in progress ', 44), (' Stripping WIP ', 44), ('depreciation', 43), (' Leasehold buildings', 41), (' under construction ', 40), (' Marine ', 40), (' Facilities ', 40), (' Assets under construction ', 33), (' Mine infrastructure ', 33), (' Building & mine infrastructure ', 25), (' Subsea ', 17)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciation', 0), ('accumulated depreciation ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction in progress ', 0), (' Other assets ', 0), (' Capitalised pre stripping costs ', 0), (' Assets under construction ', 0), (' Mine infrastructure ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Subsea ', 0), (' Marine ', 0), (' Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 7, 9, 10, 11, 14, 17, 19], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [320942.0, -296342.0, -131998.0, -122839.0, 235420.0, 312117.0, -292859.0, -142250.0, -122106.0, 219255.0], 'label': ['Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Total property, plant and equipment', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Total property, plant and equipment'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:31+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('net value', 38), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 31), ('net value', 25)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('net value', 38), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('net value', 38), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:31+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 31), ('net value', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('net value', 38), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost', 50), ('net value', 40), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [('cost', 50), ('net value', 50), ('net book value', 38), ('gross', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 6, 10, 11, 13, 16], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [320942.0, -296342.0, 339359.0, 126298.0, 312117.0, -292859.0, 340843.0, 123510.0], 'label': ['Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Motor vehicles at cost', 'Non-current Furniture and fittings at cost', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Motor vehicles at cost', 'Non-current Furniture and fittings at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' Plant and equipment ', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 51), (' Assets under construction ', 50), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets ', 45), ('depreciation', 43), (' Leasehold buildings', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' Plant and equipment ', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 51), (' Assets under construction ', 50), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets ', 45), ('depreciation', 43), (' Leasehold buildings', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' Plant and equipment ', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 51), (' Assets under construction ', 50), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets ', 45), ('depreciation', 43), (' Leasehold buildings', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' Plant and equipment ', 73), (' Marine ', 60), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 51), (' Assets under construction ', 50), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets ', 45), ('depreciation', 43), (' Leasehold buildings', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Development properties ', 38), (' Asset Retirement Obligation ', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Construction in progress ', 28), (' Workshop tooling ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 47), (' Assets under construction ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Construction in progress ', 41), (' Development properties ', 41), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Asset Retirement Obligation ', 35), (' Mining properties ', 31), (' Fishing vessels & equipment ', 30), (' Mine infrastructure ', 29), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 28), ('accumulated depreciation ', 27), (' Plant and equipment ', 27), (' Freehold land and buildings ', 24), (' land and improvement ', 20), (' Subsea ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 47), (' Assets under construction ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Construction in progress ', 41), (' Development properties ', 41), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Asset Retirement Obligation ', 35), (' Mining properties ', 31), (' Fishing vessels & equipment ', 30), (' Mine infrastructure ', 29), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 28), ('accumulated depreciation ', 27), (' Plant and equipment ', 27), (' Freehold land and buildings ', 24), (' land and improvement ', 20), (' Subsea ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 47), (' Assets under construction ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Construction in progress ', 41), (' Development properties ', 41), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Asset Retirement Obligation ', 35), (' Mining properties ', 31), (' Fishing vessels & equipment ', 30), (' Mine infrastructure ', 29), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 28), ('accumulated depreciation ', 27), (' Plant and equipment ', 27), (' Freehold land and buildings ', 24), (' land and improvement ', 20), (' Subsea ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 47), (' Assets under construction ', 47), (' Other assets ', 45), (' Stripping WIP ', 44), ('depreciation', 43), (' Construction in progress ', 41), (' Development properties ', 41), (' under construction ', 40), (' Marine ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Workshop tooling ', 38), (' Asset Retirement Obligation ', 35), (' Mining properties ', 31), (' Fishing vessels & equipment ', 30), (' Mine infrastructure ', 29), (' Building & mine infrastructure ', 29), (' Leasehold buildings', 28), ('accumulated depreciation ', 27), (' Plant and equipment ', 27), (' Freehold land and buildings ', 24), (' land and improvement ', 20), (' Subsea ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [(' Plant and equipment ', 53), (' under construction ', 53), (' Assets under construction ', 49), (' Capitalised pre stripping costs ', 48), (' land and improvement ', 47), (' Freehold land and buildings ', 43), (' Mine infrastructure ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Development properties ', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [(' Plant and equipment ', 53), (' under construction ', 53), (' Assets under construction ', 49), (' Capitalised pre stripping costs ', 48), (' land and improvement ', 47), (' Freehold land and buildings ', 43), (' Mine infrastructure ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Development properties ', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [(' Plant and equipment ', 53), (' under construction ', 53), (' Assets under construction ', 49), (' Capitalised pre stripping costs ', 48), (' land and improvement ', 47), (' Freehold land and buildings ', 43), (' Mine infrastructure ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Development properties ', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [(' Plant and equipment ', 53), (' under construction ', 53), (' Assets under construction ', 49), (' Capitalised pre stripping costs ', 48), (' land and improvement ', 47), (' Freehold land and buildings ', 43), (' Mine infrastructure ', 40), (' Marine ', 40), (' Facilities ', 40), (' Construction in progress ', 39), (' Building & mine infrastructure ', 38), (' Other assets ', 36), ('accumulated depreciation ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings', 27), (' Development properties ', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' Marine ', 60), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction in progress ', 47), ('depreciation', 43), ('accumulated depreciation ', 41), (' Capitalised pre stripping costs ', 41), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Other assets ', 36), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Leasehold buildings', 34), (' Stripping WIP ', 33), (' Development properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [(' under construction ', 53), (' Construction in progress ', 50), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Other assets ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Marine ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), ('accumulated depreciation ', 30), (' Mine infrastructure ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings', 30), ('depreciation', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' Stripping WIP ', 56), (' Construction in progress ', 55), (' Capitalised pre stripping costs ', 55), (' Plant and equipment ', 45), (' Other assets ', 45), (' land and improvement ', 45), ('accumulated depreciation ', 36), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), ('depreciation', 29), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings', 27), (' Marine ', 20), (' Facilities ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' Marine ', 60), (' Subsea ', 50), (' Freehold land and buildings ', 41), (' Construction in progress ', 41), (' land and improvement ', 41), (' Facilities ', 40), (' Other assets ', 36), (' Capitalised pre stripping costs ', 35), (' Assets under construction ', 35), (' Building & mine infrastructure ', 35), ('accumulated depreciation ', 33), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), ('depreciation', 29), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' Leasehold buildings', 27), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), (' Development properties ', 19)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction in progress ', 40), (' Assets under construction ', 40), (' Mine infrastructure ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Facilities ', 40), (' Leasehold buildings', 40), ('accumulated depreciation ', 20), (' Other assets ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Subsea ', 20), (' Marine ', 20), (' Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('depreciation', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 14, 15], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [312118.0, 312118.0, 15486.0, 15486.0, -6662.0, -6662.0, 320942.0, 320942.0, 340842.0, 340842.0, 95273.0, 95273.0, -96756.0, -96756.0, 339359.0, 339359.0, 123510.0, 123510.0, 2788.0, 2788.0, 0.0, 0.0, 126298.0, 126298.0, 776470.0, 113547.0, -103418.0, 786599.0], 'label': ['Cost Balance at 1 April 2022', 'Machinery and equipment at cost $', 'Cost Additions', 'Machinery and equipment at cost $', 'Cost Disposals', 'Machinery and equipment at cost $', 'Cost Balance at 31 March 2023', 'Machinery and equipment at cost $', 'Cost Balance at 1 April 2022', 'Motor vehicles at cost $', 'Cost Additions', 'Motor vehicles at cost $', 'Cost Disposals', 'Motor vehicles at cost $', 'Cost Balance at 31 March 2023', 'Motor vehicles at cost $', 'Cost Balance at 1 April 2022', 'Furniture and fittings at cost $', 'Cost Additions', 'Furniture and fittings at cost $', 'Cost Disposals', 'Furniture and fittings at cost $', 'Cost Balance at 31 March 2023', 'Furniture and fittings at cost $', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 219255.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [219255.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 235420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [235420.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 219255.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [219255.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 80), (' plant property equipment ', 60), (' investment property', 47), ('Work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 235420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [235420.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' work in progress ', 46), ('construction in progress ', 44), (' capital works in progress', 42)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('construction in progress ', 39), (' work in progress ', 38), (' capital works in progress', 32)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('construction in progress ', 38), (' work in progress ', 31), (' capital works in progress', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' work in progress ', 46), ('construction in progress ', 44), (' capital works in progress', 42)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('construction in progress ', 0), (' work in progress ', 0), (' capital works in progress', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' capital works in progress', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' capital works in progress', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' capital works in progress', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' capital works in progress', 32), (' work in progress ', 31), ('construction in progress ', 28)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 35), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 35), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 35), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 35), (' work in progress ', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 32), (' work in progress ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('construction in progress ', 47), (' capital works in progress', 35), (' work in progress ', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 29), (' work in progress ', 15)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' intangible asset', 50), (' goodwill on consolidation ', 38), ('goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 80, 'value': 219255.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [219255.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('property plant equipment', 80), (' plant property equipment', 60), ('intangible assets ', 50), (' intangible under development ', 49), (' intangible assets under development ', 42)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 80, 'value': 235420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [235420.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' carrying amounts ', 50), (' consumer contracts ', 47), (' software ', 43), (' development and software ', 42), (' water licenses', 42), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' carrying amounts ', 50), (' consumer contracts ', 47), (' software ', 43), (' development and software ', 42), (' water licenses', 42), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 47), (' software ', 43), (' computer software ', 43), (' water licenses', 42), ('Other intangibles ', 33), (' development and software ', 32), (' mining rights ', 30), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' water licenses', 25), (' development and software ', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 47), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36), (' goodwill ', 29), (' software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' water licenses', 25), (' development and software ', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' software ', 57), ('Other intangibles ', 50), (' carrying amounts ', 50), (' computer software ', 50), (' consumer contracts ', 47), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' carrying amounts ', 50), (' consumer contracts ', 47), (' software ', 43), (' development and software ', 42), (' water licenses', 42), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' carrying amounts ', 50), (' consumer contracts ', 47), (' software ', 43), (' development and software ', 42), (' water licenses', 42), (' computer software ', 36), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 47), (' software ', 43), (' computer software ', 43), (' water licenses', 42), ('Other intangibles ', 33), (' development and software ', 32), (' mining rights ', 30), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' water licenses', 25), (' development and software ', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 47), ('Other intangibles ', 42), (' water licenses', 42), (' mining rights ', 40), (' development and software ', 37), (' computer software ', 36), (' goodwill ', 29), (' software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' carrying amounts ', 58), (' consumer contracts ', 40), (' computer software ', 36), ('Other intangibles ', 33), (' mining rights ', 30), (' goodwill ', 29), (' software ', 29), (' water licenses', 25), (' development and software ', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' carrying amounts ', 55), (' consumer contracts ', 54), (' development and software ', 46), (' computer software ', 46), (' software ', 43), ('Other intangibles ', 42), (' mining rights ', 30), (' goodwill ', 29), (' water licenses', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' software ', 57), ('Other intangibles ', 50), (' carrying amounts ', 50), (' computer software ', 50), (' consumer contracts ', 47), (' development and software ', 42), (' water licenses', 42), (' mining rights ', 40), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Other intangibles ', 0), (' development and software ', 0), (' goodwill ', 0), (' software ', 0), (' carrying amounts ', 0), (' computer software ', 0), (' consumer contracts ', 0), (' mining rights ', 0), (' water licenses', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' carrying amounts ', 50), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' carrying amounts ', 50), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' carrying amounts ', 50), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [(' mining rights ', 60), ('Other intangibles ', 50), (' carrying amounts ', 50), (' development and software ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' development and software ', 35), (' carrying amounts ', 33), (' consumer contracts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' development and software ', 35), (' carrying amounts ', 33), (' consumer contracts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' development and software ', 35), (' carrying amounts ', 33), (' consumer contracts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' water licenses', 42), (' development and software ', 35), (' carrying amounts ', 33), (' consumer contracts ', 33), (' mining rights ', 30), (' goodwill ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('Other intangibles ', 42), (' carrying amounts ', 42), (' water licenses', 42), (' consumer contracts ', 40), (' mining rights ', 40), (' development and software ', 37), (' goodwill ', 29), (' software ', 29), (' computer software ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 35), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('Other intangibles ', 50), (' consumer contracts ', 50), (' software ', 43), (' development and software ', 40), (' computer software ', 40), (' carrying amounts ', 30), (' mining rights ', 30), (' water licenses', 30), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [(' computer software ', 55), (' development and software ', 45), (' consumer contracts ', 45), (' goodwill ', 43), (' water licenses', 36), (' software ', 29), ('Other intangibles ', 27), (' carrying amounts ', 27), (' mining rights ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 41), (' consumer contracts ', 40), (' mining rights ', 40), (' computer software ', 36), (' carrying amounts ', 33), (' water licenses', 33), (' goodwill ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' development and software ', 60), (' software ', 60), (' computer software ', 60), (' consumer contracts ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' water licenses', 40), (' mining rights ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year ', ' Interest swap']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method ', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), (' Other investment including derivatives', 38), ('investment', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' Other investment including derivatives', 50), ('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method ', 38), ('investment', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33), (' Other investment including derivatives', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), (' Other investment including derivatives', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method ', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), (' Other investment including derivatives', 38), ('investment', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' Other investment including derivatives', 50), ('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method ', 38), ('investment', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33), (' Other investment including derivatives', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method ', 40), ('investment', 33), (' Other investment including derivatives', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 38785.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['6(c)'], 'line_item_value': [38785.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 263719.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['6(c)'], 'line_item_value': [263719.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current term deposits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current term deposits , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other assets , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 11. property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current prepayments , res_fuzz_match = [('deferred tax assets', 29), (' deferred tax balances', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other assets , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 11. property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [(' deferred tax balances', 38), ('deferred tax assets', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('deferred tax assets', 34), (' deferred tax balances', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('deferred tax assets', 36), (' deferred tax balances', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current finished goods at cost , res_fuzz_match = [('deferred tax assets', 28), (' deferred tax balances', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current finished goods at cost , res_fuzz_match = [('deferred tax assets', 28), (' deferred tax balances', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation ']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation '] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' Lease obligation ', 50), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' cash ', 20), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' Lease obligation ', 33), (' cash and cash equivalents ', 29), ('  leases ', 22), (' cash ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' Lease obligation ', 31), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15), (' cash ', 15)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' lease liabilities ', 52), (' short-term debt ', 46), (' shortterm debt ', 46), ('short term debt ', 44), (' shortterm borrowings ', 43), (' interest bearing liabilites ', 41), (' bank overdraft ', 38), (' Lease obligation ', 36), (' borrowings ', 33), (' loans and borrowings ', 30), ('  leases ', 25), (' cash ', 25), (' cash and cash equivalents ', 24)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' borrowings ', 100), (' loans and borrowings ', 57), (' shortterm borrowings ', 55), (' short-term debt ', 40), (' shortterm debt ', 40), (' bank overdraft ', 40), ('short term debt ', 38), (' interest bearing liabilites ', 21), (' lease liabilities ', 12), (' Lease obligation ', 12), ('  leases ', 0), (' cash and cash equivalents ', 0), (' cash ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' Lease obligation ', 25), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation ', 67), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' loans and borrowings ', 31), (' cash ', 27), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), ('short term debt ', 30), (' loans and borrowings ', 30), (' Lease obligation ', 29), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' cash ', 18), (' borrowings ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6], 'score': 100, 'value': 3088920.0, 'line_item_label': ['Borrowings', 'Lease Liabilities'], 'note_numbers': ['15', '17'], 'line_item_value': [3000000.0, 88920.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation '] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' Lease obligation ', 50), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' cash ', 20), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' Lease obligation ', 33), (' cash and cash equivalents ', 29), ('  leases ', 22), (' cash ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' Lease obligation ', 31), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15), (' cash ', 15)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' lease liabilities ', 52), (' short-term debt ', 46), (' shortterm debt ', 46), ('short term debt ', 44), (' shortterm borrowings ', 43), (' interest bearing liabilites ', 41), (' bank overdraft ', 38), (' Lease obligation ', 36), (' borrowings ', 33), (' loans and borrowings ', 30), ('  leases ', 25), (' cash ', 25), (' cash and cash equivalents ', 24)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' borrowings ', 100), (' loans and borrowings ', 57), (' shortterm borrowings ', 55), (' short-term debt ', 40), (' shortterm debt ', 40), (' bank overdraft ', 40), ('short term debt ', 38), (' interest bearing liabilites ', 21), (' lease liabilities ', 12), (' Lease obligation ', 12), ('  leases ', 0), (' cash and cash equivalents ', 0), (' cash ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' Lease obligation ', 25), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation ', 67), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' loans and borrowings ', 31), (' cash ', 27), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), ('short term debt ', 30), (' loans and borrowings ', 30), (' Lease obligation ', 29), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' cash ', 18), (' borrowings ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6], 'score': 100, 'value': 96470.0, 'line_item_label': ['Borrowings', 'Lease Liabilities'], 'note_numbers': ['15', '17'], 'line_item_value': [0.0, 96470.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current loan from related parties (note 23) , res_fuzz_match = [(' loans from related party ', 100), (' current ', 100), (' bank loans', 67), (' not later than one year ', 52), (' leases ', 50), (' secured long-term bank loans ', 50), (' balance at the end of period ', 48), (' not later than 1 year ', 47), ('bank borrowings ', 45), (' lease liabilities ', 45), (' utilised bank borrowings ', 44), (' bank overdraft ', 43), (' lease liabilities - current ', 42), (' cash overdraft ', 36), (' obligations under finance lease ', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current loan from related parties (note 23) , res_fuzz_match = [(' loans from related party ', 100), (' current ', 100), (' bank loans', 67), (' not later than one year ', 52), (' leases ', 50), (' secured long-term bank loans ', 50), (' balance at the end of period ', 48), (' not later than 1 year ', 47), ('bank borrowings ', 45), (' lease liabilities ', 45), (' utilised bank borrowings ', 44), (' bank overdraft ', 43), (' lease liabilities - current ', 42), (' cash overdraft ', 36), (' obligations under finance lease ', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [0.0, 3000000.0], 'label': ['Current Loan from related parties (Note 23)', 'Current Loan from related parties (Note 23)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' current ', 100), (' lease liabilities - current ', 67), (' not later than one year ', 50), (' loans from related party ', 50), (' bank overdraft ', 50), (' not later than 1 year ', 42), (' secured long-term bank loans ', 42), (' balance at the end of period ', 42), (' cash overdraft ', 42), ('bank borrowings ', 36), (' utilised bank borrowings ', 35), (' obligations under finance lease ', 33), (' bank loans', 33), (' leases ', 25), (' lease liabilities ', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' current ', 57), (' not later than one year ', 50), (' obligations under finance lease ', 50), ('bank borrowings ', 45), (' bank loans', 44), (' utilised bank borrowings ', 42), (' secured long-term bank loans ', 42), (' lease liabilities - current ', 42), (' bank overdraft ', 42), (' not later than 1 year ', 33), (' loans from related party ', 33), (' balance at the end of period ', 33), (' cash overdraft ', 33), (' leases ', 25), (' lease liabilities ', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' not later than one year ', 60), (' bank loans', 44), (' not later than 1 year ', 40), (' secured long-term bank loans ', 40), (' loans from related party ', 40), (' lease liabilities - current ', 40), (' lease liabilities ', 40), (' bank overdraft ', 40), (' obligations under finance lease ', 40), ('bank borrowings ', 30), (' utilised bank borrowings ', 30), (' balance at the end of period ', 30), (' cash overdraft ', 30), (' current ', 29), (' leases ', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' current ', 100), (' lease liabilities - current ', 67), (' not later than one year ', 50), (' loans from related party ', 50), (' bank overdraft ', 50), (' not later than 1 year ', 42), (' secured long-term bank loans ', 42), (' balance at the end of period ', 42), (' cash overdraft ', 42), ('bank borrowings ', 36), (' utilised bank borrowings ', 35), (' obligations under finance lease ', 33), (' bank loans', 33), (' leases ', 25), (' lease liabilities ', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' current ', 57), (' not later than one year ', 50), (' obligations under finance lease ', 50), ('bank borrowings ', 45), (' bank loans', 44), (' utilised bank borrowings ', 42), (' secured long-term bank loans ', 42), (' lease liabilities - current ', 42), (' bank overdraft ', 42), (' not later than 1 year ', 33), (' loans from related party ', 33), (' balance at the end of period ', 33), (' cash overdraft ', 33), (' leases ', 25), (' lease liabilities ', 18)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' not later than one year ', 60), (' bank loans', 44), (' not later than 1 year ', 40), (' secured long-term bank loans ', 40), (' loans from related party ', 40), (' lease liabilities - current ', 40), (' lease liabilities ', 40), (' bank overdraft ', 40), (' obligations under finance lease ', 40), ('bank borrowings ', 30), (' utilised bank borrowings ', 30), (' balance at the end of period ', 30), (' cash overdraft ', 30), (' current ', 29), (' leases ', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [96470.0, 88920.0], 'label': ['None Current', 'None Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none not later than one year , res_fuzz_match = [(' not later than one year ', 100), (' not later than 1 year ', 84), (' bank loans', 56), (' leases ', 50), (' secured long-term bank loans ', 50), (' balance at the end of period ', 50), (' loans from related party ', 48), ('bank borrowings ', 45), (' bank overdraft ', 43), (' obligations under finance lease ', 43), (' utilised bank borrowings ', 39), (' lease liabilities ', 36), (' cash overdraft ', 36), (' lease liabilities - current ', 32), (' current ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none later than one year and not later than five years , res_fuzz_match = [(' not later than one year ', 91), (' not later than 1 year ', 84), (' bank loans', 56), (' loans from related party ', 52), (' leases ', 50), (' secured long-term bank loans ', 50), (' balance at the end of period ', 48), (' bank overdraft ', 43), (' obligations under finance lease ', 43), (' lease liabilities - current ', 37), ('bank borrowings ', 36), (' lease liabilities ', 36), (' cash overdraft ', 36), (' utilised bank borrowings ', 33), (' current ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [(' not later than 1 year ', 74), (' not later than one year ', 74), (' leases ', 50), (' bank overdraft ', 50), (' balance at the end of period ', 48), (' lease liabilities ', 45), (' loans from related party ', 44), (' bank loans', 44), (' cash overdraft ', 43), (' secured long-term bank loans ', 42), (' obligations under finance lease ', 39), (' lease liabilities - current ', 37), (' utilised bank borrowings ', 33), (' current ', 29), ('bank borrowings ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none not later than one year , res_fuzz_match = [(' not later than one year ', 100), (' not later than 1 year ', 84), (' bank loans', 56), (' leases ', 50), (' secured long-term bank loans ', 50), (' balance at the end of period ', 50), (' loans from related party ', 48), ('bank borrowings ', 45), (' bank overdraft ', 43), (' obligations under finance lease ', 43), (' utilised bank borrowings ', 39), (' lease liabilities ', 36), (' cash overdraft ', 36), (' lease liabilities - current ', 32), (' current ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = none later than one year and not later than five years , res_fuzz_match = [(' not later than one year ', 91), (' not later than 1 year ', 84), (' bank loans', 56), (' loans from related party ', 52), (' leases ', 50), (' secured long-term bank loans ', 50), (' balance at the end of period ', 48), (' bank overdraft ', 43), (' obligations under finance lease ', 43), (' lease liabilities - current ', 37), ('bank borrowings ', 36), (' lease liabilities ', 36), (' cash overdraft ', 36), (' utilised bank borrowings ', 33), (' current ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [(' not later than 1 year ', 74), (' not later than one year ', 74), (' leases ', 50), (' bank overdraft ', 50), (' balance at the end of period ', 48), (' lease liabilities ', 45), (' loans from related party ', 44), (' bank loans', 44), (' cash overdraft ', 43), (' secured long-term bank loans ', 42), (' obligations under finance lease ', 39), (' lease liabilities - current ', 37), (' utilised bank borrowings ', 33), (' current ', 29), ('bank borrowings ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('bank borrowings ', 0), (' utilised bank borrowings ', 0), (' leases ', 0), (' not later than 1 year ', 0), (' not later than one year ', 0), (' secured long-term bank loans ', 0), (' loans from related party ', 0), (' lease liabilities - current ', 0), (' lease liabilities ', 0), (' bank overdraft ', 0), (' balance at the end of period ', 0), (' cash overdraft ', 0), (' current ', 0), (' obligations under finance lease ', 0), (' bank loans', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 91, 100, 91], 'value': [100274.0, 51293.0, 96417.0, 151567.0], 'label': ['None Not later than one year', 'None Later than one year and not later than five years', 'None Not later than one year', 'None Later than one year and not later than five years'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ', ' ', ' Related party payables ', ' trade payables - related parties ', ' Trade payable due to related partiees']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 1589021.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['13'], 'line_item_value': [1589021.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 2086685.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['13'], 'line_item_value': [2086685.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ', ' ', ' Related party payables ', ' trade payables - related parties ', ' Trade payable due to related partiees'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 23) , res_fuzz_match = [(' payables to related parties ', 100), (' payables ', 100), (' trade payables - related parties ', 88), (' Trade payable due to related partiees', 76), (' trade payables ', 75), (' trade payables - other parties ', 71), (' Related party payables ', 71), (' accounts payable - trade ', 70), (' amounts payable to controlling entity ', 59), (' other trade payables ', 56), (' trade and other payables ', 50), ('trade creditors ', 43), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other trade payables , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 100), (' payables ', 100), (' trade and other payables ', 68), (' Related party payables ', 56), (' accounts payable - trade ', 55), (' trade payables - other parties ', 50), (' trade payables - related parties ', 50), (' Trade payable due to related partiees', 46), ('trade creditors ', 43), (' amounts payable to controlling entity ', 39), (' payables to related parties ', 33), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current goods and services tax payable , res_fuzz_match = [(' payables ', 100), (' trade payables ', 75), (' other trade payables ', 67), (' trade and other payables ', 64), (' Related party payables ', 56), (' accounts payable - trade ', 45), ('trade creditors ', 43), (' trade payables - other parties ', 42), (' trade payables - related parties ', 42), (' payables to related parties ', 39), (' Trade payable due to related partiees', 38), (' amounts payable to controlling entity ', 36), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current sundry payables and accrued expenses , res_fuzz_match = [(' payables ', 100), (' Related party payables ', 72), (' trade payables ', 67), (' payables to related parties ', 61), (' accounts payable - trade ', 60), (' trade payables - related parties ', 58), (' other trade payables ', 56), (' trade and other payables ', 55), (' trade payables - other parties ', 54), (' Trade payable due to related partiees', 52), (' amounts payable to controlling entity ', 50), ('trade creditors ', 43), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 2,086,685 1,589,021 , res_fuzz_match = [('trade creditors ', 57), (' amounts payable to controlling entity ', 57), (' accounts payable - trade ', 57), (' trade payables - other parties ', 43), (' other trade payables ', 43), (' payables to related parties ', 43), (' trade payables - related parties ', 43), (' Trade payable due to related partiees', 43), (' trade and other payables ', 29), (' trade payables ', 29), (' Related party payables ', 29), (' payables ', 0), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 14. other liabilities , res_fuzz_match = [(' trade and other payables ', 62), (' trade payables ', 50), (' trade payables - other parties ', 50), (' other trade payables ', 50), (' payables ', 50), (' Related party payables ', 50), ('trade creditors ', 43), (' accounts payable - trade ', 40), (' amounts payable to controlling entity ', 35), (' Trade payable due to related partiees', 35), (' payables to related parties ', 33), (' trade payables - related parties ', 30), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 23) , res_fuzz_match = [(' payables to related parties ', 100), (' payables ', 100), (' trade payables - related parties ', 88), (' Trade payable due to related partiees', 76), (' trade payables ', 75), (' trade payables - other parties ', 71), (' Related party payables ', 71), (' accounts payable - trade ', 70), (' amounts payable to controlling entity ', 59), (' other trade payables ', 56), (' trade and other payables ', 50), ('trade creditors ', 43), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other trade payables , res_fuzz_match = [(' trade payables ', 100), (' other trade payables ', 100), (' payables ', 100), (' trade and other payables ', 68), (' Related party payables ', 56), (' accounts payable - trade ', 55), (' trade payables - other parties ', 50), (' trade payables - related parties ', 50), (' Trade payable due to related partiees', 46), ('trade creditors ', 43), (' amounts payable to controlling entity ', 39), (' payables to related parties ', 33), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current goods and services tax payable , res_fuzz_match = [(' payables ', 100), (' trade payables ', 75), (' other trade payables ', 67), (' trade and other payables ', 64), (' Related party payables ', 56), (' accounts payable - trade ', 45), ('trade creditors ', 43), (' trade payables - other parties ', 42), (' trade payables - related parties ', 42), (' payables to related parties ', 39), (' Trade payable due to related partiees', 38), (' amounts payable to controlling entity ', 36), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current sundry payables and accrued expenses , res_fuzz_match = [(' payables ', 100), (' Related party payables ', 72), (' trade payables ', 67), (' payables to related parties ', 61), (' accounts payable - trade ', 60), (' trade payables - related parties ', 58), (' other trade payables ', 56), (' trade and other payables ', 55), (' trade payables - other parties ', 54), (' Trade payable due to related partiees', 52), (' amounts payable to controlling entity ', 50), ('trade creditors ', 43), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 2,086,685 1,589,021 , res_fuzz_match = [('trade creditors ', 57), (' amounts payable to controlling entity ', 57), (' accounts payable - trade ', 57), (' trade payables - other parties ', 43), (' other trade payables ', 43), (' payables to related parties ', 43), (' trade payables - related parties ', 43), (' Trade payable due to related partiees', 43), (' trade and other payables ', 29), (' trade payables ', 29), (' Related party payables ', 29), (' payables ', 0), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 14. other liabilities , res_fuzz_match = [(' trade and other payables ', 62), (' trade payables ', 50), (' trade payables - other parties ', 50), (' other trade payables ', 50), (' payables ', 50), (' Related party payables ', 50), ('trade creditors ', 43), (' accounts payable - trade ', 40), (' amounts payable to controlling entity ', 35), (' Trade payable due to related partiees', 35), (' payables to related parties ', 33), (' trade payables - related parties ', 30), (' ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [(' ', 100), ('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0), (' Related party payables ', 0), (' trade payables - related parties ', 0), (' Trade payable due to related partiees', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [1937201.0, 1937201.0, 851.0, 851.0, 13474.0, 13474.0, 135159.0, 135159.0, 0.0, 2023.0, 1315843.0, 1315843.0, 47060.0, 47060.0, 83111.0, 83111.0, 143007.0, 143007.0, 0.0, 2022.0], 'label': ['Current Payables to related parties (Note 23)', '$', 'Current Other Trade payables', '$', 'Current Goods and Services Tax payable', '$', 'Current Sundry payables and accrued expenses', '$', '$', '$', 'Current Payables to related parties (Note 23)', '$', 'Current Other Trade payables', '$', 'Current Goods and Services Tax payable', '$', 'Current Sundry payables and accrued expenses', '$', '$', '$'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns']}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued ', ' accruals']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade and other payables', 41)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 1589021.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['13'], 'line_item_value': [1589021.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade and other payables', 41)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('trade and other payables', 45)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 2086685.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['13'], 'line_item_value': [2086685.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['accrued expenses ', ' interest accrued ', ' accruals'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 23) , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other trade payables , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current goods and services tax payable , res_fuzz_match = [(' accruals', 43), (' interest accrued ', 36), ('accrued expenses ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current sundry payables and accrued expenses , res_fuzz_match = [('accrued expenses ', 100), (' accruals', 71), (' interest accrued ', 50)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 2,086,685 1,589,021 , res_fuzz_match = [('accrued expenses ', 43), (' interest accrued ', 43), (' accruals', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 14. other liabilities , res_fuzz_match = [(' interest accrued ', 36), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 23) , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other trade payables , res_fuzz_match = [(' interest accrued ', 43), (' accruals', 43), ('accrued expenses ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current goods and services tax payable , res_fuzz_match = [(' accruals', 43), (' interest accrued ', 36), ('accrued expenses ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current sundry payables and accrued expenses , res_fuzz_match = [('accrued expenses ', 100), (' accruals', 71), (' interest accrued ', 50)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 2,086,685 1,589,021 , res_fuzz_match = [('accrued expenses ', 43), (' interest accrued ', 43), (' accruals', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 14. other liabilities , res_fuzz_match = [(' interest accrued ', 36), ('accrued expenses ', 33), (' accruals', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses ', 0), (' interest accrued ', 0), (' accruals', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 9], 'score': [100, 100], 'value': [135159.0, 143007.0], 'label': ['Current Sundry payables and accrued expenses', 'Current Sundry payables and accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' Current tax payables ', 50), (' Trade and other payables', 50), (' tax ', 33), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' Current tax payables ', 64), (' income tax payable ', 43), (' Trade and other payables', 37), (' tax ', 33), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' Trade and other payables', 100), (' tax ', 67), (' income tax payable ', 62), (' Current tax payables ', 61), ('current tax liabilities ', 44), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' Trade and other payables', 75), ('current tax liabilities ', 67), (' income tax payable ', 43), (' Current tax payables ', 42), (' tax ', 33), (' provision ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' provision ', 33), (' Current tax payables ', 33), (' Trade and other payables', 33), (' income tax payable ', 17), (' tax ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision ', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' Current tax payables ', 17), (' Trade and other payables', 17), (' tax ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' Current tax payables ', 48), (' Trade and other payables', 45), (' tax ', 33), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' Current tax payables ', 83), (' income tax payable ', 56), (' Trade and other payables', 44), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': 100, 'value': 2016704.0, 'line_item_label': ['Liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '13', '16', '6(b)'], 'line_item_value': [0.0, 1589021.0, 425447.0, 2236.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' Current tax payables ', 50), (' Trade and other payables', 50), (' tax ', 33), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' Current tax payables ', 64), (' income tax payable ', 43), (' Trade and other payables', 37), (' tax ', 33), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' Trade and other payables', 100), (' tax ', 67), (' income tax payable ', 62), (' Current tax payables ', 61), ('current tax liabilities ', 44), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [(' Trade and other payables', 75), ('current tax liabilities ', 67), (' income tax payable ', 43), (' Current tax payables ', 42), (' tax ', 33), (' provision ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities ', 33), (' provision ', 33), (' Current tax payables ', 33), (' Trade and other payables', 33), (' income tax payable ', 17), (' tax ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision ', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' Current tax payables ', 17), (' Trade and other payables', 17), (' tax ', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' Current tax payables ', 48), (' Trade and other payables', 45), (' tax ', 33), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' Current tax payables ', 83), (' income tax payable ', 56), (' Trade and other payables', 44), (' provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': 100, 'value': 3179913.0, 'line_item_label': ['Liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '13', '16', '6(b)'], 'line_item_value': [0.0, 2086685.0, 744685.0, 348543.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 23) , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 43), (' provision for income tax ', 35)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other trade payables , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 57), (' provision for income tax ', 35)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current goods and services tax payable , res_fuzz_match = [(' tax receivable/payable', 59), ('income tax (refundable)/payable ', 57), (' provision for income tax ', 45)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current sundry payables and accrued expenses , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 57), (' provision for income tax ', 35)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 2,086,685 1,589,021 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 29), (' tax receivable/payable', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 14. other liabilities , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 36), (' provision for income tax ', 36)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 23) , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 43), (' provision for income tax ', 35)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other trade payables , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 57), (' provision for income tax ', 35)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current goods and services tax payable , res_fuzz_match = [(' tax receivable/payable', 59), ('income tax (refundable)/payable ', 57), (' provision for income tax ', 45)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current sundry payables and accrued expenses , res_fuzz_match = [(' tax receivable/payable', 65), ('income tax (refundable)/payable ', 57), (' provision for income tax ', 35)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 2,086,685 1,589,021 , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 29), (' tax receivable/payable', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 14. other liabilities , res_fuzz_match = [(' tax receivable/payable', 41), ('income tax (refundable)/payable ', 36), (' provision for income tax ', 36)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current warranty provision (a) , res_fuzz_match = [(' tax receivable/payable', 35), ('income tax (refundable)/payable ', 30), (' provision for income tax ', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current employee benefits (b) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' tax receivable/payable', 35), (' provision for income tax ', 32)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (b) , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax ', 30), (' tax receivable/payable', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision balance at the beginning of the year , res_fuzz_match = [(' provision for income tax ', 55), ('income tax (refundable)/payable ', 43), (' tax receivable/payable', 41)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision provisions recognised during the year , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = provisions utilised during the year balance at the end of the year , res_fuzz_match = [(' provision for income tax ', 50), ('income tax (refundable)/payable ', 48), (' tax receivable/payable', 47)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current warranty provision (a) , res_fuzz_match = [(' tax receivable/payable', 35), ('income tax (refundable)/payable ', 30), (' provision for income tax ', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current employee benefits (b) , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' tax receivable/payable', 35), (' provision for income tax ', 32)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (b) , res_fuzz_match = [('income tax (refundable)/payable ', 30), (' provision for income tax ', 30), (' tax receivable/payable', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision balance at the beginning of the year , res_fuzz_match = [(' provision for income tax ', 55), ('income tax (refundable)/payable ', 43), (' tax receivable/payable', 41)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision provisions recognised during the year , res_fuzz_match = [(' provision for income tax ', 55), (' tax receivable/payable', 41), ('income tax (refundable)/payable ', 35)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = provisions utilised during the year balance at the end of the year , res_fuzz_match = [(' provision for income tax ', 50), ('income tax (refundable)/payable ', 48), (' tax receivable/payable', 47)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable ', 0), (' provision for income tax ', 0), (' tax receivable/payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:32+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 11:47:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' derivative liabilities ', 67), (' financial liabilities', 60), (' Contract Liabilities ', 57), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability ', 32), (' employee benefits', 29), (' trade and other payables', 21), (' Derivative financial instruments ', 20), ('provisions', 17), (' Provision ', 17), (' Deferred income', 12), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' Contract Liabilities ', 69), (' derivative liabilities ', 62), (' financial liabilities', 57), (' foreign exchange contract liability ', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), (' Derivative financial instruments ', 26), (' Deferred income', 24), ('provisions', 20), (' Provision ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' derivative liabilities ', 41), (' Derivative financial instruments ', 39), (' Contract Liabilities ', 38), (' deferred revenue', 35), (' foreign exchange contract liability ', 34), (' financial liabilities', 33), (' employee benefits', 32), (' Deferred income', 24), (' customer deposits', 22), ('provisions', 14), (' Provision ', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' derivative liabilities ', 50), (' financial liabilities', 46), (' Contract Liabilities ', 44), (' trade and other payables', 41), (' employee benefits', 37), (' Derivative financial instruments ', 33), (' foreign exchange contract liability ', 28), (' customer deposits', 23), (' deferred revenue', 17), (' Deferred income', 17), ('provisions', 11), (' Provision ', 11)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), (' Provision ', 33), (' Deferred income', 24), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' Contract Liabilities ', 19), (' foreign exchange contract liability ', 16), (' Derivative financial instruments ', 13), (' derivative liabilities ', 11), (' financial liabilities', 10)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' Provision ', 100), (' derivative liabilities ', 33), (' customer deposits', 30), (' Derivative financial instruments ', 27), (' Deferred income', 24), (' deferred revenue', 22), (' employee benefits', 19), (' Contract Liabilities ', 19), (' foreign exchange contract liability ', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' derivative liabilities ', 70), (' financial liabilities', 64), (' Contract Liabilities ', 62), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability ', 43), (' trade and other payables', 30), (' Derivative financial instruments ', 29), (' Deferred income', 27), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12), (' Provision ', 12)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' Contract Liabilities ', 61), (' other financial liabilities', 53), (' derivative liabilities ', 53), (' financial liabilities', 50), (' foreign exchange contract liability ', 49), (' trade and other payables', 45), (' customer deposits', 38), (' Derivative financial instruments ', 33), (' employee benefits', 30), (' deferred revenue', 27), (' Deferred income', 21), ('provisions', 17), (' Provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 5, 7], 'score': 84, 'value': 2016704.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '13', '16', '6(b)'], 'line_item_value': [0.0, 1589021.0, 425447.0, 2236.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' derivative liabilities ', 67), (' financial liabilities', 60), (' Contract Liabilities ', 57), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability ', 32), (' employee benefits', 29), (' trade and other payables', 21), (' Derivative financial instruments ', 20), ('provisions', 17), (' Provision ', 17), (' Deferred income', 12), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' Contract Liabilities ', 69), (' derivative liabilities ', 62), (' financial liabilities', 57), (' foreign exchange contract liability ', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), (' Derivative financial instruments ', 26), (' Deferred income', 24), ('provisions', 20), (' Provision ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' derivative liabilities ', 41), (' Derivative financial instruments ', 39), (' Contract Liabilities ', 38), (' deferred revenue', 35), (' foreign exchange contract liability ', 34), (' financial liabilities', 33), (' employee benefits', 32), (' Deferred income', 24), (' customer deposits', 22), ('provisions', 14), (' Provision ', 14)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' derivative liabilities ', 50), (' financial liabilities', 46), (' Contract Liabilities ', 44), (' trade and other payables', 41), (' employee benefits', 37), (' Derivative financial instruments ', 33), (' foreign exchange contract liability ', 28), (' customer deposits', 23), (' deferred revenue', 17), (' Deferred income', 17), ('provisions', 11), (' Provision ', 11)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), (' Provision ', 33), (' Deferred income', 24), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' Contract Liabilities ', 19), (' foreign exchange contract liability ', 16), (' Derivative financial instruments ', 13), (' derivative liabilities ', 11), (' financial liabilities', 10)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' Provision ', 100), (' derivative liabilities ', 33), (' customer deposits', 30), (' Derivative financial instruments ', 27), (' Deferred income', 24), (' deferred revenue', 22), (' employee benefits', 19), (' Contract Liabilities ', 19), (' foreign exchange contract liability ', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' derivative liabilities ', 70), (' financial liabilities', 64), (' Contract Liabilities ', 62), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability ', 43), (' trade and other payables', 30), (' Derivative financial instruments ', 29), (' Deferred income', 27), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12), (' Provision ', 12)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' Contract Liabilities ', 61), (' other financial liabilities', 53), (' derivative liabilities ', 53), (' financial liabilities', 50), (' foreign exchange contract liability ', 49), (' trade and other payables', 45), (' customer deposits', 38), (' Derivative financial instruments ', 33), (' employee benefits', 30), (' deferred revenue', 27), (' Deferred income', 21), ('provisions', 17), (' Provision ', 17)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 5, 7], 'score': 84, 'value': 3179913.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Provisions', 'Current tax liabilities'], 'note_numbers': [nan, '13', '16', '6(b)'], 'line_item_value': [0.0, 2086685.0, 744685.0, 348543.0]}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 23) , res_fuzz_match = [(' gst payables', 80), (' rebates', 80), (' GST Payable', 80), (' Trade payables ', 75), (' other related parties', 71), (' loan payable to relayed party under tax funding agreement', 71), (' loans from related party', 67), (' other', 60), (' others ', 60), (' gst payable and accruals', 59), (' current- liability for long service leave ', 58), (' Employee payables ', 57), (' current - liability for annual and long service leave', 55), (' ultimate parent entity', 53), (' Current- liability for annual leave ', 53), (' gst liabilities', 50), (' warranty', 50), (' employee benefits - payroll', 45), (' total current employee benefits ', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' provisions - current', 43), (' Warranty and after sales service ', 43), (' Employee entitlements ', 43), (' secured long-term bank loans', 42), (' Forward currency contract ', 42), (' restructuring', 40), (' service contracts ', 40), (' employee benefits - current', 39), (' provision for annual and long service leave ', 39), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' Stock and feright payables ', 38), (' other creditors', 36), (' other creditors', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other trade payables , res_fuzz_match = [(' other', 100), (' Trade payables ', 100), (' others ', 100), (' gst payables', 70), (' GST Payable', 70), (' other related parties', 65), (' share of joint venture payables', 60), (' rebates', 60), ('other creditors and accruals', 57), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), (' Employee payables ', 57), (' current - liability for annual and long service leave', 54), (' Current- liability for annual leave ', 54), (' Stock and feright payables ', 54), (' secured long-term bank loans', 50), (' restructuring', 50), (' warranty', 50), (' total current employee benefits ', 49), (' current- liability for long service leave ', 46), (' Warranty and after sales service ', 46), (' Forward currency contract ', 46), (' employee benefits - payroll', 45), (' loans from related party', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' gst payable and accruals', 41), (' gst liabilities', 40), (' service contracts ', 40), (' forward exchange contracts', 38), (' arising from service contracts', 36), (' Employee entitlements ', 36), (' Deferred income ', 36), (' provision for annual and long service leave ', 35), (' gst', 33), (' accrued expenses ', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current goods and services tax payable , res_fuzz_match = [(' gst payables', 80), (' GST Payable', 80), (' Trade payables ', 75), (' Stock and feright payables ', 71), (' rebates', 60), (' service contracts ', 60), (' current- liability for long service leave ', 59), (' make good provisions', 56), (' arising from service contracts', 52), (' gst liabilities', 50), (' warranty', 50), (' Current- liability for annual leave ', 50), (' Warranty and after sales service ', 50), (' Employee payables ', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' total current employee benefits ', 48), (' current - liability for annual and long service leave', 47), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' provision for annual and long service leave ', 46), (' Forward currency contract ', 46), (' employee benefits - payroll', 45), (' Deferred income ', 45), (' provisions - current', 43), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' restructuring', 40), (' other', 40), (' others ', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' accrued expenses ', 33), (' Employee entitlements ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current sundry payables and accrued expenses , res_fuzz_match = [(' accrued expenses ', 100), (' gst payable and accruals', 77), (' gst payables', 70), (' GST Payable', 70), (' Trade payables ', 67), (' rebates', 60), (' Current- liability for annual leave ', 57), (' share of joint venture payables', 56), (' Stock and feright payables ', 54), (' current - liability for annual and long service leave', 53), (' current- liability for long service leave ', 51), ('other creditors and accruals', 50), (' loan payable to relayed party under tax funding agreement', 50), (' restructuring', 50), (' warranty', 50), (' Employee payables ', 50), (' secured long-term bank loans', 46), (' provisions - current', 43), (' Warranty and after sales service ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' Forward currency contract ', 42), (' employee benefits - payroll', 41), (' provision for annual and long service leave ', 41), (' contract liabilites - current', 40), (' gst liabilities', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 39), (' loans from related party', 38), (' provision for associate funding', 36), (' other related parties', 35), (' total current employee benefits ', 34), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 32), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' Employee entitlements ', 29), (' service contracts ', 27), (' Deferred income ', 27), (' other', 20), (' others ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 2,086,685 1,589,021 , res_fuzz_match = [(' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits ', 100), (' Current- liability for annual leave ', 100), (' current- liability for long service leave ', 100), (' Forward currency contract ', 86), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' Warranty and after sales service ', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' accrued expenses ', 43), (' Employee entitlements ', 43), (' service contracts ', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' provision for annual and long service leave ', 29), (' Trade payables ', 29), (' Stock and feright payables ', 29), (' Deferred income ', 29), (' other', 20), (' others ', 20), (' make good provisions', 14), (' Employee payables ', 14), (' gst payables', 0), (' gst liabilities', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 14. other liabilities , res_fuzz_match = [(' other', 100), (' others ', 100), (' current - liability for annual and long service leave', 70), (' gst liabilities', 70), (' Current- liability for annual leave ', 70), (' current- liability for long service leave ', 70), (' Forward currency contract ', 61), (' rebates', 60), (' total current employee benefits ', 60), (' secured long-term bank loans', 55), (' contract liabilites - current', 55), (' other creditors', 54), (' other creditors', 54), (' other creditors', 54), (' other related parties', 53), (' restructuring', 50), (' warranty', 50), (' Trade payables ', 50), (' ultimate parent entity', 47), (' share of joint venture payables', 46), ('other creditors and accruals', 45), (' forward exchange contracts', 45), (' Warranty and after sales service ', 45), (' provisions - current', 43), (' Employee payables ', 43), (' derivative contracts - at fair value', 42), (' Stock and feright payables ', 41), (' gst payables', 40), (' provision for annual and long service leave ', 40), (' service contracts ', 40), (' GST Payable', 40), (' Employee entitlements ', 36), (' Deferred income ', 36), (' loan payable to relayed party under tax funding agreement', 35), (' loans from related party', 35), (' employee benefits - current', 35), (' provision for associate funding', 35), (' arising from service contracts', 35), (' gst', 33), (' accrued expenses ', 33), (' make good provisions', 31), (' employee benefits - payroll', 30), (' gst payable and accruals', 25), (' abandonment and decommissioning costs', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current payables to related parties (note 23) , res_fuzz_match = [(' gst payables', 80), (' rebates', 80), (' GST Payable', 80), (' Trade payables ', 75), (' other related parties', 71), (' loan payable to relayed party under tax funding agreement', 71), (' loans from related party', 67), (' other', 60), (' others ', 60), (' gst payable and accruals', 59), (' current- liability for long service leave ', 58), (' Employee payables ', 57), (' current - liability for annual and long service leave', 55), (' ultimate parent entity', 53), (' Current- liability for annual leave ', 53), (' gst liabilities', 50), (' warranty', 50), (' employee benefits - payroll', 45), (' total current employee benefits ', 45), (' contract liabilites - current', 44), (' share of joint venture payables', 44), (' provisions - current', 43), (' Warranty and after sales service ', 43), (' Employee entitlements ', 43), (' secured long-term bank loans', 42), (' Forward currency contract ', 42), (' restructuring', 40), (' service contracts ', 40), (' employee benefits - current', 39), (' provision for annual and long service leave ', 39), (' derivative contracts - at fair value', 38), (' make good provisions', 38), (' Stock and feright payables ', 38), (' other creditors', 36), (' other creditors', 36), (' provision for associate funding', 36), (' arising from service contracts', 36), (' other creditors', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current other trade payables , res_fuzz_match = [(' other', 100), (' Trade payables ', 100), (' others ', 100), (' gst payables', 70), (' GST Payable', 70), (' other related parties', 65), (' share of joint venture payables', 60), (' rebates', 60), ('other creditors and accruals', 57), (' other creditors', 57), (' other creditors', 57), (' other creditors', 57), (' Employee payables ', 57), (' current - liability for annual and long service leave', 54), (' Current- liability for annual leave ', 54), (' Stock and feright payables ', 54), (' secured long-term bank loans', 50), (' restructuring', 50), (' warranty', 50), (' total current employee benefits ', 49), (' current- liability for long service leave ', 46), (' Warranty and after sales service ', 46), (' Forward currency contract ', 46), (' employee benefits - payroll', 45), (' loans from related party', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' gst payable and accruals', 41), (' gst liabilities', 40), (' service contracts ', 40), (' forward exchange contracts', 38), (' arising from service contracts', 36), (' Employee entitlements ', 36), (' Deferred income ', 36), (' provision for annual and long service leave ', 35), (' gst', 33), (' accrued expenses ', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' employee benefits - current', 30), (' abandonment and decommissioning costs', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current goods and services tax payable , res_fuzz_match = [(' gst payables', 80), (' GST Payable', 80), (' Trade payables ', 75), (' Stock and feright payables ', 71), (' rebates', 60), (' service contracts ', 60), (' current- liability for long service leave ', 59), (' make good provisions', 56), (' arising from service contracts', 52), (' gst liabilities', 50), (' warranty', 50), (' Current- liability for annual leave ', 50), (' Warranty and after sales service ', 50), (' Employee payables ', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' total current employee benefits ', 48), (' current - liability for annual and long service leave', 47), ('other creditors and accruals', 46), (' derivative contracts - at fair value', 46), (' provision for annual and long service leave ', 46), (' Forward currency contract ', 46), (' employee benefits - payroll', 45), (' Deferred income ', 45), (' provisions - current', 43), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' other related parties', 41), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' restructuring', 40), (' other', 40), (' others ', 40), (' secured long-term bank loans', 38), (' ultimate parent entity', 37), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' provision for associate funding', 36), (' other creditors', 36), (' employee benefits - current', 35), (' gst', 33), (' accrued expenses ', 33), (' Employee entitlements ', 29)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current sundry payables and accrued expenses , res_fuzz_match = [(' accrued expenses ', 100), (' gst payable and accruals', 77), (' gst payables', 70), (' GST Payable', 70), (' Trade payables ', 67), (' rebates', 60), (' Current- liability for annual leave ', 57), (' share of joint venture payables', 56), (' Stock and feright payables ', 54), (' current - liability for annual and long service leave', 53), (' current- liability for long service leave ', 51), ('other creditors and accruals', 50), (' loan payable to relayed party under tax funding agreement', 50), (' restructuring', 50), (' warranty', 50), (' Employee payables ', 50), (' secured long-term bank loans', 46), (' provisions - current', 43), (' Warranty and after sales service ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' Forward currency contract ', 42), (' employee benefits - payroll', 41), (' provision for annual and long service leave ', 41), (' contract liabilites - current', 40), (' gst liabilities', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 39), (' loans from related party', 38), (' provision for associate funding', 36), (' other related parties', 35), (' total current employee benefits ', 34), (' gst', 33), (' forward exchange contracts', 33), (' arising from service contracts', 32), (' make good provisions', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' Employee entitlements ', 29), (' service contracts ', 27), (' Deferred income ', 27), (' other', 20), (' others ', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 2,086,685 1,589,021 , res_fuzz_match = [(' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits ', 100), (' Current- liability for annual leave ', 100), (' current- liability for long service leave ', 100), (' Forward currency contract ', 86), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), (' Warranty and after sales service ', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' accrued expenses ', 43), (' Employee entitlements ', 43), (' service contracts ', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' provision for annual and long service leave ', 29), (' Trade payables ', 29), (' Stock and feright payables ', 29), (' Deferred income ', 29), (' other', 20), (' others ', 20), (' make good provisions', 14), (' Employee payables ', 14), (' gst payables', 0), (' gst liabilities', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current 14. other liabilities , res_fuzz_match = [(' other', 100), (' others ', 100), (' current - liability for annual and long service leave', 70), (' gst liabilities', 70), (' Current- liability for annual leave ', 70), (' current- liability for long service leave ', 70), (' Forward currency contract ', 61), (' rebates', 60), (' total current employee benefits ', 60), (' secured long-term bank loans', 55), (' contract liabilites - current', 55), (' other creditors', 54), (' other creditors', 54), (' other creditors', 54), (' other related parties', 53), (' restructuring', 50), (' warranty', 50), (' Trade payables ', 50), (' ultimate parent entity', 47), (' share of joint venture payables', 46), ('other creditors and accruals', 45), (' forward exchange contracts', 45), (' Warranty and after sales service ', 45), (' provisions - current', 43), (' Employee payables ', 43), (' derivative contracts - at fair value', 42), (' Stock and feright payables ', 41), (' gst payables', 40), (' provision for annual and long service leave ', 40), (' service contracts ', 40), (' GST Payable', 40), (' Employee entitlements ', 36), (' Deferred income ', 36), (' loan payable to relayed party under tax funding agreement', 35), (' loans from related party', 35), (' employee benefits - current', 35), (' provision for associate funding', 35), (' arising from service contracts', 35), (' gst', 33), (' accrued expenses ', 33), (' make good provisions', 31), (' employee benefits - payroll', 30), (' gst payable and accruals', 25), (' abandonment and decommissioning costs', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [80, 100, 80, 100, 100, 100, 80, 100, 80, 100, 100, 100], 'value': [1937201.0, 851.0, 13474.0, 135159.0, 0.0, 2023.0, 1315843.0, 47060.0, 83111.0, 143007.0, 0.0, 2022.0], 'label': ['Current Payables to related parties (Note 23)', 'Current Other Trade payables', 'Current Goods and Services Tax payable', 'Current Sundry payables and accrued expenses', 'Current 2,086,685 1,589,021', 'Current 14. Other liabilities', 'Current Payables to related parties (Note 23)', 'Current Other Trade payables', 'Current Goods and Services Tax payable', 'Current Sundry payables and accrued expenses', 'Current 2,086,685 1,589,021', 'Current 14. Other liabilities'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:32+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current warranty provision (a) , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' current- liability for long service leave ', 57), (' other related parties', 53), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), (' make good provisions', 50), (' restructuring', 50), (' loans from related party', 48), (' total current employee benefits ', 48), (' Warranty and after sales service ', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 44), (' provisions - current', 43), (' Forward currency contract ', 43), (' Trade payables ', 42), ('other creditors and accruals', 40), (' gst payables', 40), (' other', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' derivative contracts - at fair value', 39), (' loan payable to relayed party under tax funding agreement', 39), (' contract liabilites - current', 39), (' share of joint venture payables', 39), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' provision for annual and long service leave ', 35), (' gst', 33), (' accrued expenses ', 33), (' gst payable and accruals', 32), (' Stock and feright payables ', 31), (' arising from service contracts', 30), (' gst liabilities', 30), (' Employee payables ', 29), (' provision for associate funding', 27), (' Deferred income ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current employee benefits (b) , res_fuzz_match = [(' total current employee benefits ', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' rebates', 60), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), (' current- liability for long service leave ', 52), (' warranty', 50), (' ultimate parent entity', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 44), (' provisions - current', 43), (' Forward currency contract ', 43), (' Trade payables ', 42), (' accrued expenses ', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' Warranty and after sales service ', 39), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' provision for annual and long service leave ', 35), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' Stock and feright payables ', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits ', 69), (' Current- liability for annual leave ', 69), (' current- liability for long service leave ', 69), (' Forward currency contract ', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' Warranty and after sales service ', 46), (' Trade payables ', 43), (' gst payables', 42), (' gst liabilities', 42), (' GST Payable', 42), (' restructuring', 40), (' other', 40), (' others ', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' accrued expenses ', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' provision for annual and long service leave ', 31), (' Employee payables ', 31), (' Deferred income ', 27), (' make good provisions', 23)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (b) , res_fuzz_match = [(' total current employee benefits ', 87), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' ultimate parent entity', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Trade payables ', 42), (' accrued expenses ', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' current - liability for annual and long service leave', 39), (' Current- liability for annual leave ', 39), (' current- liability for long service leave ', 39), (' provision for annual and long service leave ', 39), (' Forward currency contract ', 39), (' loans from related party', 38), (' Warranty and after sales service ', 36), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' gst', 33), (' Stock and feright payables ', 31), ('other creditors and accruals', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25), (' warranty', 25), (' gst payable and accruals', 23), (' restructuring', 20)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision balance at the beginning of the year , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' other', 60), (' others ', 60), (' provisions - current', 57), (' other related parties', 53), (' Warranty and after sales service ', 53), (' other creditors', 50), (' other creditors', 50), (' make good provisions', 50), (' other creditors', 50), (' Employee entitlements ', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' provision for annual and long service leave ', 47), (' service contracts ', 47), (' employee benefits - payroll', 45), (' provision for associate funding', 45), (' total current employee benefits ', 45), (' employee benefits - current', 43), (' current - liability for annual and long service leave', 43), (' current- liability for long service leave ', 43), (' Employee payables ', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' share of joint venture payables', 42), (' Trade payables ', 42), (' accrued expenses ', 42), (' Stock and feright payables ', 42), (' gst payable and accruals', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' Current- liability for annual leave ', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' Forward currency contract ', 38), (' contract liabilites - current', 36), (' gst', 33), (' Deferred income ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision provisions recognised during the year , res_fuzz_match = [(' warranty', 100), (' other', 60), (' others ', 60), (' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 55), (' other related parties', 53), (' Warranty and after sales service ', 53), (' arising from service contracts', 52), (' Employee entitlements ', 50), (' loans from related party', 48), (' employee benefits - current', 48), (' employee benefits - payroll', 45), (' provision for annual and long service leave ', 45), (' share of joint venture payables', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' current- liability for long service leave ', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' Trade payables ', 42), (' total current employee benefits ', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' service contracts ', 40), (' GST Payable', 40), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' current - liability for annual and long service leave', 37), (' Current- liability for annual leave ', 37), (' contract liabilites - current', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' gst payable and accruals', 32), (' restructuring', 30)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = provisions utilised during the year balance at the end of the year , res_fuzz_match = [(' provisions - current', 64), (' rebates', 60), (' other', 60), (' others ', 60), (' Trade payables ', 58), (' secured long-term bank loans', 54), (' other related parties', 53), (' other creditors', 50), (' other creditors', 50), (' gst payables', 50), (' other creditors', 50), (' warranty', 50), (' Employee payables ', 50), (' GST Payable', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' total current employee benefits ', 48), (' ultimate parent entity', 47), (' provision for annual and long service leave ', 47), (' Warranty and after sales service ', 47), (' provision for associate funding', 45), (' employee benefits - current', 43), (' current- liability for long service leave ', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' accrued expenses ', 42), (' Stock and feright payables ', 42), (' gst payable and accruals', 41), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' Current- liability for annual leave ', 40), (' service contracts ', 40), (' abandonment and decommissioning costs', 38), (' Forward currency contract ', 38), (' Employee entitlements ', 36), (' Deferred income ', 36), (' gst', 33), (' forward exchange contracts', 33), (' make good provisions', 31)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current warranty provision (a) , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' current- liability for long service leave ', 57), (' other related parties', 53), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), (' make good provisions', 50), (' restructuring', 50), (' loans from related party', 48), (' total current employee benefits ', 48), (' Warranty and after sales service ', 48), (' ultimate parent entity', 47), (' secured long-term bank loans', 44), (' provisions - current', 43), (' Forward currency contract ', 43), (' Trade payables ', 42), ('other creditors and accruals', 40), (' gst payables', 40), (' other', 40), (' service contracts ', 40), (' others ', 40), (' GST Payable', 40), (' derivative contracts - at fair value', 39), (' loan payable to relayed party under tax funding agreement', 39), (' contract liabilites - current', 39), (' share of joint venture payables', 39), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' provision for annual and long service leave ', 35), (' gst', 33), (' accrued expenses ', 33), (' gst payable and accruals', 32), (' Stock and feright payables ', 31), (' arising from service contracts', 30), (' gst liabilities', 30), (' Employee payables ', 29), (' provision for associate funding', 27), (' Deferred income ', 27)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows = current employee benefits (b) , res_fuzz_match = [(' total current employee benefits ', 100), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' rebates', 60), (' current - liability for annual and long service leave', 52), (' Current- liability for annual leave ', 52), (' current- liability for long service leave ', 52), (' warranty', 50), (' ultimate parent entity', 49), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' secured long-term bank loans', 44), (' provisions - current', 43), (' Forward currency contract ', 43), (' Trade payables ', 42), (' accrued expenses ', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' Warranty and after sales service ', 39), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' forward exchange contracts', 35), (' provision for annual and long service leave ', 35), (' loans from related party', 33), (' gst', 33), ('other creditors and accruals', 31), (' Stock and feright payables ', 31), (' abandonment and decommissioning costs', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25)]
2023-08-28 11:47:32+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' current - liability for annual and long service leave', 69), (' total current employee benefits ', 69), (' Current- liability for annual leave ', 69), (' current- liability for long service leave ', 69), (' Forward currency contract ', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' Warranty and after sales service ', 46), (' Trade payables ', 43), (' gst payables', 42), (' gst liabilities', 42), (' GST Payable', 42), (' restructuring', 40), (' other', 40), (' others ', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' Employee entitlements ', 38), (' service contracts ', 38), (' Stock and feright payables ', 38), (' gst', 33), (' accrued expenses ', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' provision for annual and long service leave ', 31), (' Employee payables ', 31), (' Deferred income ', 27), (' make good provisions', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (b) , res_fuzz_match = [(' total current employee benefits ', 87), (' employee benefits - payroll', 81), (' employee benefits - current', 79), (' Employee entitlements ', 79), (' Employee payables ', 64), (' ultimate parent entity', 47), (' other creditors', 43), (' secured long-term bank loans', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' Trade payables ', 42), (' accrued expenses ', 42), (' gst payables', 40), (' rebates', 40), (' other', 40), (' others ', 40), (' GST Payable', 40), (' current - liability for annual and long service leave', 39), (' Current- liability for annual leave ', 39), (' current- liability for long service leave ', 39), (' provision for annual and long service leave ', 39), (' Forward currency contract ', 39), (' loans from related party', 38), (' Warranty and after sales service ', 36), (' other related parties', 35), (' loan payable to relayed party under tax funding agreement', 35), (' contract liabilites - current', 35), (' share of joint venture payables', 35), (' abandonment and decommissioning costs', 35), (' forward exchange contracts', 35), (' gst', 33), (' Stock and feright payables ', 31), ('other creditors and accruals', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' provision for associate funding', 27), (' service contracts ', 27), (' Deferred income ', 27), (' derivative contracts - at fair value', 26), (' make good provisions', 25), (' warranty', 25), (' gst payable and accruals', 23), (' restructuring', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision balance at the beginning of the year , res_fuzz_match = [(' warranty', 100), (' rebates', 60), (' other', 60), (' others ', 60), (' provisions - current', 57), (' other related parties', 53), (' Warranty and after sales service ', 53), (' other creditors', 50), (' other creditors', 50), (' make good provisions', 50), (' other creditors', 50), (' Employee entitlements ', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' ultimate parent entity', 47), (' provision for annual and long service leave ', 47), (' service contracts ', 47), (' employee benefits - payroll', 45), (' provision for associate funding', 45), (' total current employee benefits ', 45), (' employee benefits - current', 43), (' current - liability for annual and long service leave', 43), (' current- liability for long service leave ', 43), (' Employee payables ', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' share of joint venture payables', 42), (' Trade payables ', 42), (' accrued expenses ', 42), (' Stock and feright payables ', 42), (' gst payable and accruals', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' Current- liability for annual leave ', 40), (' GST Payable', 40), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' Forward currency contract ', 38), (' contract liabilites - current', 36), (' gst', 33), (' Deferred income ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision provisions recognised during the year , res_fuzz_match = [(' warranty', 100), (' other', 60), (' others ', 60), (' provisions - current', 57), (' make good provisions', 56), (' provision for associate funding', 55), (' other related parties', 53), (' Warranty and after sales service ', 53), (' arising from service contracts', 52), (' Employee entitlements ', 50), (' loans from related party', 48), (' employee benefits - current', 48), (' employee benefits - payroll', 45), (' provision for annual and long service leave ', 45), (' share of joint venture payables', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' current- liability for long service leave ', 43), (' Employee payables ', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' Trade payables ', 42), (' total current employee benefits ', 41), (' loan payable to relayed party under tax funding agreement', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' service contracts ', 40), (' GST Payable', 40), (' Forward currency contract ', 38), (' Stock and feright payables ', 38), (' current - liability for annual and long service leave', 37), (' Current- liability for annual leave ', 37), (' contract liabilites - current', 36), (' Deferred income ', 36), ('other creditors and accruals', 35), (' gst', 33), (' forward exchange contracts', 33), (' accrued expenses ', 33), (' gst payable and accruals', 32), (' restructuring', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = provisions utilised during the year balance at the end of the year , res_fuzz_match = [(' provisions - current', 64), (' rebates', 60), (' other', 60), (' others ', 60), (' Trade payables ', 58), (' secured long-term bank loans', 54), (' other related parties', 53), (' other creditors', 50), (' other creditors', 50), (' gst payables', 50), (' other creditors', 50), (' warranty', 50), (' Employee payables ', 50), (' GST Payable', 50), (' loans from related party', 48), (' share of joint venture payables', 48), (' total current employee benefits ', 48), (' ultimate parent entity', 47), (' provision for annual and long service leave ', 47), (' Warranty and after sales service ', 47), (' provision for associate funding', 45), (' employee benefits - current', 43), (' current- liability for long service leave ', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' accrued expenses ', 42), (' Stock and feright payables ', 42), (' gst payable and accruals', 41), (' current - liability for annual and long service leave', 41), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' contract liabilites - current', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' Current- liability for annual leave ', 40), (' service contracts ', 40), (' abandonment and decommissioning costs', 38), (' Forward currency contract ', 38), (' Employee entitlements ', 36), (' Deferred income ', 36), (' gst', 33), (' forward exchange contracts', 33), (' make good provisions', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4, 5, 7, 8, 10, 11, 12], 'score': [100, 100, 87, 100, 100, 100, 100, 87, 100, 100], 'value': [272246.0, 308893.0, 163546.0, 196683.0, 112210.0, 196683.0, 228764.0, 193565.0, 0.0, 0.0], 'label': ['Current Warranty provision (a)', 'Current Employee benefits (b)', 'Non-current Employee benefits (b)', '(a) Movement in warranty provision Balance at the beginning of the year', '(a) Movement in warranty provision Provisions recognised during the year', 'Current Warranty provision (a)', 'Current Employee benefits (b)', 'Non-current Employee benefits (b)', '(a) Movement in warranty provision Balance at the beginning of the year', '(a) Movement in warranty provision Provisions recognised during the year'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_liabilities
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' Lease obligation', 40), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' Lease obligation', 33), (' lease liabilities ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation', 70), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 138510.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['17'], 'line_item_value': [138510.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' Lease obligation', 40), ('interest bearing loans and borrowings ', 36), (' loans and borrowings', 36), (' borrowings ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings ', 33), (' borrowings ', 33), (' loans and borrowings', 33), (' Lease obligation', 33), (' lease liabilities ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation', 70), ('interest bearing loans and borrowings ', 45), (' loans and borrowings', 45), (' borrowings ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 42040.0, 'line_item_label': ['Lease Liabilities'], 'note_numbers': ['17'], 'line_item_value': [42040.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' non current ', 91), (' lease liabilities - non-current ', 58), (' secured finance debt ', 42), (' not later than 5 years ', 42), (' less : unexpired interest', 42), (' bank loan ', 33), (' Borrowings ', 33), (' Hire purchase liabilities ', 33), ('leases ', 25), (' later than 1 year ', 25), (' lease liabilities ', 18), (' lease liability ', 18), (' Lease liabilities ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' non current ', 74), (' lease liabilities - non-current ', 67), (' Borrowings ', 50), (' bank loan ', 44), (' secured finance debt ', 42), (' later than 1 year ', 33), (' not later than 5 years ', 33), (' Hire purchase liabilities ', 33), (' less : unexpired interest', 33), ('leases ', 25), (' lease liabilities ', 18), (' lease liability ', 18), (' Lease liabilities ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' bank loan ', 44), (' secured finance debt ', 42), (' lease liabilities ', 40), (' lease liability ', 40), (' non current ', 40), (' later than 1 year ', 40), (' not later than 5 years ', 40), (' Lease liabilities ', 40), (' lease liabilities - non-current ', 30), (' Hire purchase liabilities ', 30), (' less : unexpired interest', 30), ('leases ', 25), (' Borrowings ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none current , res_fuzz_match = [(' non current ', 91), (' lease liabilities - non-current ', 58), (' secured finance debt ', 42), (' not later than 5 years ', 42), (' less : unexpired interest', 42), (' bank loan ', 33), (' Borrowings ', 33), (' Hire purchase liabilities ', 33), ('leases ', 25), (' later than 1 year ', 25), (' lease liabilities ', 18), (' lease liability ', 18), (' Lease liabilities ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none non-current , res_fuzz_match = [(' non current ', 74), (' lease liabilities - non-current ', 67), (' Borrowings ', 50), (' bank loan ', 44), (' secured finance debt ', 42), (' later than 1 year ', 33), (' not later than 5 years ', 33), (' Hire purchase liabilities ', 33), (' less : unexpired interest', 33), ('leases ', 25), (' lease liabilities ', 18), (' lease liability ', 18), (' Lease liabilities ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' bank loan ', 44), (' secured finance debt ', 42), (' lease liabilities ', 40), (' lease liability ', 40), (' non current ', 40), (' later than 1 year ', 40), (' not later than 5 years ', 40), (' Lease liabilities ', 40), (' lease liabilities - non-current ', 30), (' Hire purchase liabilities ', 30), (' less : unexpired interest', 30), ('leases ', 25), (' Borrowings ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [91, 91], 'value': [96470.0, 88920.0], 'label': ['None Current', 'None Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none not later than one year , res_fuzz_match = [(' not later than 5 years ', 84), (' later than 1 year ', 80), (' bank loan ', 56), (' non current ', 55), ('leases ', 50), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' less : unexpired interest', 38), (' lease liabilities ', 36), (' lease liability ', 36), (' Lease liabilities ', 36), (' Hire purchase liabilities ', 32), (' Borrowings ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none later than one year and not later than five years , res_fuzz_match = [(' not later than 5 years ', 84), (' later than 1 year ', 80), (' bank loan ', 56), ('leases ', 50), (' non current ', 45), (' less : unexpired interest', 43), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' Hire purchase liabilities ', 37), (' lease liabilities ', 36), (' lease liability ', 36), (' Lease liabilities ', 36), (' Borrowings ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [(' later than 1 year ', 80), (' not later than 5 years ', 74), ('leases ', 50), (' lease liabilities ', 45), (' lease liability ', 45), (' Lease liabilities ', 45), (' bank loan ', 44), (' Hire purchase liabilities ', 42), (' secured finance debt ', 41), (' less : unexpired interest', 38), (' Borrowings ', 33), (' lease liabilities - non-current ', 32), (' non current ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none not later than one year , res_fuzz_match = [(' not later than 5 years ', 84), (' later than 1 year ', 80), (' bank loan ', 56), (' non current ', 55), ('leases ', 50), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' less : unexpired interest', 38), (' lease liabilities ', 36), (' lease liability ', 36), (' Lease liabilities ', 36), (' Hire purchase liabilities ', 32), (' Borrowings ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none later than one year and not later than five years , res_fuzz_match = [(' not later than 5 years ', 84), (' later than 1 year ', 80), (' bank loan ', 56), ('leases ', 50), (' non current ', 45), (' less : unexpired interest', 43), (' lease liabilities - non-current ', 42), (' secured finance debt ', 41), (' Hire purchase liabilities ', 37), (' lease liabilities ', 36), (' lease liability ', 36), (' Lease liabilities ', 36), (' Borrowings ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = later than five years total , res_fuzz_match = [(' later than 1 year ', 80), (' not later than 5 years ', 74), ('leases ', 50), (' lease liabilities ', 45), (' lease liability ', 45), (' Lease liabilities ', 45), (' bank loan ', 44), (' Hire purchase liabilities ', 42), (' secured finance debt ', 41), (' less : unexpired interest', 38), (' Borrowings ', 33), (' lease liabilities - non-current ', 32), (' non current ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases ', 0), (' secured finance debt ', 0), (' bank loan ', 0), (' lease liabilities ', 0), (' lease liability ', 0), (' lease liabilities - non-current ', 0), (' non current ', 0), (' later than 1 year ', 0), (' not later than 5 years ', 0), (' Borrowings ', 0), (' Lease liabilities ', 0), (' Hire purchase liabilities ', 0), (' less : unexpired interest', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5], 'score': [84, 84, 80, 84, 84, 80], 'value': [100274.0, 51293.0, 151567.0, 96417.0, 151567.0, 247984.0], 'label': ['None Not later than one year', 'None Later than one year and not later than five years', 'Later than five years Total', 'None Not later than one year', 'None Later than one year and not later than five years', 'Later than five years Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' deferred tax liabilities', 57), ('deferred taxes ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes ', 17), (' deferred tax liabilities', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' deferred tax liabilities', 73), ('deferred taxes ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' Deferred income', 24), (' deferred revenue ', 23), (' provisions ', 10), (' Provisions ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' Provisions ', 100), (' provision for associate funding ', 43), (' Deferred income', 24), (' deferred revenue ', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' Deferred income', 27), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue ', 17), (' provisions ', 12), (' Provisions ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 193565.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 193565.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' Deferred income', 24), (' deferred revenue ', 23), (' provisions ', 10), (' Provisions ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' Provisions ', 100), (' provision for associate funding ', 43), (' Deferred income', 24), (' deferred revenue ', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' Deferred income', 27), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue ', 17), (' provisions ', 12), (' Provisions ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 100, 'value': 0.0, 'line_item_label': ['Non-current liabilities', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 0.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = current warranty provision (a) , res_fuzz_match = [(' non-current-liability for long service leave ', 57), (' make good provisions ', 50), ('non-current trade and other payables ', 48), (' non-current - liability for long-service leave ', 48), (' trade payables - related parties ', 48), (' provisions - non-current ', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' contract liabilites - non-current ', 39), (' employee benefits - payroll ', 36), (' employee benefits - non current ', 35), (' abandonment and decommissioning costs ', 35), (' total non-current employee benefits ', 35), (' provision for long service leave ', 35), (' provision for associate funding ', 27), (' Deferred income', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = current employee benefits (b) , res_fuzz_match = [(' total non-current employee benefits ', 87), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), (' non-current-liability for long service leave ', 52), ('non-current trade and other payables ', 43), (' non-current - liability for long-service leave ', 43), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' trade payables - related parties ', 35), (' provision for long service leave ', 35), (' abandonment and decommissioning costs ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' Deferred income', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' non-current-liability for long service leave ', 69), ('non-current trade and other payables ', 54), (' employee benefits - non current ', 54), (' non-current - liability for long-service leave ', 54), (' employee benefits - payroll ', 46), (' total non-current employee benefits ', 46), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' contract liabilites - non-current ', 38), (' trade payables - related parties ', 38), (' provisions - non-current ', 31), (' abandonment and decommissioning costs ', 31), (' provision for associate funding ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' provision for long service leave ', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (b) , res_fuzz_match = [(' total non-current employee benefits ', 100), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 52), (' non-current-liability for long service leave ', 52), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' abandonment and decommissioning costs ', 35), (' provision for long service leave ', 35), (' trade payables - related parties ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' Deferred income', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision balance at the beginning of the year , res_fuzz_match = [(' provisions - non-current ', 64), (' provision for long service leave ', 52), ('non-current trade and other payables ', 50), (' make good provisions ', 50), (' employee benefits - payroll ', 45), (' provision for associate funding ', 45), (' total non-current employee benefits ', 45), (' non-current-liability for long service leave ', 45), (' electricity derivatives at fair value through oci ', 44), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' non-current - liability for long-service leave ', 41), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' contract liabilites - non-current ', 36), (' Deferred income', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision provisions recognised during the year , res_fuzz_match = [(' provisions - non-current ', 57), (' make good provisions ', 56), (' provision for associate funding ', 55), (' provision for long service leave ', 52), (' employee benefits - payroll ', 45), (' non-current-liability for long service leave ', 45), (' non-current - liability for long-service leave ', 44), ('non-current trade and other payables ', 43), (' derivative contracts - at fair value ', 42), (' abandonment and decommissioning costs ', 42), (' trade payables - related parties ', 42), (' electricity derivatives at fair value through oci ', 41), (' employee benefits - non current ', 41), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' total non-current employee benefits ', 34)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = provisions utilised during the year balance at the end of the year , res_fuzz_match = [(' provisions - non-current ', 57), ('non-current trade and other payables ', 50), (' provision for long service leave ', 48), (' provision for associate funding ', 45), (' total non-current employee benefits ', 45), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' non-current-liability for long service leave ', 42), (' electricity derivatives at fair value through oci ', 41), (' employee benefits - non current ', 41), (' employee benefits - payroll ', 41), (' abandonment and decommissioning costs ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' non-current - liability for long-service leave ', 35), (' make good provisions ', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = current warranty provision (a) , res_fuzz_match = [(' non-current-liability for long service leave ', 57), (' make good provisions ', 50), ('non-current trade and other payables ', 48), (' non-current - liability for long-service leave ', 48), (' trade payables - related parties ', 48), (' provisions - non-current ', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' contract liabilites - non-current ', 39), (' employee benefits - payroll ', 36), (' employee benefits - non current ', 35), (' abandonment and decommissioning costs ', 35), (' total non-current employee benefits ', 35), (' provision for long service leave ', 35), (' provision for associate funding ', 27), (' Deferred income', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = current employee benefits (b) , res_fuzz_match = [(' total non-current employee benefits ', 87), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), (' non-current-liability for long service leave ', 52), ('non-current trade and other payables ', 43), (' non-current - liability for long-service leave ', 43), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' trade payables - related parties ', 35), (' provision for long service leave ', 35), (' abandonment and decommissioning costs ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' Deferred income', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [(' non-current-liability for long service leave ', 69), ('non-current trade and other payables ', 54), (' employee benefits - non current ', 54), (' non-current - liability for long-service leave ', 54), (' employee benefits - payroll ', 46), (' total non-current employee benefits ', 46), (' electricity derivatives at fair value through oci ', 38), (' derivative contracts - at fair value ', 38), (' contract liabilites - non-current ', 38), (' trade payables - related parties ', 38), (' provisions - non-current ', 31), (' abandonment and decommissioning costs ', 31), (' provision for associate funding ', 31), (' Deferred income', 27), (' make good provisions ', 23), (' provision for long service leave ', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current employee benefits (b) , res_fuzz_match = [(' total non-current employee benefits ', 100), (' employee benefits - payroll ', 81), (' employee benefits - non current ', 65), ('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 52), (' non-current-liability for long service leave ', 52), (' electricity derivatives at fair value through oci ', 35), (' contract liabilites - non-current ', 35), (' abandonment and decommissioning costs ', 35), (' provision for long service leave ', 35), (' trade payables - related parties ', 30), (' provisions - non-current ', 29), (' provision for associate funding ', 27), (' Deferred income', 27), (' derivative contracts - at fair value ', 26), (' make good provisions ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision balance at the beginning of the year , res_fuzz_match = [(' provisions - non-current ', 64), (' provision for long service leave ', 52), ('non-current trade and other payables ', 50), (' make good provisions ', 50), (' employee benefits - payroll ', 45), (' provision for associate funding ', 45), (' total non-current employee benefits ', 45), (' non-current-liability for long service leave ', 45), (' electricity derivatives at fair value through oci ', 44), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' non-current - liability for long-service leave ', 41), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' contract liabilites - non-current ', 36), (' Deferred income', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = movement in warranty provision provisions recognised during the year , res_fuzz_match = [(' provisions - non-current ', 57), (' make good provisions ', 56), (' provision for associate funding ', 55), (' provision for long service leave ', 52), (' employee benefits - payroll ', 45), (' non-current-liability for long service leave ', 45), (' non-current - liability for long-service leave ', 44), ('non-current trade and other payables ', 43), (' derivative contracts - at fair value ', 42), (' abandonment and decommissioning costs ', 42), (' trade payables - related parties ', 42), (' electricity derivatives at fair value through oci ', 41), (' employee benefits - non current ', 41), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' total non-current employee benefits ', 34)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = provisions utilised during the year balance at the end of the year , res_fuzz_match = [(' provisions - non-current ', 57), ('non-current trade and other payables ', 50), (' provision for long service leave ', 48), (' provision for associate funding ', 45), (' total non-current employee benefits ', 45), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' non-current-liability for long service leave ', 42), (' electricity derivatives at fair value through oci ', 41), (' employee benefits - non current ', 41), (' employee benefits - payroll ', 41), (' abandonment and decommissioning costs ', 38), (' contract liabilites - non-current ', 36), (' Deferred income', 36), (' non-current - liability for long-service leave ', 35), (' make good provisions ', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables ', 0), (' electricity derivatives at fair value through oci ', 0), (' derivative contracts - at fair value ', 0), (' employee benefits - non current ', 0), (' non-current - liability for long-service leave ', 0), (' provisions - non-current ', 0), (' contract liabilites - non-current ', 0), (' employee benefits - payroll ', 0), (' abandonment and decommissioning costs ', 0), (' provision for associate funding ', 0), (' make good provisions ', 0), (' trade payables - related parties ', 0), (' total non-current employee benefits ', 0), (' non-current-liability for long service leave ', 0), (' provision for long service leave ', 0), (' Deferred income', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3, 8, 10], 'score': [87, 100, 87, 100], 'value': [308893.0, 163546.0, 228764.0, 193565.0], 'label': ['Current Employee benefits (b)', 'Non-current Employee benefits (b)', 'Current Employee benefits (b)', 'Non-current Employee benefits (b)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_liabilities
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' share capital ', 40), (' share capital ', 40), (' equity share capital ', 37), (' perpetual equity instrument ', 35), (' contributed equity ', 32), (' issued capital ', 32), (' contributed equity', 32), ('common stock ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 500000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['18'], 'line_item_value': [500000.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' share capital ', 40), (' share capital ', 40), (' equity share capital ', 37), (' perpetual equity instrument ', 35), (' contributed equity ', 32), (' issued capital ', 32), (' contributed equity', 32), ('common stock ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 500000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['18'], 'line_item_value': [500000.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none 500,000 fully paid ordinary shares (2022: 500,000) , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 48), (' Profits captialised on redemption of preference shares', 43), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = none 500,000 fully paid ordinary shares (2022: 500,000) , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 48), (' Profits captialised on redemption of preference shares', 43), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [500000.0, 500000.0], 'label': ['None 500,000 fully paid ordinary shares (2022: 500,000)', 'None 500,000 fully paid ordinary shares (2022: 500,000)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('Share premium', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('Share premium', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments ', ' movements in retained earnings']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' retained earnings ', 40), ('other equity ', 38), (' retained profits', 36), (' accumulated losses ', 29), (' reserves surplus ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 2407283.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [2407283.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' retained earnings ', 40), ('other equity ', 38), (' retained profits', 36), (' accumulated losses ', 29), (' reserves surplus ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 2777742.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [2777742.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' noncontrolling interest ', 36), (' non-controlling interest', 36), ('minority interest ', 35), (' minority interest ', 35), (' non controlling interest ', 34)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' noncontrolling interest ', 36), (' non-controlling interest', 36), ('minority interest ', 35), (' minority interest ', 35), (' non controlling interest ', 34)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest ', 33), (' non controlling interest ', 33), (' minority interest ', 33), (' noncontrolling interest ', 21), (' non-controlling interest', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('shareholders equity(a)', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('shareholders equity(a)', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity ', ' hedge reserve']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' hedge reserve ', 30), ('other reserves ', 29), (' reserves ', 27), (' foreign currency translation reserve ', 25), (' Foreign currency translation reserves', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve ', 16), (' Foreign currency translation reserves', 16), (' hedge reserve ', 12), ('other reserves ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve ', 24), (' Foreign currency translation reserves', 24), (' hedge reserve ', 19), (' reserves ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve ', 43), (' Foreign currency translation reserves', 43), (' hedge reserve ', 36), (' reserves ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' hedge reserve ', 30), ('other reserves ', 29), (' reserves ', 27), (' foreign currency translation reserve ', 25), (' Foreign currency translation reserves', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve ', 16), (' Foreign currency translation reserves', 16), (' hedge reserve ', 12), ('other reserves ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve ', 24), (' Foreign currency translation reserves', 24), (' hedge reserve ', 19), (' reserves ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve ', 43), (' Foreign currency translation reserves', 43), (' hedge reserve ', 36), (' reserves ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 219255.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [219255.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' Exploration and evaluation assets', 46), (' investment property ', 36), (' oil and gas properties ', 31), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29), (' property ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment ', 91), (' property plant equipment ', 91), (' plant and equipment ', 77), (' oil and gas properties ', 70), (' investment property ', 62), (' property ', 50), (' Exploration and evaluation assets', 48)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' Exploration and evaluation assets', 38), (' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27), (' property ', 26), (' oil and gas properties ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' Exploration and evaluation assets', 49), (' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33), (' oil and gas properties ', 29), (' property ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 235420.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [235420.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 73), (' Buildings ', 60), (' Facilities ', 60), (' Construction ', 56), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 50), (' Freehold land and buildings ', 48), (' Assets under construction ', 48), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' gross ', 40), (' investment property ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 73), (' Buildings ', 60), (' Facilities ', 60), (' Construction ', 56), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 50), (' Freehold land and buildings ', 48), (' Assets under construction ', 48), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' gross ', 40), (' investment property ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('cost ', 100), (' Capitalised pre stripping costs ', 46), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Mine infrastructure ', 33), (' Mining properties ', 31), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 30), (' Plant and equipment ', 27), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Subsea ', 17), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Mining properties ', 46), (' Other assets in progress ', 40), (' Facilities ', 40), (' Marine  Development properties ', 37), (' Capitalised pre stripping costs ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 53), (' under construction ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Mine infrastructure ', 44), (' Assets under construction ', 43), (' Capitalised pre stripping costs ', 42), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), (' Buildings ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Mining properties ', 46), (' Other assets in progress ', 40), (' Facilities ', 40), (' Marine  Development properties ', 37), (' Capitalised pre stripping costs ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Mining properties ', 69), (' investment property ', 67), (' Freehold land and buildings ', 57), (' Marine  Development properties ', 55), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Capitalised pre stripping costs ', 46), (' Freehold land ', 46), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Stripping WIP ', 44), (' Leasehold buildings ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 73), (' Buildings ', 60), (' Facilities ', 60), (' Construction ', 56), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 50), (' Freehold land and buildings ', 48), (' Assets under construction ', 48), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' gross ', 40), (' investment property ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 73), (' Buildings ', 60), (' Facilities ', 60), (' Construction ', 56), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 50), (' Freehold land and buildings ', 48), (' Assets under construction ', 48), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' gross ', 40), (' investment property ', 40), (' Leasehold buildings ', 40), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 31), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('cost ', 100), (' Capitalised pre stripping costs ', 46), (' Construction ', 44), (' Stripping WIP ', 44), (' Marine  Development properties ', 41), (' gross ', 40), (' Other assets in progress ', 40), (' land and improvement ', 40), (' under construction ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Assets under construction ', 38), (' Freehold land ', 38), (' Workshop tooling ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Mine infrastructure ', 33), (' Mining properties ', 31), (' Building & mine infrastructure ', 30), (' Fishing vessels & equipment ', 30), (' Plant and equipment ', 27), (' Leasehold buildings ', 27), (' Freehold land and buildings ', 26), (' Subsea ', 17), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Mining properties ', 46), (' Other assets in progress ', 40), (' Facilities ', 40), (' Marine  Development properties ', 37), (' Capitalised pre stripping costs ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 53), (' under construction ', 53), (' land and improvement ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Mine infrastructure ', 44), (' Assets under construction ', 43), (' Capitalised pre stripping costs ', 42), (' gross ', 40), (' Other assets in progress ', 40), (' Facilities ', 40), (' Freehold land and buildings ', 39), (' Building & mine infrastructure ', 38), (' Asset Retirement Obligation ', 35), (' investment property ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 32), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), (' Buildings ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [(' Buildings ', 60), (' Mining properties ', 46), (' Other assets in progress ', 40), (' Facilities ', 40), (' Marine  Development properties ', 37), (' Capitalised pre stripping costs ', 35), (' investment property ', 33), (' Plant and equipment ', 33), (' Construction ', 33), (' Mine infrastructure ', 33), (' land and improvement ', 33), (' under construction ', 33), (' Subsea ', 33), (' Freehold land ', 31), (' Freehold land and buildings ', 30), (' Building & mine infrastructure ', 30), (' Asset Retirement Obligation ', 29), (' Assets under construction ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('cost ', 25), (' Pipeline Asset ', 23), (' Workshop tooling ', 23), (' Stripping WIP ', 22), (' gross ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('cost ', 50), (' Workshop tooling ', 46), (' Construction ', 44), (' Facilities ', 40), (' Asset Retirement Obligation ', 38), (' Assets under construction ', 38), (' Capitalised pre stripping costs ', 38), (' under construction ', 38), (' investment property ', 31), (' Freehold land and buildings ', 31), (' Mine infrastructure ', 31), (' Other assets in progress ', 31), (' land and improvement ', 31), (' Building & mine infrastructure ', 31), (' Mining properties ', 31), (' Marine  Development properties ', 31), (' Plant and equipment ', 23), (' Freehold land ', 23), (' Pipeline Asset ', 23), (' Leasehold buildings ', 23), (' Stripping WIP ', 22), (' gross ', 20), (' Buildings ', 20), (' Subsea ', 17), (' Fishing vessels & equipment ', 15), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [(' Plant and equipment ', 100), (' land and improvement ', 69), (' Mining properties ', 69), (' investment property ', 67), (' Freehold land and buildings ', 57), (' Marine  Development properties ', 55), (' Pipeline Asset ', 54), (' Fishing vessels & equipment ', 53), ('cost ', 50), (' Asset Retirement Obligation ', 47), (' Capitalised pre stripping costs ', 46), (' Freehold land ', 46), (' Workshop tooling ', 46), (' Other assets in progress ', 45), (' Construction ', 44), (' Stripping WIP ', 44), (' Leasehold buildings ', 41), (' under construction ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Mine infrastructure ', 33), (' Assets under construction ', 33), (' Building & mine infrastructure ', 25), (' gross ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('', 100), ('cost ', 0), (' gross ', 0), (' investment property ', 0), (' Freehold land and buildings ', 0), (' Plant and equipment ', 0), (' Asset Retirement Obligation ', 0), (' Construction ', 0), (' Mine infrastructure ', 0), (' Assets under construction ', 0), (' Capitalised pre stripping costs ', 0), (' Other assets in progress ', 0), (' land and improvement ', 0), (' Stripping WIP ', 0), (' Building & mine infrastructure ', 0), (' Mining properties ', 0), (' under construction ', 0), (' Freehold land ', 0), (' Buildings ', 0), (' Subsea ', 0), (' Marine  Development properties ', 0), (' Pipeline Asset ', 0), (' Facilities ', 0), (' Workshop tooling ', 0), (' Fishing vessels & equipment ', 0), (' Leasehold buildings ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 15, 16, 16, 17, 18, 19, 19], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [320942.0, 320942.0, -296342.0, -296342.0, 24600.0, 339359.0, 339359.0, -131998.0, 207361.0, 126298.0, 126298.0, -122839.0, 3459.0, 235420.0, 235420.0, 312117.0, 312117.0, -292859.0, -292859.0, 19258.0, 340843.0, 340843.0, -142250.0, 198593.0, 123510.0, 123510.0, -122106.0, 1404.0, 219255.0, 219255.0], 'label': ['Non-current Machinery and equipment - at cost Accumulated depreciation', '$', 'Non-current Machinery and equipment - at cost Accumulated depreciation', '$', '$', 'Non-current Motor vehicles at cost', '$', '$', '$', 'Non-current Furniture and fittings at cost', '$', '$', '$', 'Non-current Total property, plant and equipment', '$', 'Non-current Machinery and equipment - at cost Accumulated depreciation', '$', 'Non-current Machinery and equipment - at cost Accumulated depreciation', '$', '$', 'Non-current Motor vehicles at cost', '$', '$', '$', 'Non-current Furniture and fittings at cost', '$', '$', '$', 'Non-current Total property, plant and equipment', '$'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'rows', 'columns']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('net value', 38), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31), ('net value', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current machinery and equipment - at cost accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 50), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current motor vehicles at cost , res_fuzz_match = [('net value', 38), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current furniture and fittings at cost , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31), ('net value', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current accumulated depreciation , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 78), ('net value', 38), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total , res_fuzz_match = [('net value', 40), ('net book value', 40), ('depreciatio', 27), ('accumulated depreciation', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = non-current total property, plant and equipment , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0), ('net book value', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 7, 10, 11, 14, 17], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [320942.0, -296342.0, -131998.0, -122839.0, 312117.0, -292859.0, -142250.0, -122106.0], 'label': ['Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Machinery and equipment - at cost Accumulated depreciation', 'Non-current Accumulated depreciation', 'Non-current Accumulated depreciation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 73), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 51), (' Assets under construction ', 50), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Construction ', 44), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 23), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 73), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 51), (' Assets under construction ', 50), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Construction ', 44), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 23), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 73), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 51), (' Assets under construction ', 50), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Construction ', 44), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 23), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 73), (' Facilities ', 60), (' land and improvement ', 53), (' under construction ', 53), (' Capitalised pre stripping costs ', 51), (' Assets under construction ', 50), (' Fishing vessels & equipment ', 47), (' Mining properties ', 46), (' Pipeline Asset ', 46), (' Other assets in progress ', 45), (' Marine  Development properties ', 45), (' Construction ', 44), (' gross ', 40), (' investment property ', 40), (' Buildings ', 40), (' Leasehold buildings ', 40), (' Freehold land and buildings ', 39), (' Mine infrastructure ', 39), (' Building & mine infrastructure ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 36), (' Stripping WIP ', 33), (' Subsea ', 33), (' Workshop tooling ', 23), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('cost ', 100), (' Assets under construction ', 47), (' Capitalised pre stripping costs ', 47), (' Marine  Development properties ', 47), (' Construction ', 44), (' Stripping WIP ', 44), (' Other assets in progress ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 36), (' Asset Retirement Obligation ', 35), (' Mining properties ', 31), (' Fishing vessels & equipment ', 30), (' Mine infrastructure ', 29), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 28), (' Plant and equipment ', 27), (' Freehold land and buildings ', 24), (' land and improvement ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('cost ', 100), (' Assets under construction ', 47), (' Capitalised pre stripping costs ', 47), (' Marine  Development properties ', 47), (' Construction ', 44), (' Stripping WIP ', 44), (' Other assets in progress ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 36), (' Asset Retirement Obligation ', 35), (' Mining properties ', 31), (' Fishing vessels & equipment ', 30), (' Mine infrastructure ', 29), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 28), (' Plant and equipment ', 27), (' Freehold land and buildings ', 24), (' land and improvement ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('cost ', 100), (' Assets under construction ', 47), (' Capitalised pre stripping costs ', 47), (' Marine  Development properties ', 47), (' Construction ', 44), (' Stripping WIP ', 44), (' Other assets in progress ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 36), (' Asset Retirement Obligation ', 35), (' Mining properties ', 31), (' Fishing vessels & equipment ', 30), (' Mine infrastructure ', 29), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 28), (' Plant and equipment ', 27), (' Freehold land and buildings ', 24), (' land and improvement ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('cost ', 100), (' Assets under construction ', 47), (' Capitalised pre stripping costs ', 47), (' Marine  Development properties ', 47), (' Construction ', 44), (' Stripping WIP ', 44), (' Other assets in progress ', 41), (' gross ', 40), (' under construction ', 40), (' Buildings ', 40), (' Pipeline Asset ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Workshop tooling ', 38), (' investment property ', 36), (' Asset Retirement Obligation ', 35), (' Mining properties ', 31), (' Fishing vessels & equipment ', 30), (' Mine infrastructure ', 29), (' Building & mine infrastructure ', 29), (' Leasehold buildings ', 28), (' Plant and equipment ', 27), (' Freehold land and buildings ', 24), (' land and improvement ', 20), (' Subsea ', 17), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 53), (' under construction ', 53), (' Assets under construction ', 49), (' Capitalised pre stripping costs ', 48), (' land and improvement ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Freehold land and buildings ', 43), (' Other assets in progress ', 42), (' gross ', 40), (' Mine infrastructure ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' investment property ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 53), (' under construction ', 53), (' Assets under construction ', 49), (' Capitalised pre stripping costs ', 48), (' land and improvement ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Freehold land and buildings ', 43), (' Other assets in progress ', 42), (' gross ', 40), (' Mine infrastructure ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' investment property ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 53), (' under construction ', 53), (' Assets under construction ', 49), (' Capitalised pre stripping costs ', 48), (' land and improvement ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Freehold land and buildings ', 43), (' Other assets in progress ', 42), (' gross ', 40), (' Mine infrastructure ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' investment property ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('cost ', 100), (' Plant and equipment ', 53), (' under construction ', 53), (' Assets under construction ', 49), (' Capitalised pre stripping costs ', 48), (' land and improvement ', 47), (' Freehold land ', 46), (' Construction ', 44), (' Freehold land and buildings ', 43), (' Other assets in progress ', 42), (' gross ', 40), (' Mine infrastructure ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Building & mine infrastructure ', 38), (' investment property ', 33), (' Stripping WIP ', 33), (' Subsea ', 33), (' Marine  Development properties ', 33), (' Mining properties ', 31), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Fishing vessels & equipment ', 29), (' Leasehold buildings ', 27), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('cost ', 100), (' Facilities ', 60), (' Freehold land and buildings ', 53), (' Subsea ', 50), (' land and improvement ', 48), (' Construction ', 44), (' Buildings ', 44), (' Capitalised pre stripping costs ', 41), (' Other assets in progress ', 41), (' gross ', 40), (' investment property ', 40), (' Plant and equipment ', 40), (' Mining properties ', 38), (' Freehold land ', 38), (' Asset Retirement Obligation ', 35), (' Assets under construction ', 35), (' Marine  Development properties ', 35), (' Leasehold buildings ', 34), (' Stripping WIP ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Building & mine infrastructure ', 29), (' Fishing vessels & equipment ', 29), (' under construction ', 27), (' Mine infrastructure ', 24), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' under construction ', 53), (' Assets under construction ', 50), (' Stripping WIP ', 47), (' Construction ', 44), (' Freehold land ', 44), (' gross ', 40), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Capitalised pre stripping costs ', 40), (' land and improvement ', 40), (' Facilities ', 40), (' Workshop tooling ', 40), (' Subsea ', 33), (' Mine infrastructure ', 30), (' Other assets in progress ', 30), (' Building & mine infrastructure ', 30), (' Mining properties ', 30), (' Marine  Development properties ', 30), (' Pipeline Asset ', 30), (' Fishing vessels & equipment ', 30), (' Leasehold buildings ', 30), (' Buildings ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' Stripping WIP ', 56), (' Capitalised pre stripping costs ', 55), (' investment property ', 45), (' Plant and equipment ', 45), (' Other assets in progress ', 45), (' land and improvement ', 45), (' Construction ', 44), (' gross ', 40), (' Asset Retirement Obligation ', 36), (' Assets under construction ', 36), (' under construction ', 36), (' Marine  Development properties ', 36), (' Workshop tooling ', 36), (' Fishing vessels & equipment ', 36), (' Subsea ', 33), (' Freehold land and buildings ', 27), (' Mine infrastructure ', 27), (' Building & mine infrastructure ', 27), (' Mining properties ', 27), (' Freehold land ', 27), (' Pipeline Asset ', 27), (' Leasehold buildings ', 27), (' Buildings ', 20), (' Facilities ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('cost ', 100), (' Subsea ', 50), (' Construction ', 44), (' Freehold land and buildings ', 41), (' land and improvement ', 41), (' gross ', 40), (' Buildings ', 40), (' Facilities ', 40), (' Freehold land ', 38), (' Assets under construction ', 35), (' Capitalised pre stripping costs ', 35), (' Other assets in progress ', 35), (' Building & mine infrastructure ', 35), (' Plant and equipment ', 33), (' Stripping WIP ', 33), (' under construction ', 33), (' Pipeline Asset ', 31), (' Workshop tooling ', 31), (' Asset Retirement Obligation ', 29), (' Mine infrastructure ', 29), (' investment property ', 27), (' Leasehold buildings ', 27), (' Marine  Development properties ', 24), (' Fishing vessels & equipment ', 24), (' Mining properties ', 23), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [(' Capitalised pre stripping costs ', 60), (' Workshop tooling ', 60), ('cost ', 50), (' investment property ', 40), (' Freehold land and buildings ', 40), (' Plant and equipment ', 40), (' Asset Retirement Obligation ', 40), (' Construction ', 40), (' Mine infrastructure ', 40), (' Assets under construction ', 40), (' Building & mine infrastructure ', 40), (' under construction ', 40), (' Freehold land ', 40), (' Facilities ', 40), (' Leasehold buildings ', 40), (' gross ', 20), (' Other assets in progress ', 20), (' land and improvement ', 20), (' Stripping WIP ', 20), (' Mining properties ', 20), (' Buildings ', 20), (' Subsea ', 20), (' Marine  Development properties ', 20), (' Pipeline Asset ', 20), (' Fishing vessels & equipment ', 20), ('', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 14, 15], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [312118.0, 312118.0, 15486.0, 15486.0, -6662.0, -6662.0, 320942.0, 320942.0, 340842.0, 340842.0, 95273.0, 95273.0, -96756.0, -96756.0, 339359.0, 339359.0, 123510.0, 123510.0, 2788.0, 2788.0, 0.0, 0.0, 126298.0, 126298.0, 776470.0, 113547.0, -103418.0, 786599.0], 'label': ['Cost Balance at 1 April 2022', 'Machinery and equipment at cost $', 'Cost Additions', 'Machinery and equipment at cost $', 'Cost Disposals', 'Machinery and equipment at cost $', 'Cost Balance at 31 March 2023', 'Machinery and equipment at cost $', 'Cost Balance at 1 April 2022', 'Motor vehicles at cost $', 'Cost Additions', 'Motor vehicles at cost $', 'Cost Disposals', 'Motor vehicles at cost $', 'Cost Balance at 31 March 2023', 'Motor vehicles at cost $', 'Cost Balance at 1 April 2022', 'Furniture and fittings at cost $', 'Cost Additions', 'Furniture and fittings at cost $', 'Cost Disposals', 'Furniture and fittings at cost $', 'Cost Balance at 31 March 2023', 'Furniture and fittings at cost $', 'Cost Balance at 1 April 2022', 'Cost Additions', 'Cost Disposals', 'Cost Balance at 31 March 2023'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = machinery and equipment at cost $ , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('net value', 38), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('net value', 38), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('net value', 38), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = motor vehicles at cost $ , res_fuzz_match = [('net value', 38), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = furniture and fittings at cost $ , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 1 april 2022 , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = cost balance at 31 march 2023 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = total $ , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', ''] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers ', ' Less allowance for impairment']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' trade receivables ', 42), (' government subsidies receivable ', 42), (' trade and other receivables', 42), (' unbilled ', 40), (' receivable ', 33), ('account receivables ', 30), (' billed ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' trade and other receivables', 47), ('account receivables ', 44), (' trade receivables ', 42), (' government subsidies receivable ', 42), (' unbilled ', 40), (' receivable ', 33), (' billed ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 862567.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['7'], 'line_item_value': [862567.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables ', 46), (' unbilled ', 40), (' government subsidies receivable ', 38), (' trade and other receivables', 38), (' trade receivables ', 35), (' receivable ', 33), (' billed ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' unbilled ', 60), (' trade and other receivables', 54), ('account receivables ', 50), (' trade receivables ', 50), (' receivable ', 50), (' billed ', 50), (' government subsidies receivable ', 34)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' trade receivables ', 42), (' government subsidies receivable ', 42), (' trade and other receivables', 42), (' unbilled ', 40), (' receivable ', 33), ('account receivables ', 30), (' billed ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other current assets , res_fuzz_match = [(' trade and other receivables', 47), ('account receivables ', 44), (' trade receivables ', 42), (' government subsidies receivable ', 42), (' unbilled ', 40), (' receivable ', 33), (' billed ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1586457.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['7'], 'line_item_value': [1586457.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities ', 39), (' Revenue from rendering of services', 39), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Rendering of services ', 27), ('revenue from operations ', 24), (' Revenue from rendering of services', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' Revenue from rendering of services', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities ', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities ', 33), (' Rendering of services ', 33), (' net sales ', 32), (' Revenue from rendering of services', 28), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' from trading business ', 40), (' transmission and distribution business ', 37), (' Rendering of services ', 36), (' net sales ', 35), (' revenue from continuing activities ', 35), (' Sale of coal ', 33), ('revenue from operations ', 32), (' Sales revenue ', 31), (' revenue from contracts with customers ', 30), (' Revenue from rendering of services', 25), (' sale of products ', 22), (' Revenue ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('revenue from operations ', 42), (' net sales ', 40), (' Revenue from rendering of services', 38), (' revenue from continuing activities ', 34), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' Sales revenue ', 30), (' Rendering of services ', 29), (' sale of products ', 24), (' transmission and distribution business ', 24), (' Revenue ', 21), (' Sale of coal ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities ', 44), (' Revenue from rendering of services', 39), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' Rendering of services ', 28), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Revenue from rendering of services', 26), (' transmission and distribution business ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities ', 33), (' net sales ', 32), (' from trading business ', 31), (' Revenue from rendering of services', 28), (' transmission and distribution business ', 26), (' Rendering of services ', 25), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' Rendering of services ', 40), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' Revenue from rendering of services', 32), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities ', 22), (' Sale of coal ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' from trading business ', 41), (' Revenue from rendering of services', 37), ('revenue from operations ', 36), (' revenue from contracts with customers ', 36), (' transmission and distribution business ', 35), (' Sales revenue ', 30), (' revenue from continuing activities ', 30), (' sale of products ', 29), (' Rendering of services ', 29), (' Revenue ', 23), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' Rendering of services ', 34), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Revenue from rendering of services', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' revenue from continuing activities ', 39), (' revenue from contracts with customers ', 38), (' Revenue from rendering of services', 36), (' from trading business ', 35), ('revenue from operations ', 34), (' transmission and distribution business ', 31), (' sale of products ', 26), (' Sales revenue ', 26), (' Rendering of services ', 25), (' net sales ', 20), (' Sale of coal ', 20), (' Revenue ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' revenue from contracts with customers ', 40), (' from trading business ', 38), (' Revenue from rendering of services', 38), ('revenue from operations ', 37), (' revenue from continuing activities ', 35), (' sale of products ', 29), (' Rendering of services ', 29), (' transmission and distribution business ', 28), (' Sales revenue ', 26), (' net sales ', 24), (' Sale of coal ', 19), (' Revenue ', 16)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities ', 37), (' Revenue from rendering of services', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' Rendering of services ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 9518670.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [9518670.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities ', 39), (' Revenue from rendering of services', 39), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Rendering of services ', 27), ('revenue from operations ', 24), (' Revenue from rendering of services', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' Revenue from rendering of services', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities ', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities ', 33), (' Rendering of services ', 33), (' net sales ', 32), (' Revenue from rendering of services', 28), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' from trading business ', 40), (' transmission and distribution business ', 37), (' Rendering of services ', 36), (' net sales ', 35), (' revenue from continuing activities ', 35), (' Sale of coal ', 33), ('revenue from operations ', 32), (' Sales revenue ', 31), (' revenue from contracts with customers ', 30), (' Revenue from rendering of services', 25), (' sale of products ', 22), (' Revenue ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('revenue from operations ', 42), (' net sales ', 40), (' Revenue from rendering of services', 38), (' revenue from continuing activities ', 34), (' revenue from contracts with customers ', 33), (' from trading business ', 32), (' Sales revenue ', 30), (' Rendering of services ', 29), (' sale of products ', 24), (' transmission and distribution business ', 24), (' Revenue ', 21), (' Sale of coal ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities ', 44), (' Revenue from rendering of services', 39), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' Rendering of services ', 28), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Revenue from rendering of services', 26), (' transmission and distribution business ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities ', 33), (' net sales ', 32), (' from trading business ', 31), (' Revenue from rendering of services', 28), (' transmission and distribution business ', 26), (' Rendering of services ', 25), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' Rendering of services ', 40), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' Revenue from rendering of services', 32), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities ', 22), (' Sale of coal ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' from trading business ', 41), (' Revenue from rendering of services', 37), ('revenue from operations ', 36), (' revenue from contracts with customers ', 36), (' transmission and distribution business ', 35), (' Sales revenue ', 30), (' revenue from continuing activities ', 30), (' sale of products ', 29), (' Rendering of services ', 29), (' Revenue ', 23), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' Rendering of services ', 34), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Revenue from rendering of services', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' revenue from continuing activities ', 39), (' revenue from contracts with customers ', 38), (' Revenue from rendering of services', 36), (' from trading business ', 35), ('revenue from operations ', 34), (' transmission and distribution business ', 31), (' sale of products ', 26), (' Sales revenue ', 26), (' Rendering of services ', 25), (' net sales ', 20), (' Sale of coal ', 20), (' Revenue ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' revenue from contracts with customers ', 40), (' from trading business ', 38), (' Revenue from rendering of services', 38), ('revenue from operations ', 37), (' revenue from continuing activities ', 35), (' sale of products ', 29), (' Rendering of services ', 29), (' transmission and distribution business ', 28), (' Sales revenue ', 26), (' net sales ', 24), (' Sale of coal ', 19), (' Revenue ', 16)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities ', 37), (' Revenue from rendering of services', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' Rendering of services ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 21165548.0, 'line_item_label': ['Revenue'], 'note_numbers': ['4'], 'line_item_value': [21165548.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = revenue from contracts with customers sale of goods , res_fuzz_match = [('Sale of goods ', 100), (' revenue form contracts with customers ', 97), (' revenue from continuing activities ', 80), (' Sale of goods - Cars ', 69), (' Sale of goods - Marine ', 60), (' Gas transportation income ', 50), (' Sale of goods - Motorcycles ', 47), (' Sale of goods - Spareparts ', 47), (' Feed gas income ', 46), (' contribution from joint venture', 44), (' Condensate ', 43), (' Goods sold to customer from warehouse ', 43), (' Total Revenue ', 42), (' Goods sold to customer direct from supplier ', 41), (' Domgas ', 40), (' hedge loss / gain ', 36), (' LNG ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = revenue from contracts with customers rendering of services , res_fuzz_match = [(' revenue form contracts with customers ', 97), (' revenue from continuing activities ', 80), (' Condensate ', 57), (' contribution from joint venture', 52), (' Gas transportation income ', 50), (' Total Revenue ', 50), (' Goods sold to customer direct from supplier ', 49), (' Feed gas income ', 46), (' Goods sold to customer from warehouse ', 43), (' Sale of goods - Motorcycles ', 42), (' Domgas ', 40), (' Sale of goods - Cars ', 38), (' Sale of goods - Spareparts ', 37), (' hedge loss / gain ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' Sale of goods - Marine ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = revenue from contracts with customers total , res_fuzz_match = [(' revenue form contracts with customers ', 97), (' revenue from continuing activities ', 80), (' Gas transportation income ', 50), (' contribution from joint venture', 49), (' Feed gas income ', 46), (' Condensate ', 43), (' Goods sold to customer from warehouse ', 43), (' Sale of goods - Motorcycles ', 42), (' Total Revenue ', 42), (' Domgas ', 40), (' Goods sold to customer direct from supplier ', 39), (' Sale of goods - Cars ', 38), (' Sale of goods - Spareparts ', 37), (' hedge loss / gain ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' Sale of goods - Marine ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition products transferred at a point of time services transferred over time , res_fuzz_match = [(' Total Revenue ', 67), (' Gas transportation income ', 61), (' revenue from continuing activities ', 60), (' revenue form contracts with customers ', 56), (' contribution from joint venture', 52), (' Feed gas income ', 46), ('Sale of goods ', 44), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Goods sold to customer direct from supplier ', 41), (' Sale of goods - Marine ', 40), (' Goods sold to customer from warehouse ', 40), (' Sale of goods - Cars ', 38), (' Sale of goods - Spareparts ', 37), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32), (' Domgas ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition products transferred at a point of time services transferred over time , res_fuzz_match = [(' Total Revenue ', 67), (' Gas transportation income ', 61), (' revenue from continuing activities ', 60), (' revenue form contracts with customers ', 56), (' contribution from joint venture', 52), (' Feed gas income ', 46), ('Sale of goods ', 44), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Goods sold to customer direct from supplier ', 41), (' Sale of goods - Marine ', 40), (' Goods sold to customer from warehouse ', 40), (' Sale of goods - Cars ', 38), (' Sale of goods - Spareparts ', 37), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32), (' Domgas ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 61), (' revenue form contracts with customers ', 54), (' Condensate ', 43), (' Domgas ', 40), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' contribution from joint venture', 38), (' Sale of goods - Motorcycles ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Goods sold to customer from warehouse ', 31), (' Sale of goods - Marine ', 27), ('Sale of goods ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = revenue from contracts with customers sale of goods , res_fuzz_match = [('Sale of goods ', 100), (' revenue form contracts with customers ', 97), (' revenue from continuing activities ', 80), (' Sale of goods - Cars ', 69), (' Sale of goods - Marine ', 60), (' Gas transportation income ', 50), (' Sale of goods - Motorcycles ', 47), (' Sale of goods - Spareparts ', 47), (' Feed gas income ', 46), (' contribution from joint venture', 44), (' Condensate ', 43), (' Goods sold to customer from warehouse ', 43), (' Total Revenue ', 42), (' Goods sold to customer direct from supplier ', 41), (' Domgas ', 40), (' hedge loss / gain ', 36), (' LNG ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = revenue from contracts with customers rendering of services , res_fuzz_match = [(' revenue form contracts with customers ', 97), (' revenue from continuing activities ', 80), (' Condensate ', 57), (' contribution from joint venture', 52), (' Gas transportation income ', 50), (' Total Revenue ', 50), (' Goods sold to customer direct from supplier ', 49), (' Feed gas income ', 46), (' Goods sold to customer from warehouse ', 43), (' Sale of goods - Motorcycles ', 42), (' Domgas ', 40), (' Sale of goods - Cars ', 38), (' Sale of goods - Spareparts ', 37), (' hedge loss / gain ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' Sale of goods - Marine ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = revenue from contracts with customers total , res_fuzz_match = [(' revenue form contracts with customers ', 97), (' revenue from continuing activities ', 80), (' Gas transportation income ', 50), (' contribution from joint venture', 49), (' Feed gas income ', 46), (' Condensate ', 43), (' Goods sold to customer from warehouse ', 43), (' Sale of goods - Motorcycles ', 42), (' Total Revenue ', 42), (' Domgas ', 40), (' Goods sold to customer direct from supplier ', 39), (' Sale of goods - Cars ', 38), (' Sale of goods - Spareparts ', 37), (' hedge loss / gain ', 36), ('Sale of goods ', 33), (' LNG ', 33), (' Sale of goods - Marine ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition products transferred at a point of time services transferred over time , res_fuzz_match = [(' Total Revenue ', 67), (' Gas transportation income ', 61), (' revenue from continuing activities ', 60), (' revenue form contracts with customers ', 56), (' contribution from joint venture', 52), (' Feed gas income ', 46), ('Sale of goods ', 44), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Goods sold to customer direct from supplier ', 41), (' Sale of goods - Marine ', 40), (' Goods sold to customer from warehouse ', 40), (' Sale of goods - Cars ', 38), (' Sale of goods - Spareparts ', 37), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32), (' Domgas ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition products transferred at a point of time services transferred over time , res_fuzz_match = [(' Total Revenue ', 67), (' Gas transportation income ', 61), (' revenue from continuing activities ', 60), (' revenue form contracts with customers ', 56), (' contribution from joint venture', 52), (' Feed gas income ', 46), ('Sale of goods ', 44), (' Condensate ', 43), (' hedge loss / gain ', 43), (' Goods sold to customer direct from supplier ', 41), (' Sale of goods - Marine ', 40), (' Goods sold to customer from warehouse ', 40), (' Sale of goods - Cars ', 38), (' Sale of goods - Spareparts ', 37), (' LNG ', 33), (' Sale of goods - Motorcycles ', 32), (' Domgas ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows = timing of revenue recognition total , res_fuzz_match = [(' Total Revenue ', 67), (' revenue from continuing activities ', 61), (' revenue form contracts with customers ', 54), (' Condensate ', 43), (' Domgas ', 40), (' Feed gas income ', 38), (' Goods sold to customer direct from supplier ', 38), (' contribution from joint venture', 38), (' Sale of goods - Motorcycles ', 37), (' hedge loss / gain ', 36), (' LNG ', 33), (' Gas transportation income ', 33), (' Sale of goods - Spareparts ', 32), (' Sale of goods - Cars ', 31), (' Goods sold to customer from warehouse ', 31), (' Sale of goods - Marine ', 27), ('Sale of goods ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Sale of goods ', 0), (' LNG ', 0), (' Condensate ', 0), (' Domgas ', 0), (' Feed gas income ', 0), (' Gas transportation income ', 0), (' Sale of goods - Cars ', 0), (' Sale of goods - Motorcycles ', 0), (' Sale of goods - Marine ', 0), (' Sale of goods - Spareparts ', 0), (' Total Revenue ', 0), (' Goods sold to customer from warehouse ', 0), (' Goods sold to customer direct from supplier ', 0), (' revenue from continuing activities ', 0), (' revenue form contracts with customers ', 0), (' hedge loss / gain ', 0), (' contribution from joint venture', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 6, 7, 8], 'score': [100, 97, 97, 100, 97, 97], 'value': [19456273.0, 1709275.0, 21165548.0, 8220825.0, 1297845.0, 9518670.0], 'label': ['Revenue from contracts with customers Sale of goods', 'Revenue from contracts with customers Rendering of services', 'Revenue from contracts with customers Total', 'Revenue from contracts with customers Sale of goods', 'Revenue from contracts with customers Rendering of services', 'Revenue from contracts with customers Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory ', 29), (' Cost of rendering services', 25), (' Cost of inventory sold', 24), (' Premises cost ', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Premises cost ', 60), (' Cost of product sold', 54), (' Cost of rendering services', 52), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory ', 25), ('expense', 13), ('expenditure', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of rendering services', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory ', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), (' Premises cost ', 36), ('total expenses', 35), (' Cost of rendering services', 34), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory ', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' Cost of goods and services sold', 45), (' cost of coal sold', 41), ('total expenses', 37), ('purchase of stock-in-trade', 35), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' change in inventory ', 33), (' Cost of product sold', 31), (' Premises cost ', 31), (' Cost of rendering services', 30), (' Cost of inventory sold', 29), (' cost of goods sold ', 28), ('total expenditure', 26), ('expenditure', 24), ('expense', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Premises cost ', 30), (' Cost of rendering services', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold ', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), (' change in inventory ', 22), ('purchase of stock-in-trade', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), (' Premises cost ', 33), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory ', 29), (' Cost of product sold', 27), (' Cost of rendering services', 26), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Premises cost ', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory ', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of rendering services', 33), (' Cost of goods and services sold', 32), (' change in inventory ', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' Premises cost ', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 44), (' Cost of inventory sold', 38), ('expenditure', 36), (' Cost of product sold', 35), ('expense', 34), (' change in inventory ', 32), (' Cost of goods and services sold', 30), (' Premises cost ', 30), (' Cost of rendering services', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), (' Personnel costs', 28), (' cost of goods sold ', 28), ('cost of sales', 26), ('Cost of sales', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 29), (' Cost of rendering services', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24), (' Premises cost ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('total expenditure', 38), ('total expenses', 37), ('expenditure', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 30), (' Personnel costs', 29), (' change in inventory ', 28), (' Cost of product sold', 27), (' Cost of rendering services', 27), ('purchase of stock-in-trade', 26), ('expense', 25), ('cost of sales', 24), ('Cost of sales', 24), (' Premises cost ', 23), (' cost of coal sold', 21), (' cost of goods sold ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Cost of rendering services', 36), ('purchase of stock-in-trade', 35), (' Cost of inventory sold', 35), ('total expenditure', 34), (' change in inventory ', 34), ('total expenses', 33), (' Personnel costs', 32), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), (' cost of coal sold', 28), (' cost of goods sold ', 28), ('cost of sales', 27), ('Cost of sales', 27), (' Premises cost ', 26), ('expenditure', 23), ('expense', 16)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory ', 40), (' Cost of product sold', 38), (' Cost of rendering services', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), (' Premises cost ', 26), ('expense', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -6558222.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-6558222.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory ', 29), (' Cost of rendering services', 25), (' Cost of inventory sold', 24), (' Premises cost ', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Premises cost ', 60), (' Cost of product sold', 54), (' Cost of rendering services', 52), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory ', 25), ('expense', 13), ('expenditure', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of rendering services', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory ', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), (' Premises cost ', 36), ('total expenses', 35), (' Cost of rendering services', 34), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory ', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' Cost of goods and services sold', 45), (' cost of coal sold', 41), ('total expenses', 37), ('purchase of stock-in-trade', 35), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' change in inventory ', 33), (' Cost of product sold', 31), (' Premises cost ', 31), (' Cost of rendering services', 30), (' Cost of inventory sold', 29), (' cost of goods sold ', 28), ('total expenditure', 26), ('expenditure', 24), ('expense', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Premises cost ', 30), (' Cost of rendering services', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold ', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), (' change in inventory ', 22), ('purchase of stock-in-trade', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), (' Premises cost ', 33), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory ', 29), (' Cost of product sold', 27), (' Cost of rendering services', 26), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Premises cost ', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory ', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of rendering services', 33), (' Cost of goods and services sold', 32), (' change in inventory ', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' Premises cost ', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 44), (' Cost of inventory sold', 38), ('expenditure', 36), (' Cost of product sold', 35), ('expense', 34), (' change in inventory ', 32), (' Cost of goods and services sold', 30), (' Premises cost ', 30), (' Cost of rendering services', 30), ('purchase of stock-in-trade', 29), (' cost of coal sold', 28), (' Personnel costs', 28), (' cost of goods sold ', 28), ('cost of sales', 26), ('Cost of sales', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 29), (' Cost of rendering services', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24), (' Premises cost ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('total expenditure', 38), ('total expenses', 37), ('expenditure', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 30), (' Personnel costs', 29), (' change in inventory ', 28), (' Cost of product sold', 27), (' Cost of rendering services', 27), ('purchase of stock-in-trade', 26), ('expense', 25), ('cost of sales', 24), ('Cost of sales', 24), (' Premises cost ', 23), (' cost of coal sold', 21), (' cost of goods sold ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Cost of rendering services', 36), ('purchase of stock-in-trade', 35), (' Cost of inventory sold', 35), ('total expenditure', 34), (' change in inventory ', 34), ('total expenses', 33), (' Personnel costs', 32), (' Cost of product sold', 30), (' Cost of goods and services sold', 29), (' cost of coal sold', 28), (' cost of goods sold ', 28), ('cost of sales', 27), ('Cost of sales', 27), (' Premises cost ', 26), ('expenditure', 23), ('expense', 16)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory ', 40), (' Cost of product sold', 38), (' Cost of rendering services', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), (' Premises cost ', 26), ('expense', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -17263827.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-17263827.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs ', ' Salary & wages expense ', ' Superannuation expense ', ' other administration']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies ', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' Servicing expenses', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' marketing and advertising expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Selling and marketting expenses ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13), (' Salaries and employee benefits ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Servicing expenses', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Selling and marketting expenses ', 32), (' levies ', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Salaries and employee benefits ', 29), (' marketing and advertising expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' marketing and advertising expenses ', 32), (' Servicing expenses', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Selling and marketting expenses ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Servicing expenses', 33), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Salaries and employee benefits ', 27), (' marketing and advertising expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Selling and marketting expenses ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies ', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 54), (' Administration ', 50), (' Logistics and distribution ', 40), (' property espense ', 40), (' Administrative expenses ', 39), (' Administration expenses ', 39), (' Selling and marketting expenses ', 38), (' Servicing expenses', 36), (' Amortisation expenses ', 34), (' Salaries and employee benefits ', 34), (' marketing and advertising expenses ', 34), (' Advertising expenses ', 33), (' Sales and marketing ', 33), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Lease expenses ', 31), (' Selling Expenses ', 31), (' Occupancy expenses ', 30), (' Marketing expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Selling & distribution expenses ', 28), (' Royalties ', 27), (' Distribution expenses ', 26), (' Management expenses ', 22), (' Depreciation expenses ', 21), (' levies ', 21), ('expenses ', 19), (' depreciation ', 18), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' employee benefits expense ', 100), (' employee benefit espense ', 95), (' Salaries and employee benefits ', 71), (' Depreciation expenses ', 56), (' Administrative expenses ', 53), (' Administration expenses ', 53), (' Depreciation and amortisation expenses ', 50), (' Amortisation expenses ', 50), (' Advertising expenses ', 49), (' Distribution expenses ', 47), (' Administrative and other expenses ', 46), ('expenses ', 43), (' Selling & distribution expenses ', 42), (' marketing and advertising expenses ', 42), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Selling and marketting expenses ', 36), (' other expenses ', 35), (' Occupancy expenses ', 35), (' Other expenses ', 35), (' Management expenses ', 35), (' Other expenses ', 35), (' Marketing expenses ', 34), (' Servicing expenses', 34), (' Logistics and distribution ', 33), (' Sales and marketing ', 32), (' depreciation ', 21), (' Administration ', 19), (' Occupancy ', 15), (' levies ', 15), (' Royalties ', 14)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' marketing and advertising expenses ', 52), (' Salaries and employee benefits ', 48), (' employee benefit espense ', 47), (' Selling and marketting expenses ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Selling and marketting expenses ', 74), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' marketing and advertising expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Servicing expenses', 62), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' Salaries and employee benefits ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies ', 12), (' Occupancy ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Servicing expenses', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Salaries and employee benefits ', 22), (' marketing and advertising expenses ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Selling and marketting expenses ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies ', 13), ('expenses ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Servicing expenses', 72), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling and marketting expenses ', 53), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' marketing and advertising expenses ', 42), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Salaries and employee benefits ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Marketing expenses ', 48), (' marketing and advertising expenses ', 47), (' Selling and marketting expenses ', 47), (' property espense ', 45), (' other expenses ', 44), (' Occupancy expenses ', 44), (' Other expenses ', 44), (' Management expenses ', 44), (' Other expenses ', 44), (' employee benefits expense ', 43), (' Servicing expenses', 43), (' Depreciation expenses ', 42), (' Amortisation expenses ', 42), (' Advertising expenses ', 41), (' Administrative and other expenses ', 40), (' Lease expenses ', 40), (' Depreciation and amortisation expenses ', 40), (' employee benefit espense ', 39), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Selling & distribution expenses ', 36), (' Administration expenses ', 36), (' Salaries and employee benefits ', 36), (' Selling Expenses ', 35), ('expenses ', 34), (' Logistics and distribution ', 33), (' Sales and marketing ', 32), (' depreciation ', 28), (' Administration ', 21), (' Occupancy ', 18), (' Royalties ', 17), (' levies ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Servicing expenses', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Selling and marketting expenses ', 47), (' Administrative and other expenses ', 43), (' marketing and advertising expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Salaries and employee benefits ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies ', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' Administrative and other expenses ', 47), (' other expenses ', 44), (' Other expenses ', 44), (' Other expenses ', 44), (' Selling and marketting expenses ', 44), (' marketing and advertising expenses ', 41), (' property espense ', 39), (' Salaries and employee benefits ', 38), (' Occupancy expenses ', 37), (' Management expenses ', 37), (' Marketing expenses ', 36), (' Servicing expenses', 36), (' Selling & distribution expenses ', 35), (' Advertising expenses ', 35), (' Depreciation and amortisation expenses ', 35), (' Administrative expenses ', 34), (' Lease expenses ', 34), (' Administration expenses ', 34), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Sales and marketing ', 32), (' Distribution expenses ', 31), (' employee benefits expense ', 31), (' employee benefit espense ', 31), (' Selling Expenses ', 30), (' Logistics and distribution ', 29), ('expenses ', 25), (' Administration ', 24), (' depreciation ', 20), (' Royalties ', 16), (' Occupancy ', 13), (' levies ', 9)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Administrative and other expenses ', 41), (' other expenses ', 36), (' Other expenses ', 36), (' Other expenses ', 36), (' Depreciation and amortisation expenses ', 35), (' Salaries and employee benefits ', 35), (' marketing and advertising expenses ', 35), (' employee benefits expense ', 34), (' property espense ', 34), (' employee benefit espense ', 34), (' Selling & distribution expenses ', 31), (' Selling and marketting expenses ', 31), (' Marketing expenses ', 29), (' Management expenses ', 29), (' Servicing expenses', 29), (' Depreciation expenses ', 28), (' Amortisation expenses ', 28), (' Sales and marketing ', 28), (' Distribution expenses ', 27), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Lease expenses ', 26), (' Occupancy expenses ', 25), (' Logistics and distribution ', 25), (' Advertising expenses ', 24), (' Selling Expenses ', 22), (' Administration ', 19), ('expenses ', 16), (' depreciation ', 16), (' Royalties ', 16), (' levies ', 9), (' Occupancy ', 8)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Salaries and employee benefits ', 36), (' Lease expenses ', 35), (' Selling and marketting expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Servicing expenses', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' marketing and advertising expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 9], 'score': 100, 'value': -2561406.0, 'line_item_label': ['Employee benefits expenses', 'Administration expenses', 'Marketing expenses', 'Other expenses'], 'note_numbers': ['5', nan, nan, nan], 'line_item_value': [-1567955.0, -811399.0, -23777.0, -158275.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies ', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' Servicing expenses', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' marketing and advertising expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Selling and marketting expenses ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13), (' Salaries and employee benefits ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Servicing expenses', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Selling and marketting expenses ', 32), (' levies ', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Salaries and employee benefits ', 29), (' marketing and advertising expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' marketing and advertising expenses ', 32), (' Servicing expenses', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Selling and marketting expenses ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Servicing expenses', 33), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Salaries and employee benefits ', 27), (' marketing and advertising expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Selling and marketting expenses ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies ', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 54), (' Administration ', 50), (' Logistics and distribution ', 40), (' property espense ', 40), (' Administrative expenses ', 39), (' Administration expenses ', 39), (' Selling and marketting expenses ', 38), (' Servicing expenses', 36), (' Amortisation expenses ', 34), (' Salaries and employee benefits ', 34), (' marketing and advertising expenses ', 34), (' Advertising expenses ', 33), (' Sales and marketing ', 33), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Lease expenses ', 31), (' Selling Expenses ', 31), (' Occupancy expenses ', 30), (' Marketing expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Selling & distribution expenses ', 28), (' Royalties ', 27), (' Distribution expenses ', 26), (' Management expenses ', 22), (' Depreciation expenses ', 21), (' levies ', 21), ('expenses ', 19), (' depreciation ', 18), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' employee benefits expense ', 100), (' employee benefit espense ', 95), (' Salaries and employee benefits ', 71), (' Depreciation expenses ', 56), (' Administrative expenses ', 53), (' Administration expenses ', 53), (' Depreciation and amortisation expenses ', 50), (' Amortisation expenses ', 50), (' Advertising expenses ', 49), (' Distribution expenses ', 47), (' Administrative and other expenses ', 46), ('expenses ', 43), (' Selling & distribution expenses ', 42), (' marketing and advertising expenses ', 42), (' property espense ', 38), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Selling and marketting expenses ', 36), (' other expenses ', 35), (' Occupancy expenses ', 35), (' Other expenses ', 35), (' Management expenses ', 35), (' Other expenses ', 35), (' Marketing expenses ', 34), (' Servicing expenses', 34), (' Logistics and distribution ', 33), (' Sales and marketing ', 32), (' depreciation ', 21), (' Administration ', 19), (' Occupancy ', 15), (' levies ', 15), (' Royalties ', 14)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' marketing and advertising expenses ', 52), (' Salaries and employee benefits ', 48), (' employee benefit espense ', 47), (' Selling and marketting expenses ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Selling and marketting expenses ', 74), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' marketing and advertising expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Servicing expenses', 62), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' Salaries and employee benefits ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies ', 12), (' Occupancy ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Servicing expenses', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Salaries and employee benefits ', 22), (' marketing and advertising expenses ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Selling and marketting expenses ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies ', 13), ('expenses ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Servicing expenses', 72), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling and marketting expenses ', 53), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' marketing and advertising expenses ', 42), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Salaries and employee benefits ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Marketing expenses ', 48), (' marketing and advertising expenses ', 47), (' Selling and marketting expenses ', 47), (' property espense ', 45), (' other expenses ', 44), (' Occupancy expenses ', 44), (' Other expenses ', 44), (' Management expenses ', 44), (' Other expenses ', 44), (' employee benefits expense ', 43), (' Servicing expenses', 43), (' Depreciation expenses ', 42), (' Amortisation expenses ', 42), (' Advertising expenses ', 41), (' Administrative and other expenses ', 40), (' Lease expenses ', 40), (' Depreciation and amortisation expenses ', 40), (' employee benefit espense ', 39), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Selling & distribution expenses ', 36), (' Administration expenses ', 36), (' Salaries and employee benefits ', 36), (' Selling Expenses ', 35), ('expenses ', 34), (' Logistics and distribution ', 33), (' Sales and marketing ', 32), (' depreciation ', 28), (' Administration ', 21), (' Occupancy ', 18), (' Royalties ', 17), (' levies ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Servicing expenses', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Selling and marketting expenses ', 47), (' Administrative and other expenses ', 43), (' marketing and advertising expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Salaries and employee benefits ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies ', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' Administrative and other expenses ', 47), (' other expenses ', 44), (' Other expenses ', 44), (' Other expenses ', 44), (' Selling and marketting expenses ', 44), (' marketing and advertising expenses ', 41), (' property espense ', 39), (' Salaries and employee benefits ', 38), (' Occupancy expenses ', 37), (' Management expenses ', 37), (' Marketing expenses ', 36), (' Servicing expenses', 36), (' Selling & distribution expenses ', 35), (' Advertising expenses ', 35), (' Depreciation and amortisation expenses ', 35), (' Administrative expenses ', 34), (' Lease expenses ', 34), (' Administration expenses ', 34), (' Depreciation expenses ', 32), (' Amortisation expenses ', 32), (' Sales and marketing ', 32), (' Distribution expenses ', 31), (' employee benefits expense ', 31), (' employee benefit espense ', 31), (' Selling Expenses ', 30), (' Logistics and distribution ', 29), ('expenses ', 25), (' Administration ', 24), (' depreciation ', 20), (' Royalties ', 16), (' Occupancy ', 13), (' levies ', 9)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Administrative and other expenses ', 41), (' other expenses ', 36), (' Other expenses ', 36), (' Other expenses ', 36), (' Depreciation and amortisation expenses ', 35), (' Salaries and employee benefits ', 35), (' marketing and advertising expenses ', 35), (' employee benefits expense ', 34), (' property espense ', 34), (' employee benefit espense ', 34), (' Selling & distribution expenses ', 31), (' Selling and marketting expenses ', 31), (' Marketing expenses ', 29), (' Management expenses ', 29), (' Servicing expenses', 29), (' Depreciation expenses ', 28), (' Amortisation expenses ', 28), (' Sales and marketing ', 28), (' Distribution expenses ', 27), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Lease expenses ', 26), (' Occupancy expenses ', 25), (' Logistics and distribution ', 25), (' Advertising expenses ', 24), (' Selling Expenses ', 22), (' Administration ', 19), ('expenses ', 16), (' depreciation ', 16), (' Royalties ', 16), (' levies ', 9), (' Occupancy ', 8)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Salaries and employee benefits ', 36), (' Lease expenses ', 35), (' Selling and marketting expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Servicing expenses', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' marketing and advertising expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 9], 'score': 100, 'value': -2939964.0, 'line_item_label': ['Employee benefits expenses', 'Administration expenses', 'Marketing expenses', 'Other expenses'], 'note_numbers': ['5', nan, nan, nan], 'line_item_value': [-1803515.0, -970418.0, -27964.0, -138067.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses ', ' Rental expense relating to operating leases lease expense']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses ', 44), (' Administration expenses ', 36), (' Other expense', 33), (' Rental expenses ', 32), (' Premises cost ', 24), (' Occupancy ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Premises cost ', 60), (' Rental expenses ', 36), (' Administration expenses ', 32), (' Other expense', 29), (' Occupancy expenses ', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Other expense', 33), (' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses ', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other expense', 61), (' Premises cost ', 36), (' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses ', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' Other expense', 59), (' Administration expenses ', 39), (' Premises cost ', 31), (' Occupancy expenses ', 30), (' Rental expenses ', 29), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' Administration expenses ', 53), (' Occupancy expenses ', 35), (' Other expense', 35), (' Rental expenses ', 34), (' Premises cost ', 30), ('Rent ', 23), (' Occupancy ', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Other expense', 64), (' Occupancy expenses ', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Premises cost ', 33), (' Occupancy ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Premises cost ', 55), (' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses ', 26), (' Occupancy ', 25), (' Other expense', 17), ('Rent ', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Other expense', 100), (' Occupancy expenses ', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Premises cost ', 26), (' Occupancy ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Rental expenses ', 48), (' Occupancy expenses ', 44), (' Other expense', 44), (' Administration expenses ', 36), (' Premises cost ', 30), ('Rent ', 24), (' Occupancy ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Other expense', 64), (' Occupancy expenses ', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Premises cost ', 22), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' Other expense', 44), (' Rental expenses ', 40), (' Occupancy expenses ', 37), (' Administration expenses ', 34), (' Premises cost ', 23), ('Rent ', 17), (' Occupancy ', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Other expense', 36), (' Rental expenses ', 32), (' Administration expenses ', 27), (' Premises cost ', 26), (' Occupancy expenses ', 25), ('Rent ', 17), (' Occupancy ', 8)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Other expense', 43), (' Rental expenses ', 42), (' Occupancy expenses ', 30), (' Administration expenses ', 27), (' Premises cost ', 26), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 9], 'score': 100, 'value': -969674.0, 'line_item_label': ['Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-811399.0, -158275.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses ', 44), (' Administration expenses ', 36), (' Other expense', 33), (' Rental expenses ', 32), (' Premises cost ', 24), (' Occupancy ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Premises cost ', 60), (' Rental expenses ', 36), (' Administration expenses ', 32), (' Other expense', 29), (' Occupancy expenses ', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Other expense', 33), (' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses ', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other expense', 61), (' Premises cost ', 36), (' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses ', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' Other expense', 59), (' Administration expenses ', 39), (' Premises cost ', 31), (' Occupancy expenses ', 30), (' Rental expenses ', 29), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' Administration expenses ', 53), (' Occupancy expenses ', 35), (' Other expense', 35), (' Rental expenses ', 34), (' Premises cost ', 30), ('Rent ', 23), (' Occupancy ', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Other expense', 64), (' Occupancy expenses ', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Premises cost ', 33), (' Occupancy ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Premises cost ', 55), (' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses ', 26), (' Occupancy ', 25), (' Other expense', 17), ('Rent ', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Other expense', 100), (' Occupancy expenses ', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Premises cost ', 26), (' Occupancy ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Rental expenses ', 48), (' Occupancy expenses ', 44), (' Other expense', 44), (' Administration expenses ', 36), (' Premises cost ', 30), ('Rent ', 24), (' Occupancy ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Other expense', 64), (' Occupancy expenses ', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Premises cost ', 22), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' Other expense', 44), (' Rental expenses ', 40), (' Occupancy expenses ', 37), (' Administration expenses ', 34), (' Premises cost ', 23), ('Rent ', 17), (' Occupancy ', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Other expense', 36), (' Rental expenses ', 32), (' Administration expenses ', 27), (' Premises cost ', 26), (' Occupancy expenses ', 25), ('Rent ', 17), (' Occupancy ', 8)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Other expense', 43), (' Rental expenses ', 42), (' Occupancy expenses ', 30), (' Administration expenses ', 27), (' Premises cost ', 26), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 9], 'score': 100, 'value': -1108485.0, 'line_item_label': ['Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-970418.0, -138067.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue ', ' Other income']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['Commission revenue ', ' Rent ', ' rental revenue']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue ', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue ', 67), ('other operating', 25), (' Other income', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue ', 38), ('other operating', 32)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue ', 43)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' Other income', 69), ('other operating', 56), ('Other revenue ', 37)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('Other revenue ', 35), ('other operating', 25), (' Other income', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue ', 43), (' Other income', 30), ('other operating', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue ', 32), (' Other income', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue ', 35), (' Other income', 27), ('other operating', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue ', 42)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Other income', 40), ('other operating', 31), ('Other revenue ', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' Other income', 42), ('other operating', 35), ('Other revenue ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Other income', 41), ('other operating', 38), ('Other revenue ', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue ', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 13906.0, 'line_item_label': ['Other income'], 'note_numbers': ['5'], 'line_item_value': [13906.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue ', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue ', 67), ('other operating', 25), (' Other income', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue ', 38), ('other operating', 32)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue ', 43)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' Other income', 69), ('other operating', 56), ('Other revenue ', 37)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('Other revenue ', 35), ('other operating', 25), (' Other income', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue ', 43), (' Other income', 30), ('other operating', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue ', 32), (' Other income', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue ', 35), (' Other income', 27), ('other operating', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue ', 42)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Other income', 40), ('other operating', 31), ('Other revenue ', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' Other income', 42), ('other operating', 35), ('Other revenue ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Other income', 41), ('other operating', 38), ('Other revenue ', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue ', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 33140.0, 'line_item_label': ['Other income'], 'note_numbers': ['5'], 'line_item_value': [33140.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue ', ' Interest income from cash and cash equivalents ', ' Interest income from financial assets measured at amortised cost']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Other revenue', 67), (' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs ', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs ', 58), ('other income', 40), ('Finance income and costs', 40), (' Other revenue', 38), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), (' Other revenue', 25), ('finance income', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Other revenue', 43), (' Interest revenue', 38), (' Net finance costs ', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [('other income', 69), ('Finance income and costs', 39), (' Other revenue', 37), (' Interest revenue', 33), (' Finance income and finance costs', 33), ('finance income', 30), (' Net finance costs ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' Interest revenue', 43), (' Other revenue', 35), ('other income', 24), ('finance income', 24), (' Finance income and finance costs', 24), ('Finance income and costs', 23), (' Net finance costs ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs ', 36), (' Other revenue', 32), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs ', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Other revenue', 35), (' Interest revenue', 31), ('other income', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Other revenue', 42), (' Interest revenue', 37), ('finance income', 25), ('Finance income and costs', 24), (' Net finance costs ', 22), (' Finance income and finance costs', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('other income', 40), ('finance income', 39), ('Finance income and costs', 36), (' Net finance costs ', 36), (' Finance income and finance costs', 35), (' Other revenue', 29), (' Interest revenue', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs ', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32), (' Other revenue', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('other income', 42), (' Finance income and finance costs', 37), ('Finance income and costs', 35), (' Interest revenue', 32), ('finance income', 30), (' Net finance costs ', 28), (' Other revenue', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('other income', 41), (' Net finance costs ', 41), ('Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 31), (' Other revenue', 29), ('finance income', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Other revenue', 30), (' Interest revenue', 28)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8], 'score': 85, 'value': -36992.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['5', '5'], 'line_item_value': [13906.0, -50898.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Other revenue', 67), (' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs ', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs ', 58), ('other income', 40), ('Finance income and costs', 40), (' Other revenue', 38), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), (' Other revenue', 25), ('finance income', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), (' Other revenue', 43), (' Interest revenue', 38), (' Net finance costs ', 38), ('Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [('other income', 69), ('Finance income and costs', 39), (' Other revenue', 37), (' Interest revenue', 33), (' Finance income and finance costs', 33), ('finance income', 30), (' Net finance costs ', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' Interest revenue', 43), (' Other revenue', 35), ('other income', 24), ('finance income', 24), (' Finance income and finance costs', 24), ('Finance income and costs', 23), (' Net finance costs ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs ', 36), (' Other revenue', 32), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs ', 85), ('Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), (' Other revenue', 35), (' Interest revenue', 31), ('other income', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Other revenue', 42), (' Interest revenue', 37), ('finance income', 25), ('Finance income and costs', 24), (' Net finance costs ', 22), (' Finance income and finance costs', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('other income', 40), ('finance income', 39), ('Finance income and costs', 36), (' Net finance costs ', 36), (' Finance income and finance costs', 35), (' Other revenue', 29), (' Interest revenue', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs ', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32), (' Other revenue', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('other income', 42), (' Finance income and finance costs', 37), ('Finance income and costs', 35), (' Interest revenue', 32), ('finance income', 30), (' Net finance costs ', 28), (' Other revenue', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('other income', 41), (' Net finance costs ', 41), ('Finance income and costs', 34), (' Finance income and finance costs', 34), (' Interest revenue', 31), (' Other revenue', 29), ('finance income', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Other revenue', 30), (' Interest revenue', 28)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 8], 'score': 85, 'value': 13437.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['5', '5'], 'line_item_value': [33140.0, -19703.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income ', ' Interest on lease liabilities ', ' Interest expense from financial liabilities measured at amortised cost ', ' Unwind of discount on decommissioning provision ', ' Unwind of discount on Lease Liability']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense ', 29), (' Interest on external debt ', 23), (' Interest in finance leases', 23), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' Interest in finance leases', 41), (' finance expenses ', 27), (' interest expense ', 25), (' Interest on external debt ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense ', 30), (' Interest on external debt ', 25), (' Interest in finance leases', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Interest in finance leases', 45), (' net finance costs ', 38), (' interest expense ', 38), (' Interest on external debt ', 32), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' interest expense ', 40), (' Interest in finance leases', 34), (' Interest on external debt ', 29), (' net finance costs ', 27), ('finance cost ', 23), (' finance expenses ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' Interest on external debt ', 43), (' interest expense ', 38), (' Interest in finance leases', 38), (' finance expenses ', 34), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest on external debt ', 44), (' Interest in finance leases', 44), (' finance expenses ', 41), (' interest expense ', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense ', 71), (' finance expenses ', 62), (' Interest on external debt ', 48), (' net finance costs ', 36), (' Interest in finance leases', 30), ('finance cost ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' Interest in finance leases', 39), (' interest expense ', 31), (' Interest on external debt ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' interest expense ', 74), (' finance expenses ', 56), (' Interest on external debt ', 50), (' Interest in finance leases', 31), (' net finance costs ', 22), ('finance cost ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' interest expense ', 50), (' finance expenses ', 48), (' Interest on external debt ', 45), (' Interest in finance leases', 37), (' net finance costs ', 36), ('finance cost ', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense ', 65), (' net finance costs ', 45), (' Interest on external debt ', 44), ('finance cost ', 37), (' Interest in finance leases', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' interest expense ', 42), (' finance expenses ', 40), (' Interest on external debt ', 39), (' Interest in finance leases', 35), (' net finance costs ', 28), ('finance cost ', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' Interest in finance leases', 41), (' interest expense ', 38), (' finance expenses ', 32), (' Interest on external debt ', 32), ('finance cost ', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense ', 40), (' Interest in finance leases', 40), (' finance expenses ', 38), ('finance cost ', 35), (' Interest on external debt ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': -50898.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['5'], 'line_item_value': [-50898.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense ', 29), (' Interest on external debt ', 23), (' Interest in finance leases', 23), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' Interest in finance leases', 41), (' finance expenses ', 27), (' interest expense ', 25), (' Interest on external debt ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense ', 30), (' Interest on external debt ', 25), (' Interest in finance leases', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Interest in finance leases', 45), (' net finance costs ', 38), (' interest expense ', 38), (' Interest on external debt ', 32), ('finance cost ', 27), (' finance expenses ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' interest expense ', 40), (' Interest in finance leases', 34), (' Interest on external debt ', 29), (' net finance costs ', 27), ('finance cost ', 23), (' finance expenses ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' Interest on external debt ', 43), (' interest expense ', 38), (' Interest in finance leases', 38), (' finance expenses ', 34), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest on external debt ', 44), (' Interest in finance leases', 44), (' finance expenses ', 41), (' interest expense ', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense ', 71), (' finance expenses ', 62), (' Interest on external debt ', 48), (' net finance costs ', 36), (' Interest in finance leases', 30), ('finance cost ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' Interest in finance leases', 39), (' interest expense ', 31), (' Interest on external debt ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' interest expense ', 74), (' finance expenses ', 56), (' Interest on external debt ', 50), (' Interest in finance leases', 31), (' net finance costs ', 22), ('finance cost ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' interest expense ', 50), (' finance expenses ', 48), (' Interest on external debt ', 45), (' Interest in finance leases', 37), (' net finance costs ', 36), ('finance cost ', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense ', 65), (' net finance costs ', 45), (' Interest on external debt ', 44), ('finance cost ', 37), (' Interest in finance leases', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' interest expense ', 42), (' finance expenses ', 40), (' Interest on external debt ', 39), (' Interest in finance leases', 35), (' net finance costs ', 28), ('finance cost ', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' Interest in finance leases', 41), (' interest expense ', 38), (' finance expenses ', 32), (' Interest on external debt ', 32), ('finance cost ', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense ', 40), (' Interest in finance leases', 40), (' finance expenses ', 38), ('finance cost ', 35), (' Interest on external debt ', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': -19703.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['5'], 'line_item_value': [-19703.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax ']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment  ', ' Investment in joint venture ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Interest on unwinding of discount in provisions ', ' Profit from discontinued operation ', ' net of tax ', ' Net loss on disposal of property ', ' plant and equipment ', ' Net foreign exchange gains/(losses) ', ' Accretion expense ', ' Loss on loan refinancing ', ' Net foreign exchange (loss)/gain ', ' Net PPE disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Net (loss)/profit on disposal of non-current assets ', ' Net other foreign exchange (losses)/gains ', ' Miscellanous income ', ' Commision rebate ', ' Net foreign losses ', ' Derivaties at FVTPL- net change in fair value ', ' Other income - Bank guarantee ', ' Other expense - Net loss on sale or property, plant and equipment ', ' Other expense - Loss on inventory obsolescence ', ' Bank charges']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax '] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories ', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' Share of profit of equity-accounted investees, net of income tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories ', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories ', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories ', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' Share of profit of equity-accounted investees, net of income tax ', 34), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' other gains/losses ', 100), (' other income ', 69), (' Other income ', 69), (' other opertaing income ', 61), (' Share of gain/(loss) of joint venture ', 60), (' other income and revenue ', 54), (' Impairment loss ', 54), (' Loss on revaluation of inventories ', 50), (' interest gains and losses ', 49), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' Profit from discontinued operation ', 38), (' share of profit of equity accounted investees ', 36), (' finance income and finance cost ', 33), (' interest revenue ', 33), (' Finance income and finance costs ', 33), (' Share of profit of equity-accounted investees, net of income tax ', 32), (' Impairement (expenses)/reversal ', 29), (' net finance costs ', 27), (' net of tax ', 27), (' net of tax ', 27), ('finance cost ', 23), (' finance expenses', 21), (' expenses ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' expenses ', 43), (' interest revenue ', 43), (' Impairement (expenses)/reversal ', 43), (' other income and revenue ', 41), (' Share of gain/(loss) of joint venture ', 40), (' Loss on revaluation of inventories ', 37), (' Impairment loss ', 36), (' share of profit of equity accounted investees ', 35), (' finance expenses', 34), (' net of tax ', 34), (' net of tax ', 34), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' Share of profit of equity-accounted investees, net of income tax ', 31), (' other opertaing income ', 30), (' other income ', 24), (' finance income and finance cost ', 24), (' Other income ', 24), (' Finance income and finance costs ', 24), (' finance income and costs ', 23), (' Finance income and costs ', 23), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories ', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), (' Share of profit of equity-accounted investees, net of income tax ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of profit of equity-accounted investees, net of income tax ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories ', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' expenses ', 67), (' other income ', 61), (' Other income ', 61), (' other gains/losses ', 59), (' finance expenses', 56), (' Impairement (expenses)/reversal ', 56), (' other opertaing income ', 53), (' other income and revenue ', 41), (' interest revenue ', 37), (' Share of gain/(loss) of joint venture ', 35), (' share of profit of equity accounted investees ', 34), (' net of tax ', 32), (' net of tax ', 32), (' Loss on revaluation of inventories ', 30), (' interest gains and losses ', 29), (' Share of profit of equity-accounted investees, net of income tax ', 27), (' Impairment loss ', 26), (' Profit from discontinued operation ', 26), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' net finance costs ', 22), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), ('finance cost ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Share of profit of equity-accounted investees, net of income tax ', 52), (' Impairement (expenses)/reversal ', 49), (' finance expenses', 48), (' other opertaing income ', 47), (' share of profit of equity accounted investees ', 47), (' Profit from discontinued operation ', 46), (' other income and revenue ', 43), (' other income ', 40), (' Other income ', 40), (' net finance costs ', 36), (' finance income and costs ', 36), (' Finance income and costs ', 36), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' expenses ', 34), (' net of tax ', 33), (' net of tax ', 33), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' interest gains and losses ', 31), ('finance cost ', 30), (' other gains/losses ', 27), (' interest revenue ', 27), (' Impairment loss ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 38), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' other opertaing income ', 50), (' Impairement (expenses)/reversal ', 48), (' share of profit of equity accounted investees ', 47), (' other income and revenue ', 47), (' Share of profit of equity-accounted investees, net of income tax ', 44), (' other income ', 42), (' Other income ', 42), (' Profit from discontinued operation ', 41), (' finance expenses', 40), (' Share of gain/(loss) of joint venture ', 40), (' finance income and finance cost ', 37), (' Finance income and finance costs ', 37), (' other gains/losses ', 35), (' finance income and costs ', 35), (' Finance income and costs ', 35), (' interest revenue ', 32), (' Loss on revaluation of inventories ', 32), (' interest gains and losses ', 31), (' net finance costs ', 28), (' expenses ', 25), (' net of tax ', 24), (' net of tax ', 24), ('finance cost ', 23), (' Impairment loss ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' other opertaing income ', 52), (' other income and revenue ', 49), (' Share of profit of equity-accounted investees, net of income tax ', 48), (' net finance costs ', 41), (' other income ', 41), (' share of profit of equity accounted investees ', 41), (' Other income ', 41), (' Profit from discontinued operation ', 40), (' Share of gain/(loss) of joint venture ', 39), (' Impairement (expenses)/reversal ', 38), (' finance income and finance cost ', 34), (' finance income and costs ', 34), (' interest gains and losses ', 34), (' Finance income and finance costs ', 34), (' Finance income and costs ', 34), (' finance expenses', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' Loss on revaluation of inventories ', 31), ('finance cost ', 30), (' net of tax ', 28), (' net of tax ', 28), (' Impairment loss ', 19), (' expenses ', 16)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories ', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 8], 'score': 100, 'value': 88424.0, 'line_item_label': ['Other income', 'Other (losses)/gains', 'Finance costs'], 'note_numbers': ['5', '5', '5'], 'line_item_value': [13906.0, 125416.0, -50898.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax '] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories ', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' Share of profit of equity-accounted investees, net of income tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories ', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories ', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' Other income ', 100), (' other opertaing income ', 76), (' other gains/losses ', 69), (' other income and revenue ', 67), (' Profit from discontinued operation ', 42), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories ', 38), (' interest gains and losses ', 36), (' Impairment loss ', 36), (' Share of profit of equity-accounted investees, net of income tax ', 34), (' net of tax ', 33), (' net of tax ', 33), (' Impairement (expenses)/reversal ', 32), (' finance income and costs ', 31), (' Finance income and costs ', 31), (' share of profit of equity accounted investees ', 30), ('finance cost ', 27), (' finance income and finance cost ', 26), (' Finance income and finance costs ', 26), (' finance expenses', 25), (' expenses ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' other gains/losses ', 100), (' other income ', 69), (' Other income ', 69), (' other opertaing income ', 61), (' Share of gain/(loss) of joint venture ', 60), (' other income and revenue ', 54), (' Impairment loss ', 54), (' Loss on revaluation of inventories ', 50), (' interest gains and losses ', 49), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' Profit from discontinued operation ', 38), (' share of profit of equity accounted investees ', 36), (' finance income and finance cost ', 33), (' interest revenue ', 33), (' Finance income and finance costs ', 33), (' Share of profit of equity-accounted investees, net of income tax ', 32), (' Impairement (expenses)/reversal ', 29), (' net finance costs ', 27), (' net of tax ', 27), (' net of tax ', 27), ('finance cost ', 23), (' finance expenses', 21), (' expenses ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' expenses ', 43), (' interest revenue ', 43), (' Impairement (expenses)/reversal ', 43), (' other income and revenue ', 41), (' Share of gain/(loss) of joint venture ', 40), (' Loss on revaluation of inventories ', 37), (' Impairment loss ', 36), (' share of profit of equity accounted investees ', 35), (' finance expenses', 34), (' net of tax ', 34), (' net of tax ', 34), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest gains and losses ', 32), (' Share of profit of equity-accounted investees, net of income tax ', 31), (' other opertaing income ', 30), (' other income ', 24), (' finance income and finance cost ', 24), (' Other income ', 24), (' Finance income and finance costs ', 24), (' finance income and costs ', 23), (' Finance income and costs ', 23), (' net finance costs ', 22), ('finance cost ', 18)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories ', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), (' Share of profit of equity-accounted investees, net of income tax ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' net finance costs ', 85), (' finance income and costs ', 69), (' Finance income and costs ', 69), (' finance expenses', 67), (' finance income and finance cost ', 56), (' Finance income and finance costs ', 56), (' share of profit of equity accounted investees ', 35), (' net of tax ', 33), (' net of tax ', 33), (' Profit from discontinued operation ', 32), (' interest revenue ', 31), (' other income and revenue ', 30), (' other opertaing income ', 28), (' other income ', 27), (' Other income ', 27), (' Share of profit of equity-accounted investees, net of income tax ', 27), (' Share of gain/(loss) of joint venture ', 26), (' Impairement (expenses)/reversal ', 26), (' Loss on revaluation of inventories ', 25), (' interest gains and losses ', 24), (' other gains/losses ', 23), (' Impairment loss ', 18), (' expenses ', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' expenses ', 67), (' other income ', 61), (' Other income ', 61), (' other gains/losses ', 59), (' finance expenses', 56), (' Impairement (expenses)/reversal ', 56), (' other opertaing income ', 53), (' other income and revenue ', 41), (' interest revenue ', 37), (' Share of gain/(loss) of joint venture ', 35), (' share of profit of equity accounted investees ', 34), (' net of tax ', 32), (' net of tax ', 32), (' Loss on revaluation of inventories ', 30), (' interest gains and losses ', 29), (' Share of profit of equity-accounted investees, net of income tax ', 27), (' Impairment loss ', 26), (' Profit from discontinued operation ', 26), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' net finance costs ', 22), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20), ('finance cost ', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' Share of profit of equity-accounted investees, net of income tax ', 52), (' Impairement (expenses)/reversal ', 49), (' finance expenses', 48), (' other opertaing income ', 47), (' share of profit of equity accounted investees ', 47), (' Profit from discontinued operation ', 46), (' other income and revenue ', 43), (' other income ', 40), (' Other income ', 40), (' net finance costs ', 36), (' finance income and costs ', 36), (' Finance income and costs ', 36), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' expenses ', 34), (' net of tax ', 33), (' net of tax ', 33), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' interest gains and losses ', 31), ('finance cost ', 30), (' other gains/losses ', 27), (' interest revenue ', 27), (' Impairment loss ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 38), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' other opertaing income ', 50), (' Impairement (expenses)/reversal ', 48), (' share of profit of equity accounted investees ', 47), (' other income and revenue ', 47), (' Share of profit of equity-accounted investees, net of income tax ', 44), (' other income ', 42), (' Other income ', 42), (' Profit from discontinued operation ', 41), (' finance expenses', 40), (' Share of gain/(loss) of joint venture ', 40), (' finance income and finance cost ', 37), (' Finance income and finance costs ', 37), (' other gains/losses ', 35), (' finance income and costs ', 35), (' Finance income and costs ', 35), (' interest revenue ', 32), (' Loss on revaluation of inventories ', 32), (' interest gains and losses ', 31), (' net finance costs ', 28), (' expenses ', 25), (' net of tax ', 24), (' net of tax ', 24), ('finance cost ', 23), (' Impairment loss ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' other opertaing income ', 52), (' other income and revenue ', 49), (' Share of profit of equity-accounted investees, net of income tax ', 48), (' net finance costs ', 41), (' other income ', 41), (' share of profit of equity accounted investees ', 41), (' Other income ', 41), (' Profit from discontinued operation ', 40), (' Share of gain/(loss) of joint venture ', 39), (' Impairement (expenses)/reversal ', 38), (' finance income and finance cost ', 34), (' finance income and costs ', 34), (' interest gains and losses ', 34), (' Finance income and finance costs ', 34), (' Finance income and costs ', 34), (' finance expenses', 32), (' other gains/losses ', 31), (' interest revenue ', 31), (' Loss on revaluation of inventories ', 31), ('finance cost ', 30), (' net of tax ', 28), (' net of tax ', 28), (' Impairment loss ', 19), (' expenses ', 16)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories ', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 8], 'score': 100, 'value': -19178.0, 'line_item_label': ['Other income', 'Other (losses)/gains', 'Finance costs'], 'note_numbers': ['5', '5', '5'], 'line_item_value': [33140.0, -32615.0, -19703.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 11:47:33+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [('NULL', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('NULL', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('NULL', 4)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [('NULL', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('NULL', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('NULL', 4)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' income tax', 42), ('prior year ', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('amount transferred to retained earnings', 33), (' income tax expense', 32), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), (' tax (expense)/benefit', 30), ('minimum alternate tax credit entitlement', 26), ('current tax', 23), ('deferred tax', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 75), (' income tax expense', 71), (' tax (expense)/benefit', 60), ('provision for taxation previous year', 59), (' income tax benefit', 57), (' income tax', 47), ('minimum alternate tax credit entitlement', 46), ('deferred tax', 42), ('current tax', 40), ('amount transferred to retained earnings', 36), ('prior year ', 31), ('earlier year', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('provision for taxation previous year', 62), (' income tax benefit/(expense)', 58), (' income tax expense', 55), (' income tax benefit', 44), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 43), ('amount transferred to retained earnings', 41), ('prior year ', 38), (' income tax', 35), ('earlier year', 33), ('current tax', 30), ('deferred tax', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 50), (' income tax expense', 47), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('amount transferred to retained earnings', 40), ('prior year ', 38), ('earlier year', 36), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('current tax', 33), ('deferred tax', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': -177829.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['6(a)'], 'line_item_value': [-177829.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' income tax', 42), ('prior year ', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('amount transferred to retained earnings', 33), (' income tax expense', 32), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), (' tax (expense)/benefit', 30), ('minimum alternate tax credit entitlement', 26), ('current tax', 23), ('deferred tax', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 75), (' income tax expense', 71), (' tax (expense)/benefit', 60), ('provision for taxation previous year', 59), (' income tax benefit', 57), (' income tax', 47), ('minimum alternate tax credit entitlement', 46), ('deferred tax', 42), ('current tax', 40), ('amount transferred to retained earnings', 36), ('prior year ', 31), ('earlier year', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('provision for taxation previous year', 62), (' income tax benefit/(expense)', 58), (' income tax expense', 55), (' income tax benefit', 44), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 43), ('amount transferred to retained earnings', 41), ('prior year ', 38), (' income tax', 35), ('earlier year', 33), ('current tax', 30), ('deferred tax', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 50), (' income tax expense', 47), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('amount transferred to retained earnings', 40), ('prior year ', 38), ('earlier year', 36), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('current tax', 33), ('deferred tax', 31)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': -288120.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['6(a)'], 'line_item_value': [-288120.0]}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 50), (' prior period ', 37), ('exceptional ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 41), (' prior period ', 29), ('exceptional ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 39), ('exceptional ', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 43), (' prior period ', 37), ('exceptional ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 29), ('exceptional ', 16)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 50), (' prior period ', 37), ('exceptional ', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 41), (' prior period ', 29), ('exceptional ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 39), ('exceptional ', 29)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 43), (' prior period ', 37), ('exceptional ', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 29), ('exceptional ', 16)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 11:47:33+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 11:47:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [('NULL', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('NULL', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('NULL', 4)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 11:47:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 11:47:33+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other (losses)/gains , res_fuzz_match = [('NULL', 21)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = employee benefits expenses , res_fuzz_match = [('NULL', 15)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit before income tax expense , res_fuzz_match = [('NULL', 6)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = profit after income tax expense for the year , res_fuzz_match = [('NULL', 4)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = other comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 4)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 11:47:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

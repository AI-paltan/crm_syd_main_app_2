2023-08-29 16:55:01+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-29 16:55:01+0530 - sLogger - DEBUG - {'fileid': '259ca7db-f67b-444d-a15c-9f25e9aeeec5', 'filename': 'Signed by Dean_FY23 NRIANZ Financial Statement - v7.1 FINAL.pdf', 'filepath': '/home/jayesh/mgs_ai/crm_syd_1/CRM_SYD_main_app_2/classification/../FILE_DB/FILES/Signed by Dean_FY23 NRIANZ Financial Statement - v7.1 FINAL.pdf', 'status': 'Processing'}
2023-08-29 16:55:01+0530 - sLogger - DEBUG - save file completed
2023-08-29 16:55:01+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-29 16:55:01+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-29 16:55:01+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-29 16:55:01+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-29 16:55:01+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-29 16:55:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:01+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:02+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:02+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:08+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:08+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:13+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:13+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:20+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:20+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:29+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:29+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:33+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:33+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:37+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:37+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:37+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:37+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:37+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:39+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:39+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:42+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:42+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:42+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:42+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:42+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:45+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:45+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:48+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:48+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:55+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:55+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:55:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:55:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:55:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:55:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:55:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:55:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:55:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:05+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:05+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:10+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:16+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:16+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:16+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:16+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:16+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:33+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:33+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:45+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:45+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:45+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:45+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:45+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:56:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:56:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:56:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:56:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:56:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:56:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:56:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:57:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:57:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:57:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:57:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:57:02+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:57:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:57:02+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:57:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:57:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:57:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:57:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:57:04+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:57:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-29 16:57:04+0530 - sLogger - DEBUG - filetype: pdf
2023-08-29 16:57:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-29 16:57:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-29 16:57:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-29 16:57:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-29 16:57:06+0530 - sLogger - DEBUG - function: predict completed.
2023-08-29 16:57:06+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-29 16:57:06+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [10, 11], 'predicted_cpl_pages': [9], 'predicted_ccf_pages': [13, 14], 'filtered_cbs_pages': [10, 11], 'filtered_cpl_pages': [9], 'filtered_ccf_pages': [13, 14], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-29 16:57:06+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-29 16:57:06+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-29 16:57:06+0530 - sLogger - DEBUG - process file completed
2023-08-29 16:57:06+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-29 16:59:45+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-29 16:59:45+0530 - sLogger - DEBUG - TE process file started
2023-08-29 17:02:12+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-29 17:02:12+0530 - sLogger - DEBUG - TE process file started
2023-08-29 17:06:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-29 17:06:00+0530 - sLogger - DEBUG - process_main_pages started
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring started
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_without_notes
2023-08-29 17:06:01+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring started
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_without_notes
2023-08-29 17:06:01+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring started
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring started
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_note_column
2023-08-29 17:06:01+0530 - sLogger - ERROR - error occured: can only concatenate str (not "int") to str
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-29 17:06:01+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-08-29 17:06:01+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring started
2023-08-29 17:06:01+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS
2023-08-29 17:06:01+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-29 17:06:01+0530 - sLogger - DEBUG - set_section_details started
2023-08-29 17:06:01+0530 - sLogger - DEBUG - EQUITY | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current liabilities', 30), ('currentassets', 22), ('current assets', 21), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current assets | score 31
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD currentassets | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current liabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD currentliabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent assets | score 31
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentassets | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent liabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current assets | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current liabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentliabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentassets | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrentliabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity and liabilities | score 90
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity | score 100
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equityandliabilities | score 90
2023-08-29 17:06:01+0530 - sLogger - DEBUG - Contributed equity | [('equity', 55), ('equityliabilities', 50), ('equity and liabilities', 48), ('equityandliabilities', 44), ('noncurrentliabilities', 43), ('equity liabilities', 41), ('current liabilities', 40), ('currentassets', 36), ('noncurrentassets', 32), ('currentliabilities', 32), ('current assets', 28), ('liabilities', 27), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('assets', 19)]
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current assets | score 38
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD currentassets | score 32
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current liabilities | score 32
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD currentliabilities | score 39
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent assets | score 29
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentassets | score 29
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent liabilities | score 35
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current assets | score 28
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current liabilities | score 29
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentliabilities | score 31
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentassets | score 29
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentliabilities | score 31
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity and liabilities | score 48
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity | score 90
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equityandliabilities | score 32
2023-08-29 17:06:01+0530 - sLogger - DEBUG - Reserves | [('currentassets', 44), ('noncurrentassets', 38), ('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentassets | score 48
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD currentliabilities | score 31
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 28
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentassets | score 45
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrentliabilities | score 28
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 32
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equityandliabilities | score 32
2023-08-29 17:06:01+0530 - sLogger - DEBUG - Retained Earnings | [('currentassets', 43), ('currentliabilities', 40), ('assets', 38), ('noncurrentassets', 38), ('equity and liabilities', 36), ('noncurrentliabilities', 35), ('current assets', 33), ('noncurrent assets', 33), ('current liabilities', 32), ('equityandliabilities', 27), ('equity', 24), ('equityliabilities', 21), ('equity liabilities', 17), ('noncurrent liabilities', 16), ('liabilities', 12)]
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD current assets | score 39
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD currentassets | score 38
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD current liabilities | score 33
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD currentliabilities | score 29
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrent assets | score 35
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentassets | score 40
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrent liabilities | score 31
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD non current assets | score 34
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD non current liabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentliabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentassets | score 40
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD noncurrentliabilities | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equity and liabilities | score 36
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equity | score 30
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Retained Earnings | MATCH WORD equityandliabilities | score 32
2023-08-29 17:06:01+0530 - sLogger - DEBUG - Total equity | [('equity', 67), ('equity liabilities', 64), ('equityandliabilities', 61), ('equityliabilities', 60), ('equity and liabilities', 55), ('current liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('noncurrentassets', 22), ('assets', 12), ('liabilities', 11), ('current assets', 8), ('noncurrent assets', 8), ('noncurrent liabilities', 8)]
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 15
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 21
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 32
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-29 17:06:01+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-29 17:06:01+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-29 17:06:01+0530 - sLogger - DEBUG - set_section_details started
2023-08-29 17:06:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in from investing activities | operating cash flow before working capital changes
2023-08-29 17:06:01+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at end of reporting period | operating profit before changes in assets and liabilities
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-29 17:06:02+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-29 17:06:02+0530 - sLogger - ERROR - error occured: 'value'
2023-08-29 17:06:02+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_assets
2023-08-29 17:06:02+0530 - sLogger - ERROR - error occured: 2022
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_assets
2023-08-29 17:06:02+0530 - sLogger - ERROR - error occured: 2022
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:02+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-29 17:06:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:02+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-29 17:06:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_liabilities
2023-08-29 17:06:03+0530 - sLogger - ERROR - error occured: 2022
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_non_current_liabilities
2023-08-29 17:06:03+0530 - sLogger - ERROR - error occured: 2022
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('contributed equity', 100), ('contributed equity', 100), ('equity share capital', 59), ('common stock', 36), (' issued capital', 31), ('perpetual equity instrument', 29), ('share capital', 22), (' share capital ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('share capital', 24), (' share capital ', 24), ('contributed equity', 18), ('contributed equity', 18), ('equity share capital', 17), (' issued capital', 12), ('common stock', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), (' share capital ', 27), ('common stock', 26), ('perpetual equity instrument', 22), ('contributed equity', 22), ('contributed equity', 22), (' issued capital', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 241295.0, 'line_item_label': ['Contributed equity'], 'note_numbers': ['3.17'], 'line_item_value': [241295.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('contributed equity', 100), ('contributed equity', 100), ('equity share capital', 59), ('common stock', 36), (' issued capital', 31), ('perpetual equity instrument', 29), ('share capital', 22), (' share capital ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('share capital', 24), (' share capital ', 24), ('contributed equity', 18), ('contributed equity', 18), ('equity share capital', 17), (' issued capital', 12), ('common stock', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('equity share capital', 28), ('share capital', 27), (' share capital ', 27), ('common stock', 26), ('perpetual equity instrument', 22), ('contributed equity', 22), ('contributed equity', 22), (' issued capital', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 241295.0, 'line_item_label': ['Contributed equity'], 'note_numbers': ['3.17'], 'line_item_value': [241295.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-29 17:06:03+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('reserves and surplus', 24), ('other reserves', 21), ('additional paid in capital', 19), ('additional paid up capital', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('reserves and surplus', 24), ('other reserves', 21), ('additional paid in capital', 19), ('additional paid up capital', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves and surplus', 36), ('additional paid in capital', 30), ('additional paid up capital', 30), ('other equity', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('retained earnings', 22), ('reserves surplus', 21), (' accumulated losses', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 71901.0, 'line_item_label': ['Retained Earnings'], 'note_numbers': [nan], 'line_item_value': [71901.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('retained earnings', 22), ('reserves surplus', 21), (' accumulated losses', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('other equity', 17), ('reserves surplus', 17), (' accumulated losses', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 93128.0, 'line_item_label': ['Retained Earnings'], 'note_numbers': [nan], 'line_item_value': [93128.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-29 17:06:03+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('non controlling interest', 44), ('minority interest', 40), ('minority interest', 40), ('noncontrolling interest', 29), (' non-controlling interest', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('minority interest', 40), ('minority interest', 40), ('noncontrolling interest', 32), (' non-controlling interest', 32), ('non controlling interest', 23)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('non controlling interest', 26), ('minority interest', 16), ('minority interest', 16), ('noncontrolling interest', 13), (' non-controlling interest', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('non controlling interest', 44), ('minority interest', 40), ('minority interest', 40), ('noncontrolling interest', 29), (' non-controlling interest', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('minority interest', 40), ('minority interest', 40), ('noncontrolling interest', 32), (' non-controlling interest', 32), ('non controlling interest', 23)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('non controlling interest', 26), ('minority interest', 16), ('minority interest', 16), ('noncontrolling interest', 13), (' non-controlling interest', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves ', 21), (' reserves', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves', 100), ('other reserves ', 67)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 2171.0, 'line_item_label': ['Reserves'], 'note_numbers': ['3.18'], 'line_item_value': [2171.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves ', 21), (' reserves', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [(' reserves', 100), ('other reserves ', 67)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 2038.0, 'line_item_label': ['Reserves'], 'note_numbers': ['3.18'], 'line_item_value': [2038.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: keyword_mapping , File:DataBucketingUtils.py,  function: get_notes_tables_from_meta_dict_and_standardized_notes_dict
2023-08-29 17:06:03+0530 - sLogger - ERROR - error occured: 'NoneType' object is not iterable
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 46), ('from trading business', 38), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25), ('transmission and distribution business', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('revenue from operations', 86), (' Revenue', 44), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('from trading business', 39), (' Sales revenue', 38), ('sale of products', 30), (' Sale of coal', 27), ('net sales', 21), ('transmission and distribution business', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Sales revenue', 78), (' Revenue', 67), ('revenue from operations', 43), ('sale of products', 42), ('net sales', 40), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' Sale of coal', 40), ('from trading business', 39), ('revenue from operations', 38), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 18), ('net sales', 17), (' Revenue', 9), ('sale of products', 7), (' Sales revenue', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 30), ('from trading business', 29), ('sale of products', 26), ('revenue from operations', 23), ('net sales', 22), (' Sale of coal', 21), (' Sales revenue', 20), (' Revenue', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('sale of products', 48), ('transmission and distribution business', 41), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 31), ('revenue from operations', 30), ('net sales', 26), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('net sales', 33), ('revenue from operations', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Sale of coal', 19), ('sale of products', 18), (' Revenue', 14), ('from trading business', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('transmission and distribution business', 30), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 25), ('revenue from operations', 24), ('net sales', 24), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), ('from trading business', 20), (' Sale of coal', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('sale of products', 35), ('from trading business', 32), ('net sales', 27), ('revenue from operations', 26), (' Revenue', 21), ('transmission and distribution business', 20), (' Sale of coal', 19), (' Sales revenue', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' Sales revenue', 52), ('sale of products', 42), ('net sales', 40), (' Revenue', 33), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('revenue from operations', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('revenue from operations', 42), ('from trading business', 33), ('sale of products', 31), ('transmission and distribution business', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sales revenue', 26), ('net sales', 23), (' Sale of coal', 17), (' Revenue', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('transmission and distribution business', 32), ('revenue from operations', 26), ('from trading business', 24), (' Sales revenue', 22), ('net sales', 20), ('sale of products', 18), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Revenue', 14), (' Sale of coal', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 37), ('revenue from operations', 33), ('from trading business', 33), (' Sale of coal', 28), ('sale of products', 26), (' Revenue', 24), ('transmission and distribution business', 22), ('net sales', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 28), ('revenue from operations', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('sale of products', 21), (' Sales revenue', 19), ('net sales', 15), (' Sale of coal', 13), (' Revenue', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 86, 'value': 528067.0, 'line_item_label': ['Revenue from contracts with customers', 'Revenue from Operating Lease'], 'note_numbers': ['3.3', nan], 'line_item_value': [526398.0, 1669.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 46), ('from trading business', 38), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25), ('transmission and distribution business', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('revenue from operations', 86), (' Revenue', 44), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('from trading business', 39), (' Sales revenue', 38), ('sale of products', 30), (' Sale of coal', 27), ('net sales', 21), ('transmission and distribution business', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Sales revenue', 78), (' Revenue', 67), ('revenue from operations', 43), ('sale of products', 42), ('net sales', 40), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' Sale of coal', 40), ('from trading business', 39), ('revenue from operations', 38), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('transmission and distribution business', 18), ('net sales', 17), (' Revenue', 9), ('sale of products', 7), (' Sales revenue', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('revenue from contracts with customers', 35), ('Revenue from contract with customers', 35), ('transmission and distribution business', 30), ('from trading business', 29), ('sale of products', 26), ('revenue from operations', 23), ('net sales', 22), (' Sale of coal', 21), (' Sales revenue', 20), (' Revenue', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('sale of products', 48), ('transmission and distribution business', 41), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('from trading business', 31), ('revenue from operations', 30), ('net sales', 26), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('net sales', 33), ('revenue from operations', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Sale of coal', 19), ('sale of products', 18), (' Revenue', 14), ('from trading business', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('transmission and distribution business', 30), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 25), ('revenue from operations', 24), ('net sales', 24), ('revenue from contracts with customers', 24), ('Revenue from contract with customers', 24), ('from trading business', 20), (' Sale of coal', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('sale of products', 35), ('net sales', 32), ('from trading business', 31), (' Sale of coal', 30), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), (' Sales revenue', 18), ('revenue from operations', 15), (' Revenue', 12), ('transmission and distribution business', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), (' Revenue', 33), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('from trading business', 22), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), ('transmission and distribution business', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('sale of products', 35), ('from trading business', 32), ('net sales', 27), ('revenue from operations', 26), (' Revenue', 21), ('transmission and distribution business', 20), (' Sale of coal', 19), (' Sales revenue', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' Sales revenue', 52), ('sale of products', 42), ('net sales', 40), (' Revenue', 33), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('revenue from operations', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('revenue from operations', 42), ('from trading business', 33), ('sale of products', 31), ('transmission and distribution business', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), (' Sales revenue', 26), ('net sales', 23), (' Sale of coal', 17), (' Revenue', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('sale of products', 29), ('transmission and distribution business', 27), (' Revenue', 27), ('net sales', 25), (' Sale of coal', 24), ('revenue from contracts with customers', 21), ('Revenue from contract with customers', 21), ('revenue from operations', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('transmission and distribution business', 32), ('revenue from operations', 26), ('from trading business', 24), (' Sales revenue', 22), ('net sales', 20), ('sale of products', 18), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Revenue', 14), (' Sale of coal', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 37), ('revenue from operations', 33), ('from trading business', 33), (' Sale of coal', 28), ('sale of products', 26), (' Revenue', 24), ('transmission and distribution business', 22), ('net sales', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('transmission and distribution business', 30), ('from trading business', 28), ('revenue from operations', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('sale of products', 21), (' Sales revenue', 19), ('net sales', 15), (' Sale of coal', 13), (' Revenue', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': 86, 'value': 395806.0, 'line_item_label': ['Revenue from contracts with customers', 'Revenue from Operating Lease'], 'note_numbers': ['3.3', nan], 'line_item_value': [394534.0, 1272.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 24), ('expenditure', 24), ('total expenses', 23), ('total expenditure', 21), ('expense', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [(' Personnel costs', 40), ('expenditure', 32), ('purchase of stock-in-trade', 30), ('expense', 30), (' Cost of inventory sold', 30), (' cost of coal sold', 29), ('total expenditure', 27), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), ('total expenses', 24), (' Cost of product sold', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('total expenses', 75), ('total expenditure', 71), ('purchase of stock-in-trade', 39), (' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), ('expenditure', 36), ('expense', 33), (' cost of coal sold', 23), (' Personnel costs', 23), (' Cost of product sold', 21), (' Cost of goods and services sold', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 36), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), ('total expenditure', 25), ('expenditure', 15), ('expense', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10), (' Cost of product sold', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Cost of product sold', 39), ('purchase of stock-in-trade', 37), (' Cost of goods and services sold', 36), (' Cost of inventory sold', 32), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('total expenses', 26), (' cost of coal sold', 24), ('expense', 16), ('expenditure', 14), ('total expenditure', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Cost of goods and services sold', 84), (' Cost of product sold', 72), (' cost of coal sold', 50), (' Personnel costs', 50), (' Cost of inventory sold', 45), ('cost of sales', 36), ('Cost of sales', 36), ('total expenditure', 30), ('purchase of stock-in-trade', 29), ('total expenses', 29), ('expenditure', 15), ('expense', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('expenditure', 31), (' Cost of product sold', 31), (' Personnel costs', 28), ('total expenditure', 26), (' Cost of goods and services sold', 26), (' Cost of inventory sold', 24), ('cost of sales', 19), ('Cost of sales', 19), (' cost of coal sold', 17), ('purchase of stock-in-trade', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), ('expenditure', 28), (' Personnel costs', 25), ('total expenditure', 24), (' Cost of goods and services sold', 24), (' Cost of inventory sold', 22), ('purchase of stock-in-trade', 18), (' cost of coal sold', 15), ('cost of sales', 11), ('Cost of sales', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('purchase of stock-in-trade', 39), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29), (' cost of coal sold', 28), ('expenditure', 25), ('total expenses', 24), ('total expenditure', 21), (' Cost of product sold', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('total expenses', 100), ('total expenditure', 79), ('expense', 67), ('expenditure', 55), ('purchase of stock-in-trade', 45), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 23), (' Cost of product sold', 21), (' Cost of goods and services sold', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' Cost of product sold', 41), ('total expenses', 36), (' cost of coal sold', 34), ('total expenditure', 33), ('cost of sales', 33), ('Cost of sales', 33), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 26), (' Personnel costs', 24), (' Cost of goods and services sold', 23), ('expenditure', 22), ('expense', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' Cost of product sold', 23), (' Cost of goods and services sold', 23), (' Cost of inventory sold', 22), ('total expenditure', 20), ('purchase of stock-in-trade', 19), (' cost of coal sold', 18), (' Personnel costs', 18), ('expenditure', 16), ('cost of sales', 16), ('Cost of sales', 16), ('total expenses', 15), ('expense', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('purchase of stock-in-trade', 39), ('total expenses', 36), (' Cost of inventory sold', 35), (' cost of coal sold', 34), ('total expenditure', 33), ('expenditure', 32), (' Personnel costs', 29), ('cost of sales', 28), ('Cost of sales', 28), (' Cost of product sold', 27), ('expense', 24), (' Cost of goods and services sold', 23)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Cost of goods and services sold', 28), (' Cost of inventory sold', 27), ('total expenditure', 24), ('total expenses', 21), (' Cost of product sold', 20), (' Personnel costs', 20), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 13), ('purchase of stock-in-trade', 12), (' cost of coal sold', 10), ('expense', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6, 12], 'score': 100, 'value': -544261.0, 'line_item_label': ['Expenses', 'Costof products and services sold', 'Total Expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [0.0, -67051.0, -477210.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 24), ('expenditure', 24), ('total expenses', 23), ('total expenditure', 21), ('expense', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [(' Personnel costs', 40), ('expenditure', 32), ('purchase of stock-in-trade', 30), ('expense', 30), (' Cost of inventory sold', 30), (' cost of coal sold', 29), ('total expenditure', 27), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), ('total expenses', 24), (' Cost of product sold', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('total expenses', 75), ('total expenditure', 71), ('purchase of stock-in-trade', 39), (' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), ('expenditure', 36), ('expense', 33), (' cost of coal sold', 23), (' Personnel costs', 23), (' Cost of product sold', 21), (' Cost of goods and services sold', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), ('total expenses', 36), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), ('total expenditure', 25), ('expenditure', 15), ('expense', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10), (' Cost of product sold', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Cost of product sold', 39), ('purchase of stock-in-trade', 37), (' Cost of goods and services sold', 36), (' Cost of inventory sold', 32), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), ('total expenses', 26), (' cost of coal sold', 24), ('expense', 16), ('expenditure', 14), ('total expenditure', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Cost of goods and services sold', 84), (' Cost of product sold', 72), (' cost of coal sold', 50), (' Personnel costs', 50), (' Cost of inventory sold', 45), ('cost of sales', 36), ('Cost of sales', 36), ('total expenditure', 30), ('purchase of stock-in-trade', 29), ('total expenses', 29), ('expenditure', 15), ('expense', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('expenditure', 31), (' Cost of product sold', 31), (' Personnel costs', 28), ('total expenditure', 26), (' Cost of goods and services sold', 26), (' Cost of inventory sold', 24), ('cost of sales', 19), ('Cost of sales', 19), (' cost of coal sold', 17), ('purchase of stock-in-trade', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), ('expenditure', 28), (' Personnel costs', 25), ('total expenditure', 24), (' Cost of goods and services sold', 24), (' Cost of inventory sold', 22), ('purchase of stock-in-trade', 18), (' cost of coal sold', 15), ('cost of sales', 11), ('Cost of sales', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 17), ('total expenditure', 15), ('expense', 12), ('expenditure', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of inventory sold', 26), (' Personnel costs', 23), (' Cost of product sold', 21), (' cost of coal sold', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('purchase of stock-in-trade', 39), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29), (' cost of coal sold', 28), ('expenditure', 25), ('total expenses', 24), ('total expenditure', 21), (' Cost of product sold', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('total expenses', 100), ('total expenditure', 79), ('expense', 67), ('expenditure', 55), ('purchase of stock-in-trade', 45), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 23), (' Cost of product sold', 21), (' Cost of goods and services sold', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' Cost of product sold', 41), ('total expenses', 36), (' cost of coal sold', 34), ('total expenditure', 33), ('cost of sales', 33), ('Cost of sales', 33), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 26), (' Personnel costs', 24), (' Cost of goods and services sold', 23), ('expenditure', 22), ('expense', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), (' cost of coal sold', 20), (' Personnel costs', 20), (' Cost of product sold', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' Cost of product sold', 23), (' Cost of goods and services sold', 23), (' Cost of inventory sold', 22), ('total expenditure', 20), ('purchase of stock-in-trade', 19), (' cost of coal sold', 18), (' Personnel costs', 18), ('expenditure', 16), ('cost of sales', 16), ('Cost of sales', 16), ('total expenses', 15), ('expense', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('purchase of stock-in-trade', 39), ('total expenses', 36), (' Cost of inventory sold', 35), (' cost of coal sold', 34), ('total expenditure', 33), ('expenditure', 32), (' Personnel costs', 29), ('cost of sales', 28), ('Cost of sales', 28), (' Cost of product sold', 27), ('expense', 24), (' Cost of goods and services sold', 23)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Cost of goods and services sold', 28), (' Cost of inventory sold', 27), ('total expenditure', 24), ('total expenses', 21), (' Cost of product sold', 20), (' Personnel costs', 20), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 13), ('purchase of stock-in-trade', 12), (' cost of coal sold', 10), ('expense', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6, 12], 'score': 100, 'value': -429908.0, 'line_item_label': ['Expenses', 'Costof products and services sold', 'Total Expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [0.0, -50957.0, -378951.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), ('other expenses', 27), (' Other expenses', 27), (' Logistics and distribution', 27), (' Other expenses', 27), (' Marketing expenses', 22), (' Occupancy ', 22), (' Sales and marketing', 21), (' Lease expenses', 19), (' Selling Expenses', 19), (' Occupancy expenses', 18), (' Management expenses', 18), (' Depreciation expenses', 17), (' Advertising expenses', 17), (' Depreciation expenses', 17), (' depreciation', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [(' Administrative expenses', 38), (' Administration expenses', 38), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Amortisation expenses', 34), (' Lease expenses', 31), (' Occupancy expenses', 30), (' depreciation', 29), ('Distribution expenses', 27), (' Administrative and other expenses', 26), (' Selling Expenses', 25), (' Marketing expenses', 24), (' Selling & distribution expenses', 24), (' Management expenses', 24), (' Advertising expenses', 22), (' Logistics and distribution', 20), (' Sales and marketing', 17), (' Occupancy ', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Management expenses', 42), (' Marketing expenses', 40), (' Administrative and other expenses', 37), (' Sales and marketing', 37), (' Selling & distribution expenses', 36), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 22), (' depreciation', 21), (' Occupancy ', 12), (' Logistics and distribution', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('other expenses', 57), (' Other expenses', 57), (' Other expenses', 57), (' Administrative and other expenses', 48), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Administrative expenses', 31), (' Administration expenses', 31), (' Lease expenses', 30), (' Selling Expenses', 30), (' Occupancy expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), ('Distribution expenses', 25), (' Management expenses', 21), (' Sales and marketing', 19), (' depreciation', 17), (' Depreciation expenses', 13), (' Advertising expenses', 13), (' Depreciation expenses', 13), (' Occupancy ', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Administrative and other expenses', 36), (' Logistics and distribution', 36), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Sales and marketing', 29), (' Occupancy expenses', 26), (' Depreciation expenses', 24), (' Advertising expenses', 24), (' Depreciation expenses', 24), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Lease expenses', 20), (' Selling Expenses', 20), (' Management expenses', 19), (' Amortisation expenses', 18), (' Selling & distribution expenses', 15), ('Distribution expenses', 11), (' Occupancy ', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Logistics and distribution', 44), (' Sales and marketing', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 39), (' Administrative expenses', 35), (' Administration expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Administrative and other expenses', 29), (' depreciation', 27), (' Advertising expenses', 27), (' Amortisation expenses', 27), (' Selling Expenses', 24), ('other expenses', 19), (' Other expenses', 19), (' Other expenses', 19), (' Occupancy ', 17), (' Lease expenses', 15), (' Occupancy expenses', 14), (' Management expenses', 10), (' Marketing expenses', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Administrative and other expenses', 33), (' Logistics and distribution', 33), (' Sales and marketing', 27), (' depreciation', 21), (' Occupancy ', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Depreciation expenses', 70), (' Depreciation expenses', 70), (' Amortisation expenses', 70), (' Advertising expenses', 59), (' Administrative and other expenses', 58), (' Administrative expenses', 57), (' Administration expenses', 57), ('Distribution expenses', 52), (' Selling & distribution expenses', 47), (' depreciation', 42), (' Sales and marketing', 39), ('other expenses', 32), (' Occupancy expenses', 32), (' Other expenses', 32), (' Lease expenses', 32), (' Selling Expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Logistics and distribution', 30), (' Occupancy ', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' Administrative expenses', 47), (' Administration expenses', 47), (' Advertising expenses', 43), ('Distribution expenses', 42), (' Amortisation expenses', 39), (' Administrative and other expenses', 38), (' Selling & distribution expenses', 37), (' depreciation', 34), (' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Management expenses', 29), (' Sales and marketing', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Logistics and distribution', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Occupancy ', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other expenses', 75), (' Other expenses', 75), (' Other expenses', 75), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Management expenses', 67), (' Marketing expenses', 64), (' Selling & distribution expenses', 48), (' Administrative and other expenses', 47), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' Sales and marketing', 37), (' depreciation', 32), (' Occupancy ', 12), (' Logistics and distribution', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('Distribution expenses', 33), ('other expenses', 31), (' Other expenses', 31), (' Other expenses', 31), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Advertising expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Occupancy expenses', 26), (' Administrative and other expenses', 26), (' Lease expenses', 26), (' Management expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' depreciation', 24), (' Selling Expenses', 21), (' Occupancy ', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' Administrative and other expenses', 38), (' Selling & distribution expenses', 32), ('Distribution expenses', 29), (' Logistics and distribution', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Advertising expenses', 24), (' Amortisation expenses', 24), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Sales and marketing', 18), (' depreciation', 17), (' Lease expenses', 16), (' Selling Expenses', 16), (' Marketing expenses', 15), (' Occupancy expenses', 12), (' Management expenses', 12), (' Occupancy ', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('other expenses', 51), (' Other expenses', 51), (' Other expenses', 51), (' Administrative and other expenses', 42), (' Lease expenses', 37), (' Selling Expenses', 37), (' Marketing expenses', 35), (' Logistics and distribution', 34), (' Selling & distribution expenses', 33), (' Occupancy expenses', 31), (' Management expenses', 31), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' depreciation', 24), ('Distribution expenses', 23), (' Advertising expenses', 19), (' Sales and marketing', 19), (' Occupancy ', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Selling & distribution expenses', 29), (' Administrative and other expenses', 29), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Sales and marketing', 22), ('other expenses', 21), (' Other expenses', 21), (' Other expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Marketing expenses', 16), (' Occupancy expenses', 15), (' Amortisation expenses', 14), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' depreciation', 11), (' Advertising expenses', 10), (' Occupancy ', 4)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -18889.0, 'line_item_label': ['Other expenses'], 'note_numbers': [nan], 'line_item_value': [-18889.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), ('other expenses', 27), (' Other expenses', 27), (' Logistics and distribution', 27), (' Other expenses', 27), (' Marketing expenses', 22), (' Occupancy ', 22), (' Sales and marketing', 21), (' Lease expenses', 19), (' Selling Expenses', 19), (' Occupancy expenses', 18), (' Management expenses', 18), (' Depreciation expenses', 17), (' Advertising expenses', 17), (' Depreciation expenses', 17), (' depreciation', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [(' Administrative expenses', 38), (' Administration expenses', 38), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Amortisation expenses', 34), (' Lease expenses', 31), (' Occupancy expenses', 30), (' depreciation', 29), ('Distribution expenses', 27), (' Administrative and other expenses', 26), (' Selling Expenses', 25), (' Marketing expenses', 24), (' Selling & distribution expenses', 24), (' Management expenses', 24), (' Advertising expenses', 22), (' Logistics and distribution', 20), (' Sales and marketing', 17), (' Occupancy ', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Management expenses', 42), (' Marketing expenses', 40), (' Administrative and other expenses', 37), (' Sales and marketing', 37), (' Selling & distribution expenses', 36), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 22), (' depreciation', 21), (' Occupancy ', 12), (' Logistics and distribution', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('other expenses', 57), (' Other expenses', 57), (' Other expenses', 57), (' Administrative and other expenses', 48), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Administrative expenses', 31), (' Administration expenses', 31), (' Lease expenses', 30), (' Selling Expenses', 30), (' Occupancy expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), ('Distribution expenses', 25), (' Management expenses', 21), (' Sales and marketing', 19), (' depreciation', 17), (' Depreciation expenses', 13), (' Advertising expenses', 13), (' Depreciation expenses', 13), (' Occupancy ', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Administrative and other expenses', 36), (' Logistics and distribution', 36), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Sales and marketing', 29), (' Occupancy expenses', 26), (' Depreciation expenses', 24), (' Advertising expenses', 24), (' Depreciation expenses', 24), (' depreciation', 23), (' Administrative expenses', 23), (' Administration expenses', 23), (' Lease expenses', 20), (' Selling Expenses', 20), (' Management expenses', 19), (' Amortisation expenses', 18), (' Selling & distribution expenses', 15), ('Distribution expenses', 11), (' Occupancy ', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Logistics and distribution', 44), (' Sales and marketing', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 39), (' Administrative expenses', 35), (' Administration expenses', 35), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Administrative and other expenses', 29), (' depreciation', 27), (' Advertising expenses', 27), (' Amortisation expenses', 27), (' Selling Expenses', 24), ('other expenses', 19), (' Other expenses', 19), (' Other expenses', 19), (' Occupancy ', 17), (' Lease expenses', 15), (' Occupancy expenses', 14), (' Management expenses', 10), (' Marketing expenses', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Administrative and other expenses', 33), (' Logistics and distribution', 33), (' Sales and marketing', 27), (' depreciation', 21), (' Occupancy ', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Depreciation expenses', 70), (' Depreciation expenses', 70), (' Amortisation expenses', 70), (' Advertising expenses', 59), (' Administrative and other expenses', 58), (' Administrative expenses', 57), (' Administration expenses', 57), ('Distribution expenses', 52), (' Selling & distribution expenses', 47), (' depreciation', 42), (' Sales and marketing', 39), ('other expenses', 32), (' Occupancy expenses', 32), (' Other expenses', 32), (' Lease expenses', 32), (' Selling Expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Logistics and distribution', 30), (' Occupancy ', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Distribution expenses', 30), (' Management expenses', 26), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 22), (' Administrative expenses', 22), (' Administrative and other expenses', 22), (' Administration expenses', 22), (' Lease expenses', 18), (' Marketing expenses', 17), (' Occupancy expenses', 17), (' Amortisation expenses', 16), (' Advertising expenses', 15), (' Sales and marketing', 15), (' Logistics and distribution', 13), ('other expenses', 9), (' Other expenses', 9), (' Selling Expenses', 9), (' Other expenses', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 25), (' Sales and marketing', 22), (' Occupancy ', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' Administrative expenses', 47), (' Administration expenses', 47), (' Advertising expenses', 43), ('Distribution expenses', 42), (' Amortisation expenses', 39), (' Administrative and other expenses', 38), (' Selling & distribution expenses', 37), (' depreciation', 34), (' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Management expenses', 29), (' Sales and marketing', 27), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Lease expenses', 24), (' Selling Expenses', 24), (' Logistics and distribution', 24), (' Other expenses', 24), (' Marketing expenses', 23), (' Occupancy ', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other expenses', 75), (' Other expenses', 75), (' Other expenses', 75), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Management expenses', 67), (' Marketing expenses', 64), (' Selling & distribution expenses', 48), (' Administrative and other expenses', 47), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' Sales and marketing', 37), (' depreciation', 32), (' Occupancy ', 12), (' Logistics and distribution', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('Distribution expenses', 33), ('other expenses', 31), (' Other expenses', 31), (' Other expenses', 31), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Advertising expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' Occupancy expenses', 26), (' Administrative and other expenses', 26), (' Lease expenses', 26), (' Management expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' depreciation', 24), (' Selling Expenses', 21), (' Occupancy ', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Occupancy ', 10), (' Logistics and distribution', 6), (' Sales and marketing', 6)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' Administrative and other expenses', 38), (' Selling & distribution expenses', 32), ('Distribution expenses', 29), (' Logistics and distribution', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Advertising expenses', 24), (' Amortisation expenses', 24), ('other expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Sales and marketing', 18), (' depreciation', 17), (' Lease expenses', 16), (' Selling Expenses', 16), (' Marketing expenses', 15), (' Occupancy expenses', 12), (' Management expenses', 12), (' Occupancy ', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('other expenses', 51), (' Other expenses', 51), (' Other expenses', 51), (' Administrative and other expenses', 42), (' Lease expenses', 37), (' Selling Expenses', 37), (' Marketing expenses', 35), (' Logistics and distribution', 34), (' Selling & distribution expenses', 33), (' Occupancy expenses', 31), (' Management expenses', 31), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Administrative expenses', 28), (' Administration expenses', 28), (' depreciation', 24), ('Distribution expenses', 23), (' Advertising expenses', 19), (' Sales and marketing', 19), (' Occupancy ', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Selling & distribution expenses', 29), (' Administrative and other expenses', 29), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Sales and marketing', 22), ('other expenses', 21), (' Other expenses', 21), (' Other expenses', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17), (' Marketing expenses', 16), (' Occupancy expenses', 15), (' Amortisation expenses', 14), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' depreciation', 11), (' Advertising expenses', 10), (' Occupancy ', 4)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -15300.0, 'line_item_label': ['Other expenses'], 'note_numbers': [nan], 'line_item_value': [-15300.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), ('Rent', 22), (' Occupancy', 22), (' Occupancy expenses', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [(' Rental expenses', 41), (' Administration expenses', 38), (' Occupancy expenses', 30), ('Rent', 24), (' Occupancy', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Rental expenses', 56), ('Rent', 50), (' Occupancy expenses', 42), (' Administration expenses', 29), (' Occupancy', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' Administration expenses', 31), (' Occupancy expenses', 29), (' Rental expenses', 28), ('Rent', 10), (' Occupancy', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Occupancy expenses', 26), (' Rental expenses', 25), (' Administration expenses', 23), ('Rent', 17), (' Occupancy', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Administration expenses', 35), (' Occupancy', 17), (' Rental expenses', 14), (' Occupancy expenses', 14), ('Rent', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 42), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Administration expenses', 57), (' Occupancy expenses', 32), (' Rental expenses', 31), ('Rent', 20), (' Occupancy', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' Administration expenses', 47), (' Rental expenses', 40), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' Rental expenses', 80), (' Occupancy expenses', 67), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 28), (' Occupancy expenses', 26), ('Rent', 19), (' Occupancy', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' Administration expenses', 26), ('Rent', 14), (' Rental expenses', 12), (' Occupancy expenses', 12), (' Occupancy', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' Occupancy expenses', 31), (' Rental expenses', 30), (' Administration expenses', 28), ('Rent', 26), (' Occupancy', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Rental expenses', 23), (' Administration expenses', 20), (' Occupancy expenses', 15), ('Rent', 9), (' Occupancy', 4)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 80, 'value': -477210.0, 'line_item_label': ['Total Expenses'], 'note_numbers': [nan], 'line_item_value': [-477210.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), ('Rent', 22), (' Occupancy', 22), (' Occupancy expenses', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [(' Rental expenses', 41), (' Administration expenses', 38), (' Occupancy expenses', 30), ('Rent', 24), (' Occupancy', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Rental expenses', 56), ('Rent', 50), (' Occupancy expenses', 42), (' Administration expenses', 29), (' Occupancy', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' Administration expenses', 31), (' Occupancy expenses', 29), (' Rental expenses', 28), ('Rent', 10), (' Occupancy', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Occupancy expenses', 26), (' Rental expenses', 25), (' Administration expenses', 23), ('Rent', 17), (' Occupancy', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Administration expenses', 35), (' Occupancy', 17), (' Rental expenses', 14), (' Occupancy expenses', 14), ('Rent', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 42), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Administration expenses', 57), (' Occupancy expenses', 32), (' Rental expenses', 31), ('Rent', 20), (' Occupancy', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Occupancy', 25), (' Administration expenses', 22), (' Rental expenses', 17), (' Occupancy expenses', 17), ('Rent', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' Administration expenses', 47), (' Rental expenses', 40), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' Rental expenses', 80), (' Occupancy expenses', 67), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 28), (' Occupancy expenses', 26), ('Rent', 19), (' Occupancy', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' Administration expenses', 26), ('Rent', 14), (' Rental expenses', 12), (' Occupancy expenses', 12), (' Occupancy', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' Occupancy expenses', 31), (' Rental expenses', 30), (' Administration expenses', 28), ('Rent', 26), (' Occupancy', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Rental expenses', 23), (' Administration expenses', 20), (' Occupancy expenses', 15), ('Rent', 9), (' Occupancy', 4)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 80, 'value': -378951.0, 'line_item_label': ['Total Expenses'], 'note_numbers': [nan], 'line_item_value': [-378951.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('Other revenue', 61), ('other operating', 39), (' Other income', 38)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('Other revenue', 50), ('other operating', 36), (' Other income', 35)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' Other income', 81), ('other operating', 54), ('Other revenue', 36)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Other income', 33), ('other operating', 21), ('Other revenue', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Other income', 39), ('other operating', 30), ('Other revenue', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('other operating', 19), ('Other revenue', 12), (' Other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('Other revenue', 37), (' Other income', 27), ('other operating', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('Other revenue', 24), ('other operating', 12), (' Other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' Other income', 42), ('other operating', 27), ('Other revenue', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('other operating', 29), (' Other income', 25), ('Other revenue', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' Other income', 58), ('other operating', 49), ('Other revenue', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Other income', 23), ('other operating', 19), ('Other revenue', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 81, 'value': 393.0, 'line_item_label': ['Other Income /(Loss)'], 'note_numbers': [nan], 'line_item_value': [393.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('Other revenue', 61), ('other operating', 39), (' Other income', 38)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('Other revenue', 50), ('other operating', 36), (' Other income', 35)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' Other income', 81), ('other operating', 54), ('Other revenue', 36)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Other income', 33), ('other operating', 21), ('Other revenue', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Other income', 39), ('other operating', 30), ('Other revenue', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('other operating', 19), ('Other revenue', 12), (' Other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('Other revenue', 37), (' Other income', 27), ('other operating', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('Other revenue', 24), ('other operating', 12), (' Other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' Other income', 42), ('other operating', 27), ('Other revenue', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('other operating', 29), (' Other income', 25), ('Other revenue', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' Other income', 58), ('other operating', 49), ('Other revenue', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Other income', 23), ('other operating', 19), ('Other revenue', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 81, 'value': 12268.0, 'line_item_label': ['Other Income /(Loss)'], 'note_numbers': [nan], 'line_item_value': [12268.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), ('other income', 37), (' Finance income and costs', 34), (' Net finance costs', 34), (' Finance income and finance costs', 30), ('finance income', 14), ('Finance income', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [(' Interest revenue', 50), ('other income', 38), (' Net finance costs', 22), ('finance income', 18), ('Finance income', 18), (' Finance income and costs', 14), (' Finance income and finance costs', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Interest revenue', 44), ('other income', 35), (' Net finance costs', 22), ('finance income', 17), ('Finance income', 17), (' Finance income and costs', 6), (' Finance income and finance costs', 5)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('other income', 81), ('finance income', 36), ('Finance income', 36), (' Interest revenue', 32), (' Net finance costs', 32), (' Finance income and costs', 27), (' Finance income and finance costs', 23)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Finance income and costs', 35), (' Interest revenue', 35), ('other income', 33), (' Finance income and finance costs', 30), (' Net finance costs', 29), ('finance income', 26), ('Finance income', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Finance income and costs', 51), (' Finance income and finance costs', 45), ('other income', 39), (' Net finance costs', 36), ('finance income', 24), ('Finance income', 24), (' Interest revenue', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 32), (' Finance income and costs', 19), ('finance income', 18), ('Finance income', 18), (' Finance income and finance costs', 16), (' Net finance costs', 16), ('other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), ('finance income', 32), ('Finance income', 32), ('other income', 27), (' Finance income and costs', 26), (' Finance income and finance costs', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' Finance income and costs', 47), (' Finance income and finance costs', 44), (' Net finance costs', 38), (' Interest revenue', 32), ('finance income', 29), ('Finance income', 29), ('other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other income', 35), (' Interest revenue', 22), (' Net finance costs', 22), ('finance income', 17), ('Finance income', 17), (' Finance income and costs', 6), (' Finance income and finance costs', 5)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('other income', 42), ('finance income', 36), ('Finance income', 36), (' Finance income and costs', 29), (' Net finance costs', 29), (' Finance income and finance costs', 25), (' Interest revenue', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('other income', 25), (' Interest revenue', 21), (' Net finance costs', 21), (' Finance income and costs', 19), (' Finance income and finance costs', 17), ('finance income', 9), ('Finance income', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('other income', 58), (' Net finance costs', 43), (' Finance income and costs', 38), ('finance income', 36), ('Finance income', 36), (' Finance income and finance costs', 33), (' Interest revenue', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Finance income and costs', 25), ('other income', 23), (' Finance income and finance costs', 23), (' Interest revenue', 22), (' Net finance costs', 18), ('finance income', 15), ('Finance income', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 9], 'score': 85, 'value': -6371.0, 'line_item_label': ['Other Income /(Loss)', 'Finance costs'], 'note_numbers': [nan, nan], 'line_item_value': [393.0, -6764.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), ('other income', 37), (' Finance income and costs', 34), (' Net finance costs', 34), (' Finance income and finance costs', 30), ('finance income', 14), ('Finance income', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [(' Interest revenue', 50), ('other income', 38), (' Net finance costs', 22), ('finance income', 18), ('Finance income', 18), (' Finance income and costs', 14), (' Finance income and finance costs', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' Interest revenue', 44), ('other income', 35), (' Net finance costs', 22), ('finance income', 17), ('Finance income', 17), (' Finance income and costs', 6), (' Finance income and finance costs', 5)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('other income', 81), ('finance income', 36), ('Finance income', 36), (' Interest revenue', 32), (' Net finance costs', 32), (' Finance income and costs', 27), (' Finance income and finance costs', 23)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' Finance income and costs', 35), (' Interest revenue', 35), ('other income', 33), (' Finance income and finance costs', 30), (' Net finance costs', 29), ('finance income', 26), ('Finance income', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' Finance income and costs', 51), (' Finance income and finance costs', 45), ('other income', 39), (' Net finance costs', 36), ('finance income', 24), ('Finance income', 24), (' Interest revenue', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 32), (' Finance income and costs', 19), ('finance income', 18), ('Finance income', 18), (' Finance income and finance costs', 16), (' Net finance costs', 16), ('other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), ('finance income', 32), ('Finance income', 32), ('other income', 27), (' Finance income and costs', 26), (' Finance income and finance costs', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' Finance income and costs', 47), (' Finance income and finance costs', 44), (' Net finance costs', 38), (' Interest revenue', 32), ('finance income', 29), ('Finance income', 29), ('other income', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other income', 35), (' Interest revenue', 22), (' Net finance costs', 22), ('finance income', 17), ('Finance income', 17), (' Finance income and costs', 6), (' Finance income and finance costs', 5)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('other income', 42), ('finance income', 36), ('Finance income', 36), (' Finance income and costs', 29), (' Net finance costs', 29), (' Finance income and finance costs', 25), (' Interest revenue', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Net finance costs', 26), (' Interest revenue', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('other income', 25), (' Interest revenue', 21), (' Net finance costs', 21), (' Finance income and costs', 19), (' Finance income and finance costs', 17), ('finance income', 9), ('Finance income', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('other income', 58), (' Net finance costs', 43), (' Finance income and costs', 38), ('finance income', 36), ('Finance income', 36), (' Finance income and finance costs', 33), (' Interest revenue', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' Finance income and costs', 25), ('other income', 23), (' Finance income and finance costs', 23), (' Interest revenue', 22), (' Net finance costs', 18), ('finance income', 15), ('Finance income', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 9], 'score': 85, 'value': 4243.0, 'line_item_label': ['Other Income /(Loss)', 'Finance costs'], 'note_numbers': [nan, nan], 'line_item_value': [12268.0, -8025.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' finance expenses', 24), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 18), ('finance costs', 18), (' net finance costs ', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' finance expenses', 40), (' net finance costs ', 38), ('finance cost', 30), ('finance costs', 30)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' finance expenses', 35), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' net finance costs ', 21), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' net finance costs ', 43), (' finance expenses', 40), ('finance cost', 37), ('finance costs', 37)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' finance expenses', 19), (' net finance costs ', 18), ('finance cost', 15), ('finance costs', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -6764.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-6764.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' finance expenses', 24), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 18), ('finance costs', 18), (' net finance costs ', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' finance expenses', 40), (' net finance costs ', 38), ('finance cost', 30), ('finance costs', 30)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' finance expenses', 35), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' net finance costs ', 21), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' net finance costs ', 43), (' finance expenses', 40), ('finance cost', 37), ('finance costs', 37)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' finance expenses', 19), (' net finance costs ', 18), ('finance cost', 15), ('finance costs', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -8025.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-8025.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' finance expenses', 24), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 18), ('finance costs', 18), (' net finance costs ', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' finance expenses', 40), (' net finance costs ', 38), ('finance cost', 30), ('finance costs', 30)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' finance expenses', 35), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' net finance costs ', 21), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' net finance costs ', 43), (' finance expenses', 40), ('finance cost', 37), ('finance costs', 37)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' finance expenses', 19), (' net finance costs ', 18), ('finance cost', 15), ('finance costs', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -6764.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-6764.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 34), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('finance cost', 25), ('finance costs', 25), (' finance expenses', 24), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 30), ('finance costs', 30), (' finance expenses', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [(' net finance costs ', 29), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 34), ('finance costs', 34), (' finance expenses', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), ('finance cost', 18), ('finance costs', 18), (' net finance costs ', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [(' finance expenses', 40), (' net finance costs ', 38), ('finance cost', 30), ('finance costs', 30)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' finance expenses', 35), ('finance cost', 32), ('finance costs', 32), (' net finance costs ', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [(' net finance costs ', 21), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' net finance costs ', 43), (' finance expenses', 40), ('finance cost', 37), ('finance costs', 37)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' finance expenses', 19), (' net finance costs ', 18), ('finance cost', 15), ('finance costs', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -8025.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-8025.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('NULL', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('NULL', 38)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('NULL', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('NULL', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('NULL', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('NULL', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('NULL', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('NULL', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('NULL', 4)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('NULL', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('NULL', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('NULL', 38)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('NULL', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('NULL', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('NULL', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('NULL', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('NULL', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('NULL', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('NULL', 4)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('NULL', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('current tax', 33), ('provision for taxation previous year', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 31), (' income tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 25), (' income tax expense', 25), ('deferred tax', 20), (' tax (expense)/benefit', 16), ('prior year ', 10), ('earlier year', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('amount transferred to retained earnings', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 32), ('deferred tax', 27), (' income tax', 27), ('prior year ', 26), (' income tax benefit', 26), ('current tax', 25), (' income tax expense', 22), (' income tax benefit/(expense)', 22), (' tax (expense)/benefit', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('current tax', 52), ('deferred tax', 48), (' income tax expense', 43), ('provision for taxation previous year', 39), (' income tax', 38), (' income tax benefit', 34), (' tax (expense)/benefit', 33), (' income tax benefit/(expense)', 28), ('prior year ', 27), ('earlier year', 25), ('amount transferred to retained earnings', 21), ('minimum alternate tax credit entitlement', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' income tax', 56), (' income tax expense', 44), (' income tax benefit', 42), ('provision for taxation previous year', 36), (' income tax benefit/(expense)', 35), (' tax (expense)/benefit', 29), ('amount transferred to retained earnings', 28), ('earlier year', 21), ('minimum alternate tax credit entitlement', 17), ('deferred tax', 16), ('current tax', 15), ('prior year ', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), (' income tax benefit', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('current tax', 33), ('provision for taxation previous year', 29), ('prior year ', 28), ('amount transferred to retained earnings', 26), (' income tax expense', 23), (' income tax', 21), ('minimum alternate tax credit entitlement', 20), (' income tax benefit/(expense)', 19), (' income tax benefit', 17), (' tax (expense)/benefit', 16), ('deferred tax', 14), ('earlier year', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' income tax benefit', 30), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 27), ('deferred tax', 26), (' income tax expense', 26), (' income tax', 26), (' income tax benefit/(expense)', 26), (' tax (expense)/benefit', 25), ('earlier year', 24), ('current tax', 20), ('prior year ', 20), ('minimum alternate tax credit entitlement', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 46), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('current tax', 30), ('minimum alternate tax credit entitlement', 30), ('prior year ', 25), ('provision for taxation previous year', 24), ('earlier year', 24), (' income tax', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' tax (expense)/benefit', 45), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 36), ('amount transferred to retained earnings', 34), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('prior year ', 28), ('earlier year', 26), ('current tax', 22), (' income tax benefit', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('amount transferred to retained earnings', 49), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('deferred tax', 26), (' income tax benefit/(expense)', 26), ('current tax', 24), ('earlier year', 24), (' income tax expense', 21), (' income tax benefit', 21), ('provision for taxation previous year', 20), ('prior year ', 19), (' income tax', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' income tax expense', 71), (' tax (expense)/benefit', 60), (' income tax benefit/(expense)', 56), ('deferred tax', 48), ('current tax', 43), (' income tax', 38), (' income tax benefit', 34), ('provision for taxation previous year', 29), ('prior year ', 27), ('earlier year', 25), ('amount transferred to retained earnings', 15), ('minimum alternate tax credit entitlement', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' income tax benefit', 59), ('provision for taxation previous year', 54), (' income tax expense', 51), (' income tax benefit/(expense)', 51), (' income tax', 50), (' tax (expense)/benefit', 44), ('deferred tax', 39), ('current tax', 37), ('minimum alternate tax credit entitlement', 27), ('amount transferred to retained earnings', 22), ('prior year ', 22), ('earlier year', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('provision for taxation previous year', 44), ('earlier year', 34), ('minimum alternate tax credit entitlement', 33), ('current tax', 28), (' tax (expense)/benefit', 28), (' income tax benefit', 26), (' income tax benefit/(expense)', 26), ('prior year ', 25), ('deferred tax', 23), (' income tax', 19), ('amount transferred to retained earnings', 18), (' income tax expense', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' income tax expense', 56), (' income tax benefit/(expense)', 47), (' income tax benefit', 45), (' income tax', 39), ('amount transferred to retained earnings', 33), ('provision for taxation previous year', 32), ('prior year ', 27), (' tax (expense)/benefit', 27), ('current tax', 26), ('earlier year', 21), ('deferred tax', 17), ('minimum alternate tax credit entitlement', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' income tax benefit/(expense)', 31), ('provision for taxation previous year', 30), ('minimum alternate tax credit entitlement', 29), (' income tax expense', 28), (' income tax benefit', 28), ('earlier year', 23), (' tax (expense)/benefit', 22), ('current tax', 19), ('prior year ', 19), (' income tax', 19), ('deferred tax', 17), ('amount transferred to retained earnings', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': -19470.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['3.9'], 'line_item_value': [-19470.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('current tax', 33), ('provision for taxation previous year', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 31), (' income tax', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 25), (' income tax expense', 25), ('deferred tax', 20), (' tax (expense)/benefit', 16), ('prior year ', 10), ('earlier year', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('amount transferred to retained earnings', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 32), ('deferred tax', 27), (' income tax', 27), ('prior year ', 26), (' income tax benefit', 26), ('current tax', 25), (' income tax expense', 22), (' income tax benefit/(expense)', 22), (' tax (expense)/benefit', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('current tax', 52), ('deferred tax', 48), (' income tax expense', 43), ('provision for taxation previous year', 39), (' income tax', 38), (' income tax benefit', 34), (' tax (expense)/benefit', 33), (' income tax benefit/(expense)', 28), ('prior year ', 27), ('earlier year', 25), ('amount transferred to retained earnings', 21), ('minimum alternate tax credit entitlement', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [(' income tax', 56), (' income tax expense', 44), (' income tax benefit', 42), ('provision for taxation previous year', 36), (' income tax benefit/(expense)', 35), (' tax (expense)/benefit', 29), ('amount transferred to retained earnings', 28), ('earlier year', 21), ('minimum alternate tax credit entitlement', 17), ('deferred tax', 16), ('current tax', 15), ('prior year ', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), (' income tax benefit', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('current tax', 33), ('provision for taxation previous year', 29), ('prior year ', 28), ('amount transferred to retained earnings', 26), (' income tax expense', 23), (' income tax', 21), ('minimum alternate tax credit entitlement', 20), (' income tax benefit/(expense)', 19), (' income tax benefit', 17), (' tax (expense)/benefit', 16), ('deferred tax', 14), ('earlier year', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [(' income tax benefit', 30), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 27), ('deferred tax', 26), (' income tax expense', 26), (' income tax', 26), (' income tax benefit/(expense)', 26), (' tax (expense)/benefit', 25), ('earlier year', 24), ('current tax', 20), ('prior year ', 20), ('minimum alternate tax credit entitlement', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 46), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('current tax', 30), ('minimum alternate tax credit entitlement', 30), ('prior year ', 25), ('provision for taxation previous year', 24), ('earlier year', 24), (' income tax', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [(' tax (expense)/benefit', 45), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 36), ('amount transferred to retained earnings', 34), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('prior year ', 28), ('earlier year', 26), ('current tax', 22), (' income tax benefit', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax', 30), (' income tax benefit', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('prior year ', 19), ('earlier year', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('provision for taxation previous year', 34), ('amount transferred to retained earnings', 31), ('deferred tax', 29), (' income tax', 29), ('current tax', 26), ('earlier year', 25), (' income tax benefit', 21), ('prior year ', 18), ('minimum alternate tax credit entitlement', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('amount transferred to retained earnings', 49), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('deferred tax', 26), (' income tax benefit/(expense)', 26), ('current tax', 24), ('earlier year', 24), (' income tax expense', 21), (' income tax benefit', 21), ('provision for taxation previous year', 20), ('prior year ', 19), (' income tax', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' income tax expense', 71), (' tax (expense)/benefit', 60), (' income tax benefit/(expense)', 56), ('deferred tax', 48), ('current tax', 43), (' income tax', 38), (' income tax benefit', 34), ('provision for taxation previous year', 29), ('prior year ', 27), ('earlier year', 25), ('amount transferred to retained earnings', 15), ('minimum alternate tax credit entitlement', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [(' income tax benefit', 59), ('provision for taxation previous year', 54), (' income tax expense', 51), (' income tax benefit/(expense)', 51), (' income tax', 50), (' tax (expense)/benefit', 44), ('deferred tax', 39), ('current tax', 37), ('minimum alternate tax credit entitlement', 27), ('amount transferred to retained earnings', 22), ('prior year ', 22), ('earlier year', 21)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('provision for taxation previous year', 22), ('amount transferred to retained earnings', 19), ('earlier year', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('provision for taxation previous year', 44), ('earlier year', 34), ('minimum alternate tax credit entitlement', 33), ('current tax', 28), (' tax (expense)/benefit', 28), (' income tax benefit', 26), (' income tax benefit/(expense)', 26), ('prior year ', 25), ('deferred tax', 23), (' income tax', 19), ('amount transferred to retained earnings', 18), (' income tax expense', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [(' income tax expense', 56), (' income tax benefit/(expense)', 47), (' income tax benefit', 45), (' income tax', 39), ('amount transferred to retained earnings', 33), ('provision for taxation previous year', 32), ('prior year ', 27), (' tax (expense)/benefit', 27), ('current tax', 26), ('earlier year', 21), ('deferred tax', 17), ('minimum alternate tax credit entitlement', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [(' income tax benefit/(expense)', 31), ('provision for taxation previous year', 30), ('minimum alternate tax credit entitlement', 29), (' income tax expense', 28), (' income tax benefit', 28), ('earlier year', 23), (' tax (expense)/benefit', 22), ('current tax', 19), ('prior year ', 19), (' income tax', 19), ('deferred tax', 17), ('amount transferred to retained earnings', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': -7896.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['3.9'], 'line_item_value': [-7896.0]}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-29 17:06:03+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('share of', 37), ('share in', 37)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('share of', 37), ('share in', 37)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('share of', 9), ('share in', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('exceptional', 16), ('prior period', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('prior period', 30), ('exceptional', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('prior period', 14), ('exceptional', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('prior period', 32), ('exceptional', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('prior period', 29), ('exceptional', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('exceptional', 21), ('prior period', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('exceptional', 19), ('prior period', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('exceptional', 29), ('prior period', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('prior period', 41), ('exceptional', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('prior period', 25), ('exceptional', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('exceptional', 18), ('prior period', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('prior period', 17), ('exceptional', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('exceptional', 16), ('prior period', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('prior period', 30), ('exceptional', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 17)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('prior period', 14), ('exceptional', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('prior period', 32), ('exceptional', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('prior period', 29), ('exceptional', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('exceptional', 21), ('prior period', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('exceptional', 19), ('prior period', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('exceptional', 24), ('prior period', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('exceptional', 29), ('prior period', 24)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('prior period', 41), ('exceptional', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('prior period', 25), ('exceptional', 14)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('exceptional', 18), ('prior period', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('prior period', 17), ('exceptional', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-29 17:06:03+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-29 17:06:03+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('NULL', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('NULL', 38)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('NULL', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('NULL', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('NULL', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('NULL', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('NULL', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('NULL', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('NULL', 4)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('NULL', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-29 17:06:03+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-29 17:06:03+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = revenue from operating lease , res_fuzz_match = [('NULL', 16)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total revenue , res_fuzz_match = [('NULL', 38)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other income /(loss) , res_fuzz_match = [('NULL', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = change in work in progress , res_fuzz_match = [('NULL', 9)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = costof products and services sold , res_fuzz_match = [('NULL', 18)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expenses , res_fuzz_match = [('NULL', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = foreign exchange adjustment , res_fuzz_match = [('NULL', 8)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('NULL', 25)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit before income tax /(loss) , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = profit for the year attributable to members of nri australia ltd , res_fuzz_match = [('NULL', 4)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = other comprehensive income/ (loss) , res_fuzz_match = [('NULL', 13)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - txt_particular = total comprehensive income/ (loss) for the year, net of tax attributable to members of nri australia limited , res_fuzz_match = [('NULL', 7)]
2023-08-29 17:06:03+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
